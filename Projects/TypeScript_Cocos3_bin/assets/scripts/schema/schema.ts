
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


import ByteBuf from '../luban/ByteBuf'

export namespace ai {
    export enum EExecutor {
        CLIENT = 0,
        SERVER = 1,
    }

}
export namespace ai {
    export enum EFinishMode {
        IMMEDIATE = 0,
        DELAYED = 1,
    }

}
export namespace ai {
    export enum EFlowAbortMode {
        NONE = 0,
        LOWER_PRIORITY = 1,
        SELF = 2,
        BOTH = 3,
    }

}
export namespace ai {
    export enum EKeyType {
        BOOL = 1,
        INT = 2,
        FLOAT = 3,
        STRING = 4,
        VECTOR = 5,
        ROTATOR = 6,
        NAME = 7,
        CLASS1 = 8,
        ENUM1 = 9,
        OBJECT = 10,
    }

}
export namespace ai {
    export enum ENotifyObserverMode {
        ON_VALUE_CHANGE = 0,
        ON_RESULT_CHANGE = 1,
    }

}
export namespace ai {
    export enum EOperator {
        IS_EQUAL_TO = 0,
        IS_NOT_EQUAL_TO = 1,
        IS_LESS_THAN = 2,
        IS_LESS_THAN_OR_EQUAL_TO = 3,
        IS_GREAT_THAN = 4,
        IS_GREAT_THAN_OR_EQUAL_TO = 5,
        CONTAINS = 6,
        NOT_CONTAINS = 7,
    }

}

export enum AudioType {
    UNKNOWN = 0,
    ACC = 1,
    AIFF = 2,
}


export namespace common {
    export enum EBoolOperator {
        AND = 0,
        OR = 1,
    }

}
export namespace item {
    export enum EClothersStarQualityType {
        /**
         * 一星
         */
        ONE = 1,
        /**
         * 二星
         */
        TWO = 2,
        /**
         * 三星
         */
        THREE = 3,
        /**
         * 四星
         */
        FOUR = 4,
        /**
         * 五星
         */
        FIVE = 5,
        /**
         * 六星
         */
        SIX = 6,
        /**
         * 七星
         */
        SEVEN = 7,
        /**
         * 八星
         */
        EIGHT = 8,
        /**
         * 九星
         */
        NINE = 9,
        /**
         * 十星
         */
        TEN = 10,
    }

}
export namespace item {
    export enum EClothersTag {
        /**
         * 防晒
         */
        FANG_SHAI = 1,
        /**
         * 舞者
         */
        WU_ZHE = 2,
    }

}
export namespace item {
    export enum EClothesHidePartType {
        /**
         * 胸部
         */
        CHEST = 0,
        /**
         * 手
         */
        HEAD = 1,
        /**
         * 脊柱上
         */
        SPINE_UPPER = 2,
        /**
         * 脊柱下
         */
        SPINE_LOWER = 3,
        /**
         * 臀部
         */
        HIP = 4,
        /**
         * 腿上
         */
        LEG_UPPER = 5,
        /**
         * 腿中
         */
        LEG_MIDDLE = 6,
        /**
         * 腿下
         */
        LEG_LOWER = 7,
    }

}
export namespace item {
    export enum EClothesPropertyType {
        /**
         * 简约
         */
        JIAN_YUE = 1,
        /**
         * 华丽
         */
        HUA_LI = 2,
        /**
         * 可爱
         */
        KE_AI = 3,
        /**
         * 成熟
         */
        CHENG_SHU = 4,
        /**
         * 活泼
         */
        HUO_PO = 5,
        /**
         * 优雅
         */
        YOU_YA = 6,
        /**
         * 清纯
         */
        QING_CHUN = 7,
        /**
         * 性感
         */
        XING_GAN = 8,
        /**
         * 清凉
         */
        QING_LIANG = 9,
        /**
         * 保暖
         */
        BAO_NUAN = 10,
    }

}
export namespace item {
    export enum ECurrencyType {
        /**
         * 钻石
         */
        DIAMOND = 1,
        /**
         * 金币
         */
        GOLD = 2,
        /**
         * 银币
         */
        SILVER = 3,
        /**
         * 经验
         */
        EXP = 4,
        /**
         * 能量点
         */
        POWER_POINT = 5,
    }

}
export namespace item {
    /**
     * 道具品质
     */
    export enum EItemQuality {
        /**
         * 白
         */
        WHITE = 0,
        /**
         * 绿
         */
        GREEN = 1,
        /**
         * 蓝
         */
        BLUE = 2,
        /**
         * 紫
         */
        PURPLE = 3,
        /**
         * 金
         */
        GOLDEN = 4,
    }

}
export namespace item {
    export enum EMajorType {
        /**
         * 货币
         */
        CURRENCY = 1,
        /**
         * 服装
         */
        CLOTH = 2,
        /**
         * 任务
         */
        QUEST = 3,
        /**
         * 消耗品
         */
        CONSUMABLES = 4,
        /**
         * 宝箱
         */
        TREASURE_BOX = 5,
        /**
         * 成就和称谓
         */
        ACHIEVEMENT_AND_TITLE = 6,
        /**
         * 头像框
         */
        HEAD_FRAME = 7,
        /**
         * 语音
         */
        VOICE = 8,
        /**
         * 动作
         */
        ACTION = 9,
        /**
         * 扩容道具
         */
        EXPANSION = 10,
        /**
         * 制作材料
         */
        MATERIAL = 11,
    }

}
export namespace item {
    export enum EMinorType {
        /**
         * 钻石
         */
        DIAMOND = 101,
        /**
         * 金币
         */
        GOLD = 102,
        /**
         * 银币
         */
        SILVER = 103,
        /**
         * 经验
         */
        EXP = 104,
        /**
         * 能量点
         */
        POWER_POINT = 105,
        /**
         * 发型
         */
        HAIR_STYLE = 210,
        /**
         * 外套
         */
        COAT = 220,
        /**
         * 上衣
         */
        UPPER_JACKET = 230,
        /**
         * 裤子
         */
        TROUSERS = 241,
        /**
         * 裙子
         */
        SKIRT = 242,
        /**
         * 袜子
         */
        SOCKS = 250,
        /**
         * 鞋子
         */
        SHOES = 260,
        /**
         * 发饰
         */
        HAIR_ACCESSORY = 271,
        /**
         * 帽子
         */
        HAT = 272,
        /**
         * 耳饰
         */
        EARRING = 273,
        /**
         * 颈饰
         */
        NECKLACE = 274,
        /**
         * 腕饰
         */
        BRACELET = 275,
        /**
         * 发箍
         */
        HAIR_CLASP = 276,
        /**
         * 手套
         */
        GLOVE = 277,
        /**
         * 手持物
         */
        HANDHELD_OBJECT = 278,
        /**
         * 特殊
         */
        SPECIAL = 279,
        /**
         * 底妆
         */
        BASE_COSMETIC = 281,
        /**
         * 眉妆
         */
        EYEBROW_COSMETIC = 282,
        /**
         * 睫毛
         */
        EYELASH = 283,
        /**
         * 美瞳
         */
        COSMETIC_CONTACT_LENSES = 284,
        /**
         * 唇妆
         */
        LIP_COSMETIC = 285,
        /**
         * 肤色
         */
        SKIN_COLOR = 286,
        /**
         * 连衣裙
         */
        ONE_PIECE_DRESS = 290,
        /**
         * 换装场景
         */
        SWITCH_CLOTHES_SCENE = 291,
        /**
         * 任务道具
         */
        QUEST = 301,
        /**
         * 投掷物
         */
        CAST = 401,
        /**
         * 刀剑
         */
        SWORD = 421,
        /**
         * 弓箭
         */
        BOW_ARROW = 422,
        /**
         * 法杖
         */
        WANDS = 423,
        /**
         * 特殊工具
         */
        SPECIAL_TOOL = 424,
        /**
         * 食物
         */
        FOOD = 403,
        /**
         * 宝箱
         */
        TREASURE_BOX = 501,
        /**
         * 钥匙
         */
        KEY = 502,
        /**
         * 多选一宝箱
         */
        MULTI_CHOOSE_TREASURE_BOX = 503,
        /**
         * 成就相关
         */
        ACHIEVEMENT = 601,
        /**
         * 称谓相关
         */
        TITLE = 602,
        /**
         * 头像框
         */
        AVATAR_FRAME = 701,
        /**
         * 语音
         */
        VOICE = 801,
        /**
         * 特殊待机动作
         */
        IDLE_POSE = 901,
        /**
         * 拍照动作
         */
        PHOTO_POSE = 902,
        /**
         * 背包
         */
        BAG = 1001,
        /**
         * 好友数量
         */
        FRIEND_CAPACITY = 1002,
        /**
         * 制作材料
         */
        CONSTRUCTION_MATERIAL = 1101,
        /**
         * 设计图纸
         */
        DESIGN_DRAWING = 1102,
    }

}
export namespace item {
    export enum EUseType {
        /**
         * 手动
         */
        MANUAL = 0,
        /**
         * 自动
         */
        AUTO = 1,
    }

}
export namespace test {
    export enum AccessFlag {
        WRITE = 1,
        READ = 2,
        TRUNCATE = 4,
        NEW = 8,
        READ_WRITE = WRITE | READ,
    }

}
export namespace test {
    export enum AudioType2 {
        UNKNOWN = 0,
        ACC = 1,
        AIFF = 2,
    }

}
export namespace test {
    export enum DemoEnum {
        NONE = 0,
        /**
         * aa
         */
        A = 1,
        /**
         * bb
         */
        B = 2,
        /**
         * cc
         */
        C = 4,
        /**
         * dd
         */
        D = 5,
        Any = 6,
    }

}
export namespace test {
    export enum DemoFlag {
        A = 1,
        B = 2,
        C = 4,
        D = 8,
    }

}
export namespace test {
    export enum ETestEmptyEnum {
    }

}
export namespace test {
    export enum ETestEmptyEnum2 {
        SMALL_THAN_256 = 255,
        X_256 = 256,
        X_257 = 257,
    }

}
export namespace test {
    export enum ETestQuality {
        /**
         * 最高品质
         */
        A = 1,
        /**
         * 黑色的
         */
        B = 2,
        /**
         * 蓝色的
         */
        C = 3,
        /**
         * 最差品质
         */
        D = 4,
    }

}
export namespace test {
    export enum ETestUeType {
        /**
         * 白
         */
        WHITE = 0,
        BLACK = 1,
    }

}




export namespace ai {
    export class BehaviorTree {

        constructor(_buf_: ByteBuf) {
            this.id = _buf_.readInt()
            this.name = _buf_.readString()
            this.desc = _buf_.readString()
            this.blackboardId = _buf_.readString()
            this.root = ai.ComposeNode.constructorFrom(_buf_)
        }

        readonly id: number
        readonly name: string
        readonly desc: string
        readonly blackboardId: string
        blackboardId_ref: ai.Blackboard | undefined
        readonly root: ai.ComposeNode

        resolve(tables: Tables) {



            this.blackboardId_ref = tables.TbBlackboard.get(this.blackboardId)
            this.root?.resolve(tables);
        }
    }

}


export namespace ai {
    export class Blackboard {

        constructor(_buf_: ByteBuf) {
            this.name = _buf_.readString()
            this.desc = _buf_.readString()
            this.parentName = _buf_.readString()
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.keys = []; for (let i = 0; i < n; i++) { let _e0; _e0 = new ai.BlackboardKey(_buf_); this.keys.push(_e0); } }
        }

        readonly name: string
        readonly desc: string
        readonly parentName: string
        parentName_ref: ai.Blackboard | undefined
        readonly keys: ai.BlackboardKey[]

        resolve(tables: Tables) {


            this.parentName_ref = tables.TbBlackboard.get(this.parentName)
            for (let _e of this.keys) { _e?.resolve(tables); }
        }
    }

}


export namespace ai {
    export class BlackboardKey {

        constructor(_buf_: ByteBuf) {
            this.name = _buf_.readString()
            this.desc = _buf_.readString()
            this.isStatic = _buf_.readBool()
            this.keyType = _buf_.readInt()
            this.typeClassName = _buf_.readString()
        }

        readonly name: string
        readonly desc: string
        readonly isStatic: boolean
        readonly keyType: ai.EKeyType
        readonly typeClassName: string

        resolve(tables: Tables) {





        }
    }

}


export namespace ai {
    export abstract class KeyData {
        static constructorFrom(_buf_: ByteBuf): KeyData {
            switch (_buf_.readInt()) {
                case -719747885: return new ai.FloatKeyData(_buf_)
                case -342751904: return new ai.IntKeyData(_buf_)
                case -307888654: return new ai.StringKeyData(_buf_)
                case 1517269500: return new ai.BlackboardKeyData(_buf_)
                default: throw new Error()
            }
        }

        constructor(_buf_: ByteBuf) {
        }


        resolve(tables: Tables) {
        }
    }

}


export namespace ai {
    export class BlackboardKeyData extends ai.KeyData {

        constructor(_buf_: ByteBuf) {
            super(_buf_)
            this.value = _buf_.readString()
        }

        readonly value: string

        resolve(tables: Tables) {
            super.resolve(tables)

        }
    }

}


export namespace ai {
    export class FloatKeyData extends ai.KeyData {

        constructor(_buf_: ByteBuf) {
            super(_buf_)
            this.value = _buf_.readFloat()
        }

        readonly value: number

        resolve(tables: Tables) {
            super.resolve(tables)

        }
    }

}


export namespace ai {
    export class IntKeyData extends ai.KeyData {

        constructor(_buf_: ByteBuf) {
            super(_buf_)
            this.value = _buf_.readInt()
        }

        readonly value: number

        resolve(tables: Tables) {
            super.resolve(tables)

        }
    }

}


export namespace ai {
    export class StringKeyData extends ai.KeyData {

        constructor(_buf_: ByteBuf) {
            super(_buf_)
            this.value = _buf_.readString()
        }

        readonly value: string

        resolve(tables: Tables) {
            super.resolve(tables)

        }
    }

}


export namespace ai {
    export abstract class KeyQueryOperator {
        static constructorFrom(_buf_: ByteBuf): KeyQueryOperator {
            switch (_buf_.readInt()) {
                case -843729664: return new ai.IsSet2(_buf_)
                case 790736255: return new ai.IsNotSet(_buf_)
                case -979891605: return new ai.BinaryOperator(_buf_)
                default: throw new Error()
            }
        }

        constructor(_buf_: ByteBuf) {
        }


        resolve(tables: Tables) {
        }
    }

}


export namespace ai {
    export class BinaryOperator extends ai.KeyQueryOperator {

        constructor(_buf_: ByteBuf) {
            super(_buf_)
            this.oper = _buf_.readInt()
            this.data = ai.KeyData.constructorFrom(_buf_)
        }

        readonly oper: ai.EOperator
        readonly data: ai.KeyData

        resolve(tables: Tables) {
            super.resolve(tables)

            this.data?.resolve(tables);
        }
    }

}


export namespace ai {
    export class IsNotSet extends ai.KeyQueryOperator {

        constructor(_buf_: ByteBuf) {
            super(_buf_)
        }


        resolve(tables: Tables) {
            super.resolve(tables)
        }
    }

}


export namespace ai {
    export class IsSet2 extends ai.KeyQueryOperator {

        constructor(_buf_: ByteBuf) {
            super(_buf_)
        }


        resolve(tables: Tables) {
            super.resolve(tables)
        }
    }

}


export namespace ai {
    export abstract class Node {
        static constructorFrom(_buf_: ByteBuf): Node {
            switch (_buf_.readInt()) {
                case 1812449155: return new ai.UeSetDefaultFocus(_buf_)
                case 990693812: return new ai.ExecuteTimeStatistic(_buf_)
                case 1601247918: return new ai.ChooseTarget(_buf_)
                case 1195270745: return new ai.KeepFaceTarget(_buf_)
                case -999247644: return new ai.GetOwnerPlayer(_buf_)
                case -61887372: return new ai.UpdateDailyBehaviorProps(_buf_)
                case -513308166: return new ai.UeLoop(_buf_)
                case -951439423: return new ai.UeCooldown(_buf_)
                case 338469720: return new ai.UeTimeLimit(_buf_)
                case -315297507: return new ai.UeBlackboard(_buf_)
                case 195054574: return new ai.UeForceSuccess(_buf_)
                case 1255972344: return new ai.IsAtLocation(_buf_)
                case -1207170283: return new ai.DistanceLessThan(_buf_)
                case -1789006105: return new ai.Sequence(_buf_)
                case -1946981627: return new ai.Selector(_buf_)
                case -1952582529: return new ai.SimpleParallel(_buf_)
                case -512994101: return new ai.UeWait(_buf_)
                case 1215378271: return new ai.UeWaitBlackboardTime(_buf_)
                case 514987779: return new ai.MoveToTarget(_buf_)
                case -918812268: return new ai.ChooseSkill(_buf_)
                case -2140042998: return new ai.MoveToRandomLocation(_buf_)
                case -969953113: return new ai.MoveToLocation(_buf_)
                case 1357409728: return new ai.DebugPrint(_buf_)
                default: throw new Error()
            }
        }

        constructor(_buf_: ByteBuf) {
            this.id = _buf_.readInt()
            this.nodeName = _buf_.readString()
        }

        readonly id: number
        readonly nodeName: string

        resolve(tables: Tables) {


        }
    }

}


export namespace ai {
    export abstract class Decorator extends ai.Node {
        static constructorFrom(_buf_: ByteBuf): Decorator {
            switch (_buf_.readInt()) {
                case -513308166: return new ai.UeLoop(_buf_)
                case -951439423: return new ai.UeCooldown(_buf_)
                case 338469720: return new ai.UeTimeLimit(_buf_)
                case -315297507: return new ai.UeBlackboard(_buf_)
                case 195054574: return new ai.UeForceSuccess(_buf_)
                case 1255972344: return new ai.IsAtLocation(_buf_)
                case -1207170283: return new ai.DistanceLessThan(_buf_)
                default: throw new Error()
            }
        }

        constructor(_buf_: ByteBuf) {
            super(_buf_)
            this.flowAbortMode = _buf_.readInt()
        }

        readonly flowAbortMode: ai.EFlowAbortMode

        resolve(tables: Tables) {
            super.resolve(tables)

        }
    }

}


export namespace ai {
    export class DistanceLessThan extends ai.Decorator {

        constructor(_buf_: ByteBuf) {
            super(_buf_)
            this.actor1Key = _buf_.readString()
            this.actor2Key = _buf_.readString()
            this.distance = _buf_.readFloat()
            this.reverseResult = _buf_.readBool()
        }

        readonly actor1Key: string
        readonly actor2Key: string
        readonly distance: number
        readonly reverseResult: boolean

        resolve(tables: Tables) {
            super.resolve(tables)




        }
    }

}


export namespace ai {
    export class IsAtLocation extends ai.Decorator {

        constructor(_buf_: ByteBuf) {
            super(_buf_)
            this.acceptableRadius = _buf_.readFloat()
            this.keyboardKey = _buf_.readString()
            this.inverseCondition = _buf_.readBool()
        }

        readonly acceptableRadius: number
        readonly keyboardKey: string
        readonly inverseCondition: boolean

        resolve(tables: Tables) {
            super.resolve(tables)



        }
    }

}


export namespace ai {
    export class UeBlackboard extends ai.Decorator {

        constructor(_buf_: ByteBuf) {
            super(_buf_)
            this.notifyObserver = _buf_.readInt()
            this.blackboardKey = _buf_.readString()
            this.keyQuery = ai.KeyQueryOperator.constructorFrom(_buf_)
        }

        readonly notifyObserver: ai.ENotifyObserverMode
        readonly blackboardKey: string
        readonly keyQuery: ai.KeyQueryOperator

        resolve(tables: Tables) {
            super.resolve(tables)


            this.keyQuery?.resolve(tables);
        }
    }

}


export namespace ai {
    export class UeCooldown extends ai.Decorator {

        constructor(_buf_: ByteBuf) {
            super(_buf_)
            this.cooldownTime = _buf_.readFloat()
        }

        readonly cooldownTime: number

        resolve(tables: Tables) {
            super.resolve(tables)

        }
    }

}


export namespace ai {
    export class UeForceSuccess extends ai.Decorator {

        constructor(_buf_: ByteBuf) {
            super(_buf_)
        }


        resolve(tables: Tables) {
            super.resolve(tables)
        }
    }

}


export namespace ai {
    export class UeLoop extends ai.Decorator {

        constructor(_buf_: ByteBuf) {
            super(_buf_)
            this.numLoops = _buf_.readInt()
            this.infiniteLoop = _buf_.readBool()
            this.infiniteLoopTimeoutTime = _buf_.readFloat()
        }

        readonly numLoops: number
        readonly infiniteLoop: boolean
        readonly infiniteLoopTimeoutTime: number

        resolve(tables: Tables) {
            super.resolve(tables)



        }
    }

}


export namespace ai {
    export class UeTimeLimit extends ai.Decorator {

        constructor(_buf_: ByteBuf) {
            super(_buf_)
            this.limitTime = _buf_.readFloat()
        }

        readonly limitTime: number

        resolve(tables: Tables) {
            super.resolve(tables)

        }
    }

}


export namespace ai {
    export abstract class FlowNode extends ai.Node {
        static constructorFrom(_buf_: ByteBuf): FlowNode {
            switch (_buf_.readInt()) {
                case -1789006105: return new ai.Sequence(_buf_)
                case -1946981627: return new ai.Selector(_buf_)
                case -1952582529: return new ai.SimpleParallel(_buf_)
                case -512994101: return new ai.UeWait(_buf_)
                case 1215378271: return new ai.UeWaitBlackboardTime(_buf_)
                case 514987779: return new ai.MoveToTarget(_buf_)
                case -918812268: return new ai.ChooseSkill(_buf_)
                case -2140042998: return new ai.MoveToRandomLocation(_buf_)
                case -969953113: return new ai.MoveToLocation(_buf_)
                case 1357409728: return new ai.DebugPrint(_buf_)
                default: throw new Error()
            }
        }

        constructor(_buf_: ByteBuf) {
            super(_buf_)
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.decorators = []; for (let i = 0; i < n; i++) { let _e0; _e0 = ai.Decorator.constructorFrom(_buf_); this.decorators.push(_e0); } }
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.services = []; for (let i = 0; i < n; i++) { let _e0; _e0 = ai.Service.constructorFrom(_buf_); this.services.push(_e0); } }
        }

        readonly decorators: ai.Decorator[]
        readonly services: ai.Service[]

        resolve(tables: Tables) {
            super.resolve(tables)
            for (let _e of this.decorators) { _e?.resolve(tables); }
            for (let _e of this.services) { _e?.resolve(tables); }
        }
    }

}


export namespace ai {
    export abstract class ComposeNode extends ai.FlowNode {
        static constructorFrom(_buf_: ByteBuf): ComposeNode {
            switch (_buf_.readInt()) {
                case -1789006105: return new ai.Sequence(_buf_)
                case -1946981627: return new ai.Selector(_buf_)
                case -1952582529: return new ai.SimpleParallel(_buf_)
                default: throw new Error()
            }
        }

        constructor(_buf_: ByteBuf) {
            super(_buf_)
        }


        resolve(tables: Tables) {
            super.resolve(tables)
        }
    }

}


export namespace ai {
    export class Selector extends ai.ComposeNode {

        constructor(_buf_: ByteBuf) {
            super(_buf_)
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.children = []; for (let i = 0; i < n; i++) { let _e0; _e0 = ai.FlowNode.constructorFrom(_buf_); this.children.push(_e0); } }
        }

        readonly children: ai.FlowNode[]

        resolve(tables: Tables) {
            super.resolve(tables)
            for (let _e of this.children) { _e?.resolve(tables); }
        }
    }

}


export namespace ai {
    export class Sequence extends ai.ComposeNode {

        constructor(_buf_: ByteBuf) {
            super(_buf_)
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.children = []; for (let i = 0; i < n; i++) { let _e0; _e0 = ai.FlowNode.constructorFrom(_buf_); this.children.push(_e0); } }
        }

        readonly children: ai.FlowNode[]

        resolve(tables: Tables) {
            super.resolve(tables)
            for (let _e of this.children) { _e?.resolve(tables); }
        }
    }

}


export namespace ai {
    export class SimpleParallel extends ai.ComposeNode {

        constructor(_buf_: ByteBuf) {
            super(_buf_)
            this.finishMode = _buf_.readInt()
            this.mainTask = ai.Task.constructorFrom(_buf_)
            this.backgroundNode = ai.FlowNode.constructorFrom(_buf_)
        }

        readonly finishMode: ai.EFinishMode
        readonly mainTask: ai.Task
        readonly backgroundNode: ai.FlowNode

        resolve(tables: Tables) {
            super.resolve(tables)

            this.mainTask?.resolve(tables);
            this.backgroundNode?.resolve(tables);
        }
    }

}


export namespace ai {
    export abstract class Task extends ai.FlowNode {
        static constructorFrom(_buf_: ByteBuf): Task {
            switch (_buf_.readInt()) {
                case -512994101: return new ai.UeWait(_buf_)
                case 1215378271: return new ai.UeWaitBlackboardTime(_buf_)
                case 514987779: return new ai.MoveToTarget(_buf_)
                case -918812268: return new ai.ChooseSkill(_buf_)
                case -2140042998: return new ai.MoveToRandomLocation(_buf_)
                case -969953113: return new ai.MoveToLocation(_buf_)
                case 1357409728: return new ai.DebugPrint(_buf_)
                default: throw new Error()
            }
        }

        constructor(_buf_: ByteBuf) {
            super(_buf_)
            this.ignoreRestartSelf = _buf_.readBool()
        }

        readonly ignoreRestartSelf: boolean

        resolve(tables: Tables) {
            super.resolve(tables)

        }
    }

}


export namespace ai {
    export class ChooseSkill extends ai.Task {

        constructor(_buf_: ByteBuf) {
            super(_buf_)
            this.targetActorKey = _buf_.readString()
            this.resultSkillIdKey = _buf_.readString()
        }

        readonly targetActorKey: string
        readonly resultSkillIdKey: string

        resolve(tables: Tables) {
            super.resolve(tables)


        }
    }

}


export namespace ai {
    export class DebugPrint extends ai.Task {

        constructor(_buf_: ByteBuf) {
            super(_buf_)
            this.text = _buf_.readString()
        }

        readonly text: string

        resolve(tables: Tables) {
            super.resolve(tables)

        }
    }

}


export namespace ai {
    export class MoveToLocation extends ai.Task {

        constructor(_buf_: ByteBuf) {
            super(_buf_)
            this.acceptableRadius = _buf_.readFloat()
        }

        readonly acceptableRadius: number

        resolve(tables: Tables) {
            super.resolve(tables)

        }
    }

}


export namespace ai {
    export class MoveToRandomLocation extends ai.Task {

        constructor(_buf_: ByteBuf) {
            super(_buf_)
            this.originPositionKey = _buf_.readString()
            this.radius = _buf_.readFloat()
        }

        readonly originPositionKey: string
        readonly radius: number

        resolve(tables: Tables) {
            super.resolve(tables)


        }
    }

}


export namespace ai {
    export class MoveToTarget extends ai.Task {

        constructor(_buf_: ByteBuf) {
            super(_buf_)
            this.targetActorKey = _buf_.readString()
            this.acceptableRadius = _buf_.readFloat()
        }

        readonly targetActorKey: string
        readonly acceptableRadius: number

        resolve(tables: Tables) {
            super.resolve(tables)


        }
    }

}


export namespace ai {
    export class UeWait extends ai.Task {

        constructor(_buf_: ByteBuf) {
            super(_buf_)
            this.waitTime = _buf_.readFloat()
            this.randomDeviation = _buf_.readFloat()
        }

        readonly waitTime: number
        readonly randomDeviation: number

        resolve(tables: Tables) {
            super.resolve(tables)


        }
    }

}


export namespace ai {
    export class UeWaitBlackboardTime extends ai.Task {

        constructor(_buf_: ByteBuf) {
            super(_buf_)
            this.blackboardKey = _buf_.readString()
        }

        readonly blackboardKey: string

        resolve(tables: Tables) {
            super.resolve(tables)

        }
    }

}


export namespace ai {
    export abstract class Service extends ai.Node {
        static constructorFrom(_buf_: ByteBuf): Service {
            switch (_buf_.readInt()) {
                case 1812449155: return new ai.UeSetDefaultFocus(_buf_)
                case 990693812: return new ai.ExecuteTimeStatistic(_buf_)
                case 1601247918: return new ai.ChooseTarget(_buf_)
                case 1195270745: return new ai.KeepFaceTarget(_buf_)
                case -999247644: return new ai.GetOwnerPlayer(_buf_)
                case -61887372: return new ai.UpdateDailyBehaviorProps(_buf_)
                default: throw new Error()
            }
        }

        constructor(_buf_: ByteBuf) {
            super(_buf_)
        }


        resolve(tables: Tables) {
            super.resolve(tables)
        }
    }

}


export namespace ai {
    export class ChooseTarget extends ai.Service {

        constructor(_buf_: ByteBuf) {
            super(_buf_)
            this.resultTargetKey = _buf_.readString()
        }

        readonly resultTargetKey: string

        resolve(tables: Tables) {
            super.resolve(tables)

        }
    }

}


export namespace ai {
    export class ExecuteTimeStatistic extends ai.Service {

        constructor(_buf_: ByteBuf) {
            super(_buf_)
        }


        resolve(tables: Tables) {
            super.resolve(tables)
        }
    }

}


export namespace ai {
    export class GetOwnerPlayer extends ai.Service {

        constructor(_buf_: ByteBuf) {
            super(_buf_)
            this.playerActorKey = _buf_.readString()
        }

        readonly playerActorKey: string

        resolve(tables: Tables) {
            super.resolve(tables)

        }
    }

}


export namespace ai {
    export class KeepFaceTarget extends ai.Service {

        constructor(_buf_: ByteBuf) {
            super(_buf_)
            this.targetActorKey = _buf_.readString()
        }

        readonly targetActorKey: string

        resolve(tables: Tables) {
            super.resolve(tables)

        }
    }

}


export namespace ai {
    export class UeSetDefaultFocus extends ai.Service {

        constructor(_buf_: ByteBuf) {
            super(_buf_)
            this.keyboardKey = _buf_.readString()
        }

        readonly keyboardKey: string

        resolve(tables: Tables) {
            super.resolve(tables)

        }
    }

}


export namespace ai {
    export class UpdateDailyBehaviorProps extends ai.Service {

        constructor(_buf_: ByteBuf) {
            super(_buf_)
            this.satietyKey = _buf_.readString()
            this.energyKey = _buf_.readString()
            this.moodKey = _buf_.readString()
            this.satietyLowerThresholdKey = _buf_.readString()
            this.satietyUpperThresholdKey = _buf_.readString()
            this.energyLowerThresholdKey = _buf_.readString()
            this.energyUpperThresholdKey = _buf_.readString()
            this.moodLowerThresholdKey = _buf_.readString()
            this.moodUpperThresholdKey = _buf_.readString()
        }

        readonly satietyKey: string
        readonly energyKey: string
        readonly moodKey: string
        readonly satietyLowerThresholdKey: string
        readonly satietyUpperThresholdKey: string
        readonly energyLowerThresholdKey: string
        readonly energyUpperThresholdKey: string
        readonly moodLowerThresholdKey: string
        readonly moodUpperThresholdKey: string

        resolve(tables: Tables) {
            super.resolve(tables)









        }
    }

}



export class AutoImport1 {

    constructor(_buf_: ByteBuf) {
        this.id = _buf_.readInt()
        this.x1 = _buf_.readBool()
        this.x5 = _buf_.readLongAsNumber()
        this.x6 = _buf_.readFloat()
        this.x8 = _buf_.readInt()
        this.x10 = _buf_.readString()
        this.x13 = _buf_.readInt()
        this.x132 = _buf_.readInt()
        this.x14 = test.DemoDynamic.constructorFrom(_buf_)
        this.x15 = test.Shape.constructorFrom(_buf_)
        this.v2 = new vec2(_buf_)
        this.t1 = _buf_.readLongAsNumber()
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.k1 = []; for (let i = 0; i < n; i++) { let _e0; _e0 = _buf_.readInt(); this.k1.push(_e0); } }
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.k2 = []; for (let i = 0; i < n; i++) { let _e0; _e0 = _buf_.readInt(); this.k2.push(_e0); } }
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.k8 = new Map<number, number>(); for (let i = 0; i < n; i++) { let _k0; _k0 = _buf_.readInt(); let _v0; _v0 = _buf_.readInt(); this.k8.set(_k0, _v0); } }
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.k9 = []; for (let i = 0; i < n; i++) { let _e0; _e0 = new test.DemoE2(_buf_); this.k9.push(_e0); } }
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.k10 = []; for (let i = 0; i < n; i++) { let _e0; _e0 = new vec3(_buf_); this.k10.push(_e0); } }
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.k11 = []; for (let i = 0; i < n; i++) { let _e0; _e0 = new vec4(_buf_); this.k11.push(_e0); } }
        if (_buf_.readBool()) { this.v11 = new vec3(_buf_) } else { this.v11 = null; }
    }

    /**
     * 这是id
     */
    readonly id: number
    /**
     * 字段x1
     */
    readonly x1: boolean
    readonly x5: number
    readonly x6: number
    readonly x8: number
    readonly x10: string
    readonly x13: test.DemoEnum
    readonly x132: test.DemoFlag
    readonly x14: test.DemoDynamic
    readonly x15: test.Shape
    readonly v2: vec2
    readonly t1: number
    readonly k1: number[]
    readonly k2: number[]
    readonly k8: Map<number, number>
    readonly k9: test.DemoE2[]
    readonly k10: vec3[]
    readonly k11: vec4[]
    readonly v11: vec3 | undefined

    resolve(tables: Tables) {








        this.x14?.resolve(tables);
        this.x15?.resolve(tables);









    }
}




export namespace common {
    export class DateTimeRange {

        constructor(_buf_: ByteBuf) {
            if (_buf_.readBool()) { this.startTime = _buf_.readLongAsNumber() } else { this.startTime = null; }
            if (_buf_.readBool()) { this.endTime = _buf_.readLongAsNumber() } else { this.endTime = null; }
        }

        readonly startTime: number | undefined
        readonly endTime: number | undefined

        resolve(tables: Tables) {


        }
    }

}


export namespace common {
    export class FloatRange {

        constructor(_buf_: ByteBuf) {
            this.min = _buf_.readFloat()
            this.max = _buf_.readFloat()
        }

        readonly min: number
        readonly max: number

        resolve(tables: Tables) {


        }
    }

}


export namespace common {
    export class GlobalConfig {

        constructor(_buf_: ByteBuf) {
            this.x1 = _buf_.readInt()
            this.x2 = _buf_.readInt()
            this.x3 = _buf_.readInt()
            this.x4 = _buf_.readInt()
            this.x5 = _buf_.readInt()
            this.x6 = _buf_.readInt()
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.x7 = []; for (let i = 0; i < n; i++) { let _e0; _e0 = _buf_.readInt(); this.x7.push(_e0); } }
        }

        /**
         * 背包容量
         */
        readonly x1: number
        readonly x2: number
        readonly x3: number
        readonly x4: number
        readonly x5: number
        readonly x6: number
        readonly x7: number[]

        resolve(tables: Tables) {







        }
    }

}


export namespace common {
    export class IntRange {

        constructor(_buf_: ByteBuf) {
            this.min = _buf_.readInt()
            this.max = _buf_.readInt()
        }

        readonly min: number
        readonly max: number

        resolve(tables: Tables) {


        }
    }

}


export namespace common {
    export class OneDayTimeRange {

        constructor(_buf_: ByteBuf) {
            this.startTime = new common.TimeOfDay(_buf_)
            this.endTime = new common.TimeOfDay(_buf_)
        }

        readonly startTime: common.TimeOfDay
        readonly endTime: common.TimeOfDay

        resolve(tables: Tables) {
            this.startTime?.resolve(tables);
            this.endTime?.resolve(tables);
        }
    }

}


export namespace common {
    export class TimeOfDay {

        constructor(_buf_: ByteBuf) {
            this.hour = _buf_.readInt()
            this.minute = _buf_.readInt()
            this.second = _buf_.readInt()
        }

        readonly hour: number
        readonly minute: number
        readonly second: number

        resolve(tables: Tables) {



        }
    }

}


export namespace item {
    /**
     * 道具
     */
    export class Item {

        constructor(_buf_: ByteBuf) {
            this.id = _buf_.readInt()
            this.name = _buf_.readString()
            this.majorType = _buf_.readInt()
            this.minorType = _buf_.readInt()
            this.maxPileNum = _buf_.readInt()
            this.quality = _buf_.readInt()
            this.icon = _buf_.readString()
            this.iconBackgroud = _buf_.readString()
            this.iconMask = _buf_.readString()
            this.desc = _buf_.readString()
            this.showOrder = _buf_.readInt()
        }

        /**
         * 道具id
         */
        readonly id: number
        readonly name: string
        readonly majorType: item.EMajorType
        readonly minorType: item.EMinorType
        readonly maxPileNum: number
        readonly quality: item.EItemQuality
        readonly icon: string
        readonly iconBackgroud: string
        readonly iconMask: string
        readonly desc: string
        readonly showOrder: number

        resolve(tables: Tables) {











        }
    }

}


export namespace l10n {
    export class L10NDemo {

        constructor(_buf_: ByteBuf) {
            this.id = _buf_.readInt()
            this.text = _buf_.readString()
        }

        readonly id: number
        readonly text: string

        resolve(tables: Tables) {


        }
    }

}


export namespace l10n {
    export class PatchDemo {

        constructor(_buf_: ByteBuf) {
            this.id = _buf_.readInt()
            this.value = _buf_.readInt()
        }

        readonly id: number
        readonly value: number

        resolve(tables: Tables) {


        }
    }

}


export namespace tag {
    export class TestTag {

        constructor(_buf_: ByteBuf) {
            this.id = _buf_.readInt()
            this.value = _buf_.readString()
        }

        readonly id: number
        readonly value: string

        resolve(tables: Tables) {


        }
    }

}


export namespace test {
    export class AutoImport2 {

        constructor(_buf_: ByteBuf) {
            this.id = _buf_.readInt()
            this.x1 = _buf_.readBool()
            this.x5 = _buf_.readLongAsNumber()
            this.x6 = _buf_.readFloat()
            this.x8 = _buf_.readInt()
            this.x10 = _buf_.readString()
            this.x13 = _buf_.readInt()
            this.x132 = _buf_.readInt()
            this.x14 = test.DemoDynamic.constructorFrom(_buf_)
            this.x15 = test.Shape.constructorFrom(_buf_)
            this.v2 = new vec2(_buf_)
            this.t1 = _buf_.readLongAsNumber()
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.k1 = []; for (let i = 0; i < n; i++) { let _e0; _e0 = _buf_.readInt(); this.k1.push(_e0); } }
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.k2 = []; for (let i = 0; i < n; i++) { let _e0; _e0 = _buf_.readInt(); this.k2.push(_e0); } }
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.k8 = new Map<number, number>(); for (let i = 0; i < n; i++) { let _k0; _k0 = _buf_.readInt(); let _v0; _v0 = _buf_.readInt(); this.k8.set(_k0, _v0); } }
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.k9 = []; for (let i = 0; i < n; i++) { let _e0; _e0 = new test.DemoE2(_buf_); this.k9.push(_e0); } }
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.k10 = []; for (let i = 0; i < n; i++) { let _e0; _e0 = new vec3(_buf_); this.k10.push(_e0); } }
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.k11 = []; for (let i = 0; i < n; i++) { let _e0; _e0 = new vec4(_buf_); this.k11.push(_e0); } }
            if (_buf_.readBool()) { this.v11 = new vec3(_buf_) } else { this.v11 = null; }
        }

        /**
         * 这是id
         */
        readonly id: number
        /**
         * 字段x1
         */
        readonly x1: boolean
        readonly x5: number
        readonly x6: number
        readonly x8: number
        readonly x10: string
        readonly x13: test.DemoEnum
        readonly x132: test.DemoFlag
        readonly x14: test.DemoDynamic
        readonly x15: test.Shape
        readonly v2: vec2
        readonly t1: number
        readonly k1: number[]
        readonly k2: number[]
        readonly k8: Map<number, number>
        readonly k9: test.DemoE2[]
        readonly k10: vec3[]
        readonly k11: vec4[]
        readonly v11: vec3 | undefined

        resolve(tables: Tables) {








            this.x14?.resolve(tables);
            this.x15?.resolve(tables);









        }
    }

}


export namespace test {
    export class CompactString {

        constructor(_buf_: ByteBuf) {
            this.id = _buf_.readInt()
            this.s2 = _buf_.readString()
            this.s3 = _buf_.readString()
        }

        readonly id: number
        readonly s2: string
        readonly s3: string

        resolve(tables: Tables) {



        }
    }

}


export namespace test {
    export class CompositeJsonTable1 {

        constructor(_buf_: ByteBuf) {
            this.id = _buf_.readInt()
            this.x = _buf_.readString()
        }

        readonly id: number
        readonly x: string

        resolve(tables: Tables) {


        }
    }

}


export namespace test {
    export class CompositeJsonTable2 {

        constructor(_buf_: ByteBuf) {
            this.id = _buf_.readInt()
            this.y = _buf_.readInt()
        }

        readonly id: number
        readonly y: number

        resolve(tables: Tables) {


        }
    }

}


export namespace test {
    export class CompositeJsonTable3 {

        constructor(_buf_: ByteBuf) {
            this.a = _buf_.readInt()
            this.b = _buf_.readInt()
        }

        readonly a: number
        readonly b: number

        resolve(tables: Tables) {


        }
    }

}


export namespace test {
    export class DateTimeRange {

        constructor(_buf_: ByteBuf) {
            this.startTime = _buf_.readLongAsNumber()
            this.endTime = _buf_.readLongAsNumber()
        }

        readonly startTime: number
        readonly endTime: number

        resolve(tables: Tables) {


        }
    }

}


export namespace test {
    export class DefineFromExcel2 {

        constructor(_buf_: ByteBuf) {
            this.id = _buf_.readInt()
            this.x1 = _buf_.readBool()
            this.x5 = _buf_.readLongAsNumber()
            this.x6 = _buf_.readFloat()
            this.x8 = _buf_.readInt()
            this.x10 = _buf_.readString()
            this.x13 = _buf_.readInt()
            this.x132 = _buf_.readInt()
            this.x133 = _buf_.readInt()
            this.x14 = test.DemoDynamic.constructorFrom(_buf_)
            this.x15 = test.Shape.constructorFrom(_buf_)
            this.v2 = new vec2(_buf_)
            this.t1 = _buf_.readLongAsNumber()
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.k1 = []; for (let i = 0; i < n; i++) { let _e0; _e0 = _buf_.readInt(); this.k1.push(_e0); } }
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.k2 = []; for (let i = 0; i < n; i++) { let _e0; _e0 = _buf_.readInt(); this.k2.push(_e0); } }
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.k8 = new Map<number, number>(); for (let i = 0; i < n; i++) { let _k0; _k0 = _buf_.readInt(); let _v0; _v0 = _buf_.readInt(); this.k8.set(_k0, _v0); } }
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.k9 = []; for (let i = 0; i < n; i++) { let _e0; _e0 = new test.DemoE2(_buf_); this.k9.push(_e0); } }
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.k10 = []; for (let i = 0; i < n; i++) { let _e0; _e0 = new vec3(_buf_); this.k10.push(_e0); } }
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.k11 = []; for (let i = 0; i < n; i++) { let _e0; _e0 = new vec4(_buf_); this.k11.push(_e0); } }
            if (_buf_.readBool()) { this.v11 = new vec3(_buf_) } else { this.v11 = null; }
        }

        /**
         * 这是id
         */
        readonly id: number
        /**
         * 字段x1
         */
        readonly x1: boolean
        readonly x5: number
        readonly x6: number
        readonly x8: number
        readonly x10: string
        readonly x13: test.DemoEnum
        readonly x132: test.DemoFlag
        readonly x133: test.DemoFlag
        readonly x14: test.DemoDynamic
        readonly x15: test.Shape
        readonly v2: vec2
        readonly t1: number
        readonly k1: number[]
        readonly k2: number[]
        readonly k8: Map<number, number>
        readonly k9: test.DemoE2[]
        readonly k10: vec3[]
        readonly k11: vec4[]
        readonly v11: vec3 | undefined

        resolve(tables: Tables) {









            this.x14?.resolve(tables);
            this.x15?.resolve(tables);









        }
    }

}


export namespace test {
    export abstract class DemoDynamic {
        static constructorFrom(_buf_: ByteBuf): DemoDynamic {
            switch (_buf_.readInt()) {
                case -2138341747: return new test.DemoD2(_buf_)
                case -2138341717: return new test.DemoE1(_buf_)
                case -989153243: return new test.login.RoleInfo(_buf_)
                case -2138341744: return new test.DemoD5(_buf_)
                default: throw new Error()
            }
        }

        constructor(_buf_: ByteBuf) {
            this.x1 = _buf_.readInt()
        }

        readonly x1: number

        resolve(tables: Tables) {

        }
    }

}


export namespace test {
    export class DemoD2 extends test.DemoDynamic {

        constructor(_buf_: ByteBuf) {
            super(_buf_)
            this.x2 = _buf_.readInt()
        }

        readonly x2: number

        resolve(tables: Tables) {
            super.resolve(tables)

        }
    }

}


export namespace test {
    export abstract class DemoD3 extends test.DemoDynamic {
        static constructorFrom(_buf_: ByteBuf): DemoD3 {
            switch (_buf_.readInt()) {
                case -2138341717: return new test.DemoE1(_buf_)
                case -989153243: return new test.login.RoleInfo(_buf_)
                default: throw new Error()
            }
        }

        constructor(_buf_: ByteBuf) {
            super(_buf_)
            this.x3 = _buf_.readInt()
        }

        readonly x3: number

        resolve(tables: Tables) {
            super.resolve(tables)

        }
    }

}


export namespace test {
    export class DemoE1 extends test.DemoD3 {

        constructor(_buf_: ByteBuf) {
            super(_buf_)
            this.x4 = _buf_.readInt()
        }

        readonly x4: number

        resolve(tables: Tables) {
            super.resolve(tables)

        }
    }

}


export namespace test {
    export namespace login {
        export class RoleInfo extends test.DemoD3 {

            constructor(_buf_: ByteBuf) {
                super(_buf_)
                this.roleId = _buf_.readLongAsNumber()
            }

            readonly roleId: number

            resolve(tables: Tables) {
                super.resolve(tables)

            }
        }

    }
}


export namespace test {
    export class DemoD5 extends test.DemoDynamic {

        constructor(_buf_: ByteBuf) {
            super(_buf_)
            this.time = new test.DateTimeRange(_buf_)
        }

        readonly time: test.DateTimeRange

        resolve(tables: Tables) {
            super.resolve(tables)
            this.time?.resolve(tables);
        }
    }

}


export namespace test {
    export class DemoE2 {

        constructor(_buf_: ByteBuf) {
            if (_buf_.readBool()) { this.y1 = _buf_.readInt() } else { this.y1 = null; }
            this.y2 = _buf_.readBool()
        }

        readonly y1: number | undefined
        readonly y2: boolean

        resolve(tables: Tables) {


        }
    }

}


export namespace test {
    export class DemoExplicitType {

        constructor(_buf_: ByteBuf) {
            this.x1 = _buf_.readByte()
            this.x2 = _buf_.readShort()
            this.x3 = _buf_.readInt()
            this.x4 = _buf_.readLongAsNumber()
            this.x5 = _buf_.readFloat()
            this.x6 = _buf_.readDouble()
            this.x7 = _buf_.readLong()
        }

        readonly x1: number
        readonly x2: number
        readonly x3: number
        readonly x4: number
        readonly x5: number
        readonly x6: number
        readonly x7: BigInt

        resolve(tables: Tables) {







        }
    }

}


export namespace test {
    export class DemoGroup {

        constructor(_buf_: ByteBuf) {
            this.id = _buf_.readInt()
            this.x1 = _buf_.readInt()
            this.x2 = _buf_.readInt()
            this.x3 = _buf_.readInt()
            this.x4 = _buf_.readInt()
            this.x5 = new test.InnerGroup(_buf_)
        }

        readonly id: number
        readonly x1: number
        x1_ref: test.DemoGroup | undefined
        readonly x2: number
        x2_ref: test.DemoGroup | undefined
        readonly x3: number
        x3_ref: test.DemoGroup | undefined
        readonly x4: number
        readonly x5: test.InnerGroup

        resolve(tables: Tables) {

            this.x1_ref = tables.TbDemoGroup_C.get(this.x1)
            this.x2_ref = tables.TbDemoGroup_S.get(this.x2)
            this.x3_ref = tables.TbDemoGroup_E.get(this.x3)

            this.x5?.resolve(tables);
        }
    }

}


export namespace test {
    export class DemoPrimitiveTypesTable {

        constructor(_buf_: ByteBuf) {
            this.x1 = _buf_.readBool()
            this.x2 = _buf_.readByte()
            this.x3 = _buf_.readShort()
            this.x4 = _buf_.readInt()
            this.x5 = _buf_.readLongAsNumber()
            this.x6 = _buf_.readFloat()
            this.x7 = _buf_.readDouble()
            this.s1 = _buf_.readString()
            this.s2 = _buf_.readString()
            this.v2 = new vec2(_buf_)
            this.v3 = new vec3(_buf_)
            this.v4 = new vec4(_buf_)
            this.t1 = _buf_.readLongAsNumber()
        }

        readonly x1: boolean
        readonly x2: number
        readonly x3: number
        readonly x4: number
        readonly x5: number
        readonly x6: number
        readonly x7: number
        readonly s1: string
        readonly s2: string
        readonly v2: vec2
        readonly v3: vec3
        readonly v4: vec4
        readonly t1: number

        resolve(tables: Tables) {













        }
    }

}


export namespace test {
    export class DemoSingletonType {

        constructor(_buf_: ByteBuf) {
            this.id = _buf_.readInt()
            this.name = _buf_.readString()
            this.date = test.DemoDynamic.constructorFrom(_buf_)
        }

        readonly id: number
        readonly name: string
        readonly date: test.DemoDynamic

        resolve(tables: Tables) {


            this.date?.resolve(tables);
        }
    }

}


export namespace test {
    export class DemoType1 {

        constructor(_buf_: ByteBuf) {
            this.x1 = _buf_.readInt()
        }

        readonly x1: number

        resolve(tables: Tables) {

        }
    }

}


export namespace test {
    export class DemoType2 {

        constructor(_buf_: ByteBuf) {
            this.x4 = _buf_.readInt()
            this.x1 = _buf_.readBool()
            this.x2 = _buf_.readByte()
            this.x3 = _buf_.readShort()
            this.x5 = _buf_.readLongAsNumber()
            this.x6 = _buf_.readFloat()
            this.x7 = _buf_.readDouble()
            this.x80 = _buf_.readShort()
            this.x8 = _buf_.readInt()
            this.x9 = _buf_.readLongAsNumber()
            this.x10 = _buf_.readString()
            this.x12 = new test.DemoType1(_buf_)
            this.x13 = _buf_.readInt()
            this.x14 = test.DemoDynamic.constructorFrom(_buf_)
            this.s1 = _buf_.readString()
            this.t1 = _buf_.readLongAsNumber()
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.k1 = []; for (let i = 0; i < n; i++) { let _e0; _e0 = _buf_.readInt(); this.k1.push(_e0); } }
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.k2 = []; for (let i = 0; i < n; i++) { let _e0; _e0 = _buf_.readInt(); this.k2.push(_e0); } }
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.k5 = new Set<number>(); for (let i = 0; i < n; i++) { let _e0; _e0 = _buf_.readInt(); this.k5.add(_e0); } }
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.k8 = new Map<number, number>(); for (let i = 0; i < n; i++) { let _k0; _k0 = _buf_.readInt(); let _v0; _v0 = _buf_.readInt(); this.k8.set(_k0, _v0); } }
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.k9 = []; for (let i = 0; i < n; i++) { let _e0; _e0 = new test.DemoE2(_buf_); this.k9.push(_e0); } }
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.k15 = []; for (let i = 0; i < n; i++) { let _e0; _e0 = test.DemoDynamic.constructorFrom(_buf_); this.k15.push(_e0); } }
        }

        readonly x4: number
        readonly x1: boolean
        readonly x2: number
        readonly x3: number
        readonly x5: number
        readonly x6: number
        readonly x7: number
        readonly x80: number
        readonly x8: number
        readonly x9: number
        readonly x10: string
        readonly x12: test.DemoType1
        readonly x13: test.DemoEnum
        readonly x14: test.DemoDynamic
        readonly s1: string
        readonly t1: number
        readonly k1: number[]
        readonly k2: number[]
        readonly k5: Set<number>
        readonly k8: Map<number, number>
        readonly k9: test.DemoE2[]
        readonly k15: test.DemoDynamic[]

        resolve(tables: Tables) {











            this.x12?.resolve(tables);

            this.x14?.resolve(tables);







            for (let _e of this.k15) { _e?.resolve(tables); }
        }
    }

}


export namespace test {
    export class DetectEncoding {

        constructor(_buf_: ByteBuf) {
            this.id = _buf_.readInt()
            this.name = _buf_.readString()
        }

        readonly id: number
        readonly name: string

        resolve(tables: Tables) {


        }
    }

}


export namespace test {
    export class ExcelFromJson {

        constructor(_buf_: ByteBuf) {
            this.x4 = _buf_.readInt()
            this.x1 = _buf_.readBool()
            this.x5 = _buf_.readLongAsNumber()
            this.x6 = _buf_.readFloat()
            this.s1 = _buf_.readString()
            this.s2 = _buf_.readString()
            this.t1 = _buf_.readLongAsNumber()
            this.x12 = new test.DemoType1(_buf_)
            this.x13 = _buf_.readInt()
            this.x14 = test.DemoDynamic.constructorFrom(_buf_)
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.k1 = []; for (let i = 0; i < n; i++) { let _e0; _e0 = _buf_.readInt(); this.k1.push(_e0); } }
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.k8 = new Map<number, number>(); for (let i = 0; i < n; i++) { let _k0; _k0 = _buf_.readInt(); let _v0; _v0 = _buf_.readInt(); this.k8.set(_k0, _v0); } }
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.k9 = []; for (let i = 0; i < n; i++) { let _e0; _e0 = new test.DemoE2(_buf_); this.k9.push(_e0); } }
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.k15 = []; for (let i = 0; i < n; i++) { let _e0; _e0 = test.DemoDynamic.constructorFrom(_buf_); this.k15.push(_e0); } }
        }

        readonly x4: number
        readonly x1: boolean
        readonly x5: number
        readonly x6: number
        readonly s1: string
        readonly s2: string
        readonly t1: number
        readonly x12: test.DemoType1
        readonly x13: test.DemoEnum
        readonly x14: test.DemoDynamic
        readonly k1: number[]
        readonly k8: Map<number, number>
        readonly k9: test.DemoE2[]
        readonly k15: test.DemoDynamic[]

        resolve(tables: Tables) {







            this.x12?.resolve(tables);

            this.x14?.resolve(tables);



            for (let _e of this.k15) { _e?.resolve(tables); }
        }
    }

}


export namespace test {
    export class ExcelFromJsonMultiRow {

        constructor(_buf_: ByteBuf) {
            this.id = _buf_.readInt()
            this.x = _buf_.readInt()
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.items = []; for (let i = 0; i < n; i++) { let _e0; _e0 = new test.TestRow(_buf_); this.items.push(_e0); } }
        }

        readonly id: number
        readonly x: number
        readonly items: test.TestRow[]

        resolve(tables: Tables) {


            for (let _e of this.items) { _e?.resolve(tables); }
        }
    }

}


export namespace test {
    export class Foo {

        constructor(_buf_: ByteBuf) {
            this.y1 = _buf_.readInt()
            this.y2 = _buf_.readInt()
            this.y3 = _buf_.readInt()
        }

        readonly y1: number
        readonly y2: number
        readonly y3: number

        resolve(tables: Tables) {



        }
    }

}


export namespace test {
    export class H1 {

        constructor(_buf_: ByteBuf) {
            this.y2 = new test.H2(_buf_)
            this.y3 = _buf_.readInt()
        }

        readonly y2: test.H2
        readonly y3: number

        resolve(tables: Tables) {
            this.y2?.resolve(tables);

        }
    }

}


export namespace test {
    export class H2 {

        constructor(_buf_: ByteBuf) {
            this.z2 = _buf_.readInt()
            this.z3 = _buf_.readInt()
        }

        readonly z2: number
        readonly z3: number

        resolve(tables: Tables) {


        }
    }

}


export namespace test {
    export class InnerGroup {

        constructor(_buf_: ByteBuf) {
            this.y1 = _buf_.readInt()
            this.y2 = _buf_.readInt()
            this.y3 = _buf_.readInt()
            this.y4 = _buf_.readInt()
        }

        readonly y1: number
        readonly y2: number
        readonly y3: number
        readonly y4: number

        resolve(tables: Tables) {




        }
    }

}


export namespace test {
    export abstract class ItemBase {
        static constructorFrom(_buf_: ByteBuf): ItemBase {
            switch (_buf_.readInt()) {
                case -1226641649: return new test.Item(_buf_)
                case -76837102: return new test.Equipment(_buf_)
                case -625155649: return new test.Decorator(_buf_)
                default: throw new Error()
            }
        }

        constructor(_buf_: ByteBuf) {
            this.id = _buf_.readInt()
            this.name = _buf_.readString()
            this.desc = _buf_.readString()
        }

        readonly id: number
        readonly name: string
        readonly desc: string

        resolve(tables: Tables) {



        }
    }

}


export namespace test {
    export class Decorator extends test.ItemBase {

        constructor(_buf_: ByteBuf) {
            super(_buf_)
            this.duration = _buf_.readInt()
        }

        readonly duration: number

        resolve(tables: Tables) {
            super.resolve(tables)

        }
    }

}


export namespace test {
    export class Equipment extends test.ItemBase {

        constructor(_buf_: ByteBuf) {
            super(_buf_)
            this.attr = _buf_.readInt()
            this.value = _buf_.readInt()
        }

        readonly attr: test.DemoEnum
        readonly value: number

        resolve(tables: Tables) {
            super.resolve(tables)


        }
    }

}


export namespace test {
    export class Item extends test.ItemBase {

        constructor(_buf_: ByteBuf) {
            super(_buf_)
            this.num = _buf_.readInt()
            this.price = _buf_.readInt()
        }

        readonly num: number
        readonly price: number

        resolve(tables: Tables) {
            super.resolve(tables)


        }
    }

}


export namespace test {
    export class MultiIndexList {

        constructor(_buf_: ByteBuf) {
            this.id1 = _buf_.readInt()
            this.id2 = _buf_.readLongAsNumber()
            this.id3 = _buf_.readString()
            this.num = _buf_.readInt()
            this.desc = _buf_.readString()
        }

        readonly id1: number
        readonly id2: number
        readonly id3: string
        readonly num: number
        readonly desc: string

        resolve(tables: Tables) {





        }
    }

}


export namespace test {
    export class MultiRowRecord {

        constructor(_buf_: ByteBuf) {
            this.id = _buf_.readInt()
            this.name = _buf_.readString()
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.oneRows = []; for (let i = 0; i < n; i++) { let _e0; _e0 = new test.MultiRowType1(_buf_); this.oneRows.push(_e0); } }
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.multiRows1 = []; for (let i = 0; i < n; i++) { let _e0; _e0 = new test.MultiRowType1(_buf_); this.multiRows1.push(_e0); } }
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.multiRows2 = []; for (let i = 0; i < n; i++) { let _e0; _e0 = new test.MultiRowType1(_buf_); this.multiRows2.push(_e0); } }
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.multiRows4 = new Map<number, test.MultiRowType2>(); for (let i = 0; i < n; i++) { let _k0; _k0 = _buf_.readInt(); let _v0; _v0 = new test.MultiRowType2(_buf_); this.multiRows4.set(_k0, _v0); } }
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.multiRows5 = []; for (let i = 0; i < n; i++) { let _e0; _e0 = new test.MultiRowType3(_buf_); this.multiRows5.push(_e0); } }
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.multiRows6 = new Map<number, test.MultiRowType2>(); for (let i = 0; i < n; i++) { let _k0; _k0 = _buf_.readInt(); let _v0; _v0 = new test.MultiRowType2(_buf_); this.multiRows6.set(_k0, _v0); } }
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.multiRows7 = new Map<number, number>(); for (let i = 0; i < n; i++) { let _k0; _k0 = _buf_.readInt(); let _v0; _v0 = _buf_.readInt(); this.multiRows7.set(_k0, _v0); } }
        }

        readonly id: number
        readonly name: string
        readonly oneRows: test.MultiRowType1[]
        readonly multiRows1: test.MultiRowType1[]
        readonly multiRows2: test.MultiRowType1[]
        readonly multiRows4: Map<number, test.MultiRowType2>
        readonly multiRows5: test.MultiRowType3[]
        readonly multiRows6: Map<number, test.MultiRowType2>
        readonly multiRows7: Map<number, number>

        resolve(tables: Tables) {


            for (let _e of this.oneRows) { _e?.resolve(tables); }
            for (let _e of this.multiRows1) { _e?.resolve(tables); }
            for (let _e of this.multiRows2) { _e?.resolve(tables); }
            for (let [_, _e] of this.multiRows4) { _e?.resolve(tables); }
            for (let _e of this.multiRows5) { _e?.resolve(tables); }
            for (let [_, _e] of this.multiRows6) { _e?.resolve(tables); }

        }
    }

}


export namespace test {
    export class MultiRowTitle {

        constructor(_buf_: ByteBuf) {
            this.id = _buf_.readInt()
            this.name = _buf_.readString()
            this.x1 = new test.H1(_buf_)
            if (_buf_.readBool()) { this.x20 = new test.H2(_buf_) } else { this.x20 = null; }
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.x2 = []; for (let i = 0; i < n; i++) { let _e0; _e0 = new test.H2(_buf_); this.x2.push(_e0); } }
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.x3 = []; for (let i = 0; i < n; i++) { let _e0; _e0 = new test.H2(_buf_); this.x3.push(_e0); } }
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.x4 = []; for (let i = 0; i < n; i++) { let _e0; _e0 = new test.H2(_buf_); this.x4.push(_e0); } }
        }

        readonly id: number
        readonly name: string
        readonly x1: test.H1
        readonly x20: test.H2 | undefined
        readonly x2: test.H2[]
        readonly x3: test.H2[]
        readonly x4: test.H2[]

        resolve(tables: Tables) {


            this.x1?.resolve(tables);
            this.x20?.resolve(tables);
            for (let _e of this.x2) { _e?.resolve(tables); }
            for (let _e of this.x3) { _e?.resolve(tables); }
            for (let _e of this.x4) { _e?.resolve(tables); }
        }
    }

}


export namespace test {
    export class MultiRowType1 {

        constructor(_buf_: ByteBuf) {
            this.id = _buf_.readInt()
            this.x = _buf_.readInt()
        }

        readonly id: number
        readonly x: number

        resolve(tables: Tables) {


        }
    }

}


export namespace test {
    export class MultiRowType2 {

        constructor(_buf_: ByteBuf) {
            this.id = _buf_.readInt()
            this.x = _buf_.readInt()
            this.y = _buf_.readFloat()
        }

        readonly id: number
        readonly x: number
        readonly y: number

        resolve(tables: Tables) {



        }
    }

}


export namespace test {
    export class MultiRowType3 {

        constructor(_buf_: ByteBuf) {
            this.id = _buf_.readInt()
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.items = []; for (let i = 0; i < n; i++) { let _e0; _e0 = new test.MultiRowType1(_buf_); this.items.push(_e0); } }
        }

        readonly id: number
        readonly items: test.MultiRowType1[]

        resolve(tables: Tables) {

            for (let _e of this.items) { _e?.resolve(tables); }
        }
    }

}


export namespace test {
    export class MultiUnionIndexList {

        constructor(_buf_: ByteBuf) {
            this.id1 = _buf_.readInt()
            this.id2 = _buf_.readLongAsNumber()
            this.id3 = _buf_.readString()
            this.num = _buf_.readInt()
            this.desc = _buf_.readString()
        }

        readonly id1: number
        readonly id2: number
        readonly id3: string
        readonly num: number
        readonly desc: string

        resolve(tables: Tables) {





        }
    }

}


export namespace test {
    export class NotIndexList {

        constructor(_buf_: ByteBuf) {
            this.x = _buf_.readInt()
            this.y = _buf_.readInt()
        }

        readonly x: number
        readonly y: number

        resolve(tables: Tables) {


        }
    }

}


export namespace test {
    export class Path {

        constructor(_buf_: ByteBuf) {
            this.id = _buf_.readInt()
            this.res = _buf_.readString()
        }

        readonly id: number
        readonly res: string

        resolve(tables: Tables) {


        }
    }

}


export namespace test {
    export abstract class RefDynamicBase {
        static constructorFrom(_buf_: ByteBuf): RefDynamicBase {
            switch (_buf_.readInt()) {
                case 1963260263: return new test.RefBean(_buf_)
                default: throw new Error()
            }
        }

        constructor(_buf_: ByteBuf) {
            this.x = _buf_.readInt()
        }

        readonly x: number
        x_ref: test.TestBeRef | undefined

        resolve(tables: Tables) {
            this.x_ref = tables.TbTestBeRef.get(this.x)
        }
    }

}


export namespace test {
    export class RefBean extends test.RefDynamicBase {

        constructor(_buf_: ByteBuf) {
            super(_buf_)
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.arr = []; for (let i = 0; i < n; i++) { let _e0; _e0 = _buf_.readInt(); this.arr.push(_e0); } }
        }

        readonly arr: number[]

        resolve(tables: Tables) {
            super.resolve(tables)

        }
    }

}


export namespace test {
    export class SepBean1 {

        constructor(_buf_: ByteBuf) {
            this.a = _buf_.readInt()
            this.b = _buf_.readInt()
            this.c = _buf_.readString()
        }

        readonly a: number
        readonly b: number
        readonly c: string

        resolve(tables: Tables) {



        }
    }

}


export namespace test {
    export class SepVector {

        constructor(_buf_: ByteBuf) {
            this.x = _buf_.readInt()
            this.y = _buf_.readInt()
            this.z = _buf_.readInt()
        }

        readonly x: number
        readonly y: number
        readonly z: number

        resolve(tables: Tables) {



        }
    }

}


export namespace test {
    export abstract class Shape {
        static constructorFrom(_buf_: ByteBuf): Shape {
            switch (_buf_.readInt()) {
                case 2131829196: return new test.Circle(_buf_)
                case 694982337: return new test2.Rectangle(_buf_)
                default: throw new Error()
            }
        }

        constructor(_buf_: ByteBuf) {
        }


        resolve(tables: Tables) {
        }
    }

}


export namespace test {
    /**
     * 圆
     */
    export class Circle extends test.Shape {

        constructor(_buf_: ByteBuf) {
            super(_buf_)
            this.radius = _buf_.readFloat()
        }

        /**
         * 半径
         */
        readonly radius: number

        resolve(tables: Tables) {
            super.resolve(tables)

        }
    }

}


export namespace test2 {
    /**
     * 矩形
     */
    export class Rectangle extends test.Shape {

        constructor(_buf_: ByteBuf) {
            super(_buf_)
            this.width = _buf_.readFloat()
            this.height = _buf_.readFloat()
        }

        /**
         * 宽度
         */
        readonly width: number
        /**
         * 高度
         */
        readonly height: number

        resolve(tables: Tables) {
            super.resolve(tables)


        }
    }

}


export namespace test {
    export class Test3 {

        constructor(_buf_: ByteBuf) {
            this.x = _buf_.readInt()
            this.y = _buf_.readInt()
        }

        readonly x: number
        readonly y: number

        resolve(tables: Tables) {


        }
    }

}


export namespace test {
    export class TestBeRef {

        constructor(_buf_: ByteBuf) {
            this.id = _buf_.readInt()
            this.count = _buf_.readInt()
        }

        readonly id: number
        readonly count: number

        resolve(tables: Tables) {


        }
    }

}


export namespace test {
    /**
     * 这是个测试excel结构
     */
    export class TestExcelBean1 {

        constructor(_buf_: ByteBuf) {
            this.x1 = _buf_.readInt()
            this.x2 = _buf_.readString()
            this.x3 = _buf_.readInt()
            this.x4 = _buf_.readFloat()
        }

        /**
         * 最高品质
         */
        readonly x1: number
        /**
         * 黑色的
         */
        readonly x2: string
        /**
         * 蓝色的
         */
        readonly x3: number
        /**
         * 最差品质
         */
        readonly x4: number

        resolve(tables: Tables) {




        }
    }

}


export namespace test {
    /**
     * 这是个测试excel结构
     */
    export class TestExcelBean2 {

        constructor(_buf_: ByteBuf) {
            this.y1 = _buf_.readInt()
            this.y2 = _buf_.readString()
            this.y3 = _buf_.readFloat()
        }

        /**
         * 最高品质
         */
        readonly y1: number
        /**
         * 黑色的
         */
        readonly y2: string
        /**
         * 蓝色的
         */
        readonly y3: number

        resolve(tables: Tables) {



        }
    }

}


export namespace test {
    export class TestFieldAlias {

        constructor(_buf_: ByteBuf) {
            this.id = _buf_.readInt()
            this.name = _buf_.readString()
        }

        readonly id: number
        readonly name: string

        resolve(tables: Tables) {


        }
    }

}


export namespace test {
    export class TestFieldVariant {

        constructor(_buf_: ByteBuf) {
            this.id = _buf_.readInt()
            this.name = _buf_.readString()
        }

        readonly id: number
        readonly name: string

        resolve(tables: Tables) {


        }
    }

}


export namespace test {
    export class TestFieldVariant2 {

        constructor(_buf_: ByteBuf) {
            this.id = _buf_.readInt()
            this.name = _buf_.readString()
        }

        readonly id: number
        readonly name: string

        resolve(tables: Tables) {


        }
    }

}


export namespace test {
    export class TestFormat {

        constructor(_buf_: ByteBuf) {
            this.id = _buf_.readInt()
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.a1 = []; for (let i = 0; i < n; i++) { let _e0; _e0 = _buf_.readInt(); this.a1.push(_e0); } }
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.a2 = []; for (let i = 0; i < n; i++) { let _e0; _e0 = _buf_.readInt(); this.a2.push(_e0); } }
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.a3 = []; for (let i = 0; i < n; i++) { let _e0; _e0 = _buf_.readInt(); this.a3.push(_e0); } }
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.a4 = []; for (let i = 0; i < n; i++) { let _e0; _e0 = _buf_.readInt(); this.a4.push(_e0); } }
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.b1 = []; for (let i = 0; i < n; i++) { let _e0; _e0 = _buf_.readInt(); this.b1.push(_e0); } }
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.b2 = []; for (let i = 0; i < n; i++) { let _e0; _e0 = _buf_.readInt(); this.b2.push(_e0); } }
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.b3 = []; for (let i = 0; i < n; i++) { let _e0; _e0 = _buf_.readInt(); this.b3.push(_e0); } }
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.b4 = []; for (let i = 0; i < n; i++) { let _e0; _e0 = _buf_.readInt(); this.b4.push(_e0); } }
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.c1 = new Set<number>(); for (let i = 0; i < n; i++) { let _e0; _e0 = _buf_.readInt(); this.c1.add(_e0); } }
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.c2 = new Set<number>(); for (let i = 0; i < n; i++) { let _e0; _e0 = _buf_.readInt(); this.c2.add(_e0); } }
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.c3 = new Set<number>(); for (let i = 0; i < n; i++) { let _e0; _e0 = _buf_.readInt(); this.c3.add(_e0); } }
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.c4 = new Set<number>(); for (let i = 0; i < n; i++) { let _e0; _e0 = _buf_.readInt(); this.c4.add(_e0); } }
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.m1 = new Map<number, number>(); for (let i = 0; i < n; i++) { let _k0; _k0 = _buf_.readInt(); let _v0; _v0 = _buf_.readInt(); this.m1.set(_k0, _v0); } }
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.m2 = new Map<number, number>(); for (let i = 0; i < n; i++) { let _k0; _k0 = _buf_.readInt(); let _v0; _v0 = _buf_.readInt(); this.m2.set(_k0, _v0); } }
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.m3 = new Map<number, number>(); for (let i = 0; i < n; i++) { let _k0; _k0 = _buf_.readInt(); let _v0; _v0 = _buf_.readInt(); this.m3.set(_k0, _v0); } }
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.m4 = new Map<number, number>(); for (let i = 0; i < n; i++) { let _k0; _k0 = _buf_.readInt(); let _v0; _v0 = _buf_.readInt(); this.m4.set(_k0, _v0); } }
            this.v31 = new vec3(_buf_)
            this.v32 = new vec3(_buf_)
            this.v33 = new vec3(_buf_)
            this.v34 = new vec3(_buf_)
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.v41 = []; for (let i = 0; i < n; i++) { let _e0; _e0 = new vec3(_buf_); this.v41.push(_e0); } }
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.v42 = []; for (let i = 0; i < n; i++) { let _e0; _e0 = new vec3(_buf_); this.v42.push(_e0); } }
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.v43 = []; for (let i = 0; i < n; i++) { let _e0; _e0 = new vec3(_buf_); this.v43.push(_e0); } }
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.v44 = []; for (let i = 0; i < n; i++) { let _e0; _e0 = new vec3(_buf_); this.v44.push(_e0); } }
        }

        readonly id: number
        readonly a1: number[]
        readonly a2: number[]
        readonly a3: number[]
        readonly a4: number[]
        readonly b1: number[]
        readonly b2: number[]
        readonly b3: number[]
        readonly b4: number[]
        readonly c1: Set<number>
        readonly c2: Set<number>
        readonly c3: Set<number>
        readonly c4: Set<number>
        readonly m1: Map<number, number>
        readonly m2: Map<number, number>
        readonly m3: Map<number, number>
        readonly m4: Map<number, number>
        readonly v31: vec3
        readonly v32: vec3
        readonly v33: vec3
        readonly v34: vec3
        readonly v41: vec3[]
        readonly v42: vec3[]
        readonly v43: vec3[]
        readonly v44: vec3[]

        resolve(tables: Tables) {

























        }
    }

}


export namespace test {
    export class TestGlobal {

        constructor(_buf_: ByteBuf) {
            this.unlockEquip = _buf_.readInt()
            this.unlockHero = _buf_.readInt()
        }

        readonly unlockEquip: number
        readonly unlockHero: number

        resolve(tables: Tables) {


        }
    }

}


export namespace test {
    export class TestIndex {

        constructor(_buf_: ByteBuf) {
            this.id = _buf_.readInt()
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.eles = []; for (let i = 0; i < n; i++) { let _e0; _e0 = new test.DemoType1(_buf_); this.eles.push(_e0); } }
        }

        readonly id: number
        readonly eles: test.DemoType1[]

        resolve(tables: Tables) {

            for (let _e of this.eles) { _e?.resolve(tables); }
        }
    }

}


export namespace test {
    export class TestMap {

        constructor(_buf_: ByteBuf) {
            this.id = _buf_.readInt()
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.x1 = new Map<number, number>(); for (let i = 0; i < n; i++) { let _k0; _k0 = _buf_.readInt(); let _v0; _v0 = _buf_.readInt(); this.x1.set(_k0, _v0); } }
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.x2 = new Map<number, number>(); for (let i = 0; i < n; i++) { let _k0; _k0 = _buf_.readLongAsNumber(); let _v0; _v0 = _buf_.readInt(); this.x2.set(_k0, _v0); } }
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.x3 = new Map<string, number>(); for (let i = 0; i < n; i++) { let _k0; _k0 = _buf_.readString(); let _v0; _v0 = _buf_.readInt(); this.x3.set(_k0, _v0); } }
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.x4 = new Map<test.DemoEnum, number>(); for (let i = 0; i < n; i++) { let _k0; _k0 = _buf_.readInt(); let _v0; _v0 = _buf_.readInt(); this.x4.set(_k0, _v0); } }
        }

        readonly id: number
        id_ref: test.TestIndex | undefined
        readonly x1: Map<number, number>
        readonly x2: Map<number, number>
        readonly x3: Map<string, number>
        readonly x4: Map<test.DemoEnum, number>

        resolve(tables: Tables) {
            this.id_ref = tables.TbTestIndex.get(this.id)




        }
    }

}


export namespace test {
    export class TestMapper {

        constructor(_buf_: ByteBuf) {
            this.id = _buf_.readInt()
            this.audioType = _buf_.readInt()
            this.v2 = new vec2(_buf_)
        }

        readonly id: number
        readonly audioType: AudioType
        readonly v2: vec2

        resolve(tables: Tables) {



        }
    }

}


export namespace test {
    export class TestMultiColumn {

        constructor(_buf_: ByteBuf) {
            this.id = _buf_.readInt()
            this.a = new test.Foo(_buf_)
            this.b = new test.Foo(_buf_)
            this.c = new test.Foo(_buf_)
        }

        readonly id: number
        readonly a: test.Foo
        readonly b: test.Foo
        readonly c: test.Foo

        resolve(tables: Tables) {

            this.a?.resolve(tables);
            this.b?.resolve(tables);
            this.c?.resolve(tables);
        }
    }

}


export namespace test {
    export class TestNull {

        constructor(_buf_: ByteBuf) {
            this.id = _buf_.readInt()
            if (_buf_.readBool()) { this.x1 = _buf_.readInt() } else { this.x1 = null; }
            if (_buf_.readBool()) { this.x2 = _buf_.readInt() } else { this.x2 = null; }
            if (_buf_.readBool()) { this.x3 = new test.DemoType1(_buf_) } else { this.x3 = null; }
            if (_buf_.readBool()) { this.x4 = test.DemoDynamic.constructorFrom(_buf_) } else { this.x4 = null; }
            if (_buf_.readBool()) { this.s1 = _buf_.readString() } else { this.s1 = null; }
            if (_buf_.readBool()) { this.s2 = _buf_.readString() } else { this.s2 = null; }
        }

        readonly id: number
        readonly x1: number | undefined
        readonly x2: test.DemoEnum | undefined
        readonly x3: test.DemoType1 | undefined
        readonly x4: test.DemoDynamic | undefined
        readonly s1: string | undefined
        readonly s2: string | undefined

        resolve(tables: Tables) {



            this.x3?.resolve(tables);
            this.x4?.resolve(tables);


        }
    }

}


export namespace test {
    export class TestRange {

        constructor(_buf_: ByteBuf) {
            this.id = _buf_.readInt()
            this.f1 = _buf_.readFloat()
            this.f2 = _buf_.readFloat()
            this.d1 = _buf_.readDouble()
            this.d2 = _buf_.readDouble()
            this.i1 = _buf_.readInt()
            this.i2 = _buf_.readInt()
            this.i3 = _buf_.readInt()
            this.i4 = _buf_.readInt()
            this.l1 = _buf_.readLongAsNumber()
            this.l2 = _buf_.readLongAsNumber()
            this.l3 = _buf_.readLongAsNumber()
            this.l4 = _buf_.readLongAsNumber()
        }

        readonly id: number
        readonly f1: number
        readonly f2: number
        readonly d1: number
        readonly d2: number
        readonly i1: number
        readonly i2: number
        readonly i3: number
        readonly i4: number
        readonly l1: number
        readonly l2: number
        readonly l3: number
        readonly l4: number

        resolve(tables: Tables) {













        }
    }

}


export namespace test {
    export class TestRef {

        constructor(_buf_: ByteBuf) {
            this.id = _buf_.readInt()
            this.x1 = _buf_.readInt()
            this.x12 = _buf_.readInt()
            this.x2 = _buf_.readInt()
            this.x3 = _buf_.readInt()
            this.x4 = _buf_.readInt()
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.a1 = []; for (let i = 0; i < n; i++) { let _e0; _e0 = _buf_.readInt(); this.a1.push(_e0); } }
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.a2 = []; for (let i = 0; i < n; i++) { let _e0; _e0 = _buf_.readInt(); this.a2.push(_e0); } }
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.b1 = []; for (let i = 0; i < n; i++) { let _e0; _e0 = _buf_.readInt(); this.b1.push(_e0); } }
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.b2 = []; for (let i = 0; i < n; i++) { let _e0; _e0 = _buf_.readInt(); this.b2.push(_e0); } }
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.c1 = new Set<number>(); for (let i = 0; i < n; i++) { let _e0; _e0 = _buf_.readInt(); this.c1.add(_e0); } }
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.c2 = new Set<number>(); for (let i = 0; i < n; i++) { let _e0; _e0 = _buf_.readInt(); this.c2.add(_e0); } }
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.d1 = new Map<number, number>(); for (let i = 0; i < n; i++) { let _k0; _k0 = _buf_.readInt(); let _v0; _v0 = _buf_.readInt(); this.d1.set(_k0, _v0); } }
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.d2 = new Map<number, number>(); for (let i = 0; i < n; i++) { let _k0; _k0 = _buf_.readInt(); let _v0; _v0 = _buf_.readInt(); this.d2.set(_k0, _v0); } }
            this.e1 = _buf_.readInt()
            this.e2 = _buf_.readLongAsNumber()
            this.e3 = _buf_.readString()
            this.f1 = _buf_.readInt()
            this.f2 = _buf_.readLongAsNumber()
            this.f3 = _buf_.readString()
            this.s1 = test.RefDynamicBase.constructorFrom(_buf_)
        }

        readonly id: number
        readonly x1: number
        x1_ref: test.TestBeRef | undefined
        readonly x12: number
        x12_ref: test.TestBeRef | undefined
        readonly x2: number
        readonly x3: number
        readonly x4: number
        x4_ref: tag.TestTag | undefined
        readonly a1: number[]
        readonly a2: number[]
        readonly b1: number[]
        readonly b2: number[]
        readonly c1: Set<number>
        readonly c2: Set<number>
        readonly d1: Map<number, number>
        readonly d2: Map<number, number>
        readonly e1: number
        readonly e2: number
        readonly e3: string
        readonly f1: number
        readonly f2: number
        readonly f3: string
        readonly s1: test.RefDynamicBase

        resolve(tables: Tables) {

            this.x1_ref = tables.TbTestBeRef.get(this.x1)
            this.x12_ref = tables.TbTestBeRef.get(this.x12)


            this.x4_ref = tables.TbTestTag.get(this.x4)














            this.s1?.resolve(tables);
        }
    }

}


export namespace test {
    export class TestRow {

        constructor(_buf_: ByteBuf) {
            this.x = _buf_.readInt()
            this.y = _buf_.readBool()
            this.z = _buf_.readString()
            this.a = new test.Test3(_buf_)
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.b = []; for (let i = 0; i < n; i++) { let _e0; _e0 = _buf_.readInt(); this.b.push(_e0); } }
        }

        readonly x: number
        readonly y: boolean
        readonly z: string
        readonly a: test.Test3
        readonly b: number[]

        resolve(tables: Tables) {



            this.a?.resolve(tables);

        }
    }

}


export namespace test {
    export class TestScriptableObject {

        constructor(_buf_: ByteBuf) {
            this.id = _buf_.readInt()
            this.desc = _buf_.readString()
            this.rate = _buf_.readFloat()
            this.num = _buf_.readInt()
            this.v2 = new vec2(_buf_)
            this.v3 = new vec3(_buf_)
            this.v4 = new vec4(_buf_)
        }

        readonly id: number
        readonly desc: string
        readonly rate: number
        readonly num: number
        readonly v2: vec2
        readonly v3: vec3
        readonly v4: vec4

        resolve(tables: Tables) {







        }
    }

}


export namespace test {
    export class TestSet {

        constructor(_buf_: ByteBuf) {
            this.id = _buf_.readInt()
            this.x0 = _buf_.readString()
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.x1 = []; for (let i = 0; i < n; i++) { let _e0; _e0 = _buf_.readInt(); this.x1.push(_e0); } }
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.x2 = []; for (let i = 0; i < n; i++) { let _e0; _e0 = _buf_.readLongAsNumber(); this.x2.push(_e0); } }
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.x3 = []; for (let i = 0; i < n; i++) { let _e0; _e0 = _buf_.readString(); this.x3.push(_e0); } }
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.x4 = []; for (let i = 0; i < n; i++) { let _e0; _e0 = _buf_.readInt(); this.x4.push(_e0); } }
        }

        readonly id: number
        readonly x0: string
        readonly x1: number[]
        readonly x2: number[]
        readonly x3: string[]
        readonly x4: test.DemoEnum[]

        resolve(tables: Tables) {






        }
    }

}


export namespace test {
    export class TestSize {

        constructor(_buf_: ByteBuf) {
            this.id = _buf_.readInt()
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.x1 = []; for (let i = 0; i < n; i++) { let _e0; _e0 = _buf_.readInt(); this.x1.push(_e0); } }
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.x2 = []; for (let i = 0; i < n; i++) { let _e0; _e0 = _buf_.readInt(); this.x2.push(_e0); } }
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.x3 = new Set<number>(); for (let i = 0; i < n; i++) { let _e0; _e0 = _buf_.readInt(); this.x3.add(_e0); } }
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.x4 = new Map<number, number>(); for (let i = 0; i < n; i++) { let _k0; _k0 = _buf_.readInt(); let _v0; _v0 = _buf_.readInt(); this.x4.set(_k0, _v0); } }
        }

        readonly id: number
        readonly x1: number[]
        readonly x2: number[]
        readonly x3: Set<number>
        readonly x4: Map<number, number>

        resolve(tables: Tables) {





        }
    }

}


export namespace test {
    export class TestString {

        constructor(_buf_: ByteBuf) {
            this.id = _buf_.readString()
            this.s1 = _buf_.readString()
            this.s2 = _buf_.readString()
            this.cs1 = new test.CompactString(_buf_)
            this.cs2 = new test.CompactString(_buf_)
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.css = []; for (let i = 0; i < n; i++) { let _e0; _e0 = _buf_.readString(); this.css.push(_e0); } }
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.css2 = []; for (let i = 0; i < n; i++) { let _e0; _e0 = _buf_.readString(); this.css2.push(_e0); } }
        }

        readonly id: string
        readonly s1: string
        readonly s2: string
        readonly cs1: test.CompactString
        readonly cs2: test.CompactString
        readonly css: string[]
        readonly css2: string[]

        resolve(tables: Tables) {



            this.cs1?.resolve(tables);
            this.cs2?.resolve(tables);


        }
    }

}


export namespace test {
    export class TestUeType {

        constructor(_buf_: ByteBuf) {
            this.x1 = _buf_.readBool()
            this.x2 = _buf_.readByte()
            this.x3 = _buf_.readShort()
            this.x4 = _buf_.readInt()
            this.x5 = _buf_.readLongAsNumber()
            this.x6 = _buf_.readFloat()
            this.x10 = _buf_.readString()
            this.x12 = new test.DemoType1(_buf_)
            this.x13 = _buf_.readInt()
            this.t1 = _buf_.readLongAsNumber()
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.k1 = []; for (let i = 0; i < n; i++) { let _e0; _e0 = _buf_.readInt(); this.k1.push(_e0); } }
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.k2 = []; for (let i = 0; i < n; i++) { let _e0; _e0 = _buf_.readInt(); this.k2.push(_e0); } }
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.k5 = new Set<number>(); for (let i = 0; i < n; i++) { let _e0; _e0 = _buf_.readInt(); this.k5.add(_e0); } }
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.k8 = new Map<number, number>(); for (let i = 0; i < n; i++) { let _k0; _k0 = _buf_.readInt(); let _v0; _v0 = _buf_.readInt(); this.k8.set(_k0, _v0); } }
            { let n = Math.min(_buf_.readSize(), _buf_.size); this.k9 = []; for (let i = 0; i < n; i++) { let _e0; _e0 = new test.DemoE2(_buf_); this.k9.push(_e0); } }
        }

        readonly x1: boolean
        readonly x2: number
        readonly x3: number
        readonly x4: number
        readonly x5: number
        readonly x6: number
        readonly x10: string
        readonly x12: test.DemoType1
        readonly x13: test.ETestUeType
        readonly t1: number
        readonly k1: number[]
        readonly k2: number[]
        readonly k5: Set<number>
        readonly k8: Map<number, number>
        readonly k9: test.DemoE2[]

        resolve(tables: Tables) {







            this.x12?.resolve(tables);







        }
    }

}



export class vec2 {

    constructor(_buf_: ByteBuf) {
        this.x = _buf_.readFloat()
        this.y = _buf_.readFloat()
    }

    readonly x: number
    readonly y: number

    resolve(tables: Tables) {


    }
}





export class vec3 {

    constructor(_buf_: ByteBuf) {
        this.x = _buf_.readFloat()
        this.y = _buf_.readFloat()
        this.z = _buf_.readFloat()
    }

    readonly x: number
    readonly y: number
    readonly z: number

    resolve(tables: Tables) {



    }
}





export class vec4 {

    constructor(_buf_: ByteBuf) {
        this.x = _buf_.readFloat()
        this.y = _buf_.readFloat()
        this.z = _buf_.readFloat()
        this.w = _buf_.readFloat()
    }

    readonly x: number
    readonly y: number
    readonly z: number
    readonly w: number

    resolve(tables: Tables) {




    }
}





export namespace ai {
    export class TbBlackboard {
        private _dataMap: Map<string, ai.Blackboard>
        private _dataList: ai.Blackboard[]
        constructor(_buf_: ByteBuf) {
            this._dataMap = new Map<string, ai.Blackboard>()
            this._dataList = []
            for (let n = _buf_.readInt(); n > 0; n--) {
                let _v: ai.Blackboard
                _v = new ai.Blackboard(_buf_)
                this._dataList.push(_v)
                this._dataMap.set(_v.name, _v)
            }
        }

        getDataMap(): Map<string, ai.Blackboard> { return this._dataMap; }
        getDataList(): ai.Blackboard[] { return this._dataList; }

        get(key: string): ai.Blackboard | undefined {
            return this._dataMap.get(key);
        }

        resolve(tables: Tables) {
            for (let data of this._dataList) {
                data.resolve(tables)
            }
        }

    }
}


export namespace ai {
    export class TbBehaviorTree {
        private _dataMap: Map<number, ai.BehaviorTree>
        private _dataList: ai.BehaviorTree[]
        constructor(_buf_: ByteBuf) {
            this._dataMap = new Map<number, ai.BehaviorTree>()
            this._dataList = []
            for (let n = _buf_.readInt(); n > 0; n--) {
                let _v: ai.BehaviorTree
                _v = new ai.BehaviorTree(_buf_)
                this._dataList.push(_v)
                this._dataMap.set(_v.id, _v)
            }
        }

        getDataMap(): Map<number, ai.BehaviorTree> { return this._dataMap; }
        getDataList(): ai.BehaviorTree[] { return this._dataList; }

        get(key: number): ai.BehaviorTree | undefined {
            return this._dataMap.get(key);
        }

        resolve(tables: Tables) {
            for (let data of this._dataList) {
                data.resolve(tables)
            }
        }

    }
}


export namespace common {
    export class TbGlobalConfig {

        private _data: common.GlobalConfig
        constructor(_buf_: ByteBuf) {
            if (_buf_.readInt() != 1) throw new Error('table mode=one, but size != 1')
            this._data = new common.GlobalConfig(_buf_)
        }

        getData(): common.GlobalConfig { return this._data; }

        /**
         * 背包容量
         */
        get x1(): number { return this._data.x1; }
        get x2(): number { return this._data.x2; }
        get x3(): number { return this._data.x3; }
        get x4(): number { return this._data.x4; }
        get x5(): number { return this._data.x5; }
        get x6(): number { return this._data.x6; }
        get x7(): number[] { return this._data.x7; }

        resolve(tables: Tables) {
            this._data.resolve(tables)
        }

    }
}


export namespace item {
    /**
     * 道具表
     */
    export class TbItem {
        private _dataMap: Map<number, item.Item>
        private _dataList: item.Item[]
        constructor(_buf_: ByteBuf) {
            this._dataMap = new Map<number, item.Item>()
            this._dataList = []
            for (let n = _buf_.readInt(); n > 0; n--) {
                let _v: item.Item
                _v = new item.Item(_buf_)
                this._dataList.push(_v)
                this._dataMap.set(_v.id, _v)
            }
        }

        getDataMap(): Map<number, item.Item> { return this._dataMap; }
        getDataList(): item.Item[] { return this._dataList; }

        get(key: number): item.Item | undefined {
            return this._dataMap.get(key);
        }

        resolve(tables: Tables) {
            for (let data of this._dataList) {
                data.resolve(tables)
            }
        }

    }
}


export namespace l10n {
    export class TbL10NDemo {
        private _dataMap: Map<number, l10n.L10NDemo>
        private _dataList: l10n.L10NDemo[]
        constructor(_buf_: ByteBuf) {
            this._dataMap = new Map<number, l10n.L10NDemo>()
            this._dataList = []
            for (let n = _buf_.readInt(); n > 0; n--) {
                let _v: l10n.L10NDemo
                _v = new l10n.L10NDemo(_buf_)
                this._dataList.push(_v)
                this._dataMap.set(_v.id, _v)
            }
        }

        getDataMap(): Map<number, l10n.L10NDemo> { return this._dataMap; }
        getDataList(): l10n.L10NDemo[] { return this._dataList; }

        get(key: number): l10n.L10NDemo | undefined {
            return this._dataMap.get(key);
        }

        resolve(tables: Tables) {
            for (let data of this._dataList) {
                data.resolve(tables)
            }
        }

    }
}


export namespace l10n {
    export class TbPatchDemo {
        private _dataMap: Map<number, l10n.PatchDemo>
        private _dataList: l10n.PatchDemo[]
        constructor(_buf_: ByteBuf) {
            this._dataMap = new Map<number, l10n.PatchDemo>()
            this._dataList = []
            for (let n = _buf_.readInt(); n > 0; n--) {
                let _v: l10n.PatchDemo
                _v = new l10n.PatchDemo(_buf_)
                this._dataList.push(_v)
                this._dataMap.set(_v.id, _v)
            }
        }

        getDataMap(): Map<number, l10n.PatchDemo> { return this._dataMap; }
        getDataList(): l10n.PatchDemo[] { return this._dataList; }

        get(key: number): l10n.PatchDemo | undefined {
            return this._dataMap.get(key);
        }

        resolve(tables: Tables) {
            for (let data of this._dataList) {
                data.resolve(tables)
            }
        }

    }
}


export namespace tag {
    export class TbTestTag {
        private _dataMap: Map<number, tag.TestTag>
        private _dataList: tag.TestTag[]
        constructor(_buf_: ByteBuf) {
            this._dataMap = new Map<number, tag.TestTag>()
            this._dataList = []
            for (let n = _buf_.readInt(); n > 0; n--) {
                let _v: tag.TestTag
                _v = new tag.TestTag(_buf_)
                this._dataList.push(_v)
                this._dataMap.set(_v.id, _v)
            }
        }

        getDataMap(): Map<number, tag.TestTag> { return this._dataMap; }
        getDataList(): tag.TestTag[] { return this._dataList; }

        get(key: number): tag.TestTag | undefined {
            return this._dataMap.get(key);
        }

        resolve(tables: Tables) {
            for (let data of this._dataList) {
                data.resolve(tables)
            }
        }

    }
}


export namespace test {
    export class TbFullTypes {
        private _dataMap: Map<number, test.DemoType2>
        private _dataList: test.DemoType2[]
        constructor(_buf_: ByteBuf) {
            this._dataMap = new Map<number, test.DemoType2>()
            this._dataList = []
            for (let n = _buf_.readInt(); n > 0; n--) {
                let _v: test.DemoType2
                _v = new test.DemoType2(_buf_)
                this._dataList.push(_v)
                this._dataMap.set(_v.x4, _v)
            }
        }

        getDataMap(): Map<number, test.DemoType2> { return this._dataMap; }
        getDataList(): test.DemoType2[] { return this._dataList; }

        get(key: number): test.DemoType2 | undefined {
            return this._dataMap.get(key);
        }

        resolve(tables: Tables) {
            for (let data of this._dataList) {
                data.resolve(tables)
            }
        }

    }
}


export namespace test {
    export class TbSingleton {

        private _data: test.DemoSingletonType
        constructor(_buf_: ByteBuf) {
            if (_buf_.readInt() != 1) throw new Error('table mode=one, but size != 1')
            this._data = new test.DemoSingletonType(_buf_)
        }

        getData(): test.DemoSingletonType { return this._data; }

        get id(): number { return this._data.id; }
        get name(): string { return this._data.name; }
        get date(): test.DemoDynamic { return this._data.date; }

        resolve(tables: Tables) {
            this._data.resolve(tables)
        }

    }
}


export namespace test {
    export class TbNotIndexList {
        private _dataList: test.NotIndexList[]

        constructor(_buf_: ByteBuf) {
            this._dataList = []
            for (let n = _buf_.readInt(); n > 0; n--) {
                let _v: test.NotIndexList
                _v = new test.NotIndexList(_buf_)
                this._dataList.push(_v)
            }
        }

        getDataList(): test.NotIndexList[] { return this._dataList }

        get(index: number): test.NotIndexList | undefined { return this._dataList[index] }

        resolve(tables: Tables) {
            for (let data of this._dataList) {
                data.resolve(tables)
            }
        }

    }
}


export namespace test {
    export class TbMultiUnionIndexList {
        private _dataList: test.MultiUnionIndexList[]

        constructor(_buf_: ByteBuf) {
            this._dataList = []
            for (let n = _buf_.readInt(); n > 0; n--) {
                let _v: test.MultiUnionIndexList
                _v = new test.MultiUnionIndexList(_buf_)
                this._dataList.push(_v)
            }
        }

        getDataList(): test.MultiUnionIndexList[] { return this._dataList }

        get(index: number): test.MultiUnionIndexList | undefined { return this._dataList[index] }

        resolve(tables: Tables) {
            for (let data of this._dataList) {
                data.resolve(tables)
            }
        }

    }
}


export namespace test {
    export class TbMultiIndexList {
        private _dataList: test.MultiIndexList[]

        constructor(_buf_: ByteBuf) {
            this._dataList = []
            for (let n = _buf_.readInt(); n > 0; n--) {
                let _v: test.MultiIndexList
                _v = new test.MultiIndexList(_buf_)
                this._dataList.push(_v)
            }
        }

        getDataList(): test.MultiIndexList[] { return this._dataList }

        get(index: number): test.MultiIndexList | undefined { return this._dataList[index] }

        resolve(tables: Tables) {
            for (let data of this._dataList) {
                data.resolve(tables)
            }
        }

    }
}


export namespace test {
    export class TbDataFromMisc {
        private _dataMap: Map<number, test.DemoType2>
        private _dataList: test.DemoType2[]
        constructor(_buf_: ByteBuf) {
            this._dataMap = new Map<number, test.DemoType2>()
            this._dataList = []
            for (let n = _buf_.readInt(); n > 0; n--) {
                let _v: test.DemoType2
                _v = new test.DemoType2(_buf_)
                this._dataList.push(_v)
                this._dataMap.set(_v.x4, _v)
            }
        }

        getDataMap(): Map<number, test.DemoType2> { return this._dataMap; }
        getDataList(): test.DemoType2[] { return this._dataList; }

        get(key: number): test.DemoType2 | undefined {
            return this._dataMap.get(key);
        }

        resolve(tables: Tables) {
            for (let data of this._dataList) {
                data.resolve(tables)
            }
        }

    }
}


export namespace test {
    export class TbMultiRowRecord {
        private _dataMap: Map<number, test.MultiRowRecord>
        private _dataList: test.MultiRowRecord[]
        constructor(_buf_: ByteBuf) {
            this._dataMap = new Map<number, test.MultiRowRecord>()
            this._dataList = []
            for (let n = _buf_.readInt(); n > 0; n--) {
                let _v: test.MultiRowRecord
                _v = new test.MultiRowRecord(_buf_)
                this._dataList.push(_v)
                this._dataMap.set(_v.id, _v)
            }
        }

        getDataMap(): Map<number, test.MultiRowRecord> { return this._dataMap; }
        getDataList(): test.MultiRowRecord[] { return this._dataList; }

        get(key: number): test.MultiRowRecord | undefined {
            return this._dataMap.get(key);
        }

        resolve(tables: Tables) {
            for (let data of this._dataList) {
                data.resolve(tables)
            }
        }

    }
}


export namespace test {
    export class TbTestMultiColumn {
        private _dataMap: Map<number, test.TestMultiColumn>
        private _dataList: test.TestMultiColumn[]
        constructor(_buf_: ByteBuf) {
            this._dataMap = new Map<number, test.TestMultiColumn>()
            this._dataList = []
            for (let n = _buf_.readInt(); n > 0; n--) {
                let _v: test.TestMultiColumn
                _v = new test.TestMultiColumn(_buf_)
                this._dataList.push(_v)
                this._dataMap.set(_v.id, _v)
            }
        }

        getDataMap(): Map<number, test.TestMultiColumn> { return this._dataMap; }
        getDataList(): test.TestMultiColumn[] { return this._dataList; }

        get(key: number): test.TestMultiColumn | undefined {
            return this._dataMap.get(key);
        }

        resolve(tables: Tables) {
            for (let data of this._dataList) {
                data.resolve(tables)
            }
        }

    }
}


export namespace test {
    export class TbMultiRowTitle {
        private _dataMap: Map<number, test.MultiRowTitle>
        private _dataList: test.MultiRowTitle[]
        constructor(_buf_: ByteBuf) {
            this._dataMap = new Map<number, test.MultiRowTitle>()
            this._dataList = []
            for (let n = _buf_.readInt(); n > 0; n--) {
                let _v: test.MultiRowTitle
                _v = new test.MultiRowTitle(_buf_)
                this._dataList.push(_v)
                this._dataMap.set(_v.id, _v)
            }
        }

        getDataMap(): Map<number, test.MultiRowTitle> { return this._dataMap; }
        getDataList(): test.MultiRowTitle[] { return this._dataList; }

        get(key: number): test.MultiRowTitle | undefined {
            return this._dataMap.get(key);
        }

        resolve(tables: Tables) {
            for (let data of this._dataList) {
                data.resolve(tables)
            }
        }

    }
}


export namespace test {
    export class TbTestNull {
        private _dataMap: Map<number, test.TestNull>
        private _dataList: test.TestNull[]
        constructor(_buf_: ByteBuf) {
            this._dataMap = new Map<number, test.TestNull>()
            this._dataList = []
            for (let n = _buf_.readInt(); n > 0; n--) {
                let _v: test.TestNull
                _v = new test.TestNull(_buf_)
                this._dataList.push(_v)
                this._dataMap.set(_v.id, _v)
            }
        }

        getDataMap(): Map<number, test.TestNull> { return this._dataMap; }
        getDataList(): test.TestNull[] { return this._dataList; }

        get(key: number): test.TestNull | undefined {
            return this._dataMap.get(key);
        }

        resolve(tables: Tables) {
            for (let data of this._dataList) {
                data.resolve(tables)
            }
        }

    }
}


export namespace test {
    export class TbDemoPrimitive {
        private _dataMap: Map<number, test.DemoPrimitiveTypesTable>
        private _dataList: test.DemoPrimitiveTypesTable[]
        constructor(_buf_: ByteBuf) {
            this._dataMap = new Map<number, test.DemoPrimitiveTypesTable>()
            this._dataList = []
            for (let n = _buf_.readInt(); n > 0; n--) {
                let _v: test.DemoPrimitiveTypesTable
                _v = new test.DemoPrimitiveTypesTable(_buf_)
                this._dataList.push(_v)
                this._dataMap.set(_v.x4, _v)
            }
        }

        getDataMap(): Map<number, test.DemoPrimitiveTypesTable> { return this._dataMap; }
        getDataList(): test.DemoPrimitiveTypesTable[] { return this._dataList; }

        get(key: number): test.DemoPrimitiveTypesTable | undefined {
            return this._dataMap.get(key);
        }

        resolve(tables: Tables) {
            for (let data of this._dataList) {
                data.resolve(tables)
            }
        }

    }
}


export namespace test {
    export class TbTestString {
        private _dataMap: Map<string, test.TestString>
        private _dataList: test.TestString[]
        constructor(_buf_: ByteBuf) {
            this._dataMap = new Map<string, test.TestString>()
            this._dataList = []
            for (let n = _buf_.readInt(); n > 0; n--) {
                let _v: test.TestString
                _v = new test.TestString(_buf_)
                this._dataList.push(_v)
                this._dataMap.set(_v.id, _v)
            }
        }

        getDataMap(): Map<string, test.TestString> { return this._dataMap; }
        getDataList(): test.TestString[] { return this._dataList; }

        get(key: string): test.TestString | undefined {
            return this._dataMap.get(key);
        }

        resolve(tables: Tables) {
            for (let data of this._dataList) {
                data.resolve(tables)
            }
        }

    }
}


export namespace test {
    export class TbDemoGroup {
        private _dataMap: Map<number, test.DemoGroup>
        private _dataList: test.DemoGroup[]
        constructor(_buf_: ByteBuf) {
            this._dataMap = new Map<number, test.DemoGroup>()
            this._dataList = []
            for (let n = _buf_.readInt(); n > 0; n--) {
                let _v: test.DemoGroup
                _v = new test.DemoGroup(_buf_)
                this._dataList.push(_v)
                this._dataMap.set(_v.id, _v)
            }
        }

        getDataMap(): Map<number, test.DemoGroup> { return this._dataMap; }
        getDataList(): test.DemoGroup[] { return this._dataList; }

        get(key: number): test.DemoGroup | undefined {
            return this._dataMap.get(key);
        }

        resolve(tables: Tables) {
            for (let data of this._dataList) {
                data.resolve(tables)
            }
        }

    }
}


export namespace test {
    export class TbDemoGroup_C {
        private _dataMap: Map<number, test.DemoGroup>
        private _dataList: test.DemoGroup[]
        constructor(_buf_: ByteBuf) {
            this._dataMap = new Map<number, test.DemoGroup>()
            this._dataList = []
            for (let n = _buf_.readInt(); n > 0; n--) {
                let _v: test.DemoGroup
                _v = new test.DemoGroup(_buf_)
                this._dataList.push(_v)
                this._dataMap.set(_v.id, _v)
            }
        }

        getDataMap(): Map<number, test.DemoGroup> { return this._dataMap; }
        getDataList(): test.DemoGroup[] { return this._dataList; }

        get(key: number): test.DemoGroup | undefined {
            return this._dataMap.get(key);
        }

        resolve(tables: Tables) {
            for (let data of this._dataList) {
                data.resolve(tables)
            }
        }

    }
}


export namespace test {
    export class TbDemoGroup_S {
        private _dataMap: Map<number, test.DemoGroup>
        private _dataList: test.DemoGroup[]
        constructor(_buf_: ByteBuf) {
            this._dataMap = new Map<number, test.DemoGroup>()
            this._dataList = []
            for (let n = _buf_.readInt(); n > 0; n--) {
                let _v: test.DemoGroup
                _v = new test.DemoGroup(_buf_)
                this._dataList.push(_v)
                this._dataMap.set(_v.id, _v)
            }
        }

        getDataMap(): Map<number, test.DemoGroup> { return this._dataMap; }
        getDataList(): test.DemoGroup[] { return this._dataList; }

        get(key: number): test.DemoGroup | undefined {
            return this._dataMap.get(key);
        }

        resolve(tables: Tables) {
            for (let data of this._dataList) {
                data.resolve(tables)
            }
        }

    }
}


export namespace test {
    export class TbDemoGroup_E {
        private _dataMap: Map<number, test.DemoGroup>
        private _dataList: test.DemoGroup[]
        constructor(_buf_: ByteBuf) {
            this._dataMap = new Map<number, test.DemoGroup>()
            this._dataList = []
            for (let n = _buf_.readInt(); n > 0; n--) {
                let _v: test.DemoGroup
                _v = new test.DemoGroup(_buf_)
                this._dataList.push(_v)
                this._dataMap.set(_v.id, _v)
            }
        }

        getDataMap(): Map<number, test.DemoGroup> { return this._dataMap; }
        getDataList(): test.DemoGroup[] { return this._dataList; }

        get(key: number): test.DemoGroup | undefined {
            return this._dataMap.get(key);
        }

        resolve(tables: Tables) {
            for (let data of this._dataList) {
                data.resolve(tables)
            }
        }

    }
}


export namespace test {
    export class TbTestGlobal {

        private _data: test.TestGlobal
        constructor(_buf_: ByteBuf) {
            if (_buf_.readInt() != 1) throw new Error('table mode=one, but size != 1')
            this._data = new test.TestGlobal(_buf_)
        }

        getData(): test.TestGlobal { return this._data; }

        get unlockEquip(): number { return this._data.unlockEquip; }
        get unlockHero(): number { return this._data.unlockHero; }

        resolve(tables: Tables) {
            this._data.resolve(tables)
        }

    }
}


export namespace test {
    export class TbTestBeRef {
        private _dataMap: Map<number, test.TestBeRef>
        private _dataList: test.TestBeRef[]
        constructor(_buf_: ByteBuf) {
            this._dataMap = new Map<number, test.TestBeRef>()
            this._dataList = []
            for (let n = _buf_.readInt(); n > 0; n--) {
                let _v: test.TestBeRef
                _v = new test.TestBeRef(_buf_)
                this._dataList.push(_v)
                this._dataMap.set(_v.id, _v)
            }
        }

        getDataMap(): Map<number, test.TestBeRef> { return this._dataMap; }
        getDataList(): test.TestBeRef[] { return this._dataList; }

        get(key: number): test.TestBeRef | undefined {
            return this._dataMap.get(key);
        }

        resolve(tables: Tables) {
            for (let data of this._dataList) {
                data.resolve(tables)
            }
        }

    }
}


export namespace test {
    export class TbTestBeRef2 {
        private _dataMap: Map<number, test.TestBeRef>
        private _dataList: test.TestBeRef[]
        constructor(_buf_: ByteBuf) {
            this._dataMap = new Map<number, test.TestBeRef>()
            this._dataList = []
            for (let n = _buf_.readInt(); n > 0; n--) {
                let _v: test.TestBeRef
                _v = new test.TestBeRef(_buf_)
                this._dataList.push(_v)
                this._dataMap.set(_v.id, _v)
            }
        }

        getDataMap(): Map<number, test.TestBeRef> { return this._dataMap; }
        getDataList(): test.TestBeRef[] { return this._dataList; }

        get(key: number): test.TestBeRef | undefined {
            return this._dataMap.get(key);
        }

        resolve(tables: Tables) {
            for (let data of this._dataList) {
                data.resolve(tables)
            }
        }

    }
}


export namespace test {
    export class TbTestRef {
        private _dataMap: Map<number, test.TestRef>
        private _dataList: test.TestRef[]
        constructor(_buf_: ByteBuf) {
            this._dataMap = new Map<number, test.TestRef>()
            this._dataList = []
            for (let n = _buf_.readInt(); n > 0; n--) {
                let _v: test.TestRef
                _v = new test.TestRef(_buf_)
                this._dataList.push(_v)
                this._dataMap.set(_v.id, _v)
            }
        }

        getDataMap(): Map<number, test.TestRef> { return this._dataMap; }
        getDataList(): test.TestRef[] { return this._dataList; }

        get(key: number): test.TestRef | undefined {
            return this._dataMap.get(key);
        }

        resolve(tables: Tables) {
            for (let data of this._dataList) {
                data.resolve(tables)
            }
        }

    }
}


export namespace test {
    export class TbTestSize {
        private _dataMap: Map<number, test.TestSize>
        private _dataList: test.TestSize[]
        constructor(_buf_: ByteBuf) {
            this._dataMap = new Map<number, test.TestSize>()
            this._dataList = []
            for (let n = _buf_.readInt(); n > 0; n--) {
                let _v: test.TestSize
                _v = new test.TestSize(_buf_)
                this._dataList.push(_v)
                this._dataMap.set(_v.id, _v)
            }
        }

        getDataMap(): Map<number, test.TestSize> { return this._dataMap; }
        getDataList(): test.TestSize[] { return this._dataList; }

        get(key: number): test.TestSize | undefined {
            return this._dataMap.get(key);
        }

        resolve(tables: Tables) {
            for (let data of this._dataList) {
                data.resolve(tables)
            }
        }

    }
}


export namespace test {
    export class TbTestSet {
        private _dataMap: Map<number, test.TestSet>
        private _dataList: test.TestSet[]
        constructor(_buf_: ByteBuf) {
            this._dataMap = new Map<number, test.TestSet>()
            this._dataList = []
            for (let n = _buf_.readInt(); n > 0; n--) {
                let _v: test.TestSet
                _v = new test.TestSet(_buf_)
                this._dataList.push(_v)
                this._dataMap.set(_v.id, _v)
            }
        }

        getDataMap(): Map<number, test.TestSet> { return this._dataMap; }
        getDataList(): test.TestSet[] { return this._dataList; }

        get(key: number): test.TestSet | undefined {
            return this._dataMap.get(key);
        }

        resolve(tables: Tables) {
            for (let data of this._dataList) {
                data.resolve(tables)
            }
        }

    }
}


export namespace test {
    export class TbTestRange {
        private _dataMap: Map<number, test.TestRange>
        private _dataList: test.TestRange[]
        constructor(_buf_: ByteBuf) {
            this._dataMap = new Map<number, test.TestRange>()
            this._dataList = []
            for (let n = _buf_.readInt(); n > 0; n--) {
                let _v: test.TestRange
                _v = new test.TestRange(_buf_)
                this._dataList.push(_v)
                this._dataMap.set(_v.id, _v)
            }
        }

        getDataMap(): Map<number, test.TestRange> { return this._dataMap; }
        getDataList(): test.TestRange[] { return this._dataList; }

        get(key: number): test.TestRange | undefined {
            return this._dataMap.get(key);
        }

        resolve(tables: Tables) {
            for (let data of this._dataList) {
                data.resolve(tables)
            }
        }

    }
}


export namespace test {
    export class TbDetectCsvEncoding {
        private _dataMap: Map<number, test.DetectEncoding>
        private _dataList: test.DetectEncoding[]
        constructor(_buf_: ByteBuf) {
            this._dataMap = new Map<number, test.DetectEncoding>()
            this._dataList = []
            for (let n = _buf_.readInt(); n > 0; n--) {
                let _v: test.DetectEncoding
                _v = new test.DetectEncoding(_buf_)
                this._dataList.push(_v)
                this._dataMap.set(_v.id, _v)
            }
        }

        getDataMap(): Map<number, test.DetectEncoding> { return this._dataMap; }
        getDataList(): test.DetectEncoding[] { return this._dataList; }

        get(key: number): test.DetectEncoding | undefined {
            return this._dataMap.get(key);
        }

        resolve(tables: Tables) {
            for (let data of this._dataList) {
                data.resolve(tables)
            }
        }

    }
}


export namespace test {
    export class TbItem2 {
        private _dataMap: Map<number, test.ItemBase>
        private _dataList: test.ItemBase[]
        constructor(_buf_: ByteBuf) {
            this._dataMap = new Map<number, test.ItemBase>()
            this._dataList = []
            for (let n = _buf_.readInt(); n > 0; n--) {
                let _v: test.ItemBase
                _v = test.ItemBase.constructorFrom(_buf_)
                this._dataList.push(_v)
                this._dataMap.set(_v.id, _v)
            }
        }

        getDataMap(): Map<number, test.ItemBase> { return this._dataMap; }
        getDataList(): test.ItemBase[] { return this._dataList; }

        get(key: number): test.ItemBase | undefined {
            return this._dataMap.get(key);
        }

        resolve(tables: Tables) {
            for (let data of this._dataList) {
                data.resolve(tables)
            }
        }

    }
}


export namespace test {
    export class TbTestIndex {
        private _dataMap: Map<number, test.TestIndex>
        private _dataList: test.TestIndex[]
        constructor(_buf_: ByteBuf) {
            this._dataMap = new Map<number, test.TestIndex>()
            this._dataList = []
            for (let n = _buf_.readInt(); n > 0; n--) {
                let _v: test.TestIndex
                _v = new test.TestIndex(_buf_)
                this._dataList.push(_v)
                this._dataMap.set(_v.id, _v)
            }
        }

        getDataMap(): Map<number, test.TestIndex> { return this._dataMap; }
        getDataList(): test.TestIndex[] { return this._dataList; }

        get(key: number): test.TestIndex | undefined {
            return this._dataMap.get(key);
        }

        resolve(tables: Tables) {
            for (let data of this._dataList) {
                data.resolve(tables)
            }
        }

    }
}


export namespace test {
    export class TbTestMap {
        private _dataMap: Map<number, test.TestMap>
        private _dataList: test.TestMap[]
        constructor(_buf_: ByteBuf) {
            this._dataMap = new Map<number, test.TestMap>()
            this._dataList = []
            for (let n = _buf_.readInt(); n > 0; n--) {
                let _v: test.TestMap
                _v = new test.TestMap(_buf_)
                this._dataList.push(_v)
                this._dataMap.set(_v.id, _v)
            }
        }

        getDataMap(): Map<number, test.TestMap> { return this._dataMap; }
        getDataList(): test.TestMap[] { return this._dataList; }

        get(key: number): test.TestMap | undefined {
            return this._dataMap.get(key);
        }

        resolve(tables: Tables) {
            for (let data of this._dataList) {
                data.resolve(tables)
            }
        }

    }
}


export namespace test {
    export class TbExcelFromJson {
        private _dataMap: Map<number, test.ExcelFromJson>
        private _dataList: test.ExcelFromJson[]
        constructor(_buf_: ByteBuf) {
            this._dataMap = new Map<number, test.ExcelFromJson>()
            this._dataList = []
            for (let n = _buf_.readInt(); n > 0; n--) {
                let _v: test.ExcelFromJson
                _v = new test.ExcelFromJson(_buf_)
                this._dataList.push(_v)
                this._dataMap.set(_v.x4, _v)
            }
        }

        getDataMap(): Map<number, test.ExcelFromJson> { return this._dataMap; }
        getDataList(): test.ExcelFromJson[] { return this._dataList; }

        get(key: number): test.ExcelFromJson | undefined {
            return this._dataMap.get(key);
        }

        resolve(tables: Tables) {
            for (let data of this._dataList) {
                data.resolve(tables)
            }
        }

    }
}


export namespace test {
    export class TbCompositeJsonTable1 {
        private _dataMap: Map<number, test.CompositeJsonTable1>
        private _dataList: test.CompositeJsonTable1[]
        constructor(_buf_: ByteBuf) {
            this._dataMap = new Map<number, test.CompositeJsonTable1>()
            this._dataList = []
            for (let n = _buf_.readInt(); n > 0; n--) {
                let _v: test.CompositeJsonTable1
                _v = new test.CompositeJsonTable1(_buf_)
                this._dataList.push(_v)
                this._dataMap.set(_v.id, _v)
            }
        }

        getDataMap(): Map<number, test.CompositeJsonTable1> { return this._dataMap; }
        getDataList(): test.CompositeJsonTable1[] { return this._dataList; }

        get(key: number): test.CompositeJsonTable1 | undefined {
            return this._dataMap.get(key);
        }

        resolve(tables: Tables) {
            for (let data of this._dataList) {
                data.resolve(tables)
            }
        }

    }
}


export namespace test {
    export class TbCompositeJsonTable2 {
        private _dataMap: Map<number, test.CompositeJsonTable2>
        private _dataList: test.CompositeJsonTable2[]
        constructor(_buf_: ByteBuf) {
            this._dataMap = new Map<number, test.CompositeJsonTable2>()
            this._dataList = []
            for (let n = _buf_.readInt(); n > 0; n--) {
                let _v: test.CompositeJsonTable2
                _v = new test.CompositeJsonTable2(_buf_)
                this._dataList.push(_v)
                this._dataMap.set(_v.id, _v)
            }
        }

        getDataMap(): Map<number, test.CompositeJsonTable2> { return this._dataMap; }
        getDataList(): test.CompositeJsonTable2[] { return this._dataList; }

        get(key: number): test.CompositeJsonTable2 | undefined {
            return this._dataMap.get(key);
        }

        resolve(tables: Tables) {
            for (let data of this._dataList) {
                data.resolve(tables)
            }
        }

    }
}


export namespace test {
    export class TbCompositeJsonTable3 {

        private _data: test.CompositeJsonTable3
        constructor(_buf_: ByteBuf) {
            if (_buf_.readInt() != 1) throw new Error('table mode=one, but size != 1')
            this._data = new test.CompositeJsonTable3(_buf_)
        }

        getData(): test.CompositeJsonTable3 { return this._data; }

        get a(): number { return this._data.a; }
        get b(): number { return this._data.b; }

        resolve(tables: Tables) {
            this._data.resolve(tables)
        }

    }
}


export namespace test {
    export class TbExcelFromJsonMultiRow {
        private _dataMap: Map<number, test.ExcelFromJsonMultiRow>
        private _dataList: test.ExcelFromJsonMultiRow[]
        constructor(_buf_: ByteBuf) {
            this._dataMap = new Map<number, test.ExcelFromJsonMultiRow>()
            this._dataList = []
            for (let n = _buf_.readInt(); n > 0; n--) {
                let _v: test.ExcelFromJsonMultiRow
                _v = new test.ExcelFromJsonMultiRow(_buf_)
                this._dataList.push(_v)
                this._dataMap.set(_v.id, _v)
            }
        }

        getDataMap(): Map<number, test.ExcelFromJsonMultiRow> { return this._dataMap; }
        getDataList(): test.ExcelFromJsonMultiRow[] { return this._dataList; }

        get(key: number): test.ExcelFromJsonMultiRow | undefined {
            return this._dataMap.get(key);
        }

        resolve(tables: Tables) {
            for (let data of this._dataList) {
                data.resolve(tables)
            }
        }

    }
}


export namespace test {
    export class TbTestScriptableObject {
        private _dataMap: Map<number, test.TestScriptableObject>
        private _dataList: test.TestScriptableObject[]
        constructor(_buf_: ByteBuf) {
            this._dataMap = new Map<number, test.TestScriptableObject>()
            this._dataList = []
            for (let n = _buf_.readInt(); n > 0; n--) {
                let _v: test.TestScriptableObject
                _v = new test.TestScriptableObject(_buf_)
                this._dataList.push(_v)
                this._dataMap.set(_v.id, _v)
            }
        }

        getDataMap(): Map<number, test.TestScriptableObject> { return this._dataMap; }
        getDataList(): test.TestScriptableObject[] { return this._dataList; }

        get(key: number): test.TestScriptableObject | undefined {
            return this._dataMap.get(key);
        }

        resolve(tables: Tables) {
            for (let data of this._dataList) {
                data.resolve(tables)
            }
        }

    }
}


export namespace test {
    export class TbPath {
        private _dataMap: Map<number, test.Path>
        private _dataList: test.Path[]
        constructor(_buf_: ByteBuf) {
            this._dataMap = new Map<number, test.Path>()
            this._dataList = []
            for (let n = _buf_.readInt(); n > 0; n--) {
                let _v: test.Path
                _v = new test.Path(_buf_)
                this._dataList.push(_v)
                this._dataMap.set(_v.id, _v)
            }
        }

        getDataMap(): Map<number, test.Path> { return this._dataMap; }
        getDataList(): test.Path[] { return this._dataList; }

        get(key: number): test.Path | undefined {
            return this._dataMap.get(key);
        }

        resolve(tables: Tables) {
            for (let data of this._dataList) {
                data.resolve(tables)
            }
        }

    }
}


export namespace test {
    export class TbTestFieldAlias {
        private _dataMap: Map<number, test.TestFieldAlias>
        private _dataList: test.TestFieldAlias[]
        constructor(_buf_: ByteBuf) {
            this._dataMap = new Map<number, test.TestFieldAlias>()
            this._dataList = []
            for (let n = _buf_.readInt(); n > 0; n--) {
                let _v: test.TestFieldAlias
                _v = new test.TestFieldAlias(_buf_)
                this._dataList.push(_v)
                this._dataMap.set(_v.id, _v)
            }
        }

        getDataMap(): Map<number, test.TestFieldAlias> { return this._dataMap; }
        getDataList(): test.TestFieldAlias[] { return this._dataList; }

        get(key: number): test.TestFieldAlias | undefined {
            return this._dataMap.get(key);
        }

        resolve(tables: Tables) {
            for (let data of this._dataList) {
                data.resolve(tables)
            }
        }

    }
}


export namespace test {
    export class TbTestFieldVariant {
        private _dataMap: Map<number, test.TestFieldVariant>
        private _dataList: test.TestFieldVariant[]
        constructor(_buf_: ByteBuf) {
            this._dataMap = new Map<number, test.TestFieldVariant>()
            this._dataList = []
            for (let n = _buf_.readInt(); n > 0; n--) {
                let _v: test.TestFieldVariant
                _v = new test.TestFieldVariant(_buf_)
                this._dataList.push(_v)
                this._dataMap.set(_v.id, _v)
            }
        }

        getDataMap(): Map<number, test.TestFieldVariant> { return this._dataMap; }
        getDataList(): test.TestFieldVariant[] { return this._dataList; }

        get(key: number): test.TestFieldVariant | undefined {
            return this._dataMap.get(key);
        }

        resolve(tables: Tables) {
            for (let data of this._dataList) {
                data.resolve(tables)
            }
        }

    }
}


export namespace test {
    export class TbTestFieldVariant2 {
        private _dataMap: Map<number, test.TestFieldVariant2>
        private _dataList: test.TestFieldVariant2[]
        constructor(_buf_: ByteBuf) {
            this._dataMap = new Map<number, test.TestFieldVariant2>()
            this._dataList = []
            for (let n = _buf_.readInt(); n > 0; n--) {
                let _v: test.TestFieldVariant2
                _v = new test.TestFieldVariant2(_buf_)
                this._dataList.push(_v)
                this._dataMap.set(_v.id, _v)
            }
        }

        getDataMap(): Map<number, test.TestFieldVariant2> { return this._dataMap; }
        getDataList(): test.TestFieldVariant2[] { return this._dataList; }

        get(key: number): test.TestFieldVariant2 | undefined {
            return this._dataMap.get(key);
        }

        resolve(tables: Tables) {
            for (let data of this._dataList) {
                data.resolve(tables)
            }
        }

    }
}


export namespace test {
    export class TbTestMapper {
        private _dataMap: Map<number, test.TestMapper>
        private _dataList: test.TestMapper[]
        constructor(_buf_: ByteBuf) {
            this._dataMap = new Map<number, test.TestMapper>()
            this._dataList = []
            for (let n = _buf_.readInt(); n > 0; n--) {
                let _v: test.TestMapper
                _v = new test.TestMapper(_buf_)
                this._dataList.push(_v)
                this._dataMap.set(_v.id, _v)
            }
        }

        getDataMap(): Map<number, test.TestMapper> { return this._dataMap; }
        getDataList(): test.TestMapper[] { return this._dataList; }

        get(key: number): test.TestMapper | undefined {
            return this._dataMap.get(key);
        }

        resolve(tables: Tables) {
            for (let data of this._dataList) {
                data.resolve(tables)
            }
        }

    }
}


export namespace test {
    export class TbDefineFromExcel2 {
        private _dataMap: Map<number, test.DefineFromExcel2>
        private _dataList: test.DefineFromExcel2[]
        constructor(_buf_: ByteBuf) {
            this._dataMap = new Map<number, test.DefineFromExcel2>()
            this._dataList = []
            for (let n = _buf_.readInt(); n > 0; n--) {
                let _v: test.DefineFromExcel2
                _v = new test.DefineFromExcel2(_buf_)
                this._dataList.push(_v)
                this._dataMap.set(_v.id, _v)
            }
        }

        getDataMap(): Map<number, test.DefineFromExcel2> { return this._dataMap; }
        getDataList(): test.DefineFromExcel2[] { return this._dataList; }

        get(key: number): test.DefineFromExcel2 | undefined {
            return this._dataMap.get(key);
        }

        resolve(tables: Tables) {
            for (let data of this._dataList) {
                data.resolve(tables)
            }
        }

    }
}



export class TbAutoImport1 {
    private _dataMap: Map<number, AutoImport1>
    private _dataList: AutoImport1[]
    constructor(_buf_: ByteBuf) {
        this._dataMap = new Map<number, AutoImport1>()
        this._dataList = []
        for (let n = _buf_.readInt(); n > 0; n--) {
            let _v: AutoImport1
            _v = new AutoImport1(_buf_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, AutoImport1> { return this._dataMap; }
    getDataList(): AutoImport1[] { return this._dataList; }

    get(key: number): AutoImport1 | undefined {
        return this._dataMap.get(key);
    }

    resolve(tables: Tables) {
        for (let data of this._dataList) {
            data.resolve(tables)
        }
    }

}



export namespace test {
    export class TbAutoImport2 {
        private _dataMap: Map<number, test.AutoImport2>
        private _dataList: test.AutoImport2[]
        constructor(_buf_: ByteBuf) {
            this._dataMap = new Map<number, test.AutoImport2>()
            this._dataList = []
            for (let n = _buf_.readInt(); n > 0; n--) {
                let _v: test.AutoImport2
                _v = new test.AutoImport2(_buf_)
                this._dataList.push(_v)
                this._dataMap.set(_v.id, _v)
            }
        }

        getDataMap(): Map<number, test.AutoImport2> { return this._dataMap; }
        getDataList(): test.AutoImport2[] { return this._dataList; }

        get(key: number): test.AutoImport2 | undefined {
            return this._dataMap.get(key);
        }

        resolve(tables: Tables) {
            for (let data of this._dataList) {
                data.resolve(tables)
            }
        }

    }
}


export namespace test {
    export class TbTestFormat {
        private _dataMap: Map<number, test.TestFormat>
        private _dataList: test.TestFormat[]
        constructor(_buf_: ByteBuf) {
            this._dataMap = new Map<number, test.TestFormat>()
            this._dataList = []
            for (let n = _buf_.readInt(); n > 0; n--) {
                let _v: test.TestFormat
                _v = new test.TestFormat(_buf_)
                this._dataList.push(_v)
                this._dataMap.set(_v.id, _v)
            }
        }

        getDataMap(): Map<number, test.TestFormat> { return this._dataMap; }
        getDataList(): test.TestFormat[] { return this._dataList; }

        get(key: number): test.TestFormat | undefined {
            return this._dataMap.get(key);
        }

        resolve(tables: Tables) {
            for (let data of this._dataList) {
                data.resolve(tables)
            }
        }

    }
}



type ByteBufLoader = (file: string) => ByteBuf

export class Tables {
    private _TbBlackboard: ai.TbBlackboard
    get TbBlackboard(): ai.TbBlackboard { return this._TbBlackboard; }
    private _TbBehaviorTree: ai.TbBehaviorTree
    get TbBehaviorTree(): ai.TbBehaviorTree { return this._TbBehaviorTree; }
    private _TbGlobalConfig: common.TbGlobalConfig
    get TbGlobalConfig(): common.TbGlobalConfig { return this._TbGlobalConfig; }
    private _TbItem: item.TbItem
    /**
     * 道具表
     */
    get TbItem(): item.TbItem { return this._TbItem; }
    private _TbL10NDemo: l10n.TbL10NDemo
    get TbL10NDemo(): l10n.TbL10NDemo { return this._TbL10NDemo; }
    private _TbPatchDemo: l10n.TbPatchDemo
    get TbPatchDemo(): l10n.TbPatchDemo { return this._TbPatchDemo; }
    private _TbTestTag: tag.TbTestTag
    get TbTestTag(): tag.TbTestTag { return this._TbTestTag; }
    private _TbFullTypes: test.TbFullTypes
    get TbFullTypes(): test.TbFullTypes { return this._TbFullTypes; }
    private _TbSingleton: test.TbSingleton
    get TbSingleton(): test.TbSingleton { return this._TbSingleton; }
    private _TbNotIndexList: test.TbNotIndexList
    get TbNotIndexList(): test.TbNotIndexList { return this._TbNotIndexList; }
    private _TbMultiUnionIndexList: test.TbMultiUnionIndexList
    get TbMultiUnionIndexList(): test.TbMultiUnionIndexList { return this._TbMultiUnionIndexList; }
    private _TbMultiIndexList: test.TbMultiIndexList
    get TbMultiIndexList(): test.TbMultiIndexList { return this._TbMultiIndexList; }
    private _TbDataFromMisc: test.TbDataFromMisc
    get TbDataFromMisc(): test.TbDataFromMisc { return this._TbDataFromMisc; }
    private _TbMultiRowRecord: test.TbMultiRowRecord
    get TbMultiRowRecord(): test.TbMultiRowRecord { return this._TbMultiRowRecord; }
    private _TbTestMultiColumn: test.TbTestMultiColumn
    get TbTestMultiColumn(): test.TbTestMultiColumn { return this._TbTestMultiColumn; }
    private _TbMultiRowTitle: test.TbMultiRowTitle
    get TbMultiRowTitle(): test.TbMultiRowTitle { return this._TbMultiRowTitle; }
    private _TbTestNull: test.TbTestNull
    get TbTestNull(): test.TbTestNull { return this._TbTestNull; }
    private _TbDemoPrimitive: test.TbDemoPrimitive
    get TbDemoPrimitive(): test.TbDemoPrimitive { return this._TbDemoPrimitive; }
    private _TbTestString: test.TbTestString
    get TbTestString(): test.TbTestString { return this._TbTestString; }
    private _TbDemoGroup: test.TbDemoGroup
    get TbDemoGroup(): test.TbDemoGroup { return this._TbDemoGroup; }
    private _TbDemoGroup_C: test.TbDemoGroup_C
    get TbDemoGroup_C(): test.TbDemoGroup_C { return this._TbDemoGroup_C; }
    private _TbDemoGroup_S: test.TbDemoGroup_S
    get TbDemoGroup_S(): test.TbDemoGroup_S { return this._TbDemoGroup_S; }
    private _TbDemoGroup_E: test.TbDemoGroup_E
    get TbDemoGroup_E(): test.TbDemoGroup_E { return this._TbDemoGroup_E; }
    private _TbTestGlobal: test.TbTestGlobal
    get TbTestGlobal(): test.TbTestGlobal { return this._TbTestGlobal; }
    private _TbTestBeRef: test.TbTestBeRef
    get TbTestBeRef(): test.TbTestBeRef { return this._TbTestBeRef; }
    private _TbTestBeRef2: test.TbTestBeRef2
    get TbTestBeRef2(): test.TbTestBeRef2 { return this._TbTestBeRef2; }
    private _TbTestRef: test.TbTestRef
    get TbTestRef(): test.TbTestRef { return this._TbTestRef; }
    private _TbTestSize: test.TbTestSize
    get TbTestSize(): test.TbTestSize { return this._TbTestSize; }
    private _TbTestSet: test.TbTestSet
    get TbTestSet(): test.TbTestSet { return this._TbTestSet; }
    private _TbTestRange: test.TbTestRange
    get TbTestRange(): test.TbTestRange { return this._TbTestRange; }
    private _TbDetectCsvEncoding: test.TbDetectCsvEncoding
    get TbDetectCsvEncoding(): test.TbDetectCsvEncoding { return this._TbDetectCsvEncoding; }
    private _TbItem2: test.TbItem2
    get TbItem2(): test.TbItem2 { return this._TbItem2; }
    private _TbTestIndex: test.TbTestIndex
    get TbTestIndex(): test.TbTestIndex { return this._TbTestIndex; }
    private _TbTestMap: test.TbTestMap
    get TbTestMap(): test.TbTestMap { return this._TbTestMap; }
    private _TbExcelFromJson: test.TbExcelFromJson
    get TbExcelFromJson(): test.TbExcelFromJson { return this._TbExcelFromJson; }
    private _TbCompositeJsonTable1: test.TbCompositeJsonTable1
    get TbCompositeJsonTable1(): test.TbCompositeJsonTable1 { return this._TbCompositeJsonTable1; }
    private _TbCompositeJsonTable2: test.TbCompositeJsonTable2
    get TbCompositeJsonTable2(): test.TbCompositeJsonTable2 { return this._TbCompositeJsonTable2; }
    private _TbCompositeJsonTable3: test.TbCompositeJsonTable3
    get TbCompositeJsonTable3(): test.TbCompositeJsonTable3 { return this._TbCompositeJsonTable3; }
    private _TbExcelFromJsonMultiRow: test.TbExcelFromJsonMultiRow
    get TbExcelFromJsonMultiRow(): test.TbExcelFromJsonMultiRow { return this._TbExcelFromJsonMultiRow; }
    private _TbTestScriptableObject: test.TbTestScriptableObject
    get TbTestScriptableObject(): test.TbTestScriptableObject { return this._TbTestScriptableObject; }
    private _TbPath: test.TbPath
    get TbPath(): test.TbPath { return this._TbPath; }
    private _TbTestFieldAlias: test.TbTestFieldAlias
    get TbTestFieldAlias(): test.TbTestFieldAlias { return this._TbTestFieldAlias; }
    private _TbTestFieldVariant: test.TbTestFieldVariant
    get TbTestFieldVariant(): test.TbTestFieldVariant { return this._TbTestFieldVariant; }
    private _TbTestFieldVariant2: test.TbTestFieldVariant2
    get TbTestFieldVariant2(): test.TbTestFieldVariant2 { return this._TbTestFieldVariant2; }
    private _TbTestMapper: test.TbTestMapper
    get TbTestMapper(): test.TbTestMapper { return this._TbTestMapper; }
    private _TbDefineFromExcel2: test.TbDefineFromExcel2
    get TbDefineFromExcel2(): test.TbDefineFromExcel2 { return this._TbDefineFromExcel2; }
    private _TbAutoImport1: TbAutoImport1
    get TbAutoImport1(): TbAutoImport1 { return this._TbAutoImport1; }
    private _TbAutoImport2: test.TbAutoImport2
    get TbAutoImport2(): test.TbAutoImport2 { return this._TbAutoImport2; }
    private _TbTestFormat: test.TbTestFormat
    get TbTestFormat(): test.TbTestFormat { return this._TbTestFormat; }

    static getTableNames(): string[] {
        let names: string[] = [];
        names.push('ai_tbblackboard');
        names.push('ai_tbbehaviortree');
        names.push('common_tbglobalconfig');
        names.push('item_tbitem');
        names.push('l10n_tbl10ndemo');
        names.push('l10n_tbpatchdemo');
        names.push('tag_tbtesttag');
        names.push('test_tbfulltypes');
        names.push('test_tbsingleton');
        names.push('test_tbnotindexlist');
        names.push('test_tbmultiunionindexlist');
        names.push('test_tbmultiindexlist');
        names.push('test_tbdatafrommisc');
        names.push('test_tbmultirowrecord');
        names.push('test_tbtestmulticolumn');
        names.push('test_tbmultirowtitle');
        names.push('test_tbtestnull');
        names.push('test_tbdemoprimitive');
        names.push('test_tbteststring');
        names.push('test_tbdemogroup');
        names.push('test_tbdemogroup_c');
        names.push('test_tbdemogroup_s');
        names.push('test_tbdemogroup_e');
        names.push('test_tbtestglobal');
        names.push('test_tbtestberef');
        names.push('test_tbtestberef2');
        names.push('test_tbtestref');
        names.push('test_tbtestsize');
        names.push('test_tbtestset');
        names.push('test_tbtestrange');
        names.push('test_tbdetectcsvencoding');
        names.push('test_tbitem2');
        names.push('test_tbtestindex');
        names.push('test_tbtestmap');
        names.push('test_tbexcelfromjson');
        names.push('test_tbcompositejsontable1');
        names.push('test_tbcompositejsontable2');
        names.push('test_tbcompositejsontable3');
        names.push('test_tbexcelfromjsonmultirow');
        names.push('test_tbtestscriptableobject');
        names.push('test_tbpath');
        names.push('test_tbtestfieldalias');
        names.push('test_tbtestfieldvariant');
        names.push('test_tbtestfieldvariant2');
        names.push('test_tbtestmapper');
        names.push('test_tbdefinefromexcel2');
        names.push('tbautoimport1');
        names.push('test_tbautoimport2');
        names.push('test_tbtestformat');
        return names;
    }

    constructor(loader: ByteBufLoader) {
        this._TbBlackboard = new ai.TbBlackboard(loader('ai_tbblackboard'))
        this._TbBehaviorTree = new ai.TbBehaviorTree(loader('ai_tbbehaviortree'))
        this._TbGlobalConfig = new common.TbGlobalConfig(loader('common_tbglobalconfig'))
        this._TbItem = new item.TbItem(loader('item_tbitem'))
        this._TbL10NDemo = new l10n.TbL10NDemo(loader('l10n_tbl10ndemo'))
        this._TbPatchDemo = new l10n.TbPatchDemo(loader('l10n_tbpatchdemo'))
        this._TbTestTag = new tag.TbTestTag(loader('tag_tbtesttag'))
        this._TbFullTypes = new test.TbFullTypes(loader('test_tbfulltypes'))
        this._TbSingleton = new test.TbSingleton(loader('test_tbsingleton'))
        this._TbNotIndexList = new test.TbNotIndexList(loader('test_tbnotindexlist'))
        this._TbMultiUnionIndexList = new test.TbMultiUnionIndexList(loader('test_tbmultiunionindexlist'))
        this._TbMultiIndexList = new test.TbMultiIndexList(loader('test_tbmultiindexlist'))
        this._TbDataFromMisc = new test.TbDataFromMisc(loader('test_tbdatafrommisc'))
        this._TbMultiRowRecord = new test.TbMultiRowRecord(loader('test_tbmultirowrecord'))
        this._TbTestMultiColumn = new test.TbTestMultiColumn(loader('test_tbtestmulticolumn'))
        this._TbMultiRowTitle = new test.TbMultiRowTitle(loader('test_tbmultirowtitle'))
        this._TbTestNull = new test.TbTestNull(loader('test_tbtestnull'))
        this._TbDemoPrimitive = new test.TbDemoPrimitive(loader('test_tbdemoprimitive'))
        this._TbTestString = new test.TbTestString(loader('test_tbteststring'))
        this._TbDemoGroup = new test.TbDemoGroup(loader('test_tbdemogroup'))
        this._TbDemoGroup_C = new test.TbDemoGroup_C(loader('test_tbdemogroup_c'))
        this._TbDemoGroup_S = new test.TbDemoGroup_S(loader('test_tbdemogroup_s'))
        this._TbDemoGroup_E = new test.TbDemoGroup_E(loader('test_tbdemogroup_e'))
        this._TbTestGlobal = new test.TbTestGlobal(loader('test_tbtestglobal'))
        this._TbTestBeRef = new test.TbTestBeRef(loader('test_tbtestberef'))
        this._TbTestBeRef2 = new test.TbTestBeRef2(loader('test_tbtestberef2'))
        this._TbTestRef = new test.TbTestRef(loader('test_tbtestref'))
        this._TbTestSize = new test.TbTestSize(loader('test_tbtestsize'))
        this._TbTestSet = new test.TbTestSet(loader('test_tbtestset'))
        this._TbTestRange = new test.TbTestRange(loader('test_tbtestrange'))
        this._TbDetectCsvEncoding = new test.TbDetectCsvEncoding(loader('test_tbdetectcsvencoding'))
        this._TbItem2 = new test.TbItem2(loader('test_tbitem2'))
        this._TbTestIndex = new test.TbTestIndex(loader('test_tbtestindex'))
        this._TbTestMap = new test.TbTestMap(loader('test_tbtestmap'))
        this._TbExcelFromJson = new test.TbExcelFromJson(loader('test_tbexcelfromjson'))
        this._TbCompositeJsonTable1 = new test.TbCompositeJsonTable1(loader('test_tbcompositejsontable1'))
        this._TbCompositeJsonTable2 = new test.TbCompositeJsonTable2(loader('test_tbcompositejsontable2'))
        this._TbCompositeJsonTable3 = new test.TbCompositeJsonTable3(loader('test_tbcompositejsontable3'))
        this._TbExcelFromJsonMultiRow = new test.TbExcelFromJsonMultiRow(loader('test_tbexcelfromjsonmultirow'))
        this._TbTestScriptableObject = new test.TbTestScriptableObject(loader('test_tbtestscriptableobject'))
        this._TbPath = new test.TbPath(loader('test_tbpath'))
        this._TbTestFieldAlias = new test.TbTestFieldAlias(loader('test_tbtestfieldalias'))
        this._TbTestFieldVariant = new test.TbTestFieldVariant(loader('test_tbtestfieldvariant'))
        this._TbTestFieldVariant2 = new test.TbTestFieldVariant2(loader('test_tbtestfieldvariant2'))
        this._TbTestMapper = new test.TbTestMapper(loader('test_tbtestmapper'))
        this._TbDefineFromExcel2 = new test.TbDefineFromExcel2(loader('test_tbdefinefromexcel2'))
        this._TbAutoImport1 = new TbAutoImport1(loader('tbautoimport1'))
        this._TbAutoImport2 = new test.TbAutoImport2(loader('test_tbautoimport2'))
        this._TbTestFormat = new test.TbTestFormat(loader('test_tbtestformat'))

        this._TbBlackboard.resolve(this)
        this._TbBehaviorTree.resolve(this)
        this._TbGlobalConfig.resolve(this)
        this._TbItem.resolve(this)
        this._TbL10NDemo.resolve(this)
        this._TbPatchDemo.resolve(this)
        this._TbTestTag.resolve(this)
        this._TbFullTypes.resolve(this)
        this._TbSingleton.resolve(this)
        this._TbNotIndexList.resolve(this)
        this._TbMultiUnionIndexList.resolve(this)
        this._TbMultiIndexList.resolve(this)
        this._TbDataFromMisc.resolve(this)
        this._TbMultiRowRecord.resolve(this)
        this._TbTestMultiColumn.resolve(this)
        this._TbMultiRowTitle.resolve(this)
        this._TbTestNull.resolve(this)
        this._TbDemoPrimitive.resolve(this)
        this._TbTestString.resolve(this)
        this._TbDemoGroup.resolve(this)
        this._TbDemoGroup_C.resolve(this)
        this._TbDemoGroup_S.resolve(this)
        this._TbDemoGroup_E.resolve(this)
        this._TbTestGlobal.resolve(this)
        this._TbTestBeRef.resolve(this)
        this._TbTestBeRef2.resolve(this)
        this._TbTestRef.resolve(this)
        this._TbTestSize.resolve(this)
        this._TbTestSet.resolve(this)
        this._TbTestRange.resolve(this)
        this._TbDetectCsvEncoding.resolve(this)
        this._TbItem2.resolve(this)
        this._TbTestIndex.resolve(this)
        this._TbTestMap.resolve(this)
        this._TbExcelFromJson.resolve(this)
        this._TbCompositeJsonTable1.resolve(this)
        this._TbCompositeJsonTable2.resolve(this)
        this._TbCompositeJsonTable3.resolve(this)
        this._TbExcelFromJsonMultiRow.resolve(this)
        this._TbTestScriptableObject.resolve(this)
        this._TbPath.resolve(this)
        this._TbTestFieldAlias.resolve(this)
        this._TbTestFieldVariant.resolve(this)
        this._TbTestFieldVariant2.resolve(this)
        this._TbTestMapper.resolve(this)
        this._TbDefineFromExcel2.resolve(this)
        this._TbAutoImport1.resolve(this)
        this._TbAutoImport2.resolve(this)
        this._TbTestFormat.resolve(this)
    }
}

