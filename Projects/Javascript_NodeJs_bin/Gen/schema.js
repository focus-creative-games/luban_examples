
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


export const AiEExecutor = Object.freeze({
    CLIENT: 0,
    SERVER: 1,
});

export const AiEFinishMode = Object.freeze({
    IMMEDIATE: 0,
    DELAYED: 1,
});

export const AiEFlowAbortMode = Object.freeze({
    NONE: 0,
    LOWER_PRIORITY: 1,
    SELF: 2,
    BOTH: 3,
});

export const AiEKeyType = Object.freeze({
    BOOL: 1,
    INT: 2,
    FLOAT: 3,
    STRING: 4,
    VECTOR: 5,
    ROTATOR: 6,
    NAME: 7,
    CLASS1: 8,
    ENUM1: 9,
    OBJECT: 10,
});

export const AiENotifyObserverMode = Object.freeze({
    ON_VALUE_CHANGE: 0,
    ON_RESULT_CHANGE: 1,
});

export const AiEOperator = Object.freeze({
    IS_EQUAL_TO: 0,
    IS_NOT_EQUAL_TO: 1,
    IS_LESS_THAN: 2,
    IS_LESS_THAN_OR_EQUAL_TO: 3,
    IS_GREAT_THAN: 4,
    IS_GREAT_THAN_OR_EQUAL_TO: 5,
    CONTAINS: 6,
    NOT_CONTAINS: 7,
});

export const AudioType = Object.freeze({
    UNKNOWN: 0,
    ACC: 1,
    AIFF: 2,
});

export const CommonEBoolOperator = Object.freeze({
    AND: 0,
    OR: 1,
});

export const ItemEClothersStarQualityType = Object.freeze({
    /**
     * 一星
     */
    ONE: 1,
    /**
     * 二星
     */
    TWO: 2,
    /**
     * 三星
     */
    THREE: 3,
    /**
     * 四星
     */
    FOUR: 4,
    /**
     * 五星
     */
    FIVE: 5,
    /**
     * 六星
     */
    SIX: 6,
    /**
     * 七星
     */
    SEVEN: 7,
    /**
     * 八星
     */
    EIGHT: 8,
    /**
     * 九星
     */
    NINE: 9,
    /**
     * 十星
     */
    TEN: 10,
});

export const ItemEClothersTag = Object.freeze({
    /**
     * 防晒
     */
    FANG_SHAI: 1,
    /**
     * 舞者
     */
    WU_ZHE: 2,
});

export const ItemEClothesHidePartType = Object.freeze({
    /**
     * 胸部
     */
    CHEST: 0,
    /**
     * 手
     */
    HEAD: 1,
    /**
     * 脊柱上
     */
    SPINE_UPPER: 2,
    /**
     * 脊柱下
     */
    SPINE_LOWER: 3,
    /**
     * 臀部
     */
    HIP: 4,
    /**
     * 腿上
     */
    LEG_UPPER: 5,
    /**
     * 腿中
     */
    LEG_MIDDLE: 6,
    /**
     * 腿下
     */
    LEG_LOWER: 7,
});

export const ItemEClothesPropertyType = Object.freeze({
    /**
     * 简约
     */
    JIAN_YUE: 1,
    /**
     * 华丽
     */
    HUA_LI: 2,
    /**
     * 可爱
     */
    KE_AI: 3,
    /**
     * 成熟
     */
    CHENG_SHU: 4,
    /**
     * 活泼
     */
    HUO_PO: 5,
    /**
     * 优雅
     */
    YOU_YA: 6,
    /**
     * 清纯
     */
    QING_CHUN: 7,
    /**
     * 性感
     */
    XING_GAN: 8,
    /**
     * 清凉
     */
    QING_LIANG: 9,
    /**
     * 保暖
     */
    BAO_NUAN: 10,
});

export const ItemECurrencyType = Object.freeze({
    /**
     * 钻石
     */
    DIAMOND: 1,
    /**
     * 金币
     */
    GOLD: 2,
    /**
     * 银币
     */
    SILVER: 3,
    /**
     * 经验
     */
    EXP: 4,
    /**
     * 能量点
     */
    POWER_POINT: 5,
});

/**
 * 道具品质
 */
export const ItemEItemQuality = Object.freeze({
    /**
     * 白
     */
    WHITE: 0,
    /**
     * 绿
     */
    GREEN: 1,
    /**
     * 蓝
     */
    BLUE: 2,
    /**
     * 紫
     */
    PURPLE: 3,
    /**
     * 金
     */
    GOLDEN: 4,
});

export const ItemEMajorType = Object.freeze({
    /**
     * 货币
     */
    CURRENCY: 1,
    /**
     * 服装
     */
    CLOTH: 2,
    /**
     * 任务
     */
    QUEST: 3,
    /**
     * 消耗品
     */
    CONSUMABLES: 4,
    /**
     * 宝箱
     */
    TREASURE_BOX: 5,
    /**
     * 成就和称谓
     */
    ACHIEVEMENT_AND_TITLE: 6,
    /**
     * 头像框
     */
    HEAD_FRAME: 7,
    /**
     * 语音
     */
    VOICE: 8,
    /**
     * 动作
     */
    ACTION: 9,
    /**
     * 扩容道具
     */
    EXPANSION: 10,
    /**
     * 制作材料
     */
    MATERIAL: 11,
});

export const ItemEMinorType = Object.freeze({
    /**
     * 钻石
     */
    DIAMOND: 101,
    /**
     * 金币
     */
    GOLD: 102,
    /**
     * 银币
     */
    SILVER: 103,
    /**
     * 经验
     */
    EXP: 104,
    /**
     * 能量点
     */
    POWER_POINT: 105,
    /**
     * 发型
     */
    HAIR_STYLE: 210,
    /**
     * 外套
     */
    COAT: 220,
    /**
     * 上衣
     */
    UPPER_JACKET: 230,
    /**
     * 裤子
     */
    TROUSERS: 241,
    /**
     * 裙子
     */
    SKIRT: 242,
    /**
     * 袜子
     */
    SOCKS: 250,
    /**
     * 鞋子
     */
    SHOES: 260,
    /**
     * 发饰
     */
    HAIR_ACCESSORY: 271,
    /**
     * 帽子
     */
    HAT: 272,
    /**
     * 耳饰
     */
    EARRING: 273,
    /**
     * 颈饰
     */
    NECKLACE: 274,
    /**
     * 腕饰
     */
    BRACELET: 275,
    /**
     * 发箍
     */
    HAIR_CLASP: 276,
    /**
     * 手套
     */
    GLOVE: 277,
    /**
     * 手持物
     */
    HANDHELD_OBJECT: 278,
    /**
     * 特殊
     */
    SPECIAL: 279,
    /**
     * 底妆
     */
    BASE_COSMETIC: 281,
    /**
     * 眉妆
     */
    EYEBROW_COSMETIC: 282,
    /**
     * 睫毛
     */
    EYELASH: 283,
    /**
     * 美瞳
     */
    COSMETIC_CONTACT_LENSES: 284,
    /**
     * 唇妆
     */
    LIP_COSMETIC: 285,
    /**
     * 肤色
     */
    SKIN_COLOR: 286,
    /**
     * 连衣裙
     */
    ONE_PIECE_DRESS: 290,
    /**
     * 换装场景
     */
    SWITCH_CLOTHES_SCENE: 291,
    /**
     * 任务道具
     */
    QUEST: 301,
    /**
     * 投掷物
     */
    CAST: 401,
    /**
     * 刀剑
     */
    SWORD: 421,
    /**
     * 弓箭
     */
    BOW_ARROW: 422,
    /**
     * 法杖
     */
    WANDS: 423,
    /**
     * 特殊工具
     */
    SPECIAL_TOOL: 424,
    /**
     * 食物
     */
    FOOD: 403,
    /**
     * 宝箱
     */
    TREASURE_BOX: 501,
    /**
     * 钥匙
     */
    KEY: 502,
    /**
     * 多选一宝箱
     */
    MULTI_CHOOSE_TREASURE_BOX: 503,
    /**
     * 成就相关
     */
    ACHIEVEMENT: 601,
    /**
     * 称谓相关
     */
    TITLE: 602,
    /**
     * 头像框
     */
    AVATAR_FRAME: 701,
    /**
     * 语音
     */
    VOICE: 801,
    /**
     * 特殊待机动作
     */
    IDLE_POSE: 901,
    /**
     * 拍照动作
     */
    PHOTO_POSE: 902,
    /**
     * 背包
     */
    BAG: 1001,
    /**
     * 好友数量
     */
    FRIEND_CAPACITY: 1002,
    /**
     * 制作材料
     */
    CONSTRUCTION_MATERIAL: 1101,
    /**
     * 设计图纸
     */
    DESIGN_DRAWING: 1102,
});

export const ItemEUseType = Object.freeze({
    /**
     * 手动
     */
    MANUAL: 0,
    /**
     * 自动
     */
    AUTO: 1,
});

export const TestAccessFlag = Object.freeze({
    WRITE: 1,
    READ: 2,
    TRUNCATE: 4,
    NEW: 8,
    READ_WRITE: 3,
});

export const TestAudioType2 = Object.freeze({
    UNKNOWN: 0,
    ACC: 1,
    AIFF: 2,
});

export const TestDemoEnum = Object.freeze({
    NONE: 0,
    /**
     * aa
     */
    A: 1,
    /**
     * bb
     */
    B: 2,
    /**
     * cc
     */
    C: 4,
    /**
     * dd
     */
    D: 5,
    Any: 6,
});

export const TestDemoFlag = Object.freeze({
    A: 1,
    B: 2,
    C: 4,
    D: 8,
});

export const TestETestEmptyEnum = Object.freeze({
});

export const TestETestEmptyEnum2 = Object.freeze({
    SMALL_THAN_256: 255,
    X_256: 256,
    X_257: 257,
});

export const TestETestQuality = Object.freeze({
    /**
     * 最高品质
     */
    A: 1,
    /**
     * 黑色的
     */
    B: 2,
    /**
     * 蓝色的
     */
    C: 3,
    /**
     * 最差品质
     */
    D: 4,
});

export const TestETestUeType = Object.freeze({
    /**
     * 白
     */
    WHITE: 0,
    BLACK: 1,
});






export class AiBehaviorTree {

    constructor(_buf_) {
        this.id = _buf_.readInt();
        this.name = _buf_.readString();
        this.desc = _buf_.readString();
        this.blackboardId = _buf_.readString();
        this.root = AiComposeNode.constructorFrom(_buf_);
    }

    resolve(tables) {
        
        
        
        this.blackboardId_ref = tables.TbBlackboard.get(this.blackboardId)
        this.root?.resolve(tables);
    }
}



export class AiBlackboard {

    constructor(_buf_) {
        this.name = _buf_.readString();
        this.desc = _buf_.readString();
        this.parentName = _buf_.readString();
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.keys = []; for(let i = 0 ; i < n ; i++) { let _e0; _e0 = new AiBlackboardKey(_buf_); this.keys.push(_e0);}};
    }

    resolve(tables) {
        
        
        this.parentName_ref = tables.TbBlackboard.get(this.parentName)
        for (let _e of this.keys) { _e?.resolve(tables); }
    }
}



export class AiBlackboardKey {

    constructor(_buf_) {
        this.name = _buf_.readString();
        this.desc = _buf_.readString();
        this.isStatic = _buf_.readBool();
        this.keyType = _buf_.readInt();
        this.typeClassName = _buf_.readString();
    }

    resolve(tables) {
        
        
        
        
        
    }
}



export class AiKeyData {
    static constructorFrom(_buf_) {
        switch (_buf_.readInt()) {
            case -719747885: return new AiFloatKeyData(_buf_);
            case -342751904: return new AiIntKeyData(_buf_);
            case -307888654: return new AiStringKeyData(_buf_);
            case 1517269500: return new AiBlackboardKeyData(_buf_);
            default: throw new Error();
        }
    }

    constructor(_buf_) {
    }

    resolve(tables) {
    }
}



export class AiBlackboardKeyData extends AiKeyData {

    constructor(_buf_) {
        super(_buf_);
        this.value = _buf_.readString();
    }

    resolve(tables) {
        super.resolve(tables);
        
    }
}



export class AiFloatKeyData extends AiKeyData {

    constructor(_buf_) {
        super(_buf_);
        this.value = _buf_.readFloat();
    }

    resolve(tables) {
        super.resolve(tables);
        
    }
}



export class AiIntKeyData extends AiKeyData {

    constructor(_buf_) {
        super(_buf_);
        this.value = _buf_.readInt();
    }

    resolve(tables) {
        super.resolve(tables);
        
    }
}



export class AiStringKeyData extends AiKeyData {

    constructor(_buf_) {
        super(_buf_);
        this.value = _buf_.readString();
    }

    resolve(tables) {
        super.resolve(tables);
        
    }
}



export class AiKeyQueryOperator {
    static constructorFrom(_buf_) {
        switch (_buf_.readInt()) {
            case -843729664: return new AiIsSet2(_buf_);
            case 790736255: return new AiIsNotSet(_buf_);
            case -979891605: return new AiBinaryOperator(_buf_);
            default: throw new Error();
        }
    }

    constructor(_buf_) {
    }

    resolve(tables) {
    }
}



export class AiBinaryOperator extends AiKeyQueryOperator {

    constructor(_buf_) {
        super(_buf_);
        this.oper = _buf_.readInt();
        this.data = AiKeyData.constructorFrom(_buf_);
    }

    resolve(tables) {
        super.resolve(tables);
        
        this.data?.resolve(tables);
    }
}



export class AiIsNotSet extends AiKeyQueryOperator {

    constructor(_buf_) {
        super(_buf_);
    }

    resolve(tables) {
        super.resolve(tables);
    }
}



export class AiIsSet2 extends AiKeyQueryOperator {

    constructor(_buf_) {
        super(_buf_);
    }

    resolve(tables) {
        super.resolve(tables);
    }
}



export class AiNode {
    static constructorFrom(_buf_) {
        switch (_buf_.readInt()) {
            case 1812449155: return new AiUeSetDefaultFocus(_buf_);
            case 990693812: return new AiExecuteTimeStatistic(_buf_);
            case 1601247918: return new AiChooseTarget(_buf_);
            case 1195270745: return new AiKeepFaceTarget(_buf_);
            case -999247644: return new AiGetOwnerPlayer(_buf_);
            case -61887372: return new AiUpdateDailyBehaviorProps(_buf_);
            case -513308166: return new AiUeLoop(_buf_);
            case -951439423: return new AiUeCooldown(_buf_);
            case 338469720: return new AiUeTimeLimit(_buf_);
            case -315297507: return new AiUeBlackboard(_buf_);
            case 195054574: return new AiUeForceSuccess(_buf_);
            case 1255972344: return new AiIsAtLocation(_buf_);
            case -1207170283: return new AiDistanceLessThan(_buf_);
            case -1789006105: return new AiSequence(_buf_);
            case -1946981627: return new AiSelector(_buf_);
            case -1952582529: return new AiSimpleParallel(_buf_);
            case -512994101: return new AiUeWait(_buf_);
            case 1215378271: return new AiUeWaitBlackboardTime(_buf_);
            case 514987779: return new AiMoveToTarget(_buf_);
            case -918812268: return new AiChooseSkill(_buf_);
            case -2140042998: return new AiMoveToRandomLocation(_buf_);
            case -969953113: return new AiMoveToLocation(_buf_);
            case 1357409728: return new AiDebugPrint(_buf_);
            default: throw new Error();
        }
    }

    constructor(_buf_) {
        this.id = _buf_.readInt();
        this.nodeName = _buf_.readString();
    }

    resolve(tables) {
        
        
    }
}



export class AiDecorator extends AiNode {
    static constructorFrom(_buf_) {
        switch (_buf_.readInt()) {
            case -513308166: return new AiUeLoop(_buf_);
            case -951439423: return new AiUeCooldown(_buf_);
            case 338469720: return new AiUeTimeLimit(_buf_);
            case -315297507: return new AiUeBlackboard(_buf_);
            case 195054574: return new AiUeForceSuccess(_buf_);
            case 1255972344: return new AiIsAtLocation(_buf_);
            case -1207170283: return new AiDistanceLessThan(_buf_);
            default: throw new Error();
        }
    }

    constructor(_buf_) {
        super(_buf_);
        this.flowAbortMode = _buf_.readInt();
    }

    resolve(tables) {
        super.resolve(tables);
        
    }
}



export class AiDistanceLessThan extends AiDecorator {

    constructor(_buf_) {
        super(_buf_);
        this.actor1Key = _buf_.readString();
        this.actor2Key = _buf_.readString();
        this.distance = _buf_.readFloat();
        this.reverseResult = _buf_.readBool();
    }

    resolve(tables) {
        super.resolve(tables);
        
        
        
        
    }
}



export class AiIsAtLocation extends AiDecorator {

    constructor(_buf_) {
        super(_buf_);
        this.acceptableRadius = _buf_.readFloat();
        this.keyboardKey = _buf_.readString();
        this.inverseCondition = _buf_.readBool();
    }

    resolve(tables) {
        super.resolve(tables);
        
        
        
    }
}



export class AiUeBlackboard extends AiDecorator {

    constructor(_buf_) {
        super(_buf_);
        this.notifyObserver = _buf_.readInt();
        this.blackboardKey = _buf_.readString();
        this.keyQuery = AiKeyQueryOperator.constructorFrom(_buf_);
    }

    resolve(tables) {
        super.resolve(tables);
        
        
        this.keyQuery?.resolve(tables);
    }
}



export class AiUeCooldown extends AiDecorator {

    constructor(_buf_) {
        super(_buf_);
        this.cooldownTime = _buf_.readFloat();
    }

    resolve(tables) {
        super.resolve(tables);
        
    }
}



export class AiUeForceSuccess extends AiDecorator {

    constructor(_buf_) {
        super(_buf_);
    }

    resolve(tables) {
        super.resolve(tables);
    }
}



export class AiUeLoop extends AiDecorator {

    constructor(_buf_) {
        super(_buf_);
        this.numLoops = _buf_.readInt();
        this.infiniteLoop = _buf_.readBool();
        this.infiniteLoopTimeoutTime = _buf_.readFloat();
    }

    resolve(tables) {
        super.resolve(tables);
        
        
        
    }
}



export class AiUeTimeLimit extends AiDecorator {

    constructor(_buf_) {
        super(_buf_);
        this.limitTime = _buf_.readFloat();
    }

    resolve(tables) {
        super.resolve(tables);
        
    }
}



export class AiFlowNode extends AiNode {
    static constructorFrom(_buf_) {
        switch (_buf_.readInt()) {
            case -1789006105: return new AiSequence(_buf_);
            case -1946981627: return new AiSelector(_buf_);
            case -1952582529: return new AiSimpleParallel(_buf_);
            case -512994101: return new AiUeWait(_buf_);
            case 1215378271: return new AiUeWaitBlackboardTime(_buf_);
            case 514987779: return new AiMoveToTarget(_buf_);
            case -918812268: return new AiChooseSkill(_buf_);
            case -2140042998: return new AiMoveToRandomLocation(_buf_);
            case -969953113: return new AiMoveToLocation(_buf_);
            case 1357409728: return new AiDebugPrint(_buf_);
            default: throw new Error();
        }
    }

    constructor(_buf_) {
        super(_buf_);
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.decorators = []; for(let i = 0 ; i < n ; i++) { let _e0; _e0 = AiDecorator.constructorFrom(_buf_); this.decorators.push(_e0);}};
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.services = []; for(let i = 0 ; i < n ; i++) { let _e0; _e0 = AiService.constructorFrom(_buf_); this.services.push(_e0);}};
    }

    resolve(tables) {
        super.resolve(tables);
        for (let _e of this.decorators) { _e?.resolve(tables); }
        for (let _e of this.services) { _e?.resolve(tables); }
    }
}



export class AiComposeNode extends AiFlowNode {
    static constructorFrom(_buf_) {
        switch (_buf_.readInt()) {
            case -1789006105: return new AiSequence(_buf_);
            case -1946981627: return new AiSelector(_buf_);
            case -1952582529: return new AiSimpleParallel(_buf_);
            default: throw new Error();
        }
    }

    constructor(_buf_) {
        super(_buf_);
    }

    resolve(tables) {
        super.resolve(tables);
    }
}



export class AiSelector extends AiComposeNode {

    constructor(_buf_) {
        super(_buf_);
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.children = []; for(let i = 0 ; i < n ; i++) { let _e0; _e0 = AiFlowNode.constructorFrom(_buf_); this.children.push(_e0);}};
    }

    resolve(tables) {
        super.resolve(tables);
        for (let _e of this.children) { _e?.resolve(tables); }
    }
}



export class AiSequence extends AiComposeNode {

    constructor(_buf_) {
        super(_buf_);
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.children = []; for(let i = 0 ; i < n ; i++) { let _e0; _e0 = AiFlowNode.constructorFrom(_buf_); this.children.push(_e0);}};
    }

    resolve(tables) {
        super.resolve(tables);
        for (let _e of this.children) { _e?.resolve(tables); }
    }
}



export class AiSimpleParallel extends AiComposeNode {

    constructor(_buf_) {
        super(_buf_);
        this.finishMode = _buf_.readInt();
        this.mainTask = AiTask.constructorFrom(_buf_);
        this.backgroundNode = AiFlowNode.constructorFrom(_buf_);
    }

    resolve(tables) {
        super.resolve(tables);
        
        this.mainTask?.resolve(tables);
        this.backgroundNode?.resolve(tables);
    }
}



export class AiTask extends AiFlowNode {
    static constructorFrom(_buf_) {
        switch (_buf_.readInt()) {
            case -512994101: return new AiUeWait(_buf_);
            case 1215378271: return new AiUeWaitBlackboardTime(_buf_);
            case 514987779: return new AiMoveToTarget(_buf_);
            case -918812268: return new AiChooseSkill(_buf_);
            case -2140042998: return new AiMoveToRandomLocation(_buf_);
            case -969953113: return new AiMoveToLocation(_buf_);
            case 1357409728: return new AiDebugPrint(_buf_);
            default: throw new Error();
        }
    }

    constructor(_buf_) {
        super(_buf_);
        this.ignoreRestartSelf = _buf_.readBool();
    }

    resolve(tables) {
        super.resolve(tables);
        
    }
}



export class AiChooseSkill extends AiTask {

    constructor(_buf_) {
        super(_buf_);
        this.targetActorKey = _buf_.readString();
        this.resultSkillIdKey = _buf_.readString();
    }

    resolve(tables) {
        super.resolve(tables);
        
        
    }
}



export class AiDebugPrint extends AiTask {

    constructor(_buf_) {
        super(_buf_);
        this.text = _buf_.readString();
    }

    resolve(tables) {
        super.resolve(tables);
        
    }
}



export class AiMoveToLocation extends AiTask {

    constructor(_buf_) {
        super(_buf_);
        this.acceptableRadius = _buf_.readFloat();
    }

    resolve(tables) {
        super.resolve(tables);
        
    }
}



export class AiMoveToRandomLocation extends AiTask {

    constructor(_buf_) {
        super(_buf_);
        this.originPositionKey = _buf_.readString();
        this.radius = _buf_.readFloat();
    }

    resolve(tables) {
        super.resolve(tables);
        
        
    }
}



export class AiMoveToTarget extends AiTask {

    constructor(_buf_) {
        super(_buf_);
        this.targetActorKey = _buf_.readString();
        this.acceptableRadius = _buf_.readFloat();
    }

    resolve(tables) {
        super.resolve(tables);
        
        
    }
}



export class AiUeWait extends AiTask {

    constructor(_buf_) {
        super(_buf_);
        this.waitTime = _buf_.readFloat();
        this.randomDeviation = _buf_.readFloat();
    }

    resolve(tables) {
        super.resolve(tables);
        
        
    }
}



export class AiUeWaitBlackboardTime extends AiTask {

    constructor(_buf_) {
        super(_buf_);
        this.blackboardKey = _buf_.readString();
    }

    resolve(tables) {
        super.resolve(tables);
        
    }
}



export class AiService extends AiNode {
    static constructorFrom(_buf_) {
        switch (_buf_.readInt()) {
            case 1812449155: return new AiUeSetDefaultFocus(_buf_);
            case 990693812: return new AiExecuteTimeStatistic(_buf_);
            case 1601247918: return new AiChooseTarget(_buf_);
            case 1195270745: return new AiKeepFaceTarget(_buf_);
            case -999247644: return new AiGetOwnerPlayer(_buf_);
            case -61887372: return new AiUpdateDailyBehaviorProps(_buf_);
            default: throw new Error();
        }
    }

    constructor(_buf_) {
        super(_buf_);
    }

    resolve(tables) {
        super.resolve(tables);
    }
}



export class AiChooseTarget extends AiService {

    constructor(_buf_) {
        super(_buf_);
        this.resultTargetKey = _buf_.readString();
    }

    resolve(tables) {
        super.resolve(tables);
        
    }
}



export class AiExecuteTimeStatistic extends AiService {

    constructor(_buf_) {
        super(_buf_);
    }

    resolve(tables) {
        super.resolve(tables);
    }
}



export class AiGetOwnerPlayer extends AiService {

    constructor(_buf_) {
        super(_buf_);
        this.playerActorKey = _buf_.readString();
    }

    resolve(tables) {
        super.resolve(tables);
        
    }
}



export class AiKeepFaceTarget extends AiService {

    constructor(_buf_) {
        super(_buf_);
        this.targetActorKey = _buf_.readString();
    }

    resolve(tables) {
        super.resolve(tables);
        
    }
}



export class AiUeSetDefaultFocus extends AiService {

    constructor(_buf_) {
        super(_buf_);
        this.keyboardKey = _buf_.readString();
    }

    resolve(tables) {
        super.resolve(tables);
        
    }
}



export class AiUpdateDailyBehaviorProps extends AiService {

    constructor(_buf_) {
        super(_buf_);
        this.satietyKey = _buf_.readString();
        this.energyKey = _buf_.readString();
        this.moodKey = _buf_.readString();
        this.satietyLowerThresholdKey = _buf_.readString();
        this.satietyUpperThresholdKey = _buf_.readString();
        this.energyLowerThresholdKey = _buf_.readString();
        this.energyUpperThresholdKey = _buf_.readString();
        this.moodLowerThresholdKey = _buf_.readString();
        this.moodUpperThresholdKey = _buf_.readString();
    }

    resolve(tables) {
        super.resolve(tables);
        
        
        
        
        
        
        
        
        
    }
}



export class AutoImport1 {

    constructor(_buf_) {
        this.id = _buf_.readInt();
        this.x1 = _buf_.readBool();
        this.x5 = _buf_.readLongAsNumber();
        this.x6 = _buf_.readFloat();
        this.x8 = _buf_.readInt();
        this.x10 = _buf_.readString();
        this.x13 = _buf_.readInt();
        this.x132 = _buf_.readInt();
        this.x14 = TestDemoDynamic.constructorFrom(_buf_);
        this.x15 = TestShape.constructorFrom(_buf_);
        this.v2 = new vec2(_buf_);
        this.t1 = _buf_.readLongAsNumber();
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.k1 = []; for(let i = 0 ; i < n ; i++) { let _e0 ;_e0 = _buf_.readInt(); this.k1.push(_e0);}};
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.k2 = []; for(let i = 0 ; i < n ; i++) { let _e0 ;_e0 = _buf_.readInt(); this.k2.push(_e0);}};
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.k8 = new Map(); for(let i = 0 ; i < n ; i++) { let _k0; _k0 = _buf_.readInt();  let _v0;  _v0 = _buf_.readInt(); this.k8.set(_k0, _v0);  } };
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.k9 = []; for(let i = 0 ; i < n ; i++) { let _e0; _e0 = new TestDemoE2(_buf_); this.k9.push(_e0);}};
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.k10 = []; for(let i = 0 ; i < n ; i++) { let _e0; _e0 = new vec3(_buf_); this.k10.push(_e0);}};
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.k11 = []; for(let i = 0 ; i < n ; i++) { let _e0; _e0 = new vec4(_buf_); this.k11.push(_e0);}};
        if(_buf_.readBool()) { this.v11 = new vec3(_buf_) } else { this.v11 = null; };
    }

    resolve(tables) {
        
        
        
        
        
        
        
        
        this.x14?.resolve(tables);
        this.x15?.resolve(tables);
        
        
        
        
        
        
        
        
        
    }
}



export class CommonDateTimeRange {

    constructor(_buf_) {
        if(_buf_.readBool()) { this.startTime = _buf_.readLongAsNumber() } else { this.startTime = null; };
        if(_buf_.readBool()) { this.endTime = _buf_.readLongAsNumber() } else { this.endTime = null; };
    }

    resolve(tables) {
        
        
    }
}



export class CommonFloatRange {

    constructor(_buf_) {
        this.min = _buf_.readFloat();
        this.max = _buf_.readFloat();
    }

    resolve(tables) {
        
        
    }
}



export class CommonGlobalConfig {

    constructor(_buf_) {
        this.x1 = _buf_.readInt();
        this.x2 = _buf_.readInt();
        this.x3 = _buf_.readInt();
        this.x4 = _buf_.readInt();
        this.x5 = _buf_.readInt();
        this.x6 = _buf_.readInt();
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.x7 = []; for(let i = 0 ; i < n ; i++) { let _e0; _e0 = _buf_.readInt(); this.x7.push(_e0);}};
    }

    resolve(tables) {
        
        
        
        
        
        
        
    }
}



export class CommonIntRange {

    constructor(_buf_) {
        this.min = _buf_.readInt();
        this.max = _buf_.readInt();
    }

    resolve(tables) {
        
        
    }
}



export class CommonOneDayTimeRange {

    constructor(_buf_) {
        this.startTime = new CommonTimeOfDay(_buf_);
        this.endTime = new CommonTimeOfDay(_buf_);
    }

    resolve(tables) {
        this.startTime?.resolve(tables);
        this.endTime?.resolve(tables);
    }
}



export class CommonTimeOfDay {

    constructor(_buf_) {
        this.hour = _buf_.readInt();
        this.minute = _buf_.readInt();
        this.second = _buf_.readInt();
    }

    resolve(tables) {
        
        
        
    }
}



/**
 * 道具
 */
export class ItemItem {

    constructor(_buf_) {
        this.id = _buf_.readInt();
        this.name = _buf_.readString();
        this.majorType = _buf_.readInt();
        this.minorType = _buf_.readInt();
        this.maxPileNum = _buf_.readInt();
        this.quality = _buf_.readInt();
        this.icon = _buf_.readString();
        this.iconBackgroud = _buf_.readString();
        this.iconMask = _buf_.readString();
        this.desc = _buf_.readString();
        this.showOrder = _buf_.readInt();
    }

    resolve(tables) {
        
        
        
        
        
        
        
        
        
        
        
    }
}



export class L10nL10NDemo {

    constructor(_buf_) {
        this.id = _buf_.readInt();
        this.text = _buf_.readString();
    }

    resolve(tables) {
        
        
    }
}



export class L10nPatchDemo {

    constructor(_buf_) {
        this.id = _buf_.readInt();
        this.value = _buf_.readInt();
    }

    resolve(tables) {
        
        
    }
}



export class TagTestTag {

    constructor(_buf_) {
        this.id = _buf_.readInt();
        this.value = _buf_.readString();
    }

    resolve(tables) {
        
        
    }
}



export class TestAutoImport2 {

    constructor(_buf_) {
        this.id = _buf_.readInt();
        this.x1 = _buf_.readBool();
        this.x5 = _buf_.readLongAsNumber();
        this.x6 = _buf_.readFloat();
        this.x8 = _buf_.readInt();
        this.x10 = _buf_.readString();
        this.x13 = _buf_.readInt();
        this.x132 = _buf_.readInt();
        this.x14 = TestDemoDynamic.constructorFrom(_buf_);
        this.x15 = TestShape.constructorFrom(_buf_);
        this.v2 = new vec2(_buf_);
        this.t1 = _buf_.readLongAsNumber();
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.k1 = []; for(let i = 0 ; i < n ; i++) { let _e0 ;_e0 = _buf_.readInt(); this.k1.push(_e0);}};
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.k2 = []; for(let i = 0 ; i < n ; i++) { let _e0 ;_e0 = _buf_.readInt(); this.k2.push(_e0);}};
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.k8 = new Map(); for(let i = 0 ; i < n ; i++) { let _k0; _k0 = _buf_.readInt();  let _v0;  _v0 = _buf_.readInt(); this.k8.set(_k0, _v0);  } };
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.k9 = []; for(let i = 0 ; i < n ; i++) { let _e0; _e0 = new TestDemoE2(_buf_); this.k9.push(_e0);}};
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.k10 = []; for(let i = 0 ; i < n ; i++) { let _e0; _e0 = new vec3(_buf_); this.k10.push(_e0);}};
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.k11 = []; for(let i = 0 ; i < n ; i++) { let _e0; _e0 = new vec4(_buf_); this.k11.push(_e0);}};
        if(_buf_.readBool()) { this.v11 = new vec3(_buf_) } else { this.v11 = null; };
    }

    resolve(tables) {
        
        
        
        
        
        
        
        
        this.x14?.resolve(tables);
        this.x15?.resolve(tables);
        
        
        
        
        
        
        
        
        
    }
}



export class TestCompactString {

    constructor(_buf_) {
        this.id = _buf_.readInt();
        this.s2 = _buf_.readString();
        this.s3 = _buf_.readString();
    }

    resolve(tables) {
        
        
        
    }
}



export class TestCompositeJsonTable1 {

    constructor(_buf_) {
        this.id = _buf_.readInt();
        this.x = _buf_.readString();
    }

    resolve(tables) {
        
        
    }
}



export class TestCompositeJsonTable2 {

    constructor(_buf_) {
        this.id = _buf_.readInt();
        this.y = _buf_.readInt();
    }

    resolve(tables) {
        
        
    }
}



export class TestCompositeJsonTable3 {

    constructor(_buf_) {
        this.a = _buf_.readInt();
        this.b = _buf_.readInt();
    }

    resolve(tables) {
        
        
    }
}



export class TestDateTimeRange {

    constructor(_buf_) {
        this.startTime = _buf_.readLongAsNumber();
        this.endTime = _buf_.readLongAsNumber();
    }

    resolve(tables) {
        
        
    }
}



export class TestDefineFromExcel2 {

    constructor(_buf_) {
        this.id = _buf_.readInt();
        this.x1 = _buf_.readBool();
        this.x5 = _buf_.readLongAsNumber();
        this.x6 = _buf_.readFloat();
        this.x8 = _buf_.readInt();
        this.x10 = _buf_.readString();
        this.x13 = _buf_.readInt();
        this.x132 = _buf_.readInt();
        this.x133 = _buf_.readInt();
        this.x14 = TestDemoDynamic.constructorFrom(_buf_);
        this.x15 = TestShape.constructorFrom(_buf_);
        this.v2 = new vec2(_buf_);
        this.t1 = _buf_.readLongAsNumber();
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.k1 = []; for(let i = 0 ; i < n ; i++) { let _e0 ;_e0 = _buf_.readInt(); this.k1.push(_e0);}};
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.k2 = []; for(let i = 0 ; i < n ; i++) { let _e0 ;_e0 = _buf_.readInt(); this.k2.push(_e0);}};
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.k8 = new Map(); for(let i = 0 ; i < n ; i++) { let _k0; _k0 = _buf_.readInt();  let _v0;  _v0 = _buf_.readInt(); this.k8.set(_k0, _v0);  } };
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.k9 = []; for(let i = 0 ; i < n ; i++) { let _e0; _e0 = new TestDemoE2(_buf_); this.k9.push(_e0);}};
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.k10 = []; for(let i = 0 ; i < n ; i++) { let _e0; _e0 = new vec3(_buf_); this.k10.push(_e0);}};
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.k11 = []; for(let i = 0 ; i < n ; i++) { let _e0; _e0 = new vec4(_buf_); this.k11.push(_e0);}};
        if(_buf_.readBool()) { this.v11 = new vec3(_buf_) } else { this.v11 = null; };
    }

    resolve(tables) {
        
        
        
        
        
        
        
        
        
        this.x14?.resolve(tables);
        this.x15?.resolve(tables);
        
        
        
        
        
        
        
        
        
    }
}



export class TestDemoDynamic {
    static constructorFrom(_buf_) {
        switch (_buf_.readInt()) {
            case -2138341747: return new TestDemoD2(_buf_);
            case -2138341717: return new TestDemoE1(_buf_);
            case -989153243: return new TestLoginRoleInfo(_buf_);
            case -2138341744: return new TestDemoD5(_buf_);
            default: throw new Error();
        }
    }

    constructor(_buf_) {
        this.x1 = _buf_.readInt();
    }

    resolve(tables) {
        
    }
}



export class TestDemoD2 extends TestDemoDynamic {

    constructor(_buf_) {
        super(_buf_);
        this.x2 = _buf_.readInt();
    }

    resolve(tables) {
        super.resolve(tables);
        
    }
}



export class TestDemoD3 extends TestDemoDynamic {
    static constructorFrom(_buf_) {
        switch (_buf_.readInt()) {
            case -2138341717: return new TestDemoE1(_buf_);
            case -989153243: return new TestLoginRoleInfo(_buf_);
            default: throw new Error();
        }
    }

    constructor(_buf_) {
        super(_buf_);
        this.x3 = _buf_.readInt();
    }

    resolve(tables) {
        super.resolve(tables);
        
    }
}



export class TestDemoE1 extends TestDemoD3 {

    constructor(_buf_) {
        super(_buf_);
        this.x4 = _buf_.readInt();
    }

    resolve(tables) {
        super.resolve(tables);
        
    }
}



export class TestLoginRoleInfo extends TestDemoD3 {

    constructor(_buf_) {
        super(_buf_);
        this.roleId = _buf_.readLongAsNumber();
    }

    resolve(tables) {
        super.resolve(tables);
        
    }
}



export class TestDemoD5 extends TestDemoDynamic {

    constructor(_buf_) {
        super(_buf_);
        this.time = new TestDateTimeRange(_buf_);
    }

    resolve(tables) {
        super.resolve(tables);
        this.time?.resolve(tables);
    }
}



export class TestDemoE2 {

    constructor(_buf_) {
        if(_buf_.readBool()) { this.y1 = _buf_.readInt() } else { this.y1 = null; };
        this.y2 = _buf_.readBool();
    }

    resolve(tables) {
        
        
    }
}



export class TestDemoExplicitType {

    constructor(_buf_) {
        this.x1 = _buf_.readByte();
        this.x2 = _buf_.readShort();
        this.x3 = _buf_.readInt();
        this.x4 = _buf_.readLongAsNumber();
        this.x5 = _buf_.readFloat();
        this.x6 = _buf_.readDouble();
        this.x7 = _buf_.readLong();
    }

    resolve(tables) {
        
        
        
        
        
        
        
    }
}



export class TestDemoGroup {

    constructor(_buf_) {
        this.id = _buf_.readInt();
        this.x1 = _buf_.readInt();
        this.x2 = _buf_.readInt();
        this.x3 = _buf_.readInt();
        this.x4 = _buf_.readInt();
        this.x5 = new TestInnerGroup(_buf_);
    }

    resolve(tables) {
        
        this.x1_ref = tables.TbDemoGroup_C.get(this.x1)
        this.x2_ref = tables.TbDemoGroup_S.get(this.x2)
        this.x3_ref = tables.TbDemoGroup_E.get(this.x3)
        
        this.x5?.resolve(tables);
    }
}



export class TestDemoPrimitiveTypesTable {

    constructor(_buf_) {
        this.x1 = _buf_.readBool();
        this.x2 = _buf_.readByte();
        this.x3 = _buf_.readShort();
        this.x4 = _buf_.readInt();
        this.x5 = _buf_.readLongAsNumber();
        this.x6 = _buf_.readFloat();
        this.x7 = _buf_.readDouble();
        this.s1 = _buf_.readString();
        this.s2 = _buf_.readString();
        this.v2 = new vec2(_buf_);
        this.v3 = new vec3(_buf_);
        this.v4 = new vec4(_buf_);
        this.t1 = _buf_.readLongAsNumber();
    }

    resolve(tables) {
        
        
        
        
        
        
        
        
        
        
        
        
        
    }
}



export class TestDemoSingletonType {

    constructor(_buf_) {
        this.id = _buf_.readInt();
        this.name = _buf_.readString();
        this.date = TestDemoDynamic.constructorFrom(_buf_);
    }

    resolve(tables) {
        
        
        this.date?.resolve(tables);
    }
}



export class TestDemoType1 {

    constructor(_buf_) {
        this.x1 = _buf_.readInt();
    }

    resolve(tables) {
        
    }
}



export class TestDemoType2 {

    constructor(_buf_) {
        this.x4 = _buf_.readInt();
        this.x1 = _buf_.readBool();
        this.x2 = _buf_.readByte();
        this.x3 = _buf_.readShort();
        this.x5 = _buf_.readLongAsNumber();
        this.x6 = _buf_.readFloat();
        this.x7 = _buf_.readDouble();
        this.x80 = _buf_.readShort();
        this.x8 = _buf_.readInt();
        this.x9 = _buf_.readLongAsNumber();
        this.x10 = _buf_.readString();
        this.x12 = new TestDemoType1(_buf_);
        this.x13 = _buf_.readInt();
        this.x14 = TestDemoDynamic.constructorFrom(_buf_);
        this.s1 = _buf_.readString();
        this.t1 = _buf_.readLongAsNumber();
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.k1 = []; for(let i = 0 ; i < n ; i++) { let _e0 ;_e0 = _buf_.readInt(); this.k1.push(_e0);}};
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.k2 = []; for(let i = 0 ; i < n ; i++) { let _e0; _e0 = _buf_.readInt(); this.k2.push(_e0);}};
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.k5 = new Set(); for(let i = 0 ; i < n ; i++) { let _e0; _e0 = _buf_.readInt(); this.k5.add(_e0);}};
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.k8 = new Map(); for(let i = 0 ; i < n ; i++) { let _k0; _k0 = _buf_.readInt();  let _v0;  _v0 = _buf_.readInt(); this.k8.set(_k0, _v0);  } };
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.k9 = []; for(let i = 0 ; i < n ; i++) { let _e0; _e0 = new TestDemoE2(_buf_); this.k9.push(_e0);}};
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.k15 = []; for(let i = 0 ; i < n ; i++) { let _e0 ;_e0 = TestDemoDynamic.constructorFrom(_buf_); this.k15.push(_e0);}};
    }

    resolve(tables) {
        
        
        
        
        
        
        
        
        
        
        
        this.x12?.resolve(tables);
        
        this.x14?.resolve(tables);
        
        
        
        
        
        
        
        for (let _e of this.k15) { _e?.resolve(tables); }
    }
}



export class TestDetectEncoding {

    constructor(_buf_) {
        this.id = _buf_.readInt();
        this.name = _buf_.readString();
    }

    resolve(tables) {
        
        
    }
}



export class TestExcelFromJson {

    constructor(_buf_) {
        this.x4 = _buf_.readInt();
        this.x1 = _buf_.readBool();
        this.x5 = _buf_.readLongAsNumber();
        this.x6 = _buf_.readFloat();
        this.s1 = _buf_.readString();
        this.s2 = _buf_.readString();
        this.t1 = _buf_.readLongAsNumber();
        this.x12 = new TestDemoType1(_buf_);
        this.x13 = _buf_.readInt();
        this.x14 = TestDemoDynamic.constructorFrom(_buf_);
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.k1 = []; for(let i = 0 ; i < n ; i++) { let _e0 ;_e0 = _buf_.readInt(); this.k1.push(_e0);}};
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.k8 = new Map(); for(let i = 0 ; i < n ; i++) { let _k0; _k0 = _buf_.readInt();  let _v0;  _v0 = _buf_.readInt(); this.k8.set(_k0, _v0);  } };
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.k9 = []; for(let i = 0 ; i < n ; i++) { let _e0; _e0 = new TestDemoE2(_buf_); this.k9.push(_e0);}};
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.k15 = []; for(let i = 0 ; i < n ; i++) { let _e0 ;_e0 = TestDemoDynamic.constructorFrom(_buf_); this.k15.push(_e0);}};
    }

    resolve(tables) {
        
        
        
        
        
        
        
        this.x12?.resolve(tables);
        
        this.x14?.resolve(tables);
        
        
        
        for (let _e of this.k15) { _e?.resolve(tables); }
    }
}



export class TestExcelFromJsonMultiRow {

    constructor(_buf_) {
        this.id = _buf_.readInt();
        this.x = _buf_.readInt();
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.items = []; for(let i = 0 ; i < n ; i++) { let _e0; _e0 = new TestTestRow(_buf_); this.items.push(_e0);}};
    }

    resolve(tables) {
        
        
        for (let _e of this.items) { _e?.resolve(tables); }
    }
}



export class TestFoo {

    constructor(_buf_) {
        this.y1 = _buf_.readInt();
        this.y2 = _buf_.readInt();
        this.y3 = _buf_.readInt();
    }

    resolve(tables) {
        
        
        
    }
}



export class TestH1 {

    constructor(_buf_) {
        this.y2 = new TestH2(_buf_);
        this.y3 = _buf_.readInt();
    }

    resolve(tables) {
        this.y2?.resolve(tables);
        
    }
}



export class TestH2 {

    constructor(_buf_) {
        this.z2 = _buf_.readInt();
        this.z3 = _buf_.readInt();
    }

    resolve(tables) {
        
        
    }
}



export class TestInnerGroup {

    constructor(_buf_) {
        this.y1 = _buf_.readInt();
        this.y2 = _buf_.readInt();
        this.y3 = _buf_.readInt();
        this.y4 = _buf_.readInt();
    }

    resolve(tables) {
        
        
        
        
    }
}



export class TestItemBase {
    static constructorFrom(_buf_) {
        switch (_buf_.readInt()) {
            case -1226641649: return new TestItem(_buf_);
            case -76837102: return new TestEquipment(_buf_);
            case -625155649: return new TestDecorator(_buf_);
            default: throw new Error();
        }
    }

    constructor(_buf_) {
        this.id = _buf_.readInt();
        this.name = _buf_.readString();
        this.desc = _buf_.readString();
    }

    resolve(tables) {
        
        
        
    }
}



export class TestDecorator extends TestItemBase {

    constructor(_buf_) {
        super(_buf_);
        this.duration = _buf_.readInt();
    }

    resolve(tables) {
        super.resolve(tables);
        
    }
}



export class TestEquipment extends TestItemBase {

    constructor(_buf_) {
        super(_buf_);
        this.attr = _buf_.readInt();
        this.value = _buf_.readInt();
    }

    resolve(tables) {
        super.resolve(tables);
        
        
    }
}



export class TestItem extends TestItemBase {

    constructor(_buf_) {
        super(_buf_);
        this.num = _buf_.readInt();
        this.price = _buf_.readInt();
    }

    resolve(tables) {
        super.resolve(tables);
        
        
    }
}



export class TestMultiIndexList {

    constructor(_buf_) {
        this.id1 = _buf_.readInt();
        this.id2 = _buf_.readLongAsNumber();
        this.id3 = _buf_.readString();
        this.num = _buf_.readInt();
        this.desc = _buf_.readString();
    }

    resolve(tables) {
        
        
        
        
        
    }
}



export class TestMultiRowRecord {

    constructor(_buf_) {
        this.id = _buf_.readInt();
        this.name = _buf_.readString();
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.oneRows = []; for(let i = 0 ; i < n ; i++) { let _e0; _e0 = new TestMultiRowType1(_buf_); this.oneRows.push(_e0);}};
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.multiRows1 = []; for(let i = 0 ; i < n ; i++) { let _e0; _e0 = new TestMultiRowType1(_buf_); this.multiRows1.push(_e0);}};
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.multiRows2 = []; for(let i = 0 ; i < n ; i++) { let _e0 ;_e0 = new TestMultiRowType1(_buf_); this.multiRows2.push(_e0);}};
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.multiRows4 = new Map(); for(let i = 0 ; i < n ; i++) { let _k0; _k0 = _buf_.readInt();  let _v0;  _v0 = new TestMultiRowType2(_buf_); this.multiRows4.set(_k0, _v0);  } };
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.multiRows5 = []; for(let i = 0 ; i < n ; i++) { let _e0; _e0 = new TestMultiRowType3(_buf_); this.multiRows5.push(_e0);}};
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.multiRows6 = new Map(); for(let i = 0 ; i < n ; i++) { let _k0; _k0 = _buf_.readInt();  let _v0;  _v0 = new TestMultiRowType2(_buf_); this.multiRows6.set(_k0, _v0);  } };
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.multiRows7 = new Map(); for(let i = 0 ; i < n ; i++) { let _k0; _k0 = _buf_.readInt();  let _v0;  _v0 = _buf_.readInt(); this.multiRows7.set(_k0, _v0);  } };
    }

    resolve(tables) {
        
        
        for (let _e of this.oneRows) { _e?.resolve(tables); }
        for (let _e of this.multiRows1) { _e?.resolve(tables); }
        for (let _e of this.multiRows2) { _e?.resolve(tables); }
        for (let [_, _e] of this.multiRows4) { _e?.resolve(tables); }
        for (let _e of this.multiRows5) { _e?.resolve(tables); }
        for (let [_, _e] of this.multiRows6) { _e?.resolve(tables); }
        
    }
}



export class TestMultiRowTitle {

    constructor(_buf_) {
        this.id = _buf_.readInt();
        this.name = _buf_.readString();
        this.x1 = new TestH1(_buf_);
        if(_buf_.readBool()) { this.x20 = new TestH2(_buf_) } else { this.x20 = null; };
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.x2 = []; for(let i = 0 ; i < n ; i++) { let _e0; _e0 = new TestH2(_buf_); this.x2.push(_e0);}};
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.x3 = []; for(let i = 0 ; i < n ; i++) { let _e0 ;_e0 = new TestH2(_buf_); this.x3.push(_e0);}};
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.x4 = []; for(let i = 0 ; i < n ; i++) { let _e0 ;_e0 = new TestH2(_buf_); this.x4.push(_e0);}};
    }

    resolve(tables) {
        
        
        this.x1?.resolve(tables);
        this.x20?.resolve(tables);
        for (let _e of this.x2) { _e?.resolve(tables); }
        for (let _e of this.x3) { _e?.resolve(tables); }
        for (let _e of this.x4) { _e?.resolve(tables); }
    }
}



export class TestMultiRowType1 {

    constructor(_buf_) {
        this.id = _buf_.readInt();
        this.x = _buf_.readInt();
    }

    resolve(tables) {
        
        
    }
}



export class TestMultiRowType2 {

    constructor(_buf_) {
        this.id = _buf_.readInt();
        this.x = _buf_.readInt();
        this.y = _buf_.readFloat();
    }

    resolve(tables) {
        
        
        
    }
}



export class TestMultiRowType3 {

    constructor(_buf_) {
        this.id = _buf_.readInt();
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.items = []; for(let i = 0 ; i < n ; i++) { let _e0; _e0 = new TestMultiRowType1(_buf_); this.items.push(_e0);}};
    }

    resolve(tables) {
        
        for (let _e of this.items) { _e?.resolve(tables); }
    }
}



export class TestMultiUnionIndexList {

    constructor(_buf_) {
        this.id1 = _buf_.readInt();
        this.id2 = _buf_.readLongAsNumber();
        this.id3 = _buf_.readString();
        this.num = _buf_.readInt();
        this.desc = _buf_.readString();
    }

    resolve(tables) {
        
        
        
        
        
    }
}



export class TestNotIndexList {

    constructor(_buf_) {
        this.x = _buf_.readInt();
        this.y = _buf_.readInt();
    }

    resolve(tables) {
        
        
    }
}



export class TestPath {

    constructor(_buf_) {
        this.id = _buf_.readInt();
        this.res = _buf_.readString();
    }

    resolve(tables) {
        
        
    }
}



export class TestRefDynamicBase {
    static constructorFrom(_buf_) {
        switch (_buf_.readInt()) {
            case 1963260263: return new TestRefBean(_buf_);
            default: throw new Error();
        }
    }

    constructor(_buf_) {
        this.x = _buf_.readInt();
    }

    resolve(tables) {
        this.x_ref = tables.TbTestBeRef.get(this.x)
    }
}



export class TestRefBean extends TestRefDynamicBase {

    constructor(_buf_) {
        super(_buf_);
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.arr = []; for(let i = 0 ; i < n ; i++) { let _e0; _e0 = _buf_.readInt(); this.arr.push(_e0);}};
    }

    resolve(tables) {
        super.resolve(tables);
        
    }
}



export class TestSepBean1 {

    constructor(_buf_) {
        this.a = _buf_.readInt();
        this.b = _buf_.readInt();
        this.c = _buf_.readString();
    }

    resolve(tables) {
        
        
        
    }
}



export class TestSepVector {

    constructor(_buf_) {
        this.x = _buf_.readInt();
        this.y = _buf_.readInt();
        this.z = _buf_.readInt();
    }

    resolve(tables) {
        
        
        
    }
}



export class TestShape {
    static constructorFrom(_buf_) {
        switch (_buf_.readInt()) {
            case 2131829196: return new TestCircle(_buf_);
            case 694982337: return new Test2Rectangle(_buf_);
            default: throw new Error();
        }
    }

    constructor(_buf_) {
    }

    resolve(tables) {
    }
}



/**
 * 圆
 */
export class TestCircle extends TestShape {

    constructor(_buf_) {
        super(_buf_);
        this.radius = _buf_.readFloat();
    }

    resolve(tables) {
        super.resolve(tables);
        
    }
}



/**
 * 矩形
 */
export class Test2Rectangle extends TestShape {

    constructor(_buf_) {
        super(_buf_);
        this.width = _buf_.readFloat();
        this.height = _buf_.readFloat();
    }

    resolve(tables) {
        super.resolve(tables);
        
        
    }
}



export class TestTest3 {

    constructor(_buf_) {
        this.x = _buf_.readInt();
        this.y = _buf_.readInt();
    }

    resolve(tables) {
        
        
    }
}



export class TestTestBeRef {

    constructor(_buf_) {
        this.id = _buf_.readInt();
        this.count = _buf_.readInt();
    }

    resolve(tables) {
        
        
    }
}



export class TestTestConstAlias {

    constructor(_buf_) {
        this.id = _buf_.readInt();
        this.x1 = _buf_.readInt();
        this.x2 = _buf_.readLongAsNumber();
        this.x3 = _buf_.readFloat();
        this.x4 = _buf_.readDouble();
    }

    resolve(tables) {
        
        
        
        
        
    }
}



/**
 * 这是个测试excel结构
 */
export class TestTestExcelBean1 {

    constructor(_buf_) {
        this.x1 = _buf_.readInt();
        this.x2 = _buf_.readString();
        this.x3 = _buf_.readInt();
        this.x4 = _buf_.readFloat();
    }

    resolve(tables) {
        
        
        
        
    }
}



/**
 * 这是个测试excel结构
 */
export class TestTestExcelBean2 {

    constructor(_buf_) {
        this.y1 = _buf_.readInt();
        this.y2 = _buf_.readString();
        this.y3 = _buf_.readFloat();
    }

    resolve(tables) {
        
        
        
    }
}



export class TestTestFieldAlias {

    constructor(_buf_) {
        this.id = _buf_.readInt();
        this.name = _buf_.readString();
    }

    resolve(tables) {
        
        
    }
}



export class TestTestFieldVariant {

    constructor(_buf_) {
        this.id = _buf_.readInt();
        this.name = _buf_.readString();
    }

    resolve(tables) {
        
        
    }
}



export class TestTestFieldVariant2 {

    constructor(_buf_) {
        this.id = _buf_.readInt();
        this.name = _buf_.readString();
    }

    resolve(tables) {
        
        
    }
}



export class TestTestFormat {

    constructor(_buf_) {
        this.id = _buf_.readInt();
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.a1 = []; for(let i = 0 ; i < n ; i++) { let _e0 ;_e0 = _buf_.readInt(); this.a1.push(_e0);}};
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.a2 = []; for(let i = 0 ; i < n ; i++) { let _e0 ;_e0 = _buf_.readInt(); this.a2.push(_e0);}};
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.a3 = []; for(let i = 0 ; i < n ; i++) { let _e0 ;_e0 = _buf_.readInt(); this.a3.push(_e0);}};
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.a4 = []; for(let i = 0 ; i < n ; i++) { let _e0 ;_e0 = _buf_.readInt(); this.a4.push(_e0);}};
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.b1 = []; for(let i = 0 ; i < n ; i++) { let _e0; _e0 = _buf_.readInt(); this.b1.push(_e0);}};
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.b2 = []; for(let i = 0 ; i < n ; i++) { let _e0; _e0 = _buf_.readInt(); this.b2.push(_e0);}};
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.b3 = []; for(let i = 0 ; i < n ; i++) { let _e0; _e0 = _buf_.readInt(); this.b3.push(_e0);}};
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.b4 = []; for(let i = 0 ; i < n ; i++) { let _e0; _e0 = _buf_.readInt(); this.b4.push(_e0);}};
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.c1 = new Set(); for(let i = 0 ; i < n ; i++) { let _e0; _e0 = _buf_.readInt(); this.c1.add(_e0);}};
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.c2 = new Set(); for(let i = 0 ; i < n ; i++) { let _e0; _e0 = _buf_.readInt(); this.c2.add(_e0);}};
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.c3 = new Set(); for(let i = 0 ; i < n ; i++) { let _e0; _e0 = _buf_.readInt(); this.c3.add(_e0);}};
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.c4 = new Set(); for(let i = 0 ; i < n ; i++) { let _e0; _e0 = _buf_.readInt(); this.c4.add(_e0);}};
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.m1 = new Map(); for(let i = 0 ; i < n ; i++) { let _k0; _k0 = _buf_.readInt();  let _v0;  _v0 = _buf_.readInt(); this.m1.set(_k0, _v0);  } };
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.m2 = new Map(); for(let i = 0 ; i < n ; i++) { let _k0; _k0 = _buf_.readInt();  let _v0;  _v0 = _buf_.readInt(); this.m2.set(_k0, _v0);  } };
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.m3 = new Map(); for(let i = 0 ; i < n ; i++) { let _k0; _k0 = _buf_.readInt();  let _v0;  _v0 = _buf_.readInt(); this.m3.set(_k0, _v0);  } };
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.m4 = new Map(); for(let i = 0 ; i < n ; i++) { let _k0; _k0 = _buf_.readInt();  let _v0;  _v0 = _buf_.readInt(); this.m4.set(_k0, _v0);  } };
        this.v31 = new vec3(_buf_);
        this.v32 = new vec3(_buf_);
        this.v33 = new vec3(_buf_);
        this.v34 = new vec3(_buf_);
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.v41 = []; for(let i = 0 ; i < n ; i++) { let _e0; _e0 = new vec3(_buf_); this.v41.push(_e0);}};
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.v42 = []; for(let i = 0 ; i < n ; i++) { let _e0; _e0 = new vec3(_buf_); this.v42.push(_e0);}};
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.v43 = []; for(let i = 0 ; i < n ; i++) { let _e0; _e0 = new vec3(_buf_); this.v43.push(_e0);}};
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.v44 = []; for(let i = 0 ; i < n ; i++) { let _e0; _e0 = new vec3(_buf_); this.v44.push(_e0);}};
    }

    resolve(tables) {
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
    }
}



export class TestTestGlobal {

    constructor(_buf_) {
        this.unlockEquip = _buf_.readInt();
        this.unlockHero = _buf_.readInt();
    }

    resolve(tables) {
        
        
    }
}



export class TestTestIndex {

    constructor(_buf_) {
        this.id = _buf_.readInt();
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.eles = []; for(let i = 0 ; i < n ; i++) { let _e0; _e0 = new TestDemoType1(_buf_); this.eles.push(_e0);}};
    }

    resolve(tables) {
        
        for (let _e of this.eles) { _e?.resolve(tables); }
    }
}



export class TestTestMap {

    constructor(_buf_) {
        this.id = _buf_.readInt();
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.x1 = new Map(); for(let i = 0 ; i < n ; i++) { let _k0; _k0 = _buf_.readInt();  let _v0;  _v0 = _buf_.readInt(); this.x1.set(_k0, _v0);  } };
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.x2 = new Map(); for(let i = 0 ; i < n ; i++) { let _k0; _k0 = _buf_.readLongAsNumber();  let _v0;  _v0 = _buf_.readInt(); this.x2.set(_k0, _v0);  } };
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.x3 = new Map(); for(let i = 0 ; i < n ; i++) { let _k0; _k0 = _buf_.readString();  let _v0;  _v0 = _buf_.readInt(); this.x3.set(_k0, _v0);  } };
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.x4 = new Map(); for(let i = 0 ; i < n ; i++) { let _k0; _k0 = _buf_.readInt();  let _v0;  _v0 = _buf_.readInt(); this.x4.set(_k0, _v0);  } };
    }

    resolve(tables) {
        this.id_ref = tables.TbTestIndex.get(this.id)
        
        
        
        
    }
}



export class TestTestMapper {

    constructor(_buf_) {
        this.id = _buf_.readInt();
        this.audioType = _buf_.readInt();
        this.v2 = new vec2(_buf_);
    }

    resolve(tables) {
        
        
        
    }
}



export class TestTestMultiColumn {

    constructor(_buf_) {
        this.id = _buf_.readInt();
        this.a = new TestFoo(_buf_);
        this.b = new TestFoo(_buf_);
        this.c = new TestFoo(_buf_);
    }

    resolve(tables) {
        
        this.a?.resolve(tables);
        this.b?.resolve(tables);
        this.c?.resolve(tables);
    }
}



export class TestTestNull {

    constructor(_buf_) {
        this.id = _buf_.readInt();
        if(_buf_.readBool()) { this.x1 = _buf_.readInt() } else { this.x1 = null; };
        if(_buf_.readBool()) { this.x2 = _buf_.readInt() } else { this.x2 = null; };
        if(_buf_.readBool()) { this.x3 = new TestDemoType1(_buf_) } else { this.x3 = null; };
        if(_buf_.readBool()) { this.x4 = TestDemoDynamic.constructorFrom(_buf_) } else { this.x4 = null; };
        if(_buf_.readBool()) { this.s1 = _buf_.readString() } else { this.s1 = null; };
        if(_buf_.readBool()) { this.s2 = _buf_.readString() } else { this.s2 = null; };
    }

    resolve(tables) {
        
        
        
        this.x3?.resolve(tables);
        this.x4?.resolve(tables);
        
        
    }
}



export class TestTestRange {

    constructor(_buf_) {
        this.id = _buf_.readInt();
        this.f1 = _buf_.readFloat();
        this.f2 = _buf_.readFloat();
        this.d1 = _buf_.readDouble();
        this.d2 = _buf_.readDouble();
        this.i1 = _buf_.readInt();
        this.i2 = _buf_.readInt();
        this.i3 = _buf_.readInt();
        this.i4 = _buf_.readInt();
        this.l1 = _buf_.readLongAsNumber();
        this.l2 = _buf_.readLongAsNumber();
        this.l3 = _buf_.readLongAsNumber();
        this.l4 = _buf_.readLongAsNumber();
    }

    resolve(tables) {
        
        
        
        
        
        
        
        
        
        
        
        
        
    }
}



export class TestTestRef {

    constructor(_buf_) {
        this.id = _buf_.readInt();
        this.x1 = _buf_.readInt();
        this.x12 = _buf_.readInt();
        this.x2 = _buf_.readInt();
        this.x3 = _buf_.readInt();
        this.x4 = _buf_.readInt();
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.a1 = []; for(let i = 0 ; i < n ; i++) { let _e0 ;_e0 = _buf_.readInt(); this.a1.push(_e0);}};
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.a2 = []; for(let i = 0 ; i < n ; i++) { let _e0 ;_e0 = _buf_.readInt(); this.a2.push(_e0);}};
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.b1 = []; for(let i = 0 ; i < n ; i++) { let _e0; _e0 = _buf_.readInt(); this.b1.push(_e0);}};
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.b2 = []; for(let i = 0 ; i < n ; i++) { let _e0; _e0 = _buf_.readInt(); this.b2.push(_e0);}};
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.c1 = new Set(); for(let i = 0 ; i < n ; i++) { let _e0; _e0 = _buf_.readInt(); this.c1.add(_e0);}};
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.c2 = new Set(); for(let i = 0 ; i < n ; i++) { let _e0; _e0 = _buf_.readInt(); this.c2.add(_e0);}};
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.d1 = new Map(); for(let i = 0 ; i < n ; i++) { let _k0; _k0 = _buf_.readInt();  let _v0;  _v0 = _buf_.readInt(); this.d1.set(_k0, _v0);  } };
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.d2 = new Map(); for(let i = 0 ; i < n ; i++) { let _k0; _k0 = _buf_.readInt();  let _v0;  _v0 = _buf_.readInt(); this.d2.set(_k0, _v0);  } };
        this.e1 = _buf_.readInt();
        this.e2 = _buf_.readLongAsNumber();
        this.e3 = _buf_.readString();
        this.f1 = _buf_.readInt();
        this.f2 = _buf_.readLongAsNumber();
        this.f3 = _buf_.readString();
        this.s1 = TestRefDynamicBase.constructorFrom(_buf_);
    }

    resolve(tables) {
        
        this.x1_ref = tables.TbTestBeRef.get(this.x1)
        this.x12_ref = tables.TbTestBeRef.get(this.x12)
        
        
        this.x4_ref = tables.TbTestTag.get(this.x4)
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        this.s1?.resolve(tables);
    }
}



export class TestTestRow {

    constructor(_buf_) {
        this.x = _buf_.readInt();
        this.y = _buf_.readBool();
        this.z = _buf_.readString();
        this.a = new TestTest3(_buf_);
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.b = []; for(let i = 0 ; i < n ; i++) { let _e0; _e0 = _buf_.readInt(); this.b.push(_e0);}};
    }

    resolve(tables) {
        
        
        
        this.a?.resolve(tables);
        
    }
}



export class TestTestScriptableObject {

    constructor(_buf_) {
        this.id = _buf_.readInt();
        this.desc = _buf_.readString();
        this.rate = _buf_.readFloat();
        this.num = _buf_.readInt();
        this.v2 = new vec2(_buf_);
        this.v3 = new vec3(_buf_);
        this.v4 = new vec4(_buf_);
    }

    resolve(tables) {
        
        
        
        
        
        
        
    }
}



export class TestTestSep {

    constructor(_buf_) {
        this.id = _buf_.readInt();
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.a1 = []; for(let i = 0 ; i < n ; i++) { let _e0; _e0 = _buf_.readInt(); this.a1.push(_e0);}};
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.a2 = []; for(let i = 0 ; i < n ; i++) { let _e0; _e0 = _buf_.readInt(); this.a2.push(_e0);}};
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.a3 = []; for(let i = 0 ; i < n ; i++) { let _e0; _e0 = _buf_.readInt(); this.a3.push(_e0);}};
        this.x2 = new TestSepBean1(_buf_);
        this.x3 = new TestSepVector(_buf_);
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.x4 = []; for(let i = 0 ; i < n ; i++) { let _e0; _e0 = new TestSepVector(_buf_); this.x4.push(_e0);}};
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.x6 = []; for(let i = 0 ; i < n ; i++) { let _e0; _e0 = new TestSepBean1(_buf_); this.x6.push(_e0);}};
    }

    resolve(tables) {
        
        
        
        
        this.x2?.resolve(tables);
        this.x3?.resolve(tables);
        for (let _e of this.x4) { _e?.resolve(tables); }
        for (let _e of this.x6) { _e?.resolve(tables); }
    }
}



export class TestTestSet {

    constructor(_buf_) {
        this.id = _buf_.readInt();
        this.x0 = _buf_.readString();
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.x1 = []; for(let i = 0 ; i < n ; i++) { let _e0; _e0 = _buf_.readInt(); this.x1.push(_e0);}};
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.x2 = []; for(let i = 0 ; i < n ; i++) { let _e0; _e0 = _buf_.readLongAsNumber(); this.x2.push(_e0);}};
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.x3 = []; for(let i = 0 ; i < n ; i++) { let _e0; _e0 = _buf_.readString(); this.x3.push(_e0);}};
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.x4 = []; for(let i = 0 ; i < n ; i++) { let _e0; _e0 = _buf_.readInt(); this.x4.push(_e0);}};
    }

    resolve(tables) {
        
        
        
        
        
        
    }
}



export class TestTestSize {

    constructor(_buf_) {
        this.id = _buf_.readInt();
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.x1 = []; for(let i = 0 ; i < n ; i++) { let _e0 ;_e0 = _buf_.readInt(); this.x1.push(_e0);}};
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.x2 = []; for(let i = 0 ; i < n ; i++) { let _e0; _e0 = _buf_.readInt(); this.x2.push(_e0);}};
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.x3 = new Set(); for(let i = 0 ; i < n ; i++) { let _e0; _e0 = _buf_.readInt(); this.x3.add(_e0);}};
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.x4 = new Map(); for(let i = 0 ; i < n ; i++) { let _k0; _k0 = _buf_.readInt();  let _v0;  _v0 = _buf_.readInt(); this.x4.set(_k0, _v0);  } };
    }

    resolve(tables) {
        
        
        
        
        
    }
}



export class TestTestString {

    constructor(_buf_) {
        this.id = _buf_.readString();
        this.s1 = _buf_.readString();
        this.s2 = _buf_.readString();
        this.cs1 = new TestCompactString(_buf_);
        this.cs2 = new TestCompactString(_buf_);
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.css = []; for(let i = 0 ; i < n ; i++) { let _e0; _e0 = _buf_.readString(); this.css.push(_e0);}};
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.css2 = []; for(let i = 0 ; i < n ; i++) { let _e0; _e0 = _buf_.readString(); this.css2.push(_e0);}};
    }

    resolve(tables) {
        
        
        
        this.cs1?.resolve(tables);
        this.cs2?.resolve(tables);
        
        
    }
}



export class TestTestUeType {

    constructor(_buf_) {
        this.x1 = _buf_.readBool();
        this.x2 = _buf_.readByte();
        this.x3 = _buf_.readShort();
        this.x4 = _buf_.readInt();
        this.x5 = _buf_.readLongAsNumber();
        this.x6 = _buf_.readFloat();
        this.x10 = _buf_.readString();
        this.x12 = new TestDemoType1(_buf_);
        this.x13 = _buf_.readInt();
        this.t1 = _buf_.readLongAsNumber();
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.k1 = []; for(let i = 0 ; i < n ; i++) { let _e0 ;_e0 = _buf_.readInt(); this.k1.push(_e0);}};
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.k2 = []; for(let i = 0 ; i < n ; i++) { let _e0; _e0 = _buf_.readInt(); this.k2.push(_e0);}};
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.k5 = new Set(); for(let i = 0 ; i < n ; i++) { let _e0; _e0 = _buf_.readInt(); this.k5.add(_e0);}};
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.k8 = new Map(); for(let i = 0 ; i < n ; i++) { let _k0; _k0 = _buf_.readInt();  let _v0;  _v0 = _buf_.readInt(); this.k8.set(_k0, _v0);  } };
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.k9 = []; for(let i = 0 ; i < n ; i++) { let _e0; _e0 = new TestDemoE2(_buf_); this.k9.push(_e0);}};
    }

    resolve(tables) {
        
        
        
        
        
        
        
        this.x12?.resolve(tables);
        
        
        
        
        
        
        
    }
}



export class vec2 {

    constructor(_buf_) {
        this.x = _buf_.readFloat();
        this.y = _buf_.readFloat();
    }

    resolve(tables) {
        
        
    }
}



export class vec3 {

    constructor(_buf_) {
        this.x = _buf_.readFloat();
        this.y = _buf_.readFloat();
        this.z = _buf_.readFloat();
    }

    resolve(tables) {
        
        
        
    }
}



export class vec4 {

    constructor(_buf_) {
        this.x = _buf_.readFloat();
        this.y = _buf_.readFloat();
        this.z = _buf_.readFloat();
        this.w = _buf_.readFloat();
    }

    resolve(tables) {
        
        
        
        
    }
}




export class AiTbBlackboard {

    constructor(_buf_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(let n = _buf_.readInt(); n > 0; n--) {
            let _v;
            _v = new AiBlackboard(_buf_);
            this._dataList.push(_v);
            this._dataMap.set(_v.name, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class AiTbBehaviorTree {

    constructor(_buf_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(let n = _buf_.readInt(); n > 0; n--) {
            let _v;
            _v = new AiBehaviorTree(_buf_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class CommonTbGlobalConfig {

    constructor(_buf_) {
        if (_buf_.readInt() != 1) throw new Error('table mode=one, but size != 1')
        this._data = new CommonGlobalConfig(_buf_)
    }

    getData() { return this._data; }

    /**
     * 背包容量
     */
    get  x1() { return this._data.x1; }
    get  x2() { return this._data.x2; }
    get  x3() { return this._data.x3; }
    get  x4() { return this._data.x4; }
    get  x5() { return this._data.x5; }
    get  x6() { return this._data.x6; }
    get  x7() { return this._data.x7; }

    resolve(tables) {
        this._data.resolve(tables);
    }
    
}


/**
 * 道具表
 */
export class ItemTbItem {

    constructor(_buf_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(let n = _buf_.readInt(); n > 0; n--) {
            let _v;
            _v = new ItemItem(_buf_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class L10nTbL10NDemo {

    constructor(_buf_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(let n = _buf_.readInt(); n > 0; n--) {
            let _v;
            _v = new L10nL10NDemo(_buf_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class L10nTbPatchDemo {

    constructor(_buf_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(let n = _buf_.readInt(); n > 0; n--) {
            let _v;
            _v = new L10nPatchDemo(_buf_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TagTbTestTag {

    constructor(_buf_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(let n = _buf_.readInt(); n > 0; n--) {
            let _v;
            _v = new TagTestTag(_buf_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TestTbFullTypes {

    constructor(_buf_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(let n = _buf_.readInt(); n > 0; n--) {
            let _v;
            _v = new TestDemoType2(_buf_);
            this._dataList.push(_v);
            this._dataMap.set(_v.x4, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TestTbSingleton {

    constructor(_buf_) {
        if (_buf_.readInt() != 1) throw new Error('table mode=one, but size != 1')
        this._data = new TestDemoSingletonType(_buf_)
    }

    getData() { return this._data; }

    get  id() { return this._data.id; }
    get  name() { return this._data.name; }
    get  date() { return this._data.date; }

    resolve(tables) {
        this._data.resolve(tables);
    }
    
}


export class TestTbNotIndexList {
    
    constructor(_buf_) {
        this._dataList = [];
        for(let n = _buf_.readInt(); n > 0; n--) {
            let _v;
            _v = new TestNotIndexList(_buf_);
            this._dataList.push(_v);
        }
    }

    getDataList() { return this._dataList }

    get(index) { return this._dataList[index] }
    
    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TestTbMultiUnionIndexList {
    
    constructor(_buf_) {
        this._dataList = [];
        for(let n = _buf_.readInt(); n > 0; n--) {
            let _v;
            _v = new TestMultiUnionIndexList(_buf_);
            this._dataList.push(_v);
        }
    }

    getDataList() { return this._dataList }

    get(index) { return this._dataList[index] }
    
    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TestTbMultiIndexList {
    
    constructor(_buf_) {
        this._dataList = [];
        for(let n = _buf_.readInt(); n > 0; n--) {
            let _v;
            _v = new TestMultiIndexList(_buf_);
            this._dataList.push(_v);
        }
    }

    getDataList() { return this._dataList }

    get(index) { return this._dataList[index] }
    
    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TestTbDataFromMisc {

    constructor(_buf_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(let n = _buf_.readInt(); n > 0; n--) {
            let _v;
            _v = new TestDemoType2(_buf_);
            this._dataList.push(_v);
            this._dataMap.set(_v.x4, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TestTbMultiRowRecord {

    constructor(_buf_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(let n = _buf_.readInt(); n > 0; n--) {
            let _v;
            _v = new TestMultiRowRecord(_buf_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TestTbTestMultiColumn {

    constructor(_buf_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(let n = _buf_.readInt(); n > 0; n--) {
            let _v;
            _v = new TestTestMultiColumn(_buf_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TestTbMultiRowTitle {

    constructor(_buf_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(let n = _buf_.readInt(); n > 0; n--) {
            let _v;
            _v = new TestMultiRowTitle(_buf_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TestTbTestNull {

    constructor(_buf_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(let n = _buf_.readInt(); n > 0; n--) {
            let _v;
            _v = new TestTestNull(_buf_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TestTbDemoPrimitive {

    constructor(_buf_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(let n = _buf_.readInt(); n > 0; n--) {
            let _v;
            _v = new TestDemoPrimitiveTypesTable(_buf_);
            this._dataList.push(_v);
            this._dataMap.set(_v.x4, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TestTbTestString {

    constructor(_buf_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(let n = _buf_.readInt(); n > 0; n--) {
            let _v;
            _v = new TestTestString(_buf_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TestTbDemoGroup {

    constructor(_buf_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(let n = _buf_.readInt(); n > 0; n--) {
            let _v;
            _v = new TestDemoGroup(_buf_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TestTbDemoGroup_C {

    constructor(_buf_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(let n = _buf_.readInt(); n > 0; n--) {
            let _v;
            _v = new TestDemoGroup(_buf_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TestTbDemoGroup_S {

    constructor(_buf_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(let n = _buf_.readInt(); n > 0; n--) {
            let _v;
            _v = new TestDemoGroup(_buf_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TestTbDemoGroup_E {

    constructor(_buf_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(let n = _buf_.readInt(); n > 0; n--) {
            let _v;
            _v = new TestDemoGroup(_buf_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TestTbTestGlobal {

    constructor(_buf_) {
        if (_buf_.readInt() != 1) throw new Error('table mode=one, but size != 1')
        this._data = new TestTestGlobal(_buf_)
    }

    getData() { return this._data; }

    get  unlockEquip() { return this._data.unlockEquip; }
    get  unlockHero() { return this._data.unlockHero; }

    resolve(tables) {
        this._data.resolve(tables);
    }
    
}


export class TestTbTestBeRef {

    constructor(_buf_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(let n = _buf_.readInt(); n > 0; n--) {
            let _v;
            _v = new TestTestBeRef(_buf_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TestTbTestBeRef2 {

    constructor(_buf_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(let n = _buf_.readInt(); n > 0; n--) {
            let _v;
            _v = new TestTestBeRef(_buf_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TestTbTestRef {

    constructor(_buf_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(let n = _buf_.readInt(); n > 0; n--) {
            let _v;
            _v = new TestTestRef(_buf_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TestTbTestSize {

    constructor(_buf_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(let n = _buf_.readInt(); n > 0; n--) {
            let _v;
            _v = new TestTestSize(_buf_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TestTbTestSet {

    constructor(_buf_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(let n = _buf_.readInt(); n > 0; n--) {
            let _v;
            _v = new TestTestSet(_buf_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TestTbTestRange {

    constructor(_buf_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(let n = _buf_.readInt(); n > 0; n--) {
            let _v;
            _v = new TestTestRange(_buf_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TestTbDetectCsvEncoding {

    constructor(_buf_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(let n = _buf_.readInt(); n > 0; n--) {
            let _v;
            _v = new TestDetectEncoding(_buf_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TestTbItem2 {

    constructor(_buf_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(let n = _buf_.readInt(); n > 0; n--) {
            let _v;
            _v = TestItemBase.constructorFrom(_buf_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TestTbTestIndex {

    constructor(_buf_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(let n = _buf_.readInt(); n > 0; n--) {
            let _v;
            _v = new TestTestIndex(_buf_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TestTbTestMap {

    constructor(_buf_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(let n = _buf_.readInt(); n > 0; n--) {
            let _v;
            _v = new TestTestMap(_buf_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TestTbExcelFromJson {

    constructor(_buf_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(let n = _buf_.readInt(); n > 0; n--) {
            let _v;
            _v = new TestExcelFromJson(_buf_);
            this._dataList.push(_v);
            this._dataMap.set(_v.x4, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TestTbCompositeJsonTable1 {

    constructor(_buf_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(let n = _buf_.readInt(); n > 0; n--) {
            let _v;
            _v = new TestCompositeJsonTable1(_buf_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TestTbCompositeJsonTable2 {

    constructor(_buf_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(let n = _buf_.readInt(); n > 0; n--) {
            let _v;
            _v = new TestCompositeJsonTable2(_buf_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TestTbCompositeJsonTable3 {

    constructor(_buf_) {
        if (_buf_.readInt() != 1) throw new Error('table mode=one, but size != 1')
        this._data = new TestCompositeJsonTable3(_buf_)
    }

    getData() { return this._data; }

    get  a() { return this._data.a; }
    get  b() { return this._data.b; }

    resolve(tables) {
        this._data.resolve(tables);
    }
    
}


export class TestTbExcelFromJsonMultiRow {

    constructor(_buf_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(let n = _buf_.readInt(); n > 0; n--) {
            let _v;
            _v = new TestExcelFromJsonMultiRow(_buf_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TestTbTestSep {

    constructor(_buf_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(let n = _buf_.readInt(); n > 0; n--) {
            let _v;
            _v = new TestTestSep(_buf_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TestTbTestScriptableObject {

    constructor(_buf_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(let n = _buf_.readInt(); n > 0; n--) {
            let _v;
            _v = new TestTestScriptableObject(_buf_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TestTbPath {

    constructor(_buf_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(let n = _buf_.readInt(); n > 0; n--) {
            let _v;
            _v = new TestPath(_buf_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TestTbTestFieldAlias {

    constructor(_buf_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(let n = _buf_.readInt(); n > 0; n--) {
            let _v;
            _v = new TestTestFieldAlias(_buf_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TestTbTestFieldVariant {

    constructor(_buf_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(let n = _buf_.readInt(); n > 0; n--) {
            let _v;
            _v = new TestTestFieldVariant(_buf_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TestTbTestFieldVariant2 {

    constructor(_buf_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(let n = _buf_.readInt(); n > 0; n--) {
            let _v;
            _v = new TestTestFieldVariant2(_buf_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TestTbTestMapper {

    constructor(_buf_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(let n = _buf_.readInt(); n > 0; n--) {
            let _v;
            _v = new TestTestMapper(_buf_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TestTbTestConstAlias {

    constructor(_buf_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(let n = _buf_.readInt(); n > 0; n--) {
            let _v;
            _v = new TestTestConstAlias(_buf_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TestTbDefineFromExcel2 {

    constructor(_buf_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(let n = _buf_.readInt(); n > 0; n--) {
            let _v;
            _v = new TestDefineFromExcel2(_buf_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TbAutoImport1 {

    constructor(_buf_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(let n = _buf_.readInt(); n > 0; n--) {
            let _v;
            _v = new AutoImport1(_buf_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TestTbAutoImport2 {

    constructor(_buf_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(let n = _buf_.readInt(); n > 0; n--) {
            let _v;
            _v = new TestAutoImport2(_buf_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TestTbTestFormat {

    constructor(_buf_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(let n = _buf_.readInt(); n > 0; n--) {
            let _v;
            _v = new TestTestFormat(_buf_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class Tables {
    get TbBlackboard() { return this._TbBlackboard;}
    get TbBehaviorTree() { return this._TbBehaviorTree;}
    get TbGlobalConfig() { return this._TbGlobalConfig;}
    /**
     * 道具表
     */
    get TbItem() { return this._TbItem;}
    get TbL10NDemo() { return this._TbL10NDemo;}
    get TbPatchDemo() { return this._TbPatchDemo;}
    get TbTestTag() { return this._TbTestTag;}
    get TbFullTypes() { return this._TbFullTypes;}
    get TbSingleton() { return this._TbSingleton;}
    get TbNotIndexList() { return this._TbNotIndexList;}
    get TbMultiUnionIndexList() { return this._TbMultiUnionIndexList;}
    get TbMultiIndexList() { return this._TbMultiIndexList;}
    get TbDataFromMisc() { return this._TbDataFromMisc;}
    get TbMultiRowRecord() { return this._TbMultiRowRecord;}
    get TbTestMultiColumn() { return this._TbTestMultiColumn;}
    get TbMultiRowTitle() { return this._TbMultiRowTitle;}
    get TbTestNull() { return this._TbTestNull;}
    get TbDemoPrimitive() { return this._TbDemoPrimitive;}
    get TbTestString() { return this._TbTestString;}
    get TbDemoGroup() { return this._TbDemoGroup;}
    get TbDemoGroup_C() { return this._TbDemoGroup_C;}
    get TbDemoGroup_S() { return this._TbDemoGroup_S;}
    get TbDemoGroup_E() { return this._TbDemoGroup_E;}
    get TbTestGlobal() { return this._TbTestGlobal;}
    get TbTestBeRef() { return this._TbTestBeRef;}
    get TbTestBeRef2() { return this._TbTestBeRef2;}
    get TbTestRef() { return this._TbTestRef;}
    get TbTestSize() { return this._TbTestSize;}
    get TbTestSet() { return this._TbTestSet;}
    get TbTestRange() { return this._TbTestRange;}
    get TbDetectCsvEncoding() { return this._TbDetectCsvEncoding;}
    get TbItem2() { return this._TbItem2;}
    get TbTestIndex() { return this._TbTestIndex;}
    get TbTestMap() { return this._TbTestMap;}
    get TbExcelFromJson() { return this._TbExcelFromJson;}
    get TbCompositeJsonTable1() { return this._TbCompositeJsonTable1;}
    get TbCompositeJsonTable2() { return this._TbCompositeJsonTable2;}
    get TbCompositeJsonTable3() { return this._TbCompositeJsonTable3;}
    get TbExcelFromJsonMultiRow() { return this._TbExcelFromJsonMultiRow;}
    get TbTestSep() { return this._TbTestSep;}
    get TbTestScriptableObject() { return this._TbTestScriptableObject;}
    get TbPath() { return this._TbPath;}
    get TbTestFieldAlias() { return this._TbTestFieldAlias;}
    get TbTestFieldVariant() { return this._TbTestFieldVariant;}
    get TbTestFieldVariant2() { return this._TbTestFieldVariant2;}
    get TbTestMapper() { return this._TbTestMapper;}
    get TbTestConstAlias() { return this._TbTestConstAlias;}
    get TbDefineFromExcel2() { return this._TbDefineFromExcel2;}
    get TbAutoImport1() { return this._TbAutoImport1;}
    get TbAutoImport2() { return this._TbAutoImport2;}
    get TbTestFormat() { return this._TbTestFormat;}

    constructor(loader) {
        this._TbBlackboard = new AiTbBlackboard(loader('ai_tbblackboard'));
        this._TbBehaviorTree = new AiTbBehaviorTree(loader('ai_tbbehaviortree'));
        this._TbGlobalConfig = new CommonTbGlobalConfig(loader('common_tbglobalconfig'));
        this._TbItem = new ItemTbItem(loader('item_tbitem'));
        this._TbL10NDemo = new L10nTbL10NDemo(loader('l10n_tbl10ndemo'));
        this._TbPatchDemo = new L10nTbPatchDemo(loader('l10n_tbpatchdemo'));
        this._TbTestTag = new TagTbTestTag(loader('tag_tbtesttag'));
        this._TbFullTypes = new TestTbFullTypes(loader('test_tbfulltypes'));
        this._TbSingleton = new TestTbSingleton(loader('test_tbsingleton'));
        this._TbNotIndexList = new TestTbNotIndexList(loader('test_tbnotindexlist'));
        this._TbMultiUnionIndexList = new TestTbMultiUnionIndexList(loader('test_tbmultiunionindexlist'));
        this._TbMultiIndexList = new TestTbMultiIndexList(loader('test_tbmultiindexlist'));
        this._TbDataFromMisc = new TestTbDataFromMisc(loader('test_tbdatafrommisc'));
        this._TbMultiRowRecord = new TestTbMultiRowRecord(loader('test_tbmultirowrecord'));
        this._TbTestMultiColumn = new TestTbTestMultiColumn(loader('test_tbtestmulticolumn'));
        this._TbMultiRowTitle = new TestTbMultiRowTitle(loader('test_tbmultirowtitle'));
        this._TbTestNull = new TestTbTestNull(loader('test_tbtestnull'));
        this._TbDemoPrimitive = new TestTbDemoPrimitive(loader('test_tbdemoprimitive'));
        this._TbTestString = new TestTbTestString(loader('test_tbteststring'));
        this._TbDemoGroup = new TestTbDemoGroup(loader('test_tbdemogroup'));
        this._TbDemoGroup_C = new TestTbDemoGroup_C(loader('test_tbdemogroup_c'));
        this._TbDemoGroup_S = new TestTbDemoGroup_S(loader('test_tbdemogroup_s'));
        this._TbDemoGroup_E = new TestTbDemoGroup_E(loader('test_tbdemogroup_e'));
        this._TbTestGlobal = new TestTbTestGlobal(loader('test_tbtestglobal'));
        this._TbTestBeRef = new TestTbTestBeRef(loader('test_tbtestberef'));
        this._TbTestBeRef2 = new TestTbTestBeRef2(loader('test_tbtestberef2'));
        this._TbTestRef = new TestTbTestRef(loader('test_tbtestref'));
        this._TbTestSize = new TestTbTestSize(loader('test_tbtestsize'));
        this._TbTestSet = new TestTbTestSet(loader('test_tbtestset'));
        this._TbTestRange = new TestTbTestRange(loader('test_tbtestrange'));
        this._TbDetectCsvEncoding = new TestTbDetectCsvEncoding(loader('test_tbdetectcsvencoding'));
        this._TbItem2 = new TestTbItem2(loader('test_tbitem2'));
        this._TbTestIndex = new TestTbTestIndex(loader('test_tbtestindex'));
        this._TbTestMap = new TestTbTestMap(loader('test_tbtestmap'));
        this._TbExcelFromJson = new TestTbExcelFromJson(loader('test_tbexcelfromjson'));
        this._TbCompositeJsonTable1 = new TestTbCompositeJsonTable1(loader('test_tbcompositejsontable1'));
        this._TbCompositeJsonTable2 = new TestTbCompositeJsonTable2(loader('test_tbcompositejsontable2'));
        this._TbCompositeJsonTable3 = new TestTbCompositeJsonTable3(loader('test_tbcompositejsontable3'));
        this._TbExcelFromJsonMultiRow = new TestTbExcelFromJsonMultiRow(loader('test_tbexcelfromjsonmultirow'));
        this._TbTestSep = new TestTbTestSep(loader('test_tbtestsep'));
        this._TbTestScriptableObject = new TestTbTestScriptableObject(loader('test_tbtestscriptableobject'));
        this._TbPath = new TestTbPath(loader('test_tbpath'));
        this._TbTestFieldAlias = new TestTbTestFieldAlias(loader('test_tbtestfieldalias'));
        this._TbTestFieldVariant = new TestTbTestFieldVariant(loader('test_tbtestfieldvariant'));
        this._TbTestFieldVariant2 = new TestTbTestFieldVariant2(loader('test_tbtestfieldvariant2'));
        this._TbTestMapper = new TestTbTestMapper(loader('test_tbtestmapper'));
        this._TbTestConstAlias = new TestTbTestConstAlias(loader('test_tbtestconstalias'));
        this._TbDefineFromExcel2 = new TestTbDefineFromExcel2(loader('test_tbdefinefromexcel2'));
        this._TbAutoImport1 = new TbAutoImport1(loader('tbautoimport1'));
        this._TbAutoImport2 = new TestTbAutoImport2(loader('test_tbautoimport2'));
        this._TbTestFormat = new TestTbTestFormat(loader('test_tbtestformat'));

        this._TbBlackboard.resolve(this);
        this._TbBehaviorTree.resolve(this);
        this._TbGlobalConfig.resolve(this);
        this._TbItem.resolve(this);
        this._TbL10NDemo.resolve(this);
        this._TbPatchDemo.resolve(this);
        this._TbTestTag.resolve(this);
        this._TbFullTypes.resolve(this);
        this._TbSingleton.resolve(this);
        this._TbNotIndexList.resolve(this);
        this._TbMultiUnionIndexList.resolve(this);
        this._TbMultiIndexList.resolve(this);
        this._TbDataFromMisc.resolve(this);
        this._TbMultiRowRecord.resolve(this);
        this._TbTestMultiColumn.resolve(this);
        this._TbMultiRowTitle.resolve(this);
        this._TbTestNull.resolve(this);
        this._TbDemoPrimitive.resolve(this);
        this._TbTestString.resolve(this);
        this._TbDemoGroup.resolve(this);
        this._TbDemoGroup_C.resolve(this);
        this._TbDemoGroup_S.resolve(this);
        this._TbDemoGroup_E.resolve(this);
        this._TbTestGlobal.resolve(this);
        this._TbTestBeRef.resolve(this);
        this._TbTestBeRef2.resolve(this);
        this._TbTestRef.resolve(this);
        this._TbTestSize.resolve(this);
        this._TbTestSet.resolve(this);
        this._TbTestRange.resolve(this);
        this._TbDetectCsvEncoding.resolve(this);
        this._TbItem2.resolve(this);
        this._TbTestIndex.resolve(this);
        this._TbTestMap.resolve(this);
        this._TbExcelFromJson.resolve(this);
        this._TbCompositeJsonTable1.resolve(this);
        this._TbCompositeJsonTable2.resolve(this);
        this._TbCompositeJsonTable3.resolve(this);
        this._TbExcelFromJsonMultiRow.resolve(this);
        this._TbTestSep.resolve(this);
        this._TbTestScriptableObject.resolve(this);
        this._TbPath.resolve(this);
        this._TbTestFieldAlias.resolve(this);
        this._TbTestFieldVariant.resolve(this);
        this._TbTestFieldVariant2.resolve(this);
        this._TbTestMapper.resolve(this);
        this._TbTestConstAlias.resolve(this);
        this._TbDefineFromExcel2.resolve(this);
        this._TbAutoImport1.resolve(this);
        this._TbAutoImport2.resolve(this);
        this._TbTestFormat.resolve(this);
    }
}

