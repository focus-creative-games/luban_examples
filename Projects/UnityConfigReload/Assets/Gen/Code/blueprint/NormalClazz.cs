//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using System.Linq;



namespace cfg.blueprint
{

public sealed partial class NormalClazz :  blueprint.Clazz 
{
    public NormalClazz(ByteBuf _buf)  : base(_buf) 
    {
        IsAbstract = _buf.ReadBool();
        {int n = System.Math.Min(_buf.ReadSize(), _buf.Size);Fields = new System.Collections.Generic.List<blueprint.Field>(n);for(var i = 0 ; i < n ; i++) { blueprint.Field _e;  _e = blueprint.Field.DeserializeField(_buf); Fields.Add(_e);}}
        PostInit();
    }

    public static NormalClazz DeserializeNormalClazz(ByteBuf _buf)
    {
        return new blueprint.NormalClazz(_buf);
    }

    public bool IsAbstract { get; protected set; }
    public System.Collections.Generic.List<blueprint.Field> Fields { get; protected set; }

    public const int __ID__ = -2073576778;
    public override int GetTypeId() => __ID__;

    public override void Resolve(Dictionary<string, object> _tables)
    {
        base.Resolve(_tables);
        foreach(var _e in Fields) { _e?.Resolve(_tables); }
        PostResolve();
    }

    public override void TranslateText(System.Func<string, string, string> translator)
    {
        base.TranslateText(translator);
        foreach(var _e in Fields) { _e?.TranslateText(translator); }
    }

    public void Reload(NormalClazz reloadData)
    {
        Name = reloadData.Name;
        Desc = reloadData.Desc;
        if(Parents.Count<reloadData.Parents.Count)
        {
            Parents.AddRange(new List<blueprint.Clazz>(reloadData.Parents.Count-Parents.Count));
        }else if(Parents.Count>reloadData.Parents.Count)
        {
            Parents.RemoveRange(reloadData.Parents.Count, Parents.Count-reloadData.Parents.Count);
        }
        for (int i = 0; i < reloadData.Parents.Count; i++)
        {
            Parents[i] = reloadData.Parents[i];
        }
        if(Methods.Count<reloadData.Methods.Count)
        {
            Methods.AddRange(new List<blueprint.Method>(reloadData.Methods.Count-Methods.Count));
        }else if(Methods.Count>reloadData.Methods.Count)
        {
            Methods.RemoveRange(reloadData.Methods.Count, Methods.Count-reloadData.Methods.Count);
        }
        for (int i = 0; i < reloadData.Methods.Count; i++)
        {
            Methods[i] = reloadData.Methods[i];
        }
        IsAbstract = reloadData.IsAbstract;
        if(Fields.Count<reloadData.Fields.Count)
        {
            Fields.AddRange(new List<blueprint.Field>(reloadData.Fields.Count-Fields.Count));
        }else if(Fields.Count>reloadData.Fields.Count)
        {
            Fields.RemoveRange(reloadData.Fields.Count, Fields.Count-reloadData.Fields.Count);
        }
        for (int i = 0; i < reloadData.Fields.Count; i++)
        {
            Fields[i] = reloadData.Fields[i];
        }
    }

    public override string ToString()
    {
        return "{ "
        + "Name:" + Name + ","
        + "Desc:" + Desc + ","
        + "Parents:" + Bright.Common.StringUtil.CollectionToString(Parents) + ","
        + "Methods:" + Bright.Common.StringUtil.CollectionToString(Methods) + ","
        + "IsAbstract:" + IsAbstract + ","
        + "Fields:" + Bright.Common.StringUtil.CollectionToString(Fields) + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}

}
