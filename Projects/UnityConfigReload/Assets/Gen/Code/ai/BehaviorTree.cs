//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using System.Linq;



namespace cfg.ai
{

public sealed partial class BehaviorTree :  Bright.Config.BeanBase 
{
    public BehaviorTree(ByteBuf _buf) 
    {
        Id = _buf.ReadInt();
        Name = _buf.ReadString();
        Desc = _buf.ReadString();
        BlackboardId = _buf.ReadString();
        Root = ai.ComposeNode.DeserializeComposeNode(_buf);
        PostInit();
    }

    public static BehaviorTree DeserializeBehaviorTree(ByteBuf _buf)
    {
        return new ai.BehaviorTree(_buf);
    }

    public int Id { get; protected set; }
    public string Name { get; protected set; }
    public string Desc { get; protected set; }
    public string BlackboardId { get; protected set; }
    //field.gen_ref
    public ai.Blackboard BlackboardId_Ref { get; private set; }
    public ai.ComposeNode Root { get; protected set; }

    public const int __ID__ = 159552822;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        this.BlackboardId_Ref = (_tables["ai.TbBlackboard"] as ai.TbBlackboard).GetOrDefault(BlackboardId);
        Root?.Resolve(_tables);
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
        Root?.TranslateText(translator);
    }

    public void Reload(BehaviorTree reloadData)
    {
        Id = reloadData.Id;
        Name = reloadData.Name;
        Desc = reloadData.Desc;
        BlackboardId = reloadData.BlackboardId;
        if(Root==null)
        {
            Root = reloadData.Root;
        }else
        {
            if(Root.GetTypeId() == reloadData.Root.GetTypeId())
            {
                switch (reloadData.Root.GetTypeId())
                {
                    case ai.Sequence.__ID__:
                        (Root as ai.Sequence).Reload(reloadData.Root as ai.Sequence);
                        break;
                    case ai.Selector.__ID__:
                        (Root as ai.Selector).Reload(reloadData.Root as ai.Selector);
                        break;
                    case ai.SimpleParallel.__ID__:
                        (Root as ai.SimpleParallel).Reload(reloadData.Root as ai.SimpleParallel);
                        break;
                }
            }else
            {
                typeof(BehaviorTree).GetProperty("Root").SetValue(this,reloadData.Root);
            }
        }
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "Name:" + Name + ","
        + "Desc:" + Desc + ","
        + "BlackboardId:" + BlackboardId + ","
        + "Root:" + Root + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}

}
