//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using System.Linq;



namespace cfg.ai
{

public sealed partial class MoveToRandomLocation :  ai.Task 
{
    public MoveToRandomLocation(ByteBuf _buf)  : base(_buf) 
    {
        OriginPositionKey = _buf.ReadString();
        Radius = _buf.ReadFloat();
        PostInit();
    }

    public static MoveToRandomLocation DeserializeMoveToRandomLocation(ByteBuf _buf)
    {
        return new ai.MoveToRandomLocation(_buf);
    }

    public string OriginPositionKey { get; protected set; }
    public float Radius { get; protected set; }

    public const int __ID__ = -2140042998;
    public override int GetTypeId() => __ID__;

    public override void Resolve(Dictionary<string, object> _tables)
    {
        base.Resolve(_tables);
        PostResolve();
    }

    public override void TranslateText(System.Func<string, string, string> translator)
    {
        base.TranslateText(translator);
    }

    public void Reload(MoveToRandomLocation reloadData)
    {
        Id = reloadData.Id;
        NodeName = reloadData.NodeName;
        if(Decorators.Count<reloadData.Decorators.Count)
        {
            Decorators.AddRange(new List<ai.Decorator>(reloadData.Decorators.Count-Decorators.Count));
        }else if(Decorators.Count>reloadData.Decorators.Count)
        {
            Decorators.RemoveRange(reloadData.Decorators.Count, Decorators.Count-reloadData.Decorators.Count);
        }
        for (int i = 0; i < reloadData.Decorators.Count; i++)
        {
            Decorators[i] = reloadData.Decorators[i];
        }
        if(Services.Count<reloadData.Services.Count)
        {
            Services.AddRange(new List<ai.Service>(reloadData.Services.Count-Services.Count));
        }else if(Services.Count>reloadData.Services.Count)
        {
            Services.RemoveRange(reloadData.Services.Count, Services.Count-reloadData.Services.Count);
        }
        for (int i = 0; i < reloadData.Services.Count; i++)
        {
            Services[i] = reloadData.Services[i];
        }
        IgnoreRestartSelf = reloadData.IgnoreRestartSelf;
        OriginPositionKey = reloadData.OriginPositionKey;
        Radius = reloadData.Radius;
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "NodeName:" + NodeName + ","
        + "Decorators:" + Bright.Common.StringUtil.CollectionToString(Decorators) + ","
        + "Services:" + Bright.Common.StringUtil.CollectionToString(Services) + ","
        + "IgnoreRestartSelf:" + IgnoreRestartSelf + ","
        + "OriginPositionKey:" + OriginPositionKey + ","
        + "Radius:" + Radius + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}

}
