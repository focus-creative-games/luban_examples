//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using System.Linq;



namespace cfg.ai
{

public sealed partial class SimpleParallel :  ai.ComposeNode 
{
    public SimpleParallel(ByteBuf _buf)  : base(_buf) 
    {
        FinishMode = (ai.EFinishMode)_buf.ReadInt();
        MainTask = ai.Task.DeserializeTask(_buf);
        BackgroundNode = ai.FlowNode.DeserializeFlowNode(_buf);
        PostInit();
    }

    public static SimpleParallel DeserializeSimpleParallel(ByteBuf _buf)
    {
        return new ai.SimpleParallel(_buf);
    }

    public ai.EFinishMode FinishMode { get; protected set; }
    public ai.Task MainTask { get; protected set; }
    public ai.FlowNode BackgroundNode { get; protected set; }

    public const int __ID__ = -1952582529;
    public override int GetTypeId() => __ID__;

    public override void Resolve(Dictionary<string, object> _tables)
    {
        base.Resolve(_tables);
        MainTask?.Resolve(_tables);
        BackgroundNode?.Resolve(_tables);
        PostResolve();
    }

    public override void TranslateText(System.Func<string, string, string> translator)
    {
        base.TranslateText(translator);
        MainTask?.TranslateText(translator);
        BackgroundNode?.TranslateText(translator);
    }

    public void Reload(SimpleParallel reloadData)
    {
        Id = reloadData.Id;
        NodeName = reloadData.NodeName;
        if(Decorators.Count<reloadData.Decorators.Count)
        {
            Decorators.AddRange(new List<ai.Decorator>(reloadData.Decorators.Count-Decorators.Count));
        }else if(Decorators.Count>reloadData.Decorators.Count)
        {
            Decorators.RemoveRange(reloadData.Decorators.Count, Decorators.Count-reloadData.Decorators.Count);
        }
        for (int i = 0; i < reloadData.Decorators.Count; i++)
        {
            Decorators[i] = reloadData.Decorators[i];
        }
        if(Services.Count<reloadData.Services.Count)
        {
            Services.AddRange(new List<ai.Service>(reloadData.Services.Count-Services.Count));
        }else if(Services.Count>reloadData.Services.Count)
        {
            Services.RemoveRange(reloadData.Services.Count, Services.Count-reloadData.Services.Count);
        }
        for (int i = 0; i < reloadData.Services.Count; i++)
        {
            Services[i] = reloadData.Services[i];
        }
        FinishMode = reloadData.FinishMode;
        if(MainTask.GetTypeId() == reloadData.MainTask.GetTypeId())
        {
            //MainTask is dynamic
            switch (reloadData.MainTask.GetTypeId())
            {
                case ai.UeWait.__ID__:
                    (MainTask as ai.UeWait).Reload(reloadData.MainTask as ai.UeWait);
                    break;
                case ai.UeWaitBlackboardTime.__ID__:
                    (MainTask as ai.UeWaitBlackboardTime).Reload(reloadData.MainTask as ai.UeWaitBlackboardTime);
                    break;
                case ai.MoveToTarget.__ID__:
                    (MainTask as ai.MoveToTarget).Reload(reloadData.MainTask as ai.MoveToTarget);
                    break;
                case ai.ChooseSkill.__ID__:
                    (MainTask as ai.ChooseSkill).Reload(reloadData.MainTask as ai.ChooseSkill);
                    break;
                case ai.MoveToRandomLocation.__ID__:
                    (MainTask as ai.MoveToRandomLocation).Reload(reloadData.MainTask as ai.MoveToRandomLocation);
                    break;
                case ai.MoveToLocation.__ID__:
                    (MainTask as ai.MoveToLocation).Reload(reloadData.MainTask as ai.MoveToLocation);
                    break;
                case ai.DebugPrint.__ID__:
                    (MainTask as ai.DebugPrint).Reload(reloadData.MainTask as ai.DebugPrint);
                    break;
            }
        }else
        {
            typeof(SimpleParallel).GetProperty("MainTask").SetValue(this,reloadData.MainTask);
        }
        if(BackgroundNode.GetTypeId() == reloadData.BackgroundNode.GetTypeId())
        {
            //BackgroundNode is dynamic
            switch (reloadData.BackgroundNode.GetTypeId())
            {
                case ai.Sequence.__ID__:
                    (BackgroundNode as ai.Sequence).Reload(reloadData.BackgroundNode as ai.Sequence);
                    break;
                case ai.Selector.__ID__:
                    (BackgroundNode as ai.Selector).Reload(reloadData.BackgroundNode as ai.Selector);
                    break;
                case ai.SimpleParallel.__ID__:
                    (BackgroundNode as ai.SimpleParallel).Reload(reloadData.BackgroundNode as ai.SimpleParallel);
                    break;
                case ai.UeWait.__ID__:
                    (BackgroundNode as ai.UeWait).Reload(reloadData.BackgroundNode as ai.UeWait);
                    break;
                case ai.UeWaitBlackboardTime.__ID__:
                    (BackgroundNode as ai.UeWaitBlackboardTime).Reload(reloadData.BackgroundNode as ai.UeWaitBlackboardTime);
                    break;
                case ai.MoveToTarget.__ID__:
                    (BackgroundNode as ai.MoveToTarget).Reload(reloadData.BackgroundNode as ai.MoveToTarget);
                    break;
                case ai.ChooseSkill.__ID__:
                    (BackgroundNode as ai.ChooseSkill).Reload(reloadData.BackgroundNode as ai.ChooseSkill);
                    break;
                case ai.MoveToRandomLocation.__ID__:
                    (BackgroundNode as ai.MoveToRandomLocation).Reload(reloadData.BackgroundNode as ai.MoveToRandomLocation);
                    break;
                case ai.MoveToLocation.__ID__:
                    (BackgroundNode as ai.MoveToLocation).Reload(reloadData.BackgroundNode as ai.MoveToLocation);
                    break;
                case ai.DebugPrint.__ID__:
                    (BackgroundNode as ai.DebugPrint).Reload(reloadData.BackgroundNode as ai.DebugPrint);
                    break;
            }
        }else
        {
            typeof(SimpleParallel).GetProperty("BackgroundNode").SetValue(this,reloadData.BackgroundNode);
        }
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "NodeName:" + NodeName + ","
        + "Decorators:" + Bright.Common.StringUtil.CollectionToString(Decorators) + ","
        + "Services:" + Bright.Common.StringUtil.CollectionToString(Services) + ","
        + "FinishMode:" + FinishMode + ","
        + "MainTask:" + MainTask + ","
        + "BackgroundNode:" + BackgroundNode + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}

}
