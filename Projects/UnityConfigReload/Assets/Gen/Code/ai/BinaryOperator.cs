//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using System.Linq;



namespace cfg.ai
{

public sealed partial class BinaryOperator :  ai.KeyQueryOperator 
{
    public BinaryOperator(ByteBuf _buf)  : base(_buf) 
    {
        Oper = (ai.EOperator)_buf.ReadInt();
        Data = ai.KeyData.DeserializeKeyData(_buf);
        PostInit();
    }

    public static BinaryOperator DeserializeBinaryOperator(ByteBuf _buf)
    {
        return new ai.BinaryOperator(_buf);
    }

    public ai.EOperator Oper { get; protected set; }
    public ai.KeyData Data { get; protected set; }

    public const int __ID__ = -979891605;
    public override int GetTypeId() => __ID__;

    public override void Resolve(Dictionary<string, object> _tables)
    {
        base.Resolve(_tables);
        Data?.Resolve(_tables);
        PostResolve();
    }

    public override void TranslateText(System.Func<string, string, string> translator)
    {
        base.TranslateText(translator);
        Data?.TranslateText(translator);
    }

    public void Reload(BinaryOperator reloadData)
    {
        Oper = reloadData.Oper;
        if(Data==null)
        {
            Data = reloadData.Data;
        }else
        {
            if(Data.GetTypeId() == reloadData.Data.GetTypeId())
            {
                switch (reloadData.Data.GetTypeId())
                {
                    case ai.FloatKeyData.__ID__:
                        (Data as ai.FloatKeyData).Reload(reloadData.Data as ai.FloatKeyData);
                        break;
                    case ai.IntKeyData.__ID__:
                        (Data as ai.IntKeyData).Reload(reloadData.Data as ai.IntKeyData);
                        break;
                    case ai.StringKeyData.__ID__:
                        (Data as ai.StringKeyData).Reload(reloadData.Data as ai.StringKeyData);
                        break;
                    case ai.BlackboardKeyData.__ID__:
                        (Data as ai.BlackboardKeyData).Reload(reloadData.Data as ai.BlackboardKeyData);
                        break;
                }
            }else
            {
                typeof(BinaryOperator).GetProperty("Data").SetValue(this,reloadData.Data);
            }
        }
    }

    public override string ToString()
    {
        return "{ "
        + "Oper:" + Oper + ","
        + "Data:" + Data + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}

}
