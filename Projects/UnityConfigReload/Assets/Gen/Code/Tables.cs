//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System.Linq;
using Bright.Serialization;


namespace cfg
{
   
public partial class Tables
{
    public ai.TbBlackboard TbBlackboard {get; private set;}
    public ai.TbBehaviorTree TbBehaviorTree {get; private set;}
    public blueprint.TbClazz TbClazz {get; private set;}
    public bonus.TbDrop TbDrop {get; private set;}
    public common.TbGlobalConfig TbGlobalConfig {get; private set;}
    public error.TbErrorInfo TbErrorInfo {get; private set;}
    public error.TbCodeInfo TbCodeInfo {get; private set;}
    /// <summary>
    /// 道具表
    /// </summary>
    public item.TbItem TbItem {get; private set;}
    public item.TbItemFunc TbItemFunc {get; private set;}
    public item.TbItemExtra TbItemExtra {get; private set;}
    public l10n.TbL10NDemo TbL10NDemo {get; private set;}
    public l10n.TbPatchDemo TbPatchDemo {get; private set;}
    public mail.TbSystemMail TbSystemMail {get; private set;}
    public mail.TbGlobalMail TbGlobalMail {get; private set;}
    public role.TbRoleLevelExpAttr TbRoleLevelExpAttr {get; private set;}
    public role.TbRoleLevelBonusCoefficient TbRoleLevelBonusCoefficient {get; private set;}
    public tag.TbTestTag TbTestTag {get; private set;}
    public test.TbFullTypes TbFullTypes {get; private set;}
    public test.TbSingleton TbSingleton {get; private set;}
    public test.TbNotIndexList TbNotIndexList {get; private set;}
    public test.TbMultiUnionIndexList TbMultiUnionIndexList {get; private set;}
    public test.TbMultiIndexList TbMultiIndexList {get; private set;}
    public test.TbDataFromMisc TbDataFromMisc {get; private set;}
    public test.TbMultiRowRecord TbMultiRowRecord {get; private set;}
    public test.TbTestMultiColumn TbTestMultiColumn {get; private set;}
    public test.TbMultiRowTitle TbMultiRowTitle {get; private set;}
    public test.TbTestNull TbTestNull {get; private set;}
    public test.TbDemoPrimitive TbDemoPrimitive {get; private set;}
    public test.TbTestString TbTestString {get; private set;}
    public test.TbDemoGroup TbDemoGroup {get; private set;}
    public test.TbDemoGroup_C TbDemoGroup_C {get; private set;}
    public test.TbDemoGroup_S TbDemoGroup_S {get; private set;}
    public test.TbDemoGroup_E TbDemoGroup_E {get; private set;}
    public test.TbTestGlobal TbTestGlobal {get; private set;}
    public test.TbTestBeRef TbTestBeRef {get; private set;}
    public test.TbTestBeRef2 TbTestBeRef2 {get; private set;}
    public test.TbTestRef TbTestRef {get; private set;}
    public test.TbTestSize TbTestSize {get; private set;}
    public test.TbTestSet TbTestSet {get; private set;}
    public test.TbDetectCsvEncoding TbDetectCsvEncoding {get; private set;}
    public test.TbItem2 TbItem2 {get; private set;}
    public test.TbDefineFromExcel TbDefineFromExcel {get; private set;}
    public test.TbDefineFromExcelOne TbDefineFromExcelOne {get; private set;}
    public test.TbTestIndex TbTestIndex {get; private set;}
    public test.TbTestMap TbTestMap {get; private set;}
    public test.TbExcelFromJson TbExcelFromJson {get; private set;}
    public test.TbCompositeJsonTable1 TbCompositeJsonTable1 {get; private set;}
    public test.TbCompositeJsonTable2 TbCompositeJsonTable2 {get; private set;}
    public test.TbCompositeJsonTable3 TbCompositeJsonTable3 {get; private set;}
    public test.TbExcelFromJsonMultiRow TbExcelFromJsonMultiRow {get; private set;}
    public test.TbTestSep TbTestSep {get; private set;}
    public test.TbTestScriptableObject TbTestScriptableObject {get; private set;}
    public test.TbTestExternalType TbTestExternalType {get; private set;}
    public test.TbDemoGroupDefineFromExcel TbDemoGroupDefineFromExcel {get; private set;}
    public test.TbDefineFromExcel2 TbDefineFromExcel2 {get; private set;}
    public test.TbTestExcelBean TbTestExcelBean {get; private set;}
    public test.TbTestDesc TbTestDesc {get; private set;}

    private System.Func<string, ByteBuf> _loader;

    private System.Collections.Generic.Dictionary<string, object> tables;

    public Tables(System.Func<string, ByteBuf> loader)
    {
        _loader = loader;
        tables = new System.Collections.Generic.Dictionary<string, object>();
        TbBlackboard = new ai.TbBlackboard(loader("ai_tbblackboard")); 
        tables.Add("ai.TbBlackboard", TbBlackboard);
        TbBehaviorTree = new ai.TbBehaviorTree(loader("ai_tbbehaviortree")); 
        tables.Add("ai.TbBehaviorTree", TbBehaviorTree);
        TbClazz = new blueprint.TbClazz(loader("blueprint_tbclazz")); 
        tables.Add("blueprint.TbClazz", TbClazz);
        TbDrop = new bonus.TbDrop(loader("bonus_tbdrop")); 
        tables.Add("bonus.TbDrop", TbDrop);
        TbGlobalConfig = new common.TbGlobalConfig(loader("common_tbglobalconfig")); 
        tables.Add("common.TbGlobalConfig", TbGlobalConfig);
        TbErrorInfo = new error.TbErrorInfo(loader("error_tberrorinfo")); 
        tables.Add("error.TbErrorInfo", TbErrorInfo);
        TbCodeInfo = new error.TbCodeInfo(loader("error_tbcodeinfo")); 
        tables.Add("error.TbCodeInfo", TbCodeInfo);
        TbItem = new item.TbItem(loader("item_tbitem")); 
        tables.Add("item.TbItem", TbItem);
        TbItemFunc = new item.TbItemFunc(loader("item_tbitemfunc")); 
        tables.Add("item.TbItemFunc", TbItemFunc);
        TbItemExtra = new item.TbItemExtra(loader("item_tbitemextra")); 
        tables.Add("item.TbItemExtra", TbItemExtra);
        TbL10NDemo = new l10n.TbL10NDemo(loader("l10n_tbl10ndemo")); 
        tables.Add("l10n.TbL10NDemo", TbL10NDemo);
        TbPatchDemo = new l10n.TbPatchDemo(loader("l10n_tbpatchdemo")); 
        tables.Add("l10n.TbPatchDemo", TbPatchDemo);
        TbSystemMail = new mail.TbSystemMail(loader("mail_tbsystemmail")); 
        tables.Add("mail.TbSystemMail", TbSystemMail);
        TbGlobalMail = new mail.TbGlobalMail(loader("mail_tbglobalmail")); 
        tables.Add("mail.TbGlobalMail", TbGlobalMail);
        TbRoleLevelExpAttr = new role.TbRoleLevelExpAttr(loader("role_tbrolelevelexpattr")); 
        tables.Add("role.TbRoleLevelExpAttr", TbRoleLevelExpAttr);
        TbRoleLevelBonusCoefficient = new role.TbRoleLevelBonusCoefficient(loader("role_tbrolelevelbonuscoefficient")); 
        tables.Add("role.TbRoleLevelBonusCoefficient", TbRoleLevelBonusCoefficient);
        TbTestTag = new tag.TbTestTag(loader("tag_tbtesttag")); 
        tables.Add("tag.TbTestTag", TbTestTag);
        TbFullTypes = new test.TbFullTypes(loader("test_tbfulltypes")); 
        tables.Add("test.TbFullTypes", TbFullTypes);
        TbSingleton = new test.TbSingleton(loader("test_tbsingleton")); 
        tables.Add("test.TbSingleton", TbSingleton);
        TbNotIndexList = new test.TbNotIndexList(loader("test_tbnotindexlist")); 
        tables.Add("test.TbNotIndexList", TbNotIndexList);
        TbMultiUnionIndexList = new test.TbMultiUnionIndexList(loader("test_tbmultiunionindexlist")); 
        tables.Add("test.TbMultiUnionIndexList", TbMultiUnionIndexList);
        TbMultiIndexList = new test.TbMultiIndexList(loader("test_tbmultiindexlist")); 
        tables.Add("test.TbMultiIndexList", TbMultiIndexList);
        TbDataFromMisc = new test.TbDataFromMisc(loader("test_tbdatafrommisc")); 
        tables.Add("test.TbDataFromMisc", TbDataFromMisc);
        TbMultiRowRecord = new test.TbMultiRowRecord(loader("test_tbmultirowrecord")); 
        tables.Add("test.TbMultiRowRecord", TbMultiRowRecord);
        TbTestMultiColumn = new test.TbTestMultiColumn(loader("test_tbtestmulticolumn")); 
        tables.Add("test.TbTestMultiColumn", TbTestMultiColumn);
        TbMultiRowTitle = new test.TbMultiRowTitle(loader("test_tbmultirowtitle")); 
        tables.Add("test.TbMultiRowTitle", TbMultiRowTitle);
        TbTestNull = new test.TbTestNull(loader("test_tbtestnull")); 
        tables.Add("test.TbTestNull", TbTestNull);
        TbDemoPrimitive = new test.TbDemoPrimitive(loader("test_tbdemoprimitive")); 
        tables.Add("test.TbDemoPrimitive", TbDemoPrimitive);
        TbTestString = new test.TbTestString(loader("test_tbteststring")); 
        tables.Add("test.TbTestString", TbTestString);
        TbDemoGroup = new test.TbDemoGroup(loader("test_tbdemogroup")); 
        tables.Add("test.TbDemoGroup", TbDemoGroup);
        TbDemoGroup_C = new test.TbDemoGroup_C(loader("test_tbdemogroup_c")); 
        tables.Add("test.TbDemoGroup_C", TbDemoGroup_C);
        TbDemoGroup_S = new test.TbDemoGroup_S(loader("test_tbdemogroup_s")); 
        tables.Add("test.TbDemoGroup_S", TbDemoGroup_S);
        TbDemoGroup_E = new test.TbDemoGroup_E(loader("test_tbdemogroup_e")); 
        tables.Add("test.TbDemoGroup_E", TbDemoGroup_E);
        TbTestGlobal = new test.TbTestGlobal(loader("test_tbtestglobal")); 
        tables.Add("test.TbTestGlobal", TbTestGlobal);
        TbTestBeRef = new test.TbTestBeRef(loader("test_tbtestberef")); 
        tables.Add("test.TbTestBeRef", TbTestBeRef);
        TbTestBeRef2 = new test.TbTestBeRef2(loader("test_tbtestberef2")); 
        tables.Add("test.TbTestBeRef2", TbTestBeRef2);
        TbTestRef = new test.TbTestRef(loader("test_tbtestref")); 
        tables.Add("test.TbTestRef", TbTestRef);
        TbTestSize = new test.TbTestSize(loader("test_tbtestsize")); 
        tables.Add("test.TbTestSize", TbTestSize);
        TbTestSet = new test.TbTestSet(loader("test_tbtestset")); 
        tables.Add("test.TbTestSet", TbTestSet);
        TbDetectCsvEncoding = new test.TbDetectCsvEncoding(loader("test_tbdetectcsvencoding")); 
        tables.Add("test.TbDetectCsvEncoding", TbDetectCsvEncoding);
        TbItem2 = new test.TbItem2(loader("test_tbitem2")); 
        tables.Add("test.TbItem2", TbItem2);
        TbDefineFromExcel = new test.TbDefineFromExcel(loader("test_tbdefinefromexcel")); 
        tables.Add("test.TbDefineFromExcel", TbDefineFromExcel);
        TbDefineFromExcelOne = new test.TbDefineFromExcelOne(loader("test_tbdefinefromexcelone")); 
        tables.Add("test.TbDefineFromExcelOne", TbDefineFromExcelOne);
        TbTestIndex = new test.TbTestIndex(loader("test_tbtestindex")); 
        tables.Add("test.TbTestIndex", TbTestIndex);
        TbTestMap = new test.TbTestMap(loader("test_tbtestmap")); 
        tables.Add("test.TbTestMap", TbTestMap);
        TbExcelFromJson = new test.TbExcelFromJson(loader("test_tbexcelfromjson")); 
        tables.Add("test.TbExcelFromJson", TbExcelFromJson);
        TbCompositeJsonTable1 = new test.TbCompositeJsonTable1(loader("test_tbcompositejsontable1")); 
        tables.Add("test.TbCompositeJsonTable1", TbCompositeJsonTable1);
        TbCompositeJsonTable2 = new test.TbCompositeJsonTable2(loader("test_tbcompositejsontable2")); 
        tables.Add("test.TbCompositeJsonTable2", TbCompositeJsonTable2);
        TbCompositeJsonTable3 = new test.TbCompositeJsonTable3(loader("test_tbcompositejsontable3")); 
        tables.Add("test.TbCompositeJsonTable3", TbCompositeJsonTable3);
        TbExcelFromJsonMultiRow = new test.TbExcelFromJsonMultiRow(loader("test_tbexcelfromjsonmultirow")); 
        tables.Add("test.TbExcelFromJsonMultiRow", TbExcelFromJsonMultiRow);
        TbTestSep = new test.TbTestSep(loader("test_tbtestsep")); 
        tables.Add("test.TbTestSep", TbTestSep);
        TbTestScriptableObject = new test.TbTestScriptableObject(loader("test_tbtestscriptableobject")); 
        tables.Add("test.TbTestScriptableObject", TbTestScriptableObject);
        TbTestExternalType = new test.TbTestExternalType(loader("test_tbtestexternaltype")); 
        tables.Add("test.TbTestExternalType", TbTestExternalType);
        TbDemoGroupDefineFromExcel = new test.TbDemoGroupDefineFromExcel(loader("test_tbdemogroupdefinefromexcel")); 
        tables.Add("test.TbDemoGroupDefineFromExcel", TbDemoGroupDefineFromExcel);
        TbDefineFromExcel2 = new test.TbDefineFromExcel2(loader("test_tbdefinefromexcel2")); 
        tables.Add("test.TbDefineFromExcel2", TbDefineFromExcel2);
        TbTestExcelBean = new test.TbTestExcelBean(loader("test_tbtestexcelbean")); 
        tables.Add("test.TbTestExcelBean", TbTestExcelBean);
        TbTestDesc = new test.TbTestDesc(loader("test_tbtestdesc")); 
        tables.Add("test.TbTestDesc", TbTestDesc);

        PostInit();
        ResolveAllTable();
        PostResolve();
    }

    public void TranslateText(System.Func<string, string, string> translator)
    {
        TbBlackboard.TranslateText(translator); 
        TbBehaviorTree.TranslateText(translator); 
        TbClazz.TranslateText(translator); 
        TbDrop.TranslateText(translator); 
        TbGlobalConfig.TranslateText(translator); 
        TbErrorInfo.TranslateText(translator); 
        TbCodeInfo.TranslateText(translator); 
        TbItem.TranslateText(translator); 
        TbItemFunc.TranslateText(translator); 
        TbItemExtra.TranslateText(translator); 
        TbL10NDemo.TranslateText(translator); 
        TbPatchDemo.TranslateText(translator); 
        TbSystemMail.TranslateText(translator); 
        TbGlobalMail.TranslateText(translator); 
        TbRoleLevelExpAttr.TranslateText(translator); 
        TbRoleLevelBonusCoefficient.TranslateText(translator); 
        TbTestTag.TranslateText(translator); 
        TbFullTypes.TranslateText(translator); 
        TbSingleton.TranslateText(translator); 
        TbNotIndexList.TranslateText(translator); 
        TbMultiUnionIndexList.TranslateText(translator); 
        TbMultiIndexList.TranslateText(translator); 
        TbDataFromMisc.TranslateText(translator); 
        TbMultiRowRecord.TranslateText(translator); 
        TbTestMultiColumn.TranslateText(translator); 
        TbMultiRowTitle.TranslateText(translator); 
        TbTestNull.TranslateText(translator); 
        TbDemoPrimitive.TranslateText(translator); 
        TbTestString.TranslateText(translator); 
        TbDemoGroup.TranslateText(translator); 
        TbDemoGroup_C.TranslateText(translator); 
        TbDemoGroup_S.TranslateText(translator); 
        TbDemoGroup_E.TranslateText(translator); 
        TbTestGlobal.TranslateText(translator); 
        TbTestBeRef.TranslateText(translator); 
        TbTestBeRef2.TranslateText(translator); 
        TbTestRef.TranslateText(translator); 
        TbTestSize.TranslateText(translator); 
        TbTestSet.TranslateText(translator); 
        TbDetectCsvEncoding.TranslateText(translator); 
        TbItem2.TranslateText(translator); 
        TbDefineFromExcel.TranslateText(translator); 
        TbDefineFromExcelOne.TranslateText(translator); 
        TbTestIndex.TranslateText(translator); 
        TbTestMap.TranslateText(translator); 
        TbExcelFromJson.TranslateText(translator); 
        TbCompositeJsonTable1.TranslateText(translator); 
        TbCompositeJsonTable2.TranslateText(translator); 
        TbCompositeJsonTable3.TranslateText(translator); 
        TbExcelFromJsonMultiRow.TranslateText(translator); 
        TbTestSep.TranslateText(translator); 
        TbTestScriptableObject.TranslateText(translator); 
        TbTestExternalType.TranslateText(translator); 
        TbDemoGroupDefineFromExcel.TranslateText(translator); 
        TbDefineFromExcel2.TranslateText(translator); 
        TbTestExcelBean.TranslateText(translator); 
        TbTestDesc.TranslateText(translator); 
    }
    
    partial void PostInit();
    partial void PostResolve();

    private void ResolveAllTable()
    {
        TbBlackboard.Resolve(tables);
        TbBehaviorTree.Resolve(tables);
        TbClazz.Resolve(tables);
        TbDrop.Resolve(tables);
        TbGlobalConfig.Resolve(tables);
        TbErrorInfo.Resolve(tables);
        TbCodeInfo.Resolve(tables);
        TbItem.Resolve(tables);
        TbItemFunc.Resolve(tables);
        TbItemExtra.Resolve(tables);
        TbL10NDemo.Resolve(tables);
        TbPatchDemo.Resolve(tables);
        TbSystemMail.Resolve(tables);
        TbGlobalMail.Resolve(tables);
        TbRoleLevelExpAttr.Resolve(tables);
        TbRoleLevelBonusCoefficient.Resolve(tables);
        TbTestTag.Resolve(tables);
        TbFullTypes.Resolve(tables);
        TbSingleton.Resolve(tables);
        TbNotIndexList.Resolve(tables);
        TbMultiUnionIndexList.Resolve(tables);
        TbMultiIndexList.Resolve(tables);
        TbDataFromMisc.Resolve(tables);
        TbMultiRowRecord.Resolve(tables);
        TbTestMultiColumn.Resolve(tables);
        TbMultiRowTitle.Resolve(tables);
        TbTestNull.Resolve(tables);
        TbDemoPrimitive.Resolve(tables);
        TbTestString.Resolve(tables);
        TbDemoGroup.Resolve(tables);
        TbDemoGroup_C.Resolve(tables);
        TbDemoGroup_S.Resolve(tables);
        TbDemoGroup_E.Resolve(tables);
        TbTestGlobal.Resolve(tables);
        TbTestBeRef.Resolve(tables);
        TbTestBeRef2.Resolve(tables);
        TbTestRef.Resolve(tables);
        TbTestSize.Resolve(tables);
        TbTestSet.Resolve(tables);
        TbDetectCsvEncoding.Resolve(tables);
        TbItem2.Resolve(tables);
        TbDefineFromExcel.Resolve(tables);
        TbDefineFromExcelOne.Resolve(tables);
        TbTestIndex.Resolve(tables);
        TbTestMap.Resolve(tables);
        TbExcelFromJson.Resolve(tables);
        TbCompositeJsonTable1.Resolve(tables);
        TbCompositeJsonTable2.Resolve(tables);
        TbCompositeJsonTable3.Resolve(tables);
        TbExcelFromJsonMultiRow.Resolve(tables);
        TbTestSep.Resolve(tables);
        TbTestScriptableObject.Resolve(tables);
        TbTestExternalType.Resolve(tables);
        TbDemoGroupDefineFromExcel.Resolve(tables);
        TbDefineFromExcel2.Resolve(tables);
        TbTestExcelBean.Resolve(tables);
        TbTestDesc.Resolve(tables);
    }

    private void ReloadOneTable(string reloadTableName)
    {
        if (!tables.Keys.Contains(reloadTableName))
        {
            return;
        }

        switch (reloadTableName)
        {
            case "ai.TbBlackboard":
                TbBlackboard.Reload(_loader("ai.TbBlackboard"));
                break;
            case "ai.TbBehaviorTree":
                TbBehaviorTree.Reload(_loader("ai.TbBehaviorTree"));
                break;
            case "blueprint.TbClazz":
                TbClazz.Reload(_loader("blueprint.TbClazz"));
                break;
            case "bonus.TbDrop":
                TbDrop.Reload(_loader("bonus.TbDrop"));
                break;
            case "common.TbGlobalConfig":
                TbGlobalConfig.Reload(_loader("common.TbGlobalConfig"));
                break;
            case "error.TbErrorInfo":
                TbErrorInfo.Reload(_loader("error.TbErrorInfo"));
                break;
            case "error.TbCodeInfo":
                TbCodeInfo.Reload(_loader("error.TbCodeInfo"));
                break;
            case "item.TbItem":
                TbItem.Reload(_loader("item.TbItem"));
                break;
            case "item.TbItemFunc":
                TbItemFunc.Reload(_loader("item.TbItemFunc"));
                break;
            case "item.TbItemExtra":
                TbItemExtra.Reload(_loader("item.TbItemExtra"));
                break;
            case "l10n.TbL10NDemo":
                TbL10NDemo.Reload(_loader("l10n.TbL10NDemo"));
                break;
            case "l10n.TbPatchDemo":
                TbPatchDemo.Reload(_loader("l10n.TbPatchDemo"));
                break;
            case "mail.TbSystemMail":
                TbSystemMail.Reload(_loader("mail.TbSystemMail"));
                break;
            case "mail.TbGlobalMail":
                TbGlobalMail.Reload(_loader("mail.TbGlobalMail"));
                break;
            case "role.TbRoleLevelExpAttr":
                TbRoleLevelExpAttr.Reload(_loader("role.TbRoleLevelExpAttr"));
                break;
            case "role.TbRoleLevelBonusCoefficient":
                TbRoleLevelBonusCoefficient.Reload(_loader("role.TbRoleLevelBonusCoefficient"));
                break;
            case "tag.TbTestTag":
                TbTestTag.Reload(_loader("tag.TbTestTag"));
                break;
            case "test.TbFullTypes":
                TbFullTypes.Reload(_loader("test.TbFullTypes"));
                break;
            case "test.TbSingleton":
                TbSingleton.Reload(_loader("test.TbSingleton"));
                break;
            case "test.TbNotIndexList":
                TbNotIndexList.Reload(_loader("test.TbNotIndexList"));
                break;
            case "test.TbMultiUnionIndexList":
                TbMultiUnionIndexList.Reload(_loader("test.TbMultiUnionIndexList"));
                break;
            case "test.TbMultiIndexList":
                TbMultiIndexList.Reload(_loader("test.TbMultiIndexList"));
                break;
            case "test.TbDataFromMisc":
                TbDataFromMisc.Reload(_loader("test.TbDataFromMisc"));
                break;
            case "test.TbMultiRowRecord":
                TbMultiRowRecord.Reload(_loader("test.TbMultiRowRecord"));
                break;
            case "test.TbTestMultiColumn":
                TbTestMultiColumn.Reload(_loader("test.TbTestMultiColumn"));
                break;
            case "test.TbMultiRowTitle":
                TbMultiRowTitle.Reload(_loader("test.TbMultiRowTitle"));
                break;
            case "test.TbTestNull":
                TbTestNull.Reload(_loader("test.TbTestNull"));
                break;
            case "test.TbDemoPrimitive":
                TbDemoPrimitive.Reload(_loader("test.TbDemoPrimitive"));
                break;
            case "test.TbTestString":
                TbTestString.Reload(_loader("test.TbTestString"));
                break;
            case "test.TbDemoGroup":
                TbDemoGroup.Reload(_loader("test.TbDemoGroup"));
                break;
            case "test.TbDemoGroup_C":
                TbDemoGroup_C.Reload(_loader("test.TbDemoGroup_C"));
                break;
            case "test.TbDemoGroup_S":
                TbDemoGroup_S.Reload(_loader("test.TbDemoGroup_S"));
                break;
            case "test.TbDemoGroup_E":
                TbDemoGroup_E.Reload(_loader("test.TbDemoGroup_E"));
                break;
            case "test.TbTestGlobal":
                TbTestGlobal.Reload(_loader("test.TbTestGlobal"));
                break;
            case "test.TbTestBeRef":
                TbTestBeRef.Reload(_loader("test.TbTestBeRef"));
                break;
            case "test.TbTestBeRef2":
                TbTestBeRef2.Reload(_loader("test.TbTestBeRef2"));
                break;
            case "test.TbTestRef":
                TbTestRef.Reload(_loader("test.TbTestRef"));
                break;
            case "test.TbTestSize":
                TbTestSize.Reload(_loader("test.TbTestSize"));
                break;
            case "test.TbTestSet":
                TbTestSet.Reload(_loader("test.TbTestSet"));
                break;
            case "test.TbDetectCsvEncoding":
                TbDetectCsvEncoding.Reload(_loader("test.TbDetectCsvEncoding"));
                break;
            case "test.TbItem2":
                TbItem2.Reload(_loader("test.TbItem2"));
                break;
            case "test.TbDefineFromExcel":
                TbDefineFromExcel.Reload(_loader("test.TbDefineFromExcel"));
                break;
            case "test.TbDefineFromExcelOne":
                TbDefineFromExcelOne.Reload(_loader("test.TbDefineFromExcelOne"));
                break;
            case "test.TbTestIndex":
                TbTestIndex.Reload(_loader("test.TbTestIndex"));
                break;
            case "test.TbTestMap":
                TbTestMap.Reload(_loader("test.TbTestMap"));
                break;
            case "test.TbExcelFromJson":
                TbExcelFromJson.Reload(_loader("test.TbExcelFromJson"));
                break;
            case "test.TbCompositeJsonTable1":
                TbCompositeJsonTable1.Reload(_loader("test.TbCompositeJsonTable1"));
                break;
            case "test.TbCompositeJsonTable2":
                TbCompositeJsonTable2.Reload(_loader("test.TbCompositeJsonTable2"));
                break;
            case "test.TbCompositeJsonTable3":
                TbCompositeJsonTable3.Reload(_loader("test.TbCompositeJsonTable3"));
                break;
            case "test.TbExcelFromJsonMultiRow":
                TbExcelFromJsonMultiRow.Reload(_loader("test.TbExcelFromJsonMultiRow"));
                break;
            case "test.TbTestSep":
                TbTestSep.Reload(_loader("test.TbTestSep"));
                break;
            case "test.TbTestScriptableObject":
                TbTestScriptableObject.Reload(_loader("test.TbTestScriptableObject"));
                break;
            case "test.TbTestExternalType":
                TbTestExternalType.Reload(_loader("test.TbTestExternalType"));
                break;
            case "test.TbDemoGroupDefineFromExcel":
                TbDemoGroupDefineFromExcel.Reload(_loader("test.TbDemoGroupDefineFromExcel"));
                break;
            case "test.TbDefineFromExcel2":
                TbDefineFromExcel2.Reload(_loader("test.TbDefineFromExcel2"));
                break;
            case "test.TbTestExcelBean":
                TbTestExcelBean.Reload(_loader("test.TbTestExcelBean"));
                break;
            case "test.TbTestDesc":
                TbTestDesc.Reload(_loader("test.TbTestDesc"));
                break;
        }

    }

    public void Reload(params string[] reloadTableNames)
    {
        foreach (var reloadTableName in reloadTableNames)
        {
            ReloadOneTable(reloadTableName);
        }
        ResolveAllTable();
    }
    

    public void ReloadAll()
    {
        Reload(tables.Keys.ToArray());
    }
}

}