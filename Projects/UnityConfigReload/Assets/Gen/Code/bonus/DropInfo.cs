//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using System.Linq;



namespace cfg.bonus
{

public sealed partial class DropInfo :  Bright.Config.BeanBase 
{
    public DropInfo(ByteBuf _buf) 
    {
        Id = _buf.ReadInt();
        Desc = _buf.ReadString();
        {int n = System.Math.Min(_buf.ReadSize(), _buf.Size);ClientShowItems = new System.Collections.Generic.List<bonus.ShowItemInfo>(n);for(var i = 0 ; i < n ; i++) { bonus.ShowItemInfo _e;  _e = bonus.ShowItemInfo.DeserializeShowItemInfo(_buf); ClientShowItems.Add(_e);}}
        Bonus = bonus.Bonus.DeserializeBonus(_buf);
        PostInit();
    }

    public static DropInfo DeserializeDropInfo(ByteBuf _buf)
    {
        return new bonus.DropInfo(_buf);
    }

    public int Id { get; protected set; }
    public string Desc { get; protected set; }
    public System.Collections.Generic.List<bonus.ShowItemInfo> ClientShowItems { get; protected set; }
    public bonus.Bonus Bonus { get; protected set; }

    public const int __ID__ = -2014781108;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        foreach(var _e in ClientShowItems) { _e?.Resolve(_tables); }
        Bonus?.Resolve(_tables);
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
        foreach(var _e in ClientShowItems) { _e?.TranslateText(translator); }
        Bonus?.TranslateText(translator);
    }

    public void Reload(DropInfo reloadData)
    {
        Id = reloadData.Id;
        Desc = reloadData.Desc;
        if(ClientShowItems==null)
        {
            ClientShowItems = reloadData.ClientShowItems;
        }else
        {
            ClientShowItems.Capacity = reloadData.ClientShowItems.Count;
            for (int i = 0; i < reloadData.ClientShowItems.Count; i++)
            {
                if(ClientShowItems[i]!=null)
                {
                    ClientShowItems[i].Reload(reloadData.ClientShowItems[i]);
                }else
                {
                    ClientShowItems[i] = reloadData.ClientShowItems[i];
                }
            }
        }
        if(Bonus==null)
        {
            Bonus = reloadData.Bonus;
        }else
        {
            if(Bonus.GetTypeId() == reloadData.Bonus.GetTypeId())
            {
                switch (reloadData.Bonus.GetTypeId())
                {
                    case bonus.OneItem.__ID__:
                        (Bonus as bonus.OneItem).Reload(reloadData.Bonus as bonus.OneItem);
                        break;
                    case bonus.OneItems.__ID__:
                        (Bonus as bonus.OneItems).Reload(reloadData.Bonus as bonus.OneItems);
                        break;
                    case bonus.Item.__ID__:
                        (Bonus as bonus.Item).Reload(reloadData.Bonus as bonus.Item);
                        break;
                    case bonus.Items.__ID__:
                        (Bonus as bonus.Items).Reload(reloadData.Bonus as bonus.Items);
                        break;
                    case bonus.CoefficientItem.__ID__:
                        (Bonus as bonus.CoefficientItem).Reload(reloadData.Bonus as bonus.CoefficientItem);
                        break;
                    case bonus.WeightItems.__ID__:
                        (Bonus as bonus.WeightItems).Reload(reloadData.Bonus as bonus.WeightItems);
                        break;
                    case bonus.ProbabilityItems.__ID__:
                        (Bonus as bonus.ProbabilityItems).Reload(reloadData.Bonus as bonus.ProbabilityItems);
                        break;
                    case bonus.MultiBonus.__ID__:
                        (Bonus as bonus.MultiBonus).Reload(reloadData.Bonus as bonus.MultiBonus);
                        break;
                    case bonus.ProbabilityBonus.__ID__:
                        (Bonus as bonus.ProbabilityBonus).Reload(reloadData.Bonus as bonus.ProbabilityBonus);
                        break;
                    case bonus.WeightBonus.__ID__:
                        (Bonus as bonus.WeightBonus).Reload(reloadData.Bonus as bonus.WeightBonus);
                        break;
                    case bonus.DropBonus.__ID__:
                        (Bonus as bonus.DropBonus).Reload(reloadData.Bonus as bonus.DropBonus);
                        break;
                }
            }else
            {
                typeof(DropInfo).GetProperty("Bonus").SetValue(this,reloadData.Bonus);
            }
        }
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "Desc:" + Desc + ","
        + "ClientShowItems:" + Bright.Common.StringUtil.CollectionToString(ClientShowItems) + ","
        + "Bonus:" + Bonus + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}

}
