//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using System.Linq;



namespace cfg.test
{

public sealed partial class TestDesc :  Bright.Config.BeanBase 
{
    public TestDesc(ByteBuf _buf) 
    {
        Id = _buf.ReadInt();
        Name = _buf.ReadString();
        A1 = _buf.ReadInt();
        A2 = _buf.ReadInt();
        X1 = test.H1.DeserializeH1(_buf);
        {int n = System.Math.Min(_buf.ReadSize(), _buf.Size);X2 = new System.Collections.Generic.List<test.H2>(n);for(var i = 0 ; i < n ; i++) { test.H2 _e;  _e = test.H2.DeserializeH2(_buf); X2.Add(_e);}}
        {int n = System.Math.Min(_buf.ReadSize(), _buf.Size);X3 = new test.H2[n];for(var i = 0 ; i < n ; i++) { test.H2 _e;_e = test.H2.DeserializeH2(_buf); X3[i] = _e;}}
        PostInit();
    }

    public static TestDesc DeserializeTestDesc(ByteBuf _buf)
    {
        return new test.TestDesc(_buf);
    }

    public int Id { get; protected set; }
    /// <summary>
    /// 禁止
    /// </summary>
    public string Name { get; protected set; }
    /// <summary>
    /// 测试换行<br/>第2行<br/>第3层
    /// </summary>
    public int A1 { get; protected set; }
    /// <summary>
    /// 测试转义 &lt; &amp; % / # &gt;
    /// </summary>
    public int A2 { get; protected set; }
    public test.H1 X1 { get; protected set; }
    /// <summary>
    /// 这是x2
    /// </summary>
    public System.Collections.Generic.List<test.H2> X2 { get; protected set; }
    public test.H2[] X3 { get; protected set; }

    public const int __ID__ = 339555391;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        X1?.Resolve(_tables);
        foreach(var _e in X2) { _e?.Resolve(_tables); }
        foreach(var _e in X3) { _e?.Resolve(_tables); }
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
        X1?.TranslateText(translator);
        foreach(var _e in X2) { _e?.TranslateText(translator); }
        foreach(var _e in X3) { _e?.TranslateText(translator); }
    }

    public void Reload(TestDesc reloadData)
    {
        Id = reloadData.Id;
        Name = reloadData.Name;
        A1 = reloadData.A1;
        A2 = reloadData.A2;
        if(X1==null)
        {
            X1 = reloadData.X1;
        }else
        {
            if(X1.GetTypeId() == reloadData.X1.GetTypeId())
            {
                X1.Reload(reloadData.X1);
            }else
            {
                typeof(TestDesc).GetProperty("X1").SetValue(this,reloadData.X1);
            }
        }
        if(X2==null)
        {
            X2 = reloadData.X2;
        }else
        {
            X2.Capacity = reloadData.X2.Count;
            for (int i = 0; i < reloadData.X2.Count; i++)
            {
                if(X2[i]!=null)
                {
                    X2[i].Reload(reloadData.X2[i]);
                }else
                {
                    X2[i] = reloadData.X2[i];
                }
            }
        }
        if(X3==null)
        {
            X3 = reloadData.X3;
        }else
        {
            if(X3.Length!=reloadData.X3.Length)
            {
                var newArray = new test.H2[reloadData.X3.Length];
                for(int i = 0; i<newArray.Length; i++)
                {
                    if(i<X3.Length)
                    {
                        newArray[i] = X3[i];
                    }
                }
                typeof(TestDesc).GetProperty("X3").SetValue(this, newArray);
            }
                for(int i = 0; i<reloadData.X3.Length; i++)
                {
                    if(X3[i]!=null){
                        X3[i].Reload(reloadData.X3[i]);
                    }else{
                        X3[i] = reloadData.X3[i];
                    }
                }
        }
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "Name:" + Name + ","
        + "A1:" + A1 + ","
        + "A2:" + A2 + ","
        + "X1:" + X1 + ","
        + "X2:" + Bright.Common.StringUtil.CollectionToString(X2) + ","
        + "X3:" + Bright.Common.StringUtil.CollectionToString(X3) + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}

}
