//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using System.Linq;



namespace cfg.test
{

public sealed partial class DemoType2 :  Bright.Config.BeanBase 
{
    public DemoType2(ByteBuf _buf) 
    {
        X4 = _buf.ReadInt();
        X1 = _buf.ReadBool();
        X2 = _buf.ReadByte();
        X3 = _buf.ReadShort();
        X5 = _buf.ReadLong();
        X6 = _buf.ReadFloat();
        X7 = _buf.ReadDouble();
        X80 = _buf.ReadFshort();
        X8 = _buf.ReadFint();
        X9 = _buf.ReadFlong();
        X10 = _buf.ReadString();
        X12 = test.DemoType1.DeserializeDemoType1(_buf);
        X13 = (test.DemoEnum)_buf.ReadInt();
        X14 = test.DemoDynamic.DeserializeDemoDynamic(_buf);
        S1_l10n_key = _buf.ReadString(); S1 = _buf.ReadString();
        V2 = _buf.ReadUnityVector2();
        V3 = _buf.ReadUnityVector3();
        V4 = _buf.ReadUnityVector4();
        T1 = _buf.ReadInt();
        {int n = System.Math.Min(_buf.ReadSize(), _buf.Size);K1 = new int[n];for(var i = 0 ; i < n ; i++) { int _e;_e = _buf.ReadInt(); K1[i] = _e;}}
        {int n = System.Math.Min(_buf.ReadSize(), _buf.Size);K2 = new System.Collections.Generic.List<int>(n);for(var i = 0 ; i < n ; i++) { int _e;  _e = _buf.ReadInt(); K2.Add(_e);}}
        {int n = System.Math.Min(_buf.ReadSize(), _buf.Size);K5 = new System.Collections.Generic.HashSet<int>(/*n * 3 / 2*/);for(var i = 0 ; i < n ; i++) { int _e;  _e = _buf.ReadInt(); K5.Add(_e);}}
        {int n = System.Math.Min(_buf.ReadSize(), _buf.Size);K8 = new System.Collections.Generic.Dictionary<int, int>(n * 3 / 2);for(var i = 0 ; i < n ; i++) { int _k;  _k = _buf.ReadInt(); int _v;  _v = _buf.ReadInt();     K8.Add(_k, _v);}}
        {int n = System.Math.Min(_buf.ReadSize(), _buf.Size);K9 = new System.Collections.Generic.List<test.DemoE2>(n);for(var i = 0 ; i < n ; i++) { test.DemoE2 _e;  _e = test.DemoE2.DeserializeDemoE2(_buf); K9.Add(_e);}}
        {int n = System.Math.Min(_buf.ReadSize(), _buf.Size);K15 = new test.DemoDynamic[n];for(var i = 0 ; i < n ; i++) { test.DemoDynamic _e;_e = test.DemoDynamic.DeserializeDemoDynamic(_buf); K15[i] = _e;}}
        PostInit();
    }

    public static DemoType2 DeserializeDemoType2(ByteBuf _buf)
    {
        return new test.DemoType2(_buf);
    }

    public int X4 { get; protected set; }
    public bool X1 { get; protected set; }
    public byte X2 { get; protected set; }
    public short X3 { get; protected set; }
    public long X5 { get; protected set; }
    public float X6 { get; protected set; }
    public double X7 { get; protected set; }
    public short X80 { get; protected set; }
    public int X8 { get; protected set; }
    public long X9 { get; protected set; }
    public string X10 { get; protected set; }
    public test.DemoType1 X12 { get; protected set; }
    public test.DemoEnum X13 { get; protected set; }
    public test.DemoDynamic X14 { get; protected set; }
    public string S1 { get; protected set; }
    //field.gen_text_key
    public string S1_l10n_key { get; protected set; }
    public UnityEngine.Vector2 V2 { get; protected set; }
    public UnityEngine.Vector3 V3 { get; protected set; }
    public UnityEngine.Vector4 V4 { get; protected set; }
    public int T1 { get; protected set; }
    public long T1_Millis => T1 * 1000L;
    public int[] K1 { get; protected set; }
    public System.Collections.Generic.List<int> K2 { get; protected set; }
    public System.Collections.Generic.HashSet<int> K5 { get; protected set; }
    public System.Collections.Generic.Dictionary<int, int> K8 { get; protected set; }
    //field.gen_ref
    public System.Collections.Generic.Dictionary<int, test.DemoType2> K8_Ref { get; private set; }
    public System.Collections.Generic.List<test.DemoE2> K9 { get; protected set; }
    public test.DemoDynamic[] K15 { get; protected set; }

    public const int __ID__ = -367048295;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        X12?.Resolve(_tables);
        X14?.Resolve(_tables);
        { test.TbFullTypes __table = (test.TbFullTypes)_tables["test.TbFullTypes"]; this.K8_Ref = new System.Collections.Generic.Dictionary<int, test.DemoType2>(); foreach(var __e in K8) { this.K8_Ref.Add(__e.Key, __table.GetOrDefault(__e.Value)); } }
        foreach(var _e in K9) { _e?.Resolve(_tables); }
        foreach(var _e in K15) { _e?.Resolve(_tables); }
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
        X12?.TranslateText(translator);
        X14?.TranslateText(translator);
        S1 = translator(S1_l10n_key, S1);
        foreach(var _e in K9) { _e?.TranslateText(translator); }
        foreach(var _e in K15) { _e?.TranslateText(translator); }
    }

    public void Reload(DemoType2 reloadData)
    {
        X4 = reloadData.X4;
        X1 = reloadData.X1;
        X2 = reloadData.X2;
        X3 = reloadData.X3;
        X5 = reloadData.X5;
        X6 = reloadData.X6;
        X7 = reloadData.X7;
        X80 = reloadData.X80;
        X8 = reloadData.X8;
        X9 = reloadData.X9;
        X10 = reloadData.X10;
        if(X12==null)
        {
            X12 = reloadData.X12;
        }else
        {
            if(X12.GetTypeId() == reloadData.X12.GetTypeId())
            {
                X12.Reload(reloadData.X12);
            }else
            {
                typeof(DemoType2).GetProperty("X12").SetValue(this,reloadData.X12);
            }
        }
        X13 = reloadData.X13;
        if(X14==null)
        {
            X14 = reloadData.X14;
        }else
        {
            if(X14.GetTypeId() == reloadData.X14.GetTypeId())
            {
                switch (reloadData.X14.GetTypeId())
                {
                    case test.DemoD2.__ID__:
                        (X14 as test.DemoD2).Reload(reloadData.X14 as test.DemoD2);
                        break;
                    case test.DemoE1.__ID__:
                        (X14 as test.DemoE1).Reload(reloadData.X14 as test.DemoE1);
                        break;
                    case test.login.RoleInfo.__ID__:
                        (X14 as test.login.RoleInfo).Reload(reloadData.X14 as test.login.RoleInfo);
                        break;
                    case test.DemoD5.__ID__:
                        (X14 as test.DemoD5).Reload(reloadData.X14 as test.DemoD5);
                        break;
                }
            }else
            {
                typeof(DemoType2).GetProperty("X14").SetValue(this,reloadData.X14);
            }
        }
        S1 = reloadData.S1;
        V2 = reloadData.V2;
        V3 = reloadData.V3;
        V4 = reloadData.V4;
        T1 = reloadData.T1;
        if(K1==null)
        {
            K1 = reloadData.K1;
        }else
        {
                for(int i = 0; i<reloadData.K1.Length; i++)
                {
                    if(i<K1.Length)
                    {
                        K1[i] = reloadData.K1[i];
                    }
                }
        }
        if(K2==null)
        {
            K2 = reloadData.K2;
        }else
        {
            K2.Capacity = reloadData.K2.Count;
            for (int i = 0; i < reloadData.K2.Count; i++)
            {
                K2[i] = reloadData.K2[i];
            }
        }
        if(K5==null)
        {
            K5 = reloadData.K5;
        }else
        {
            foreach (var setData in K5.ToList())
            {
                if(!reloadData.K5.Contains(setData))
                {
                    K5.Remove(setData);
                }
            }
            foreach (var setData in reloadData.K5)
            {
                if(!K5.Contains(setData))
                {
                    K5.Add(setData);
                }
            }
        }
        if(K8==null)
        {
            K8 = reloadData.K8;
        }else
        {
            foreach (var rawDataKey in K8.Keys.ToList())
            {
                if(!reloadData.K8.ContainsKey(rawDataKey))
                {
                    K8.Remove(rawDataKey);
                }
            }
            foreach (var reload in reloadData.K8)
            {
                if(K8.ContainsKey(reload.Key))
                {
                    K8[reload.Key] = reload.Value;
                }else
                {
                    K8.Add(reload.Key,reload.Value);
                }
            }
        }
        if(K9==null)
        {
            K9 = reloadData.K9;
        }else
        {
            K9.Capacity = reloadData.K9.Count;
            for (int i = 0; i < reloadData.K9.Count; i++)
            {
                if(K9[i]!=null)
                {
                    K9[i].Reload(reloadData.K9[i]);
                }else
                {
                    K9[i] = reloadData.K9[i];
                }
            }
        }
        if(K15==null)
        {
            K15 = reloadData.K15;
        }else
        {
            if(K15.Length!=reloadData.K15.Length)
            {
                var newArray = new test.DemoDynamic[reloadData.K15.Length];
                for(int i = 0; i<newArray.Length; i++)
                {
                    if(i<K15.Length)
                    {
                        newArray[i] = K15[i];
                    }
                }
                typeof(DemoType2).GetProperty("K15").SetValue(this, newArray);
            }
                // array is_dynamic
                for(int i = 0; i<reloadData.K15.Length; i++)
                {
                    if(K15[i]!=null && K15[i].GetTypeId() == reloadData.K15[i].GetTypeId())
                    {
                        switch (reloadData.K15[i].GetTypeId())
                        {
                            case test.DemoD2.__ID__:
                                (K15[i] as test.DemoD2).Reload(reloadData.K15[i] as test.DemoD2);
                                break;
                            case test.DemoE1.__ID__:
                                (K15[i] as test.DemoE1).Reload(reloadData.K15[i] as test.DemoE1);
                                break;
                            case test.login.RoleInfo.__ID__:
                                (K15[i] as test.login.RoleInfo).Reload(reloadData.K15[i] as test.login.RoleInfo);
                                break;
                            case test.DemoD5.__ID__:
                                (K15[i] as test.DemoD5).Reload(reloadData.K15[i] as test.DemoD5);
                                break;
                        }
                    }else
                    {
                        K15[i] = reloadData.K15[i];
                    }
                }
        }
    }

    public override string ToString()
    {
        return "{ "
        + "X4:" + X4 + ","
        + "X1:" + X1 + ","
        + "X2:" + X2 + ","
        + "X3:" + X3 + ","
        + "X5:" + X5 + ","
        + "X6:" + X6 + ","
        + "X7:" + X7 + ","
        + "X80:" + X80 + ","
        + "X8:" + X8 + ","
        + "X9:" + X9 + ","
        + "X10:" + X10 + ","
        + "X12:" + X12 + ","
        + "X13:" + X13 + ","
        + "X14:" + X14 + ","
        + "S1:" + S1 + ","
        + "V2:" + V2 + ","
        + "V3:" + V3 + ","
        + "V4:" + V4 + ","
        + "T1:" + T1 + ","
        + "K1:" + Bright.Common.StringUtil.CollectionToString(K1) + ","
        + "K2:" + Bright.Common.StringUtil.CollectionToString(K2) + ","
        + "K5:" + Bright.Common.StringUtil.CollectionToString(K5) + ","
        + "K8:" + Bright.Common.StringUtil.CollectionToString(K8) + ","
        + "K9:" + Bright.Common.StringUtil.CollectionToString(K9) + ","
        + "K15:" + Bright.Common.StringUtil.CollectionToString(K15) + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}

}
