//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using System.Linq;



namespace cfg.test
{

public sealed partial class MultiRowRecord :  Bright.Config.BeanBase 
{
    public MultiRowRecord(ByteBuf _buf) 
    {
        Id = _buf.ReadInt();
        Name = _buf.ReadString();
        {int n = System.Math.Min(_buf.ReadSize(), _buf.Size);OneRows = new System.Collections.Generic.List<test.MultiRowType1>(n);for(var i = 0 ; i < n ; i++) { test.MultiRowType1 _e;  _e = test.MultiRowType1.DeserializeMultiRowType1(_buf); OneRows.Add(_e);}}
        {int n = System.Math.Min(_buf.ReadSize(), _buf.Size);MultiRows1 = new System.Collections.Generic.List<test.MultiRowType1>(n);for(var i = 0 ; i < n ; i++) { test.MultiRowType1 _e;  _e = test.MultiRowType1.DeserializeMultiRowType1(_buf); MultiRows1.Add(_e);}}
        {int n = System.Math.Min(_buf.ReadSize(), _buf.Size);MultiRows2 = new test.MultiRowType1[n];for(var i = 0 ; i < n ; i++) { test.MultiRowType1 _e;_e = test.MultiRowType1.DeserializeMultiRowType1(_buf); MultiRows2[i] = _e;}}
        {int n = System.Math.Min(_buf.ReadSize(), _buf.Size);MultiRows4 = new System.Collections.Generic.Dictionary<int, test.MultiRowType2>(n * 3 / 2);for(var i = 0 ; i < n ; i++) { int _k;  _k = _buf.ReadInt(); test.MultiRowType2 _v;  _v = test.MultiRowType2.DeserializeMultiRowType2(_buf);     MultiRows4.Add(_k, _v);}}
        {int n = System.Math.Min(_buf.ReadSize(), _buf.Size);MultiRows5 = new System.Collections.Generic.List<test.MultiRowType3>(n);for(var i = 0 ; i < n ; i++) { test.MultiRowType3 _e;  _e = test.MultiRowType3.DeserializeMultiRowType3(_buf); MultiRows5.Add(_e);}}
        {int n = System.Math.Min(_buf.ReadSize(), _buf.Size);MultiRows6 = new System.Collections.Generic.Dictionary<int, test.MultiRowType2>(n * 3 / 2);for(var i = 0 ; i < n ; i++) { int _k;  _k = _buf.ReadInt(); test.MultiRowType2 _v;  _v = test.MultiRowType2.DeserializeMultiRowType2(_buf);     MultiRows6.Add(_k, _v);}}
        {int n = System.Math.Min(_buf.ReadSize(), _buf.Size);MultiRows7 = new System.Collections.Generic.Dictionary<int, int>(n * 3 / 2);for(var i = 0 ; i < n ; i++) { int _k;  _k = _buf.ReadInt(); int _v;  _v = _buf.ReadInt();     MultiRows7.Add(_k, _v);}}
        PostInit();
    }

    public static MultiRowRecord DeserializeMultiRowRecord(ByteBuf _buf)
    {
        return new test.MultiRowRecord(_buf);
    }

    public int Id { get; protected set; }
    public string Name { get; protected set; }
    public System.Collections.Generic.List<test.MultiRowType1> OneRows { get; protected set; }
    public System.Collections.Generic.List<test.MultiRowType1> MultiRows1 { get; protected set; }
    public test.MultiRowType1[] MultiRows2 { get; protected set; }
    public System.Collections.Generic.Dictionary<int, test.MultiRowType2> MultiRows4 { get; protected set; }
    public System.Collections.Generic.List<test.MultiRowType3> MultiRows5 { get; protected set; }
    public System.Collections.Generic.Dictionary<int, test.MultiRowType2> MultiRows6 { get; protected set; }
    public System.Collections.Generic.Dictionary<int, int> MultiRows7 { get; protected set; }

    public const int __ID__ = -501249394;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        foreach(var _e in OneRows) { _e?.Resolve(_tables); }
        foreach(var _e in MultiRows1) { _e?.Resolve(_tables); }
        foreach(var _e in MultiRows2) { _e?.Resolve(_tables); }
        foreach(var _e in MultiRows4.Values) { _e?.Resolve(_tables); }
        foreach(var _e in MultiRows5) { _e?.Resolve(_tables); }
        foreach(var _e in MultiRows6.Values) { _e?.Resolve(_tables); }
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
        foreach(var _e in OneRows) { _e?.TranslateText(translator); }
        foreach(var _e in MultiRows1) { _e?.TranslateText(translator); }
        foreach(var _e in MultiRows2) { _e?.TranslateText(translator); }
        foreach(var _e in MultiRows4.Values) { _e?.TranslateText(translator); }
        foreach(var _e in MultiRows5) { _e?.TranslateText(translator); }
        foreach(var _e in MultiRows6.Values) { _e?.TranslateText(translator); }
    }

    public void Reload(MultiRowRecord reloadData)
    {
        Id = reloadData.Id;
        Name = reloadData.Name;
        if(OneRows==null)
        {
            OneRows = reloadData.OneRows;
        }else
        {
            OneRows.Capacity = reloadData.OneRows.Count;
            for (int i = 0; i < reloadData.OneRows.Count; i++)
            {
                if(OneRows[i]!=null)
                {
                    OneRows[i].Reload(reloadData.OneRows[i]);
                }else
                {
                    OneRows[i] = reloadData.OneRows[i];
                }
            }
        }
        if(MultiRows1==null)
        {
            MultiRows1 = reloadData.MultiRows1;
        }else
        {
            MultiRows1.Capacity = reloadData.MultiRows1.Count;
            for (int i = 0; i < reloadData.MultiRows1.Count; i++)
            {
                if(MultiRows1[i]!=null)
                {
                    MultiRows1[i].Reload(reloadData.MultiRows1[i]);
                }else
                {
                    MultiRows1[i] = reloadData.MultiRows1[i];
                }
            }
        }
        if(MultiRows2==null)
        {
            MultiRows2 = reloadData.MultiRows2;
        }else
        {
            if(MultiRows2.Length!=reloadData.MultiRows2.Length)
            {
                var newArray = new test.MultiRowType1[reloadData.MultiRows2.Length];
                for(int i = 0; i<newArray.Length; i++)
                {
                    if(i<MultiRows2.Length)
                    {
                        newArray[i] = MultiRows2[i];
                    }
                }
                typeof(MultiRowRecord).GetProperty("MultiRows2").SetValue(this, newArray);
            }
                for(int i = 0; i<reloadData.MultiRows2.Length; i++)
                {
                    if(MultiRows2[i]!=null){
                        MultiRows2[i].Reload(reloadData.MultiRows2[i]);
                    }else{
                        MultiRows2[i] = reloadData.MultiRows2[i];
                    }
                }
        }
        if(MultiRows4==null)
        {
            MultiRows4 = reloadData.MultiRows4;
        }else
        {
            foreach (var rawDataKey in MultiRows4.Keys.ToList())
            {
                if(!reloadData.MultiRows4.ContainsKey(rawDataKey))
                {
                    MultiRows4.Remove(rawDataKey);
                }
            }
            foreach (var reload in reloadData.MultiRows4)
            {
                if(MultiRows4.ContainsKey(reload.Key))
                {
                    if(MultiRows4[reload.Key]!=null){
                        MultiRows4[reload.Key].Reload(reload.Value);
                    }else{
                        MultiRows4[reload.Key] = reload.Value;
                    }
                }else
                {
                    MultiRows4.Add(reload.Key,reload.Value);
                }
            }
        }
        if(MultiRows5==null)
        {
            MultiRows5 = reloadData.MultiRows5;
        }else
        {
            MultiRows5.Capacity = reloadData.MultiRows5.Count;
            for (int i = 0; i < reloadData.MultiRows5.Count; i++)
            {
                if(MultiRows5[i]!=null)
                {
                    MultiRows5[i].Reload(reloadData.MultiRows5[i]);
                }else
                {
                    MultiRows5[i] = reloadData.MultiRows5[i];
                }
            }
        }
        if(MultiRows6==null)
        {
            MultiRows6 = reloadData.MultiRows6;
        }else
        {
            foreach (var rawDataKey in MultiRows6.Keys.ToList())
            {
                if(!reloadData.MultiRows6.ContainsKey(rawDataKey))
                {
                    MultiRows6.Remove(rawDataKey);
                }
            }
            foreach (var reload in reloadData.MultiRows6)
            {
                if(MultiRows6.ContainsKey(reload.Key))
                {
                    if(MultiRows6[reload.Key]!=null){
                        MultiRows6[reload.Key].Reload(reload.Value);
                    }else{
                        MultiRows6[reload.Key] = reload.Value;
                    }
                }else
                {
                    MultiRows6.Add(reload.Key,reload.Value);
                }
            }
        }
        if(MultiRows7==null)
        {
            MultiRows7 = reloadData.MultiRows7;
        }else
        {
            foreach (var rawDataKey in MultiRows7.Keys.ToList())
            {
                if(!reloadData.MultiRows7.ContainsKey(rawDataKey))
                {
                    MultiRows7.Remove(rawDataKey);
                }
            }
            foreach (var reload in reloadData.MultiRows7)
            {
                if(MultiRows7.ContainsKey(reload.Key))
                {
                    MultiRows7[reload.Key] = reload.Value;
                }else
                {
                    MultiRows7.Add(reload.Key,reload.Value);
                }
            }
        }
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "Name:" + Name + ","
        + "OneRows:" + Bright.Common.StringUtil.CollectionToString(OneRows) + ","
        + "MultiRows1:" + Bright.Common.StringUtil.CollectionToString(MultiRows1) + ","
        + "MultiRows2:" + Bright.Common.StringUtil.CollectionToString(MultiRows2) + ","
        + "MultiRows4:" + Bright.Common.StringUtil.CollectionToString(MultiRows4) + ","
        + "MultiRows5:" + Bright.Common.StringUtil.CollectionToString(MultiRows5) + ","
        + "MultiRows6:" + Bright.Common.StringUtil.CollectionToString(MultiRows6) + ","
        + "MultiRows7:" + Bright.Common.StringUtil.CollectionToString(MultiRows7) + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}

}
