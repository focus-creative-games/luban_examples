//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using System.Linq;



namespace cfg.test
{

public sealed partial class TestNull :  Bright.Config.BeanBase 
{
    public TestNull(ByteBuf _buf) 
    {
        Id = _buf.ReadInt();
        if(_buf.ReadBool()){ X1 = _buf.ReadInt(); } else { X1 = null; }
        if(_buf.ReadBool()){ X2 = (test.DemoEnum)_buf.ReadInt(); } else { X2 = null; }
        if(_buf.ReadBool()){ X3 = test.DemoType1.DeserializeDemoType1(_buf); } else { X3 = null; }
        if(_buf.ReadBool()){ X4 = test.DemoDynamic.DeserializeDemoDynamic(_buf); } else { X4 = null; }
        if(_buf.ReadBool()){ S1 = _buf.ReadString(); } else { S1 = null; }
        if(_buf.ReadBool()){ S2_l10n_key = _buf.ReadString(); S2 = _buf.ReadString(); } else { S2 = null; }
        PostInit();
    }

    public static TestNull DeserializeTestNull(ByteBuf _buf)
    {
        return new test.TestNull(_buf);
    }

    public int Id { get; protected set; }
    public int? X1 { get; protected set; }
    public test.DemoEnum? X2 { get; protected set; }
    public test.DemoType1 X3 { get; protected set; }
    public test.DemoDynamic X4 { get; protected set; }
    public string S1 { get; protected set; }
    public string S2 { get; protected set; }
    //field.gen_text_key
    public string S2_l10n_key { get; protected set; }

    public const int __ID__ = 339868469;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        X3?.Resolve(_tables);
        X4?.Resolve(_tables);
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
        X3?.TranslateText(translator);
        X4?.TranslateText(translator);
        S2 = translator(S2_l10n_key, S2);
    }

    public void Reload(TestNull reloadData)
    {
        Id = reloadData.Id;
        X1 = reloadData.X1;
        X2 = reloadData.X2;
        if(X3==null)
        {
            X3 = reloadData.X3;
        }else
        {
            if(X3.GetTypeId() == reloadData.X3.GetTypeId())
            {
                X3.Reload(reloadData.X3);
            }else
            {
                typeof(TestNull).GetProperty("X3").SetValue(this,reloadData.X3);
            }
        }
        if(X4==null)
        {
            X4 = reloadData.X4;
        }else
        {
            if(X4.GetTypeId() == reloadData.X4.GetTypeId())
            {
                switch (reloadData.X4.GetTypeId())
                {
                    case test.DemoD2.__ID__:
                        (X4 as test.DemoD2).Reload(reloadData.X4 as test.DemoD2);
                        break;
                    case test.DemoE1.__ID__:
                        (X4 as test.DemoE1).Reload(reloadData.X4 as test.DemoE1);
                        break;
                    case test.login.RoleInfo.__ID__:
                        (X4 as test.login.RoleInfo).Reload(reloadData.X4 as test.login.RoleInfo);
                        break;
                    case test.DemoD5.__ID__:
                        (X4 as test.DemoD5).Reload(reloadData.X4 as test.DemoD5);
                        break;
                }
            }else
            {
                typeof(TestNull).GetProperty("X4").SetValue(this,reloadData.X4);
            }
        }
        S1 = reloadData.S1;
        S2 = reloadData.S2;
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "X1:" + X1 + ","
        + "X2:" + X2 + ","
        + "X3:" + X3 + ","
        + "X4:" + X4 + ","
        + "S1:" + S1 + ","
        + "S2:" + S2 + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}

}
