//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using System.Linq;



namespace cfg.test
{

public sealed partial class DemoGroup :  Bright.Config.BeanBase 
{
    public DemoGroup(ByteBuf _buf) 
    {
        Id = _buf.ReadInt();
        X1 = _buf.ReadInt();
        X2 = _buf.ReadInt();
        X3 = _buf.ReadInt();
        X4 = _buf.ReadInt();
        X5 = test.InnerGroup.DeserializeInnerGroup(_buf);
        PostInit();
    }

    public static DemoGroup DeserializeDemoGroup(ByteBuf _buf)
    {
        return new test.DemoGroup(_buf);
    }

    public int Id { get; protected set; }
    public int X1 { get; protected set; }
    //field.gen_ref
    public test.DemoGroup X1_Ref { get; private set; }
    public int X2 { get; protected set; }
    //field.gen_ref
    public test.DemoGroup X2_Ref { get; private set; }
    public int X3 { get; protected set; }
    //field.gen_ref
    public test.DemoGroup X3_Ref { get; private set; }
    public int X4 { get; protected set; }
    public test.InnerGroup X5 { get; protected set; }

    public const int __ID__ = -379263008;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        this.X1_Ref = (_tables["test.TbDemoGroup_C"] as test.TbDemoGroup_C).GetOrDefault(X1);
        this.X2_Ref = (_tables["test.TbDemoGroup_S"] as test.TbDemoGroup_S).GetOrDefault(X2);
        this.X3_Ref = (_tables["test.TbDemoGroup_E"] as test.TbDemoGroup_E).GetOrDefault(X3);
        X5?.Resolve(_tables);
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
        X5?.TranslateText(translator);
    }

    public void Reload(DemoGroup reloadData)
    {
        Id = reloadData.Id;
        X1 = reloadData.X1;
        X2 = reloadData.X2;
        X3 = reloadData.X3;
        X4 = reloadData.X4;
        if(X5==null)
        {
            X5 = reloadData.X5;
        }else
        {
            if(X5.GetTypeId() == reloadData.X5.GetTypeId())
            {
                X5.Reload(reloadData.X5);
            }else
            {
                typeof(DemoGroup).GetProperty("X5").SetValue(this,reloadData.X5);
            }
        }
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "X1:" + X1 + ","
        + "X2:" + X2 + ","
        + "X3:" + X3 + ","
        + "X4:" + X4 + ","
        + "X5:" + X5 + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}

}
