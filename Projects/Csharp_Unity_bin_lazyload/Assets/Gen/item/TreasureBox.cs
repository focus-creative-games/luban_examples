//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;



namespace cfg.item
{

public sealed partial class TreasureBox :  item.ItemExtra 
{
    public TreasureBox(ByteBuf _buf)  : base(_buf) 
    {
        if(_buf.ReadBool()){ KeyItemId = _buf.ReadInt(); } else { KeyItemId = null; }
        OpenLevel = condition.MinLevel.DeserializeMinLevel(_buf);
        UseOnObtain = _buf.ReadBool();
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);DropIds = new System.Collections.Generic.List<int>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { int _e0;  _e0 = _buf.ReadInt(); DropIds.Add(_e0);}}
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);ChooseList = new System.Collections.Generic.List<item.ChooseOneBonus>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { item.ChooseOneBonus _e0;  _e0 = item.ChooseOneBonus.DeserializeChooseOneBonus(_buf); ChooseList.Add(_e0);}}
        PostInit();
    }

    public static TreasureBox DeserializeTreasureBox(ByteBuf _buf)
    {
        return new item.TreasureBox(_buf);
    }

    public int? KeyItemId { get; private set; }
    public condition.MinLevel OpenLevel { get; private set; }
    public bool UseOnObtain { get; private set; }
    public System.Collections.Generic.List<int> DropIds { get; private set; }
    public System.Collections.Generic.List<bonus.DropInfo> DropIds_Ref { get; private set; }
    public System.Collections.Generic.List<item.ChooseOneBonus> ChooseList { get; private set; }

    public const int __ID__ = 1494222369;
    public override int GetTypeId() => __ID__;

    public override void Resolve(Dictionary<string, object> _tables)
    {
        base.Resolve(_tables);
        OpenLevel?.Resolve(_tables);
        { bonus.TbDrop __table = (bonus.TbDrop)_tables["bonus.TbDrop"]; this.DropIds_Ref = new System.Collections.Generic.List<bonus.DropInfo>(); foreach(var __e in DropIds) { this.DropIds_Ref.Add(__table.GetOrDefault(__e)); } }
        foreach(var _e in ChooseList) { _e?.Resolve(_tables); }
        PostResolve();
    }

    public override void TranslateText(System.Func<string, string, string> translator)
    {
        base.TranslateText(translator);
        OpenLevel?.TranslateText(translator);
        foreach(var _e in ChooseList) { _e?.TranslateText(translator); }
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "KeyItemId:" + KeyItemId + ","
        + "OpenLevel:" + OpenLevel + ","
        + "UseOnObtain:" + UseOnObtain + ","
        + "DropIds:" + Bright.Common.StringUtil.CollectionToString(DropIds) + ","
        + "ChooseList:" + Bright.Common.StringUtil.CollectionToString(ChooseList) + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}

}
