//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using System.Linq;

namespace cfg.test
{
   
    public partial class TbTestDesc
    {
        public static TbTestDesc Instance { get; private set; }
        private bool _readAllList = false;
        private List<test.TestDesc> _dataList;
        public List<test.TestDesc> DataList
        {
            get
            {
                if(!_readAllList)
                {
                    ReadAllList();
                    _readAllList = true;
                }
                return _dataList;
            }
        }
        private System.Func<ByteBuf> _dataLoader;

        private bool _readAllId = false;
        private Dictionary<int, test.TestDesc> _dataMap_id;
        public Dictionary<int, test.TestDesc> DataMap_id
        {
            get
            {
                if(!_readAllId)
                {
                    ReadAllId();
                    _readAllId = true;
                }
                return _dataMap_id;
            }   
        }
        private void ReadAllList()
        {
            _dataList.Clear();
             foreach(var index in Indexes_id)
            {
                var v = GetById(index);
                _dataList.Add(v);
            }
        }
        private void ReadAllId()
        {
            foreach(var index in Indexes_id)
            {
                var v = GetById(index);
                _dataMap_id[index] = v;
            }
        }
        private Dictionary<int,int> _indexMap_id;
        public List<int> Indexes_id;
        private bool _readAllName = false;
        private Dictionary<string, test.TestDesc> _dataMap_name;
        public Dictionary<string, test.TestDesc> DataMap_name
        {
            get
            {
                if(!_readAllName)
                {
                    ReadAllName();
                    _readAllName = true;
                }
                return _dataMap_name;
            }   
        }
        private void ReadAllName()
        {
            foreach(var index in Indexes_name)
            {
                var v = GetByName(index);
                _dataMap_name[index] = v;
            }
        }
        private Dictionary<string,int> _indexMap_name;
        public List<string> Indexes_name;
        public TbTestDesc(ByteBuf _buf, string _tbName, System.Func<string,  ByteBuf> _loader)
        {
            Instance = this;
            _dataList = new List<test.TestDesc>();
            _dataLoader = new System.Func<ByteBuf>(()=> _loader(_tbName));
            _dataMap_id = new Dictionary<int, test.TestDesc>();
            _indexMap_id = new Dictionary<int,int>();
            _dataMap_name = new Dictionary<string, test.TestDesc>();
            _indexMap_name = new Dictionary<string,int>();
        

            int size = _buf.ReadSize();
            for(int i = 0; i < size; i++)
            {     
                int key_id;
                key_id = _buf.ReadInt();
                string key_name;
                key_name = _buf.ReadString();
                int index = _buf.ReadInt();
                _indexMap_id.Add(key_id,index);
                _indexMap_name.Add(key_name,index);
            }
            Indexes_id = _indexMap_id.Keys.ToList();
            Indexes_name = _indexMap_name.Keys.ToList();
        }



        public test.TestDesc GetById(int key)
        {
            if(_dataMap_id.TryGetValue(key,out var value))
            {
                return value;
            }
            int index = _indexMap_id[key];
            ResetByteBuf(index);
            test.TestDesc _v;
            _v = test.TestDesc.DeserializeTestDesc(_buf);
            _dataMap_id[key] = _v;
            _v.Resolve(tables);
            return _v;
        }    
        public test.TestDesc GetByName(string key)
        {
            if(_dataMap_name.TryGetValue(key,out var value))
            {
                return value;
            }
            int index = _indexMap_name[key];
            ResetByteBuf(index);
            test.TestDesc _v;
            _v = test.TestDesc.DeserializeTestDesc(_buf);
            _dataMap_name[key] = _v;
            _v.Resolve(tables);
            return _v;
        }    
        
        private void ResetByteBuf(int readerInex = 0)
        {
            if( _buf == null)
            {
                    if (_buf == null)
            {
                _buf = _dataLoader();
            }
            }
            _buf.ReaderIndex = readerInex;
        }
    
        private ByteBuf _buf = null;
        private Dictionary<string, object> tables;
        public void CacheTables(Dictionary<string, object> _tables)
        {
            tables = _tables;
        }
        partial void PostInit();
    }
} 