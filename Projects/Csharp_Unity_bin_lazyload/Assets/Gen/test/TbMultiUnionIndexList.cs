//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using System.Linq;

namespace cfg.test
{
   
    public partial class TbMultiUnionIndexList
    {
        private List<test.MultiUnionIndexList> _dataList;
        private System.Func<ByteBuf> _dataLoader;

        private Dictionary<(int, long, string), test.MultiUnionIndexList> _dataMapUnion;
        private readonly Dictionary<(int id1, long id2, string id3),int> _indexMap;
        public readonly List<(int id1, long id2, string id3)> Indexes;

        public TbMultiUnionIndexList(ByteBuf _buf, string _tbName, System.Func<string, ByteBuf> _loader)
        {
            _dataList = new List<test.MultiUnionIndexList>();
            _dataLoader = new System.Func<ByteBuf>(()=>_loader(_tbName));
            _dataMapUnion = new Dictionary<(int, long, string), test.MultiUnionIndexList>();
            _indexMap = new Dictionary<(int id1, long id2, string id3),int>();
            
            for (int i = _buf.ReadSize(); i > 0; i--)
            {
                
                int key0;
                key0 = _buf.ReadInt();
                
                
                long key1;
                key1 = _buf.ReadLong();
                
                
                string key2;
                key2 = _buf.ReadString();
                
                _indexMap.Add((key0, key1, key2), _buf.ReadInt());
            }
            Indexes = _indexMap.Keys.ToList();
        }



        public test.MultiUnionIndexList Get(int id1, long id2, string id3)
        {
            test.MultiUnionIndexList __v;
            if(_dataMapUnion.TryGetValue((id1, id2, id3), out __v))
            {
                return __v;
            }
            ResetByteBuf(_indexMap[(id1, id2, id3)]);

            __v = test.MultiUnionIndexList.DeserializeMultiUnionIndexList(_buf);
            _dataList.Add(__v);
            _dataMapUnion.Add((id1, id2, id3), __v);
            __v.Resolve(tables);
            if(_indexMap.Count == _dataMapUnion.Count)
            {
                _buf = null;
            }
            return __v;
        }
        private ByteBuf _buf = null;
        
        private void ResetByteBuf(int readerInex = 0)
        {
            if( _buf == null)
            {
                _buf = _dataLoader();
            }
            _buf.ReaderIndex = readerInex;
        }
    
        private Dictionary<string, object> tables;
        public void CacheTables(Dictionary<string, object> _tables)
        {
            tables = _tables;
        }
        partial void PostInit();
    }
} 