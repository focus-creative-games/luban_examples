//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using System.Linq;

namespace cfg.error
{
   
    public partial class TbErrorInfo
    {
        private readonly Dictionary<string, error.ErrorInfo> _dataMap;
        private readonly List<error.ErrorInfo> _dataList;
        private readonly Dictionary<string,int> _indexMap;
        public readonly List<string> Indexes;
        private readonly System.Func<ByteBuf> _dataLoader;

        public TbErrorInfo(ByteBuf _buf, string _tbName, System.Func<string, ByteBuf> _loader)
        {
            _dataMap = new Dictionary<string, error.ErrorInfo>();
            _dataList = new List<error.ErrorInfo>();
            _indexMap = new Dictionary<string, int>();
            _dataLoader = new System.Func<ByteBuf>(() => _loader(_tbName));

            for (int n = _buf.ReadSize(); n > 0; --n)
            {
                string key;
                key = _buf.ReadString();
                int index = _buf.ReadInt();
                _indexMap[key] = index;
            }
            Indexes = _indexMap.Keys.ToList();
            PostInit();
        }

        public error.ErrorInfo this[string key] => Get(key);
        public error.ErrorInfo Get(string key)
        {
            error.ErrorInfo _v;
            if(_dataMap.TryGetValue(key, out _v))
            {
                return _v;
            }
            ResetByteBuf(_indexMap[key]);
            _v = error.ErrorInfo.DeserializeErrorInfo(_buf);
            _dataList.Add(_v);
            _dataMap.Add(_v.Code, _v);
            _v.Resolve(tables);
            if(_indexMap.Count == _dataMap.Count)
            {
                _buf = null;
            }
            return _v;
        }
        public error.ErrorInfo GetOrDefault(string key)
        {
            if(_indexMap.TryGetValue(key,out var _))
            {
                return Get(key);
            }
            return null;
        }
        private ByteBuf _buf = null;
        
        private void ResetByteBuf(int readerInex = 0)
        {
            if( _buf == null)
            {
                _buf = _dataLoader();
            }
            _buf.ReaderIndex = readerInex;
        }
    
        private Dictionary<string, object> tables;
        public void CacheTables(Dictionary<string, object> _tables)
        {
            tables = _tables;
        }
        partial void PostInit();
    }
} 