//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;


namespace cfg
{
   
public partial class Tables
{
    public ai.TbBlackboard TbBlackboard {get; }
    public ai.TbBehaviorTree TbBehaviorTree {get; }
    public blueprint.TbClazz TbClazz {get; }
    public bonus.TbDrop TbDrop {get; }
    public common.TbGlobalConfig TbGlobalConfig {get; }
    public error.TbErrorInfo TbErrorInfo {get; }
    public error.TbCodeInfo TbCodeInfo {get; }
    /// <summary>
    /// 道具表
    /// </summary>
    public item.TbItem TbItem {get; }
    public item.TbItemFunc TbItemFunc {get; }
    public item.TbItemExtra TbItemExtra {get; }
    public l10n.TbL10NDemo TbL10NDemo {get; }
    public l10n.TbPatchDemo TbPatchDemo {get; }
    public mail.TbSystemMail TbSystemMail {get; }
    public mail.TbGlobalMail TbGlobalMail {get; }
    public role.TbRoleLevelExpAttr TbRoleLevelExpAttr {get; }
    public role.TbRoleLevelBonusCoefficient TbRoleLevelBonusCoefficient {get; }
    public tag.TbTestTag TbTestTag {get; }
    public test.TbFullTypes TbFullTypes {get; }
    public test.TbSingleton TbSingleton {get; }
    public test.TbNotIndexList TbNotIndexList {get; }
    public test.TbMultiUnionIndexList TbMultiUnionIndexList {get; }
    public test.TbMultiIndexList TbMultiIndexList {get; }
    public test.TbDataFromMisc TbDataFromMisc {get; }
    public test.TbMultiRowRecord TbMultiRowRecord {get; }
    public test.TbTestMultiColumn TbTestMultiColumn {get; }
    public test.TbMultiRowTitle TbMultiRowTitle {get; }
    public test.TbTestNull TbTestNull {get; }
    public test.TbDemoPrimitive TbDemoPrimitive {get; }
    public test.TbTestString TbTestString {get; }
    public test.TbDemoGroup TbDemoGroup {get; }
    public test.TbDemoGroup_C TbDemoGroup_C {get; }
    public test.TbDemoGroup_S TbDemoGroup_S {get; }
    public test.TbDemoGroup_E TbDemoGroup_E {get; }
    public test.TbTestGlobal TbTestGlobal {get; }
    public test.TbTestBeRef TbTestBeRef {get; }
    public test.TbTestBeRef2 TbTestBeRef2 {get; }
    public test.TbTestRef TbTestRef {get; }
    public test.TbTestSize TbTestSize {get; }
    public test.TbTestSet TbTestSet {get; }
    public test.TbDetectCsvEncoding TbDetectCsvEncoding {get; }
    public test.TbItem2 TbItem2 {get; }
    public test.TbDefineFromExcel TbDefineFromExcel {get; }
    public test.TbDefineFromExcelOne TbDefineFromExcelOne {get; }
    public test.TbTestIndex TbTestIndex {get; }
    public test.TbTestMap TbTestMap {get; }
    public test.TbExcelFromJson TbExcelFromJson {get; }
    public test.TbCompositeJsonTable1 TbCompositeJsonTable1 {get; }
    public test.TbCompositeJsonTable2 TbCompositeJsonTable2 {get; }
    public test.TbCompositeJsonTable3 TbCompositeJsonTable3 {get; }
    public test.TbExcelFromJsonMultiRow TbExcelFromJsonMultiRow {get; }
    public test.TbTestSep TbTestSep {get; }
    public test.TbTestScriptableObject TbTestScriptableObject {get; }
    public test.TbTestExternalType TbTestExternalType {get; }
    public test.TbDemoGroupDefineFromExcel TbDemoGroupDefineFromExcel {get; }
    public test.TbDefineFromExcel2 TbDefineFromExcel2 {get; }
    public test.TbTestExcelBean TbTestExcelBean {get; }
    public test.TbTestDesc TbTestDesc {get; }

    public Tables(System.Func<string, ByteBuf> idxLoader,System.Func<string, ByteBuf> dataLoader)
    {
        var tables = new System.Collections.Generic.Dictionary<string, object>();
        TbBlackboard = new ai.TbBlackboard(idxLoader("ai_tbblackboard"),"ai_tbblackboard",dataLoader); 
        tables.Add("ai.TbBlackboard", TbBlackboard);
        TbBehaviorTree = new ai.TbBehaviorTree(idxLoader("ai_tbbehaviortree"),"ai_tbbehaviortree",dataLoader); 
        tables.Add("ai.TbBehaviorTree", TbBehaviorTree);
        TbClazz = new blueprint.TbClazz(idxLoader("blueprint_tbclazz"),"blueprint_tbclazz",dataLoader); 
        tables.Add("blueprint.TbClazz", TbClazz);
        TbDrop = new bonus.TbDrop(idxLoader("bonus_tbdrop"),"bonus_tbdrop",dataLoader); 
        tables.Add("bonus.TbDrop", TbDrop);
        TbGlobalConfig = new common.TbGlobalConfig(idxLoader("common_tbglobalconfig"),"common_tbglobalconfig",dataLoader); 
        tables.Add("common.TbGlobalConfig", TbGlobalConfig);
        TbErrorInfo = new error.TbErrorInfo(idxLoader("error_tberrorinfo"),"error_tberrorinfo",dataLoader); 
        tables.Add("error.TbErrorInfo", TbErrorInfo);
        TbCodeInfo = new error.TbCodeInfo(idxLoader("error_tbcodeinfo"),"error_tbcodeinfo",dataLoader); 
        tables.Add("error.TbCodeInfo", TbCodeInfo);
        TbItem = new item.TbItem(idxLoader("item_tbitem"),"item_tbitem",dataLoader); 
        tables.Add("item.TbItem", TbItem);
        TbItemFunc = new item.TbItemFunc(idxLoader("item_tbitemfunc"),"item_tbitemfunc",dataLoader); 
        tables.Add("item.TbItemFunc", TbItemFunc);
        TbItemExtra = new item.TbItemExtra(idxLoader("item_tbitemextra"),"item_tbitemextra",dataLoader); 
        tables.Add("item.TbItemExtra", TbItemExtra);
        TbL10NDemo = new l10n.TbL10NDemo(idxLoader("l10n_tbl10ndemo"),"l10n_tbl10ndemo",dataLoader); 
        tables.Add("l10n.TbL10NDemo", TbL10NDemo);
        TbPatchDemo = new l10n.TbPatchDemo(idxLoader("l10n_tbpatchdemo"),"l10n_tbpatchdemo",dataLoader); 
        tables.Add("l10n.TbPatchDemo", TbPatchDemo);
        TbSystemMail = new mail.TbSystemMail(idxLoader("mail_tbsystemmail"),"mail_tbsystemmail",dataLoader); 
        tables.Add("mail.TbSystemMail", TbSystemMail);
        TbGlobalMail = new mail.TbGlobalMail(idxLoader("mail_tbglobalmail"),"mail_tbglobalmail",dataLoader); 
        tables.Add("mail.TbGlobalMail", TbGlobalMail);
        TbRoleLevelExpAttr = new role.TbRoleLevelExpAttr(idxLoader("role_tbrolelevelexpattr"),"role_tbrolelevelexpattr",dataLoader); 
        tables.Add("role.TbRoleLevelExpAttr", TbRoleLevelExpAttr);
        TbRoleLevelBonusCoefficient = new role.TbRoleLevelBonusCoefficient(idxLoader("role_tbrolelevelbonuscoefficient"),"role_tbrolelevelbonuscoefficient",dataLoader); 
        tables.Add("role.TbRoleLevelBonusCoefficient", TbRoleLevelBonusCoefficient);
        TbTestTag = new tag.TbTestTag(idxLoader("tag_tbtesttag"),"tag_tbtesttag",dataLoader); 
        tables.Add("tag.TbTestTag", TbTestTag);
        TbFullTypes = new test.TbFullTypes(idxLoader("test_tbfulltypes"),"test_tbfulltypes",dataLoader); 
        tables.Add("test.TbFullTypes", TbFullTypes);
        TbSingleton = new test.TbSingleton(idxLoader("test_tbsingleton"),"test_tbsingleton",dataLoader); 
        tables.Add("test.TbSingleton", TbSingleton);
        TbNotIndexList = new test.TbNotIndexList(idxLoader("test_tbnotindexlist"),"test_tbnotindexlist",dataLoader); 
        tables.Add("test.TbNotIndexList", TbNotIndexList);
        TbMultiUnionIndexList = new test.TbMultiUnionIndexList(idxLoader("test_tbmultiunionindexlist"),"test_tbmultiunionindexlist",dataLoader); 
        tables.Add("test.TbMultiUnionIndexList", TbMultiUnionIndexList);
        TbMultiIndexList = new test.TbMultiIndexList(idxLoader("test_tbmultiindexlist"),"test_tbmultiindexlist",dataLoader); 
        tables.Add("test.TbMultiIndexList", TbMultiIndexList);
        TbDataFromMisc = new test.TbDataFromMisc(idxLoader("test_tbdatafrommisc"),"test_tbdatafrommisc",dataLoader); 
        tables.Add("test.TbDataFromMisc", TbDataFromMisc);
        TbMultiRowRecord = new test.TbMultiRowRecord(idxLoader("test_tbmultirowrecord"),"test_tbmultirowrecord",dataLoader); 
        tables.Add("test.TbMultiRowRecord", TbMultiRowRecord);
        TbTestMultiColumn = new test.TbTestMultiColumn(idxLoader("test_tbtestmulticolumn"),"test_tbtestmulticolumn",dataLoader); 
        tables.Add("test.TbTestMultiColumn", TbTestMultiColumn);
        TbMultiRowTitle = new test.TbMultiRowTitle(idxLoader("test_tbmultirowtitle"),"test_tbmultirowtitle",dataLoader); 
        tables.Add("test.TbMultiRowTitle", TbMultiRowTitle);
        TbTestNull = new test.TbTestNull(idxLoader("test_tbtestnull"),"test_tbtestnull",dataLoader); 
        tables.Add("test.TbTestNull", TbTestNull);
        TbDemoPrimitive = new test.TbDemoPrimitive(idxLoader("test_tbdemoprimitive"),"test_tbdemoprimitive",dataLoader); 
        tables.Add("test.TbDemoPrimitive", TbDemoPrimitive);
        TbTestString = new test.TbTestString(idxLoader("test_tbteststring"),"test_tbteststring",dataLoader); 
        tables.Add("test.TbTestString", TbTestString);
        TbDemoGroup = new test.TbDemoGroup(idxLoader("test_tbdemogroup"),"test_tbdemogroup",dataLoader); 
        tables.Add("test.TbDemoGroup", TbDemoGroup);
        TbDemoGroup_C = new test.TbDemoGroup_C(idxLoader("test_tbdemogroup_c"),"test_tbdemogroup_c",dataLoader); 
        tables.Add("test.TbDemoGroup_C", TbDemoGroup_C);
        TbDemoGroup_S = new test.TbDemoGroup_S(idxLoader("test_tbdemogroup_s"),"test_tbdemogroup_s",dataLoader); 
        tables.Add("test.TbDemoGroup_S", TbDemoGroup_S);
        TbDemoGroup_E = new test.TbDemoGroup_E(idxLoader("test_tbdemogroup_e"),"test_tbdemogroup_e",dataLoader); 
        tables.Add("test.TbDemoGroup_E", TbDemoGroup_E);
        TbTestGlobal = new test.TbTestGlobal(idxLoader("test_tbtestglobal"),"test_tbtestglobal",dataLoader); 
        tables.Add("test.TbTestGlobal", TbTestGlobal);
        TbTestBeRef = new test.TbTestBeRef(idxLoader("test_tbtestberef"),"test_tbtestberef",dataLoader); 
        tables.Add("test.TbTestBeRef", TbTestBeRef);
        TbTestBeRef2 = new test.TbTestBeRef2(idxLoader("test_tbtestberef2"),"test_tbtestberef2",dataLoader); 
        tables.Add("test.TbTestBeRef2", TbTestBeRef2);
        TbTestRef = new test.TbTestRef(idxLoader("test_tbtestref"),"test_tbtestref",dataLoader); 
        tables.Add("test.TbTestRef", TbTestRef);
        TbTestSize = new test.TbTestSize(idxLoader("test_tbtestsize"),"test_tbtestsize",dataLoader); 
        tables.Add("test.TbTestSize", TbTestSize);
        TbTestSet = new test.TbTestSet(idxLoader("test_tbtestset"),"test_tbtestset",dataLoader); 
        tables.Add("test.TbTestSet", TbTestSet);
        TbDetectCsvEncoding = new test.TbDetectCsvEncoding(idxLoader("test_tbdetectcsvencoding"),"test_tbdetectcsvencoding",dataLoader); 
        tables.Add("test.TbDetectCsvEncoding", TbDetectCsvEncoding);
        TbItem2 = new test.TbItem2(idxLoader("test_tbitem2"),"test_tbitem2",dataLoader); 
        tables.Add("test.TbItem2", TbItem2);
        TbDefineFromExcel = new test.TbDefineFromExcel(idxLoader("test_tbdefinefromexcel"),"test_tbdefinefromexcel",dataLoader); 
        tables.Add("test.TbDefineFromExcel", TbDefineFromExcel);
        TbDefineFromExcelOne = new test.TbDefineFromExcelOne(idxLoader("test_tbdefinefromexcelone"),"test_tbdefinefromexcelone",dataLoader); 
        tables.Add("test.TbDefineFromExcelOne", TbDefineFromExcelOne);
        TbTestIndex = new test.TbTestIndex(idxLoader("test_tbtestindex"),"test_tbtestindex",dataLoader); 
        tables.Add("test.TbTestIndex", TbTestIndex);
        TbTestMap = new test.TbTestMap(idxLoader("test_tbtestmap"),"test_tbtestmap",dataLoader); 
        tables.Add("test.TbTestMap", TbTestMap);
        TbExcelFromJson = new test.TbExcelFromJson(idxLoader("test_tbexcelfromjson"),"test_tbexcelfromjson",dataLoader); 
        tables.Add("test.TbExcelFromJson", TbExcelFromJson);
        TbCompositeJsonTable1 = new test.TbCompositeJsonTable1(idxLoader("test_tbcompositejsontable1"),"test_tbcompositejsontable1",dataLoader); 
        tables.Add("test.TbCompositeJsonTable1", TbCompositeJsonTable1);
        TbCompositeJsonTable2 = new test.TbCompositeJsonTable2(idxLoader("test_tbcompositejsontable2"),"test_tbcompositejsontable2",dataLoader); 
        tables.Add("test.TbCompositeJsonTable2", TbCompositeJsonTable2);
        TbCompositeJsonTable3 = new test.TbCompositeJsonTable3(idxLoader("test_tbcompositejsontable3"),"test_tbcompositejsontable3",dataLoader); 
        tables.Add("test.TbCompositeJsonTable3", TbCompositeJsonTable3);
        TbExcelFromJsonMultiRow = new test.TbExcelFromJsonMultiRow(idxLoader("test_tbexcelfromjsonmultirow"),"test_tbexcelfromjsonmultirow",dataLoader); 
        tables.Add("test.TbExcelFromJsonMultiRow", TbExcelFromJsonMultiRow);
        TbTestSep = new test.TbTestSep(idxLoader("test_tbtestsep"),"test_tbtestsep",dataLoader); 
        tables.Add("test.TbTestSep", TbTestSep);
        TbTestScriptableObject = new test.TbTestScriptableObject(idxLoader("test_tbtestscriptableobject"),"test_tbtestscriptableobject",dataLoader); 
        tables.Add("test.TbTestScriptableObject", TbTestScriptableObject);
        TbTestExternalType = new test.TbTestExternalType(idxLoader("test_tbtestexternaltype"),"test_tbtestexternaltype",dataLoader); 
        tables.Add("test.TbTestExternalType", TbTestExternalType);
        TbDemoGroupDefineFromExcel = new test.TbDemoGroupDefineFromExcel(idxLoader("test_tbdemogroupdefinefromexcel"),"test_tbdemogroupdefinefromexcel",dataLoader); 
        tables.Add("test.TbDemoGroupDefineFromExcel", TbDemoGroupDefineFromExcel);
        TbDefineFromExcel2 = new test.TbDefineFromExcel2(idxLoader("test_tbdefinefromexcel2"),"test_tbdefinefromexcel2",dataLoader); 
        tables.Add("test.TbDefineFromExcel2", TbDefineFromExcel2);
        TbTestExcelBean = new test.TbTestExcelBean(idxLoader("test_tbtestexcelbean"),"test_tbtestexcelbean",dataLoader); 
        tables.Add("test.TbTestExcelBean", TbTestExcelBean);
        TbTestDesc = new test.TbTestDesc(idxLoader("test_tbtestdesc"),"test_tbtestdesc",dataLoader); 
        tables.Add("test.TbTestDesc", TbTestDesc);

        PostInit();
        TbBlackboard.CacheTables(tables); 
        TbBehaviorTree.CacheTables(tables); 
        TbClazz.CacheTables(tables); 
        TbDrop.CacheTables(tables); 
        TbGlobalConfig.CacheTables(tables); 
        TbErrorInfo.CacheTables(tables); 
        TbCodeInfo.CacheTables(tables); 
        TbItem.CacheTables(tables); 
        TbItemFunc.CacheTables(tables); 
        TbItemExtra.CacheTables(tables); 
        TbL10NDemo.CacheTables(tables); 
        TbPatchDemo.CacheTables(tables); 
        TbSystemMail.CacheTables(tables); 
        TbGlobalMail.CacheTables(tables); 
        TbRoleLevelExpAttr.CacheTables(tables); 
        TbRoleLevelBonusCoefficient.CacheTables(tables); 
        TbTestTag.CacheTables(tables); 
        TbFullTypes.CacheTables(tables); 
        TbSingleton.CacheTables(tables); 
        TbNotIndexList.CacheTables(tables); 
        TbMultiUnionIndexList.CacheTables(tables); 
        TbMultiIndexList.CacheTables(tables); 
        TbDataFromMisc.CacheTables(tables); 
        TbMultiRowRecord.CacheTables(tables); 
        TbTestMultiColumn.CacheTables(tables); 
        TbMultiRowTitle.CacheTables(tables); 
        TbTestNull.CacheTables(tables); 
        TbDemoPrimitive.CacheTables(tables); 
        TbTestString.CacheTables(tables); 
        TbDemoGroup.CacheTables(tables); 
        TbDemoGroup_C.CacheTables(tables); 
        TbDemoGroup_S.CacheTables(tables); 
        TbDemoGroup_E.CacheTables(tables); 
        TbTestGlobal.CacheTables(tables); 
        TbTestBeRef.CacheTables(tables); 
        TbTestBeRef2.CacheTables(tables); 
        TbTestRef.CacheTables(tables); 
        TbTestSize.CacheTables(tables); 
        TbTestSet.CacheTables(tables); 
        TbDetectCsvEncoding.CacheTables(tables); 
        TbItem2.CacheTables(tables); 
        TbDefineFromExcel.CacheTables(tables); 
        TbDefineFromExcelOne.CacheTables(tables); 
        TbTestIndex.CacheTables(tables); 
        TbTestMap.CacheTables(tables); 
        TbExcelFromJson.CacheTables(tables); 
        TbCompositeJsonTable1.CacheTables(tables); 
        TbCompositeJsonTable2.CacheTables(tables); 
        TbCompositeJsonTable3.CacheTables(tables); 
        TbExcelFromJsonMultiRow.CacheTables(tables); 
        TbTestSep.CacheTables(tables); 
        TbTestScriptableObject.CacheTables(tables); 
        TbTestExternalType.CacheTables(tables); 
        TbDemoGroupDefineFromExcel.CacheTables(tables); 
        TbDefineFromExcel2.CacheTables(tables); 
        TbTestExcelBean.CacheTables(tables); 
        TbTestDesc.CacheTables(tables); 
    }
    
    partial void PostInit();
}

}