
/*!
<auto-generated>
    This code was generated by a tool.
    Changes to this file may cause incorrect behavior and will be lost if
    the code is regenerated.
</auto-generated>
*/


use super::*;
use serde::Deserialize;

#[derive(Debug)]
pub struct TestTag {
    pub id: i32,
    pub value: String,
}

impl TestTag{
    pub fn new(json: &serde_json::Value) -> Result<TestTag, LubanError> {
        let id = (json["id"].as_i64().unwrap() as i32);
        let value = json["value"].as_str().unwrap().to_string();
        
        Ok(TestTag { id, value, })
    }
}


#[derive(Debug)]
pub struct TbTestTag {
    pub data_list: Vec<std::sync::Arc<crate::tag::TestTag>>,
    pub data_map: std::collections::HashMap<i32, std::sync::Arc<crate::tag::TestTag>>,
}

impl TbTestTag {
    pub fn new(json: &serde_json::Value) -> Result<std::sync::Arc<TbTestTag>, LubanError> {
        let mut data_map: std::collections::HashMap<i32, std::sync::Arc<crate::tag::TestTag>> = Default::default();
        let mut data_list: Vec<std::sync::Arc<crate::tag::TestTag>> = vec![];

        for x in json.as_array().unwrap() {
            let row = std::sync::Arc::new(crate::tag::TestTag::new(&x)?);
            data_list.push(row.clone());
            data_map.insert(row.id.clone(), row.clone());
        }

        Ok(std::sync::Arc::new(TbTestTag { data_map, data_list }))
    }

    pub fn get(&self, key: &i32) -> Option<std::sync::Arc<crate::tag::TestTag>> {
        self.data_map.get(key).map(|x| x.clone())
    }
}

impl std::ops::Index<i32> for TbTestTag {
    type Output = std::sync::Arc<crate::tag::TestTag>;

    fn index(&self, index: i32) -> &Self::Output {
        &self.data_map.get(&index).unwrap()
    }
}


