
/*!
<auto-generated>
    This code was generated by a tool.
    Changes to this file may cause incorrect behavior and will be lost if
    the code is regenerated.
</auto-generated>
*/


use super::*;
use serde::Deserialize;

#[derive(Debug)]
pub struct GlobalConfig {
    /// 背包容量
    pub x1: i32,
    pub x2: i32,
    pub x3: i32,
    pub x4: i32,
    pub x5: i32,
    pub x6: i32,
    pub x7: Vec<i32>,
}

impl GlobalConfig{
    pub fn new(json: &serde_json::Value) -> GlobalConfig {
        let x1 = json["x1"].as_i64().unwrap() as i32;
        let x2 = json["x2"].as_i64().unwrap() as i32;
        let x3 = json["x3"].as_i64().unwrap() as i32;
        let x4 = json["x4"].as_i64().unwrap() as i32;
        let x5 = json["x5"].as_i64().unwrap() as i32;
        let x6 = json["x6"].as_i64().unwrap() as i32;
        let x7 = json["x7"].as_array().unwrap().iter().map(|field| field.as_i64().unwrap() as i32).collect();
        
        GlobalConfig { x1, x2, x3, x4, x5, x6, x7, }
    }
}


#[derive(Debug)]
pub struct TbGlobalConfig {
    pub data: crate::common::GlobalConfig,
}

impl TbGlobalConfig {
    pub fn new(json: &serde_json::Value) -> std::sync::Arc<TbGlobalConfig> {
        let json = json.as_array().unwrap();
        let n = json.len();
        if n != 1 { panic!("table mode=one, but size != 1") }
        let data = crate::common::GlobalConfig::new(&json[0]);
        std::sync::Arc::new(TbGlobalConfig { data })
    }
}


