
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


export const AiEExecutor = Object.freeze({
    CLIENT: 0,
    SERVER: 1,
});

export const AiEFinishMode = Object.freeze({
    IMMEDIATE: 0,
    DELAYED: 1,
});

export const AiEFlowAbortMode = Object.freeze({
    NONE: 0,
    LOWER_PRIORITY: 1,
    SELF: 2,
    BOTH: 3,
});

export const AiEKeyType = Object.freeze({
    BOOL: 1,
    INT: 2,
    FLOAT: 3,
    STRING: 4,
    VECTOR: 5,
    ROTATOR: 6,
    NAME: 7,
    CLASS1: 8,
    ENUM1: 9,
    OBJECT: 10,
});

export const AiENotifyObserverMode = Object.freeze({
    ON_VALUE_CHANGE: 0,
    ON_RESULT_CHANGE: 1,
});

export const AiEOperator = Object.freeze({
    IS_EQUAL_TO: 0,
    IS_NOT_EQUAL_TO: 1,
    IS_LESS_THAN: 2,
    IS_LESS_THAN_OR_EQUAL_TO: 3,
    IS_GREAT_THAN: 4,
    IS_GREAT_THAN_OR_EQUAL_TO: 5,
    CONTAINS: 6,
    NOT_CONTAINS: 7,
});

export const AudioType = Object.freeze({
    UNKNOWN: 0,
    ACC: 1,
    AIFF: 2,
});

export const CommonEBoolOperator = Object.freeze({
    AND: 0,
    OR: 1,
});

export const ItemEClothersStarQualityType = Object.freeze({
    /**
     * 一星
     */
    ONE: 1,
    /**
     * 二星
     */
    TWO: 2,
    /**
     * 三星
     */
    THREE: 3,
    /**
     * 四星
     */
    FOUR: 4,
    /**
     * 五星
     */
    FIVE: 5,
    /**
     * 六星
     */
    SIX: 6,
    /**
     * 七星
     */
    SEVEN: 7,
    /**
     * 八星
     */
    EIGHT: 8,
    /**
     * 九星
     */
    NINE: 9,
    /**
     * 十星
     */
    TEN: 10,
});

export const ItemEClothersTag = Object.freeze({
    /**
     * 防晒
     */
    FANG_SHAI: 1,
    /**
     * 舞者
     */
    WU_ZHE: 2,
});

export const ItemEClothesHidePartType = Object.freeze({
    /**
     * 胸部
     */
    CHEST: 0,
    /**
     * 手
     */
    HEAD: 1,
    /**
     * 脊柱上
     */
    SPINE_UPPER: 2,
    /**
     * 脊柱下
     */
    SPINE_LOWER: 3,
    /**
     * 臀部
     */
    HIP: 4,
    /**
     * 腿上
     */
    LEG_UPPER: 5,
    /**
     * 腿中
     */
    LEG_MIDDLE: 6,
    /**
     * 腿下
     */
    LEG_LOWER: 7,
});

export const ItemEClothesPropertyType = Object.freeze({
    /**
     * 简约
     */
    JIAN_YUE: 1,
    /**
     * 华丽
     */
    HUA_LI: 2,
    /**
     * 可爱
     */
    KE_AI: 3,
    /**
     * 成熟
     */
    CHENG_SHU: 4,
    /**
     * 活泼
     */
    HUO_PO: 5,
    /**
     * 优雅
     */
    YOU_YA: 6,
    /**
     * 清纯
     */
    QING_CHUN: 7,
    /**
     * 性感
     */
    XING_GAN: 8,
    /**
     * 清凉
     */
    QING_LIANG: 9,
    /**
     * 保暖
     */
    BAO_NUAN: 10,
});

export const ItemECurrencyType = Object.freeze({
    /**
     * 钻石
     */
    DIAMOND: 1,
    /**
     * 金币
     */
    GOLD: 2,
    /**
     * 银币
     */
    SILVER: 3,
    /**
     * 经验
     */
    EXP: 4,
    /**
     * 能量点
     */
    POWER_POINT: 5,
});

/**
 * 道具品质
 */
export const ItemEItemQuality = Object.freeze({
    /**
     * 白
     */
    WHITE: 0,
    /**
     * 绿
     */
    GREEN: 1,
    /**
     * 蓝
     */
    BLUE: 2,
    /**
     * 紫
     */
    PURPLE: 3,
    /**
     * 金
     */
    GOLDEN: 4,
});

export const ItemEMajorType = Object.freeze({
    /**
     * 货币
     */
    CURRENCY: 1,
    /**
     * 服装
     */
    CLOTH: 2,
    /**
     * 任务
     */
    QUEST: 3,
    /**
     * 消耗品
     */
    CONSUMABLES: 4,
    /**
     * 宝箱
     */
    TREASURE_BOX: 5,
    /**
     * 成就和称谓
     */
    ACHIEVEMENT_AND_TITLE: 6,
    /**
     * 头像框
     */
    HEAD_FRAME: 7,
    /**
     * 语音
     */
    VOICE: 8,
    /**
     * 动作
     */
    ACTION: 9,
    /**
     * 扩容道具
     */
    EXPANSION: 10,
    /**
     * 制作材料
     */
    MATERIAL: 11,
});

export const ItemEMinorType = Object.freeze({
    /**
     * 钻石
     */
    DIAMOND: 101,
    /**
     * 金币
     */
    GOLD: 102,
    /**
     * 银币
     */
    SILVER: 103,
    /**
     * 经验
     */
    EXP: 104,
    /**
     * 能量点
     */
    POWER_POINT: 105,
    /**
     * 发型
     */
    HAIR_STYLE: 210,
    /**
     * 外套
     */
    COAT: 220,
    /**
     * 上衣
     */
    UPPER_JACKET: 230,
    /**
     * 裤子
     */
    TROUSERS: 241,
    /**
     * 裙子
     */
    SKIRT: 242,
    /**
     * 袜子
     */
    SOCKS: 250,
    /**
     * 鞋子
     */
    SHOES: 260,
    /**
     * 发饰
     */
    HAIR_ACCESSORY: 271,
    /**
     * 帽子
     */
    HAT: 272,
    /**
     * 耳饰
     */
    EARRING: 273,
    /**
     * 颈饰
     */
    NECKLACE: 274,
    /**
     * 腕饰
     */
    BRACELET: 275,
    /**
     * 发箍
     */
    HAIR_CLASP: 276,
    /**
     * 手套
     */
    GLOVE: 277,
    /**
     * 手持物
     */
    HANDHELD_OBJECT: 278,
    /**
     * 特殊
     */
    SPECIAL: 279,
    /**
     * 底妆
     */
    BASE_COSMETIC: 281,
    /**
     * 眉妆
     */
    EYEBROW_COSMETIC: 282,
    /**
     * 睫毛
     */
    EYELASH: 283,
    /**
     * 美瞳
     */
    COSMETIC_CONTACT_LENSES: 284,
    /**
     * 唇妆
     */
    LIP_COSMETIC: 285,
    /**
     * 肤色
     */
    SKIN_COLOR: 286,
    /**
     * 连衣裙
     */
    ONE_PIECE_DRESS: 290,
    /**
     * 换装场景
     */
    SWITCH_CLOTHES_SCENE: 291,
    /**
     * 任务道具
     */
    QUEST: 301,
    /**
     * 投掷物
     */
    CAST: 401,
    /**
     * 刀剑
     */
    SWORD: 421,
    /**
     * 弓箭
     */
    BOW_ARROW: 422,
    /**
     * 法杖
     */
    WANDS: 423,
    /**
     * 特殊工具
     */
    SPECIAL_TOOL: 424,
    /**
     * 食物
     */
    FOOD: 403,
    /**
     * 宝箱
     */
    TREASURE_BOX: 501,
    /**
     * 钥匙
     */
    KEY: 502,
    /**
     * 多选一宝箱
     */
    MULTI_CHOOSE_TREASURE_BOX: 503,
    /**
     * 成就相关
     */
    ACHIEVEMENT: 601,
    /**
     * 称谓相关
     */
    TITLE: 602,
    /**
     * 头像框
     */
    AVATAR_FRAME: 701,
    /**
     * 语音
     */
    VOICE: 801,
    /**
     * 特殊待机动作
     */
    IDLE_POSE: 901,
    /**
     * 拍照动作
     */
    PHOTO_POSE: 902,
    /**
     * 背包
     */
    BAG: 1001,
    /**
     * 好友数量
     */
    FRIEND_CAPACITY: 1002,
    /**
     * 制作材料
     */
    CONSTRUCTION_MATERIAL: 1101,
    /**
     * 设计图纸
     */
    DESIGN_DRAWING: 1102,
});

export const ItemEUseType = Object.freeze({
    /**
     * 手动
     */
    MANUAL: 0,
    /**
     * 自动
     */
    AUTO: 1,
});

export const TestAccessFlag = Object.freeze({
    WRITE: 1,
    READ: 2,
    TRUNCATE: 4,
    NEW: 8,
    READ_WRITE: 3,
});

export const TestAudioType2 = Object.freeze({
    UNKNOWN: 0,
    ACC: 1,
    AIFF: 2,
});

export const TestDemoEnum = Object.freeze({
    NONE: 0,
    /**
     * aa
     */
    A: 1,
    /**
     * bb
     */
    B: 2,
    /**
     * cc
     */
    C: 4,
    /**
     * dd
     */
    D: 5,
    Any: 6,
});

export const TestDemoFlag = Object.freeze({
    A: 1,
    B: 2,
    C: 4,
    D: 8,
});

export const TestETestEmptyEnum = Object.freeze({
});

export const TestETestEmptyEnum2 = Object.freeze({
    SMALL_THAN_256: 255,
    X_256: 256,
    X_257: 257,
});

export const TestETestQuality = Object.freeze({
    /**
     * 最高品质
     */
    A: 1,
    /**
     * 黑色的
     */
    B: 2,
    /**
     * 蓝色的
     */
    C: 3,
    /**
     * 最差品质
     */
    D: 4,
});

export const TestETestUeType = Object.freeze({
    /**
     * 白
     */
    WHITE: 0,
    BLACK: 1,
});





export class AiBehaviorTree {

    constructor(_json_) {
        if (_json_.id === undefined) { throw new Error() };
        this.id = _json_.id;
        if (_json_.name === undefined) { throw new Error() };
        this.name = _json_.name;
        if (_json_.desc === undefined) { throw new Error() };
        this.desc = _json_.desc;
        if (_json_.blackboard_id === undefined) { throw new Error() };
        this.blackboardId = _json_.blackboard_id;
        if (_json_.root === undefined) { throw new Error() };
        this.root = AiComposeNode.constructorFrom(_json_.root);
    }

    resolve(tables) {
        
        
        
        this.blackboardId_ref = tables.TbBlackboard.get(this.blackboardId)
        this.root?.resolve(tables);
    }
}


export class AiBlackboard {

    constructor(_json_) {
        if (_json_.name === undefined) { throw new Error() };
        this.name = _json_.name;
        if (_json_.desc === undefined) { throw new Error() };
        this.desc = _json_.desc;
        if (_json_.parent_name === undefined) { throw new Error() };
        this.parentName = _json_.parent_name;
        if (_json_.keys === undefined) { throw new Error() };
        { this.keys = []; for(let _ele0 of _json_.keys) { let _e0; _e0 = new AiBlackboardKey(_ele0); this.keys.push(_e0);}};
    }

    resolve(tables) {
        
        
        this.parentName_ref = tables.TbBlackboard.get(this.parentName)
        for (let _e of this.keys) { _e?.resolve(tables); }
    }
}


export class AiBlackboardKey {

    constructor(_json_) {
        if (_json_.name === undefined) { throw new Error() };
        this.name = _json_.name;
        if (_json_.desc === undefined) { throw new Error() };
        this.desc = _json_.desc;
        if (_json_.is_static === undefined) { throw new Error() };
        this.isStatic = _json_.is_static;
        if (_json_.key_type === undefined) { throw new Error() };
        this.keyType = _json_.key_type;
        if (_json_.type_class_name === undefined) { throw new Error() };
        this.typeClassName = _json_.type_class_name;
    }

    resolve(tables) {
        
        
        
        
        
    }
}


export class AiKeyData {
    static constructorFrom(_json_) {
        switch (_json_["$type"]) {
            case 'FloatKeyData': return new AiFloatKeyData(_json_);
            case 'IntKeyData': return new AiIntKeyData(_json_);
            case 'StringKeyData': return new AiStringKeyData(_json_);
            case 'BlackboardKeyData': return new AiBlackboardKeyData(_json_);
            default: throw new Error();
        }
    }

    constructor(_json_) {
    }

    resolve(tables) {
    }
}


export class AiBlackboardKeyData extends AiKeyData {

    constructor(_json_) {
        super(_json_);
        if (_json_.value === undefined) { throw new Error() };
        this.value = _json_.value;
    }

    resolve(tables) {
        super.resolve(tables);
        
    }
}


export class AiFloatKeyData extends AiKeyData {

    constructor(_json_) {
        super(_json_);
        if (_json_.value === undefined) { throw new Error() };
        this.value = _json_.value;
    }

    resolve(tables) {
        super.resolve(tables);
        
    }
}


export class AiIntKeyData extends AiKeyData {

    constructor(_json_) {
        super(_json_);
        if (_json_.value === undefined) { throw new Error() };
        this.value = _json_.value;
    }

    resolve(tables) {
        super.resolve(tables);
        
    }
}


export class AiStringKeyData extends AiKeyData {

    constructor(_json_) {
        super(_json_);
        if (_json_.value === undefined) { throw new Error() };
        this.value = _json_.value;
    }

    resolve(tables) {
        super.resolve(tables);
        
    }
}


export class AiKeyQueryOperator {
    static constructorFrom(_json_) {
        switch (_json_["$type"]) {
            case 'IsSet2': return new AiIsSet2(_json_);
            case 'IsNotSet': return new AiIsNotSet(_json_);
            case 'BinaryOperator': return new AiBinaryOperator(_json_);
            default: throw new Error();
        }
    }

    constructor(_json_) {
    }

    resolve(tables) {
    }
}


export class AiBinaryOperator extends AiKeyQueryOperator {

    constructor(_json_) {
        super(_json_);
        if (_json_.oper === undefined) { throw new Error() };
        this.oper = _json_.oper;
        if (_json_.data === undefined) { throw new Error() };
        this.data = AiKeyData.constructorFrom(_json_.data);
    }

    resolve(tables) {
        super.resolve(tables);
        
        this.data?.resolve(tables);
    }
}


export class AiIsNotSet extends AiKeyQueryOperator {

    constructor(_json_) {
        super(_json_);
    }

    resolve(tables) {
        super.resolve(tables);
    }
}


export class AiIsSet2 extends AiKeyQueryOperator {

    constructor(_json_) {
        super(_json_);
    }

    resolve(tables) {
        super.resolve(tables);
    }
}


export class AiNode {
    static constructorFrom(_json_) {
        switch (_json_["$type"]) {
            case 'UeSetDefaultFocus': return new AiUeSetDefaultFocus(_json_);
            case 'ExecuteTimeStatistic': return new AiExecuteTimeStatistic(_json_);
            case 'ChooseTarget': return new AiChooseTarget(_json_);
            case 'KeepFaceTarget': return new AiKeepFaceTarget(_json_);
            case 'GetOwnerPlayer': return new AiGetOwnerPlayer(_json_);
            case 'UpdateDailyBehaviorProps': return new AiUpdateDailyBehaviorProps(_json_);
            case 'UeLoop': return new AiUeLoop(_json_);
            case 'UeCooldown': return new AiUeCooldown(_json_);
            case 'UeTimeLimit': return new AiUeTimeLimit(_json_);
            case 'UeBlackboard': return new AiUeBlackboard(_json_);
            case 'UeForceSuccess': return new AiUeForceSuccess(_json_);
            case 'IsAtLocation': return new AiIsAtLocation(_json_);
            case 'DistanceLessThan': return new AiDistanceLessThan(_json_);
            case 'Sequence': return new AiSequence(_json_);
            case 'Selector': return new AiSelector(_json_);
            case 'SimpleParallel': return new AiSimpleParallel(_json_);
            case 'UeWait': return new AiUeWait(_json_);
            case 'UeWaitBlackboardTime': return new AiUeWaitBlackboardTime(_json_);
            case 'MoveToTarget': return new AiMoveToTarget(_json_);
            case 'ChooseSkill': return new AiChooseSkill(_json_);
            case 'MoveToRandomLocation': return new AiMoveToRandomLocation(_json_);
            case 'MoveToLocation': return new AiMoveToLocation(_json_);
            case 'DebugPrint': return new AiDebugPrint(_json_);
            default: throw new Error();
        }
    }

    constructor(_json_) {
        if (_json_.id === undefined) { throw new Error() };
        this.id = _json_.id;
        if (_json_.node_name === undefined) { throw new Error() };
        this.nodeName = _json_.node_name;
    }

    resolve(tables) {
        
        
    }
}


export class AiDecorator extends AiNode {
    static constructorFrom(_json_) {
        switch (_json_["$type"]) {
            case 'UeLoop': return new AiUeLoop(_json_);
            case 'UeCooldown': return new AiUeCooldown(_json_);
            case 'UeTimeLimit': return new AiUeTimeLimit(_json_);
            case 'UeBlackboard': return new AiUeBlackboard(_json_);
            case 'UeForceSuccess': return new AiUeForceSuccess(_json_);
            case 'IsAtLocation': return new AiIsAtLocation(_json_);
            case 'DistanceLessThan': return new AiDistanceLessThan(_json_);
            default: throw new Error();
        }
    }

    constructor(_json_) {
        super(_json_);
        if (_json_.flow_abort_mode === undefined) { throw new Error() };
        this.flowAbortMode = _json_.flow_abort_mode;
    }

    resolve(tables) {
        super.resolve(tables);
        
    }
}


export class AiDistanceLessThan extends AiDecorator {

    constructor(_json_) {
        super(_json_);
        if (_json_.actor1_key === undefined) { throw new Error() };
        this.actor1Key = _json_.actor1_key;
        if (_json_.actor2_key === undefined) { throw new Error() };
        this.actor2Key = _json_.actor2_key;
        if (_json_.distance === undefined) { throw new Error() };
        this.distance = _json_.distance;
        if (_json_.reverse_result === undefined) { throw new Error() };
        this.reverseResult = _json_.reverse_result;
    }

    resolve(tables) {
        super.resolve(tables);
        
        
        
        
    }
}


export class AiIsAtLocation extends AiDecorator {

    constructor(_json_) {
        super(_json_);
        if (_json_.acceptable_radius === undefined) { throw new Error() };
        this.acceptableRadius = _json_.acceptable_radius;
        if (_json_.keyboard_key === undefined) { throw new Error() };
        this.keyboardKey = _json_.keyboard_key;
        if (_json_.inverse_condition === undefined) { throw new Error() };
        this.inverseCondition = _json_.inverse_condition;
    }

    resolve(tables) {
        super.resolve(tables);
        
        
        
    }
}


export class AiUeBlackboard extends AiDecorator {

    constructor(_json_) {
        super(_json_);
        if (_json_.notify_observer === undefined) { throw new Error() };
        this.notifyObserver = _json_.notify_observer;
        if (_json_.blackboard_key === undefined) { throw new Error() };
        this.blackboardKey = _json_.blackboard_key;
        if (_json_.key_query === undefined) { throw new Error() };
        this.keyQuery = AiKeyQueryOperator.constructorFrom(_json_.key_query);
    }

    resolve(tables) {
        super.resolve(tables);
        
        
        this.keyQuery?.resolve(tables);
    }
}


export class AiUeCooldown extends AiDecorator {

    constructor(_json_) {
        super(_json_);
        if (_json_.cooldown_time === undefined) { throw new Error() };
        this.cooldownTime = _json_.cooldown_time;
    }

    resolve(tables) {
        super.resolve(tables);
        
    }
}


export class AiUeForceSuccess extends AiDecorator {

    constructor(_json_) {
        super(_json_);
    }

    resolve(tables) {
        super.resolve(tables);
    }
}


export class AiUeLoop extends AiDecorator {

    constructor(_json_) {
        super(_json_);
        if (_json_.num_loops === undefined) { throw new Error() };
        this.numLoops = _json_.num_loops;
        if (_json_.infinite_loop === undefined) { throw new Error() };
        this.infiniteLoop = _json_.infinite_loop;
        if (_json_.infinite_loop_timeout_time === undefined) { throw new Error() };
        this.infiniteLoopTimeoutTime = _json_.infinite_loop_timeout_time;
    }

    resolve(tables) {
        super.resolve(tables);
        
        
        
    }
}


export class AiUeTimeLimit extends AiDecorator {

    constructor(_json_) {
        super(_json_);
        if (_json_.limit_time === undefined) { throw new Error() };
        this.limitTime = _json_.limit_time;
    }

    resolve(tables) {
        super.resolve(tables);
        
    }
}


export class AiFlowNode extends AiNode {
    static constructorFrom(_json_) {
        switch (_json_["$type"]) {
            case 'Sequence': return new AiSequence(_json_);
            case 'Selector': return new AiSelector(_json_);
            case 'SimpleParallel': return new AiSimpleParallel(_json_);
            case 'UeWait': return new AiUeWait(_json_);
            case 'UeWaitBlackboardTime': return new AiUeWaitBlackboardTime(_json_);
            case 'MoveToTarget': return new AiMoveToTarget(_json_);
            case 'ChooseSkill': return new AiChooseSkill(_json_);
            case 'MoveToRandomLocation': return new AiMoveToRandomLocation(_json_);
            case 'MoveToLocation': return new AiMoveToLocation(_json_);
            case 'DebugPrint': return new AiDebugPrint(_json_);
            default: throw new Error();
        }
    }

    constructor(_json_) {
        super(_json_);
        if (_json_.decorators === undefined) { throw new Error() };
        { this.decorators = []; for(let _ele0 of _json_.decorators) { let _e0; _e0 = AiDecorator.constructorFrom(_ele0); this.decorators.push(_e0);}};
        if (_json_.services === undefined) { throw new Error() };
        { this.services = []; for(let _ele0 of _json_.services) { let _e0; _e0 = AiService.constructorFrom(_ele0); this.services.push(_e0);}};
    }

    resolve(tables) {
        super.resolve(tables);
        for (let _e of this.decorators) { _e?.resolve(tables); }
        for (let _e of this.services) { _e?.resolve(tables); }
    }
}


export class AiComposeNode extends AiFlowNode {
    static constructorFrom(_json_) {
        switch (_json_["$type"]) {
            case 'Sequence': return new AiSequence(_json_);
            case 'Selector': return new AiSelector(_json_);
            case 'SimpleParallel': return new AiSimpleParallel(_json_);
            default: throw new Error();
        }
    }

    constructor(_json_) {
        super(_json_);
    }

    resolve(tables) {
        super.resolve(tables);
    }
}


export class AiSelector extends AiComposeNode {

    constructor(_json_) {
        super(_json_);
        if (_json_.children === undefined) { throw new Error() };
        { this.children = []; for(let _ele0 of _json_.children) { let _e0; _e0 = AiFlowNode.constructorFrom(_ele0); this.children.push(_e0);}};
    }

    resolve(tables) {
        super.resolve(tables);
        for (let _e of this.children) { _e?.resolve(tables); }
    }
}


export class AiSequence extends AiComposeNode {

    constructor(_json_) {
        super(_json_);
        if (_json_.children === undefined) { throw new Error() };
        { this.children = []; for(let _ele0 of _json_.children) { let _e0; _e0 = AiFlowNode.constructorFrom(_ele0); this.children.push(_e0);}};
    }

    resolve(tables) {
        super.resolve(tables);
        for (let _e of this.children) { _e?.resolve(tables); }
    }
}


export class AiSimpleParallel extends AiComposeNode {

    constructor(_json_) {
        super(_json_);
        if (_json_.finish_mode === undefined) { throw new Error() };
        this.finishMode = _json_.finish_mode;
        if (_json_.main_task === undefined) { throw new Error() };
        this.mainTask = AiTask.constructorFrom(_json_.main_task);
        if (_json_.background_node === undefined) { throw new Error() };
        this.backgroundNode = AiFlowNode.constructorFrom(_json_.background_node);
    }

    resolve(tables) {
        super.resolve(tables);
        
        this.mainTask?.resolve(tables);
        this.backgroundNode?.resolve(tables);
    }
}


export class AiTask extends AiFlowNode {
    static constructorFrom(_json_) {
        switch (_json_["$type"]) {
            case 'UeWait': return new AiUeWait(_json_);
            case 'UeWaitBlackboardTime': return new AiUeWaitBlackboardTime(_json_);
            case 'MoveToTarget': return new AiMoveToTarget(_json_);
            case 'ChooseSkill': return new AiChooseSkill(_json_);
            case 'MoveToRandomLocation': return new AiMoveToRandomLocation(_json_);
            case 'MoveToLocation': return new AiMoveToLocation(_json_);
            case 'DebugPrint': return new AiDebugPrint(_json_);
            default: throw new Error();
        }
    }

    constructor(_json_) {
        super(_json_);
        if (_json_.ignore_restart_self === undefined) { throw new Error() };
        this.ignoreRestartSelf = _json_.ignore_restart_self;
    }

    resolve(tables) {
        super.resolve(tables);
        
    }
}


export class AiChooseSkill extends AiTask {

    constructor(_json_) {
        super(_json_);
        if (_json_.target_actor_key === undefined) { throw new Error() };
        this.targetActorKey = _json_.target_actor_key;
        if (_json_.result_skill_id_key === undefined) { throw new Error() };
        this.resultSkillIdKey = _json_.result_skill_id_key;
    }

    resolve(tables) {
        super.resolve(tables);
        
        
    }
}


export class AiDebugPrint extends AiTask {

    constructor(_json_) {
        super(_json_);
        if (_json_.text === undefined) { throw new Error() };
        this.text = _json_.text;
    }

    resolve(tables) {
        super.resolve(tables);
        
    }
}


export class AiMoveToLocation extends AiTask {

    constructor(_json_) {
        super(_json_);
        if (_json_.acceptable_radius === undefined) { throw new Error() };
        this.acceptableRadius = _json_.acceptable_radius;
    }

    resolve(tables) {
        super.resolve(tables);
        
    }
}


export class AiMoveToRandomLocation extends AiTask {

    constructor(_json_) {
        super(_json_);
        if (_json_.origin_position_key === undefined) { throw new Error() };
        this.originPositionKey = _json_.origin_position_key;
        if (_json_.radius === undefined) { throw new Error() };
        this.radius = _json_.radius;
    }

    resolve(tables) {
        super.resolve(tables);
        
        
    }
}


export class AiMoveToTarget extends AiTask {

    constructor(_json_) {
        super(_json_);
        if (_json_.target_actor_key === undefined) { throw new Error() };
        this.targetActorKey = _json_.target_actor_key;
        if (_json_.acceptable_radius === undefined) { throw new Error() };
        this.acceptableRadius = _json_.acceptable_radius;
    }

    resolve(tables) {
        super.resolve(tables);
        
        
    }
}


export class AiUeWait extends AiTask {

    constructor(_json_) {
        super(_json_);
        if (_json_.wait_time === undefined) { throw new Error() };
        this.waitTime = _json_.wait_time;
        if (_json_.random_deviation === undefined) { throw new Error() };
        this.randomDeviation = _json_.random_deviation;
    }

    resolve(tables) {
        super.resolve(tables);
        
        
    }
}


export class AiUeWaitBlackboardTime extends AiTask {

    constructor(_json_) {
        super(_json_);
        if (_json_.blackboard_key === undefined) { throw new Error() };
        this.blackboardKey = _json_.blackboard_key;
    }

    resolve(tables) {
        super.resolve(tables);
        
    }
}


export class AiService extends AiNode {
    static constructorFrom(_json_) {
        switch (_json_["$type"]) {
            case 'UeSetDefaultFocus': return new AiUeSetDefaultFocus(_json_);
            case 'ExecuteTimeStatistic': return new AiExecuteTimeStatistic(_json_);
            case 'ChooseTarget': return new AiChooseTarget(_json_);
            case 'KeepFaceTarget': return new AiKeepFaceTarget(_json_);
            case 'GetOwnerPlayer': return new AiGetOwnerPlayer(_json_);
            case 'UpdateDailyBehaviorProps': return new AiUpdateDailyBehaviorProps(_json_);
            default: throw new Error();
        }
    }

    constructor(_json_) {
        super(_json_);
    }

    resolve(tables) {
        super.resolve(tables);
    }
}


export class AiChooseTarget extends AiService {

    constructor(_json_) {
        super(_json_);
        if (_json_.result_target_key === undefined) { throw new Error() };
        this.resultTargetKey = _json_.result_target_key;
    }

    resolve(tables) {
        super.resolve(tables);
        
    }
}


export class AiExecuteTimeStatistic extends AiService {

    constructor(_json_) {
        super(_json_);
    }

    resolve(tables) {
        super.resolve(tables);
    }
}


export class AiGetOwnerPlayer extends AiService {

    constructor(_json_) {
        super(_json_);
        if (_json_.player_actor_key === undefined) { throw new Error() };
        this.playerActorKey = _json_.player_actor_key;
    }

    resolve(tables) {
        super.resolve(tables);
        
    }
}


export class AiKeepFaceTarget extends AiService {

    constructor(_json_) {
        super(_json_);
        if (_json_.target_actor_key === undefined) { throw new Error() };
        this.targetActorKey = _json_.target_actor_key;
    }

    resolve(tables) {
        super.resolve(tables);
        
    }
}


export class AiUeSetDefaultFocus extends AiService {

    constructor(_json_) {
        super(_json_);
        if (_json_.keyboard_key === undefined) { throw new Error() };
        this.keyboardKey = _json_.keyboard_key;
    }

    resolve(tables) {
        super.resolve(tables);
        
    }
}


export class AiUpdateDailyBehaviorProps extends AiService {

    constructor(_json_) {
        super(_json_);
        if (_json_.satiety_key === undefined) { throw new Error() };
        this.satietyKey = _json_.satiety_key;
        if (_json_.energy_key === undefined) { throw new Error() };
        this.energyKey = _json_.energy_key;
        if (_json_.mood_key === undefined) { throw new Error() };
        this.moodKey = _json_.mood_key;
        if (_json_.satiety_lower_threshold_key === undefined) { throw new Error() };
        this.satietyLowerThresholdKey = _json_.satiety_lower_threshold_key;
        if (_json_.satiety_upper_threshold_key === undefined) { throw new Error() };
        this.satietyUpperThresholdKey = _json_.satiety_upper_threshold_key;
        if (_json_.energy_lower_threshold_key === undefined) { throw new Error() };
        this.energyLowerThresholdKey = _json_.energy_lower_threshold_key;
        if (_json_.energy_upper_threshold_key === undefined) { throw new Error() };
        this.energyUpperThresholdKey = _json_.energy_upper_threshold_key;
        if (_json_.mood_lower_threshold_key === undefined) { throw new Error() };
        this.moodLowerThresholdKey = _json_.mood_lower_threshold_key;
        if (_json_.mood_upper_threshold_key === undefined) { throw new Error() };
        this.moodUpperThresholdKey = _json_.mood_upper_threshold_key;
    }

    resolve(tables) {
        super.resolve(tables);
        
        
        
        
        
        
        
        
        
    }
}


export class AutoImport1 {

    constructor(_json_) {
        if (_json_.id === undefined) { throw new Error() };
        this.id = _json_.id;
        if (_json_.x1 === undefined) { throw new Error() };
        this.x1 = _json_.x1;
        if (_json_.x5 === undefined) { throw new Error() };
        this.x5 = _json_.x5;
        if (_json_.x6 === undefined) { throw new Error() };
        this.x6 = _json_.x6;
        if (_json_.x8 === undefined) { throw new Error() };
        this.x8 = _json_.x8;
        if (_json_.x10 === undefined) { throw new Error() };
        this.x10 = _json_.x10;
        if (_json_.x13 === undefined) { throw new Error() };
        this.x13 = _json_.x13;
        if (_json_.x13_2 === undefined) { throw new Error() };
        this.x132 = _json_.x13_2;
        if (_json_.x14 === undefined) { throw new Error() };
        this.x14 = TestDemoDynamic.constructorFrom(_json_.x14);
        if (_json_.x15 === undefined) { throw new Error() };
        this.x15 = TestShape.constructorFrom(_json_.x15);
        if (_json_.v2 === undefined) { throw new Error() };
        this.v2 = new vec2(_json_.v2);
        if (_json_.t1 === undefined) { throw new Error() };
        this.t1 = _json_.t1;
        if (_json_.k1 === undefined) { throw new Error() };
        { this.k1 = []; for(let _ele0 of _json_.k1) { let _e0; _e0 = _ele0; this.k1.push(_e0);}};
        if (_json_.k2 === undefined) { throw new Error() };
        { this.k2 = []; for(let _ele0 of _json_.k2) { let _e0; _e0 = _ele0; this.k2.push(_e0);}};
        if (_json_.k8 === undefined) { throw new Error() };
        this.k8 = new Map(); for(var _entry0_ of _json_.k8) { let _k0; _k0 = _entry0_[0];  let _v0;  _v0 = _entry0_[1]; this.k8.set(_k0, _v0);  };
        if (_json_.k9 === undefined) { throw new Error() };
        { this.k9 = []; for(let _ele0 of _json_.k9) { let _e0; _e0 = new TestDemoE2(_ele0); this.k9.push(_e0);}};
        if (_json_.k10 === undefined) { throw new Error() };
        { this.k10 = []; for(let _ele0 of _json_.k10) { let _e0; _e0 = new vec3(_ele0); this.k10.push(_e0);}};
        if (_json_.k11 === undefined) { throw new Error() };
        { this.k11 = []; for(let _ele0 of _json_.k11) { let _e0; _e0 = new vec4(_ele0); this.k11.push(_e0);}};
        if(_json_.v11 != undefined) { this.v11 = new vec3(_json_.v11) } else { this.v11 = undefined };
    }

    resolve(tables) {
        
        
        
        
        
        
        
        
        this.x14?.resolve(tables);
        this.x15?.resolve(tables);
        
        
        
        
        
        
        
        
        
    }
}


export class CommonDateTimeRange {

    constructor(_json_) {
        if(_json_.start_time != undefined) { this.startTime = _json_.start_time } else { this.startTime = undefined };
        if(_json_.end_time != undefined) { this.endTime = _json_.end_time } else { this.endTime = undefined };
    }

    resolve(tables) {
        
        
    }
}


export class CommonFloatRange {

    constructor(_json_) {
        if (_json_.min === undefined) { throw new Error() };
        this.min = _json_.min;
        if (_json_.max === undefined) { throw new Error() };
        this.max = _json_.max;
    }

    resolve(tables) {
        
        
    }
}


export class CommonGlobalConfig {

    constructor(_json_) {
        if (_json_.x1 === undefined) { throw new Error() };
        this.x1 = _json_.x1;
        if (_json_.x2 === undefined) { throw new Error() };
        this.x2 = _json_.x2;
        if (_json_.x3 === undefined) { throw new Error() };
        this.x3 = _json_.x3;
        if (_json_.x4 === undefined) { throw new Error() };
        this.x4 = _json_.x4;
        if (_json_.x5 === undefined) { throw new Error() };
        this.x5 = _json_.x5;
        if (_json_.x6 === undefined) { throw new Error() };
        this.x6 = _json_.x6;
        if (_json_.x7 === undefined) { throw new Error() };
        { this.x7 = []; for(let _ele0 of _json_.x7) { let _e0; _e0 = _ele0; this.x7.push(_e0);}};
    }

    resolve(tables) {
        
        
        
        
        
        
        
    }
}


export class CommonIntRange {

    constructor(_json_) {
        if (_json_.min === undefined) { throw new Error() };
        this.min = _json_.min;
        if (_json_.max === undefined) { throw new Error() };
        this.max = _json_.max;
    }

    resolve(tables) {
        
        
    }
}


export class CommonOneDayTimeRange {

    constructor(_json_) {
        if (_json_.start_time === undefined) { throw new Error() };
        this.startTime = new CommonTimeOfDay(_json_.start_time);
        if (_json_.end_time === undefined) { throw new Error() };
        this.endTime = new CommonTimeOfDay(_json_.end_time);
    }

    resolve(tables) {
        this.startTime?.resolve(tables);
        this.endTime?.resolve(tables);
    }
}


export class CommonTimeOfDay {

    constructor(_json_) {
        if (_json_.hour === undefined) { throw new Error() };
        this.hour = _json_.hour;
        if (_json_.minute === undefined) { throw new Error() };
        this.minute = _json_.minute;
        if (_json_.second === undefined) { throw new Error() };
        this.second = _json_.second;
    }

    resolve(tables) {
        
        
        
    }
}


/**
 * 道具
 */
export class ItemItem {

    constructor(_json_) {
        if (_json_.id === undefined) { throw new Error() };
        this.id = _json_.id;
        if (_json_.name === undefined) { throw new Error() };
        this.name = _json_.name;
        if (_json_.major_type === undefined) { throw new Error() };
        this.majorType = _json_.major_type;
        if (_json_.minor_type === undefined) { throw new Error() };
        this.minorType = _json_.minor_type;
        if (_json_.max_pile_num === undefined) { throw new Error() };
        this.maxPileNum = _json_.max_pile_num;
        if (_json_.quality === undefined) { throw new Error() };
        this.quality = _json_.quality;
        if (_json_.icon === undefined) { throw new Error() };
        this.icon = _json_.icon;
        if (_json_.icon_backgroud === undefined) { throw new Error() };
        this.iconBackgroud = _json_.icon_backgroud;
        if (_json_.icon_mask === undefined) { throw new Error() };
        this.iconMask = _json_.icon_mask;
        if (_json_.desc === undefined) { throw new Error() };
        this.desc = _json_.desc;
        if (_json_.show_order === undefined) { throw new Error() };
        this.showOrder = _json_.show_order;
    }

    resolve(tables) {
        
        
        
        
        
        
        
        
        
        
        
    }
}


export class L10nL10NDemo {

    constructor(_json_) {
        if (_json_.id === undefined) { throw new Error() };
        this.id = _json_.id;
        if (_json_.text === undefined) { throw new Error() };
        this.text = _json_.text;
    }

    resolve(tables) {
        
        
    }
}


export class L10nPatchDemo {

    constructor(_json_) {
        if (_json_.id === undefined) { throw new Error() };
        this.id = _json_.id;
        if (_json_.value === undefined) { throw new Error() };
        this.value = _json_.value;
    }

    resolve(tables) {
        
        
    }
}


export class TagTestTag {

    constructor(_json_) {
        if (_json_.id === undefined) { throw new Error() };
        this.id = _json_.id;
        if (_json_.value === undefined) { throw new Error() };
        this.value = _json_.value;
    }

    resolve(tables) {
        
        
    }
}


export class TestAutoImport2 {

    constructor(_json_) {
        if (_json_.id === undefined) { throw new Error() };
        this.id = _json_.id;
        if (_json_.x1 === undefined) { throw new Error() };
        this.x1 = _json_.x1;
        if (_json_.x5 === undefined) { throw new Error() };
        this.x5 = _json_.x5;
        if (_json_.x6 === undefined) { throw new Error() };
        this.x6 = _json_.x6;
        if (_json_.x8 === undefined) { throw new Error() };
        this.x8 = _json_.x8;
        if (_json_.x10 === undefined) { throw new Error() };
        this.x10 = _json_.x10;
        if (_json_.x13 === undefined) { throw new Error() };
        this.x13 = _json_.x13;
        if (_json_.x13_2 === undefined) { throw new Error() };
        this.x132 = _json_.x13_2;
        if (_json_.x14 === undefined) { throw new Error() };
        this.x14 = TestDemoDynamic.constructorFrom(_json_.x14);
        if (_json_.x15 === undefined) { throw new Error() };
        this.x15 = TestShape.constructorFrom(_json_.x15);
        if (_json_.v2 === undefined) { throw new Error() };
        this.v2 = new vec2(_json_.v2);
        if (_json_.t1 === undefined) { throw new Error() };
        this.t1 = _json_.t1;
        if (_json_.k1 === undefined) { throw new Error() };
        { this.k1 = []; for(let _ele0 of _json_.k1) { let _e0; _e0 = _ele0; this.k1.push(_e0);}};
        if (_json_.k2 === undefined) { throw new Error() };
        { this.k2 = []; for(let _ele0 of _json_.k2) { let _e0; _e0 = _ele0; this.k2.push(_e0);}};
        if (_json_.k8 === undefined) { throw new Error() };
        this.k8 = new Map(); for(var _entry0_ of _json_.k8) { let _k0; _k0 = _entry0_[0];  let _v0;  _v0 = _entry0_[1]; this.k8.set(_k0, _v0);  };
        if (_json_.k9 === undefined) { throw new Error() };
        { this.k9 = []; for(let _ele0 of _json_.k9) { let _e0; _e0 = new TestDemoE2(_ele0); this.k9.push(_e0);}};
        if (_json_.k10 === undefined) { throw new Error() };
        { this.k10 = []; for(let _ele0 of _json_.k10) { let _e0; _e0 = new vec3(_ele0); this.k10.push(_e0);}};
        if (_json_.k11 === undefined) { throw new Error() };
        { this.k11 = []; for(let _ele0 of _json_.k11) { let _e0; _e0 = new vec4(_ele0); this.k11.push(_e0);}};
        if(_json_.v11 != undefined) { this.v11 = new vec3(_json_.v11) } else { this.v11 = undefined };
    }

    resolve(tables) {
        
        
        
        
        
        
        
        
        this.x14?.resolve(tables);
        this.x15?.resolve(tables);
        
        
        
        
        
        
        
        
        
    }
}


export class TestCompactString {

    constructor(_json_) {
        if (_json_.id === undefined) { throw new Error() };
        this.id = _json_.id;
        if (_json_.s2 === undefined) { throw new Error() };
        this.s2 = _json_.s2;
        if (_json_.s3 === undefined) { throw new Error() };
        this.s3 = _json_.s3;
    }

    resolve(tables) {
        
        
        
    }
}


export class TestCompositeJsonTable1 {

    constructor(_json_) {
        if (_json_.id === undefined) { throw new Error() };
        this.id = _json_.id;
        if (_json_.x === undefined) { throw new Error() };
        this.x = _json_.x;
    }

    resolve(tables) {
        
        
    }
}


export class TestCompositeJsonTable2 {

    constructor(_json_) {
        if (_json_.id === undefined) { throw new Error() };
        this.id = _json_.id;
        if (_json_.y === undefined) { throw new Error() };
        this.y = _json_.y;
    }

    resolve(tables) {
        
        
    }
}


export class TestCompositeJsonTable3 {

    constructor(_json_) {
        if (_json_.a === undefined) { throw new Error() };
        this.a = _json_.a;
        if (_json_.b === undefined) { throw new Error() };
        this.b = _json_.b;
    }

    resolve(tables) {
        
        
    }
}


export class TestDateTimeRange {

    constructor(_json_) {
        if (_json_.start_time === undefined) { throw new Error() };
        this.startTime = _json_.start_time;
        if (_json_.end_time === undefined) { throw new Error() };
        this.endTime = _json_.end_time;
    }

    resolve(tables) {
        
        
    }
}


export class TestDefineFromExcel2 {

    constructor(_json_) {
        if (_json_.id === undefined) { throw new Error() };
        this.id = _json_.id;
        if (_json_.x1 === undefined) { throw new Error() };
        this.x1 = _json_.x1;
        if (_json_.x5 === undefined) { throw new Error() };
        this.x5 = _json_.x5;
        if (_json_.x6 === undefined) { throw new Error() };
        this.x6 = _json_.x6;
        if (_json_.x8 === undefined) { throw new Error() };
        this.x8 = _json_.x8;
        if (_json_.x10 === undefined) { throw new Error() };
        this.x10 = _json_.x10;
        if (_json_.x13 === undefined) { throw new Error() };
        this.x13 = _json_.x13;
        if (_json_.x13_2 === undefined) { throw new Error() };
        this.x132 = _json_.x13_2;
        if (_json_.x13_3 === undefined) { throw new Error() };
        this.x133 = _json_.x13_3;
        if (_json_.x14 === undefined) { throw new Error() };
        this.x14 = TestDemoDynamic.constructorFrom(_json_.x14);
        if (_json_.x15 === undefined) { throw new Error() };
        this.x15 = TestShape.constructorFrom(_json_.x15);
        if (_json_.v2 === undefined) { throw new Error() };
        this.v2 = new vec2(_json_.v2);
        if (_json_.t1 === undefined) { throw new Error() };
        this.t1 = _json_.t1;
        if (_json_.k1 === undefined) { throw new Error() };
        { this.k1 = []; for(let _ele0 of _json_.k1) { let _e0; _e0 = _ele0; this.k1.push(_e0);}};
        if (_json_.k2 === undefined) { throw new Error() };
        { this.k2 = []; for(let _ele0 of _json_.k2) { let _e0; _e0 = _ele0; this.k2.push(_e0);}};
        if (_json_.k8 === undefined) { throw new Error() };
        this.k8 = new Map(); for(var _entry0_ of _json_.k8) { let _k0; _k0 = _entry0_[0];  let _v0;  _v0 = _entry0_[1]; this.k8.set(_k0, _v0);  };
        if (_json_.k9 === undefined) { throw new Error() };
        { this.k9 = []; for(let _ele0 of _json_.k9) { let _e0; _e0 = new TestDemoE2(_ele0); this.k9.push(_e0);}};
        if (_json_.k10 === undefined) { throw new Error() };
        { this.k10 = []; for(let _ele0 of _json_.k10) { let _e0; _e0 = new vec3(_ele0); this.k10.push(_e0);}};
        if (_json_.k11 === undefined) { throw new Error() };
        { this.k11 = []; for(let _ele0 of _json_.k11) { let _e0; _e0 = new vec4(_ele0); this.k11.push(_e0);}};
        if(_json_.v11 != undefined) { this.v11 = new vec3(_json_.v11) } else { this.v11 = undefined };
    }

    resolve(tables) {
        
        
        
        
        
        
        
        
        
        this.x14?.resolve(tables);
        this.x15?.resolve(tables);
        
        
        
        
        
        
        
        
        
    }
}


export class TestDemoDynamic {
    static constructorFrom(_json_) {
        switch (_json_["$type"]) {
            case 'DemoD2': return new TestDemoD2(_json_);
            case 'DemoE1': return new TestDemoE1(_json_);
            case 'test.login.RoleInfo': return new TestLoginRoleInfo(_json_);
            case 'DemoD5': return new TestDemoD5(_json_);
            default: throw new Error();
        }
    }

    constructor(_json_) {
        if (_json_.x1 === undefined) { throw new Error() };
        this.x1 = _json_.x1;
    }

    resolve(tables) {
        
    }
}


export class TestDemoD2 extends TestDemoDynamic {

    constructor(_json_) {
        super(_json_);
        if (_json_.x2 === undefined) { throw new Error() };
        this.x2 = _json_.x2;
    }

    resolve(tables) {
        super.resolve(tables);
        
    }
}


export class TestDemoD3 extends TestDemoDynamic {
    static constructorFrom(_json_) {
        switch (_json_["$type"]) {
            case 'DemoE1': return new TestDemoE1(_json_);
            case 'test.login.RoleInfo': return new TestLoginRoleInfo(_json_);
            default: throw new Error();
        }
    }

    constructor(_json_) {
        super(_json_);
        if (_json_.x3 === undefined) { throw new Error() };
        this.x3 = _json_.x3;
    }

    resolve(tables) {
        super.resolve(tables);
        
    }
}


export class TestDemoE1 extends TestDemoD3 {

    constructor(_json_) {
        super(_json_);
        if (_json_.x4 === undefined) { throw new Error() };
        this.x4 = _json_.x4;
    }

    resolve(tables) {
        super.resolve(tables);
        
    }
}


export class TestLoginRoleInfo extends TestDemoD3 {

    constructor(_json_) {
        super(_json_);
        if (_json_.role_id === undefined) { throw new Error() };
        this.roleId = _json_.role_id;
    }

    resolve(tables) {
        super.resolve(tables);
        
    }
}


export class TestDemoD5 extends TestDemoDynamic {

    constructor(_json_) {
        super(_json_);
        if (_json_.time === undefined) { throw new Error() };
        this.time = new TestDateTimeRange(_json_.time);
    }

    resolve(tables) {
        super.resolve(tables);
        this.time?.resolve(tables);
    }
}


export class TestDemoE2 {

    constructor(_json_) {
        if(_json_.y1 != undefined) { this.y1 = _json_.y1 } else { this.y1 = undefined };
        if (_json_.y2 === undefined) { throw new Error() };
        this.y2 = _json_.y2;
    }

    resolve(tables) {
        
        
    }
}


export class TestDemoExplicitType {

    constructor(_json_) {
        if (_json_.x1 === undefined) { throw new Error() };
        this.x1 = _json_.x1;
        if (_json_.x2 === undefined) { throw new Error() };
        this.x2 = _json_.x2;
        if (_json_.x3 === undefined) { throw new Error() };
        this.x3 = _json_.x3;
        if (_json_.x4 === undefined) { throw new Error() };
        this.x4 = _json_.x4;
        if (_json_.x5 === undefined) { throw new Error() };
        this.x5 = _json_.x5;
        if (_json_.x6 === undefined) { throw new Error() };
        this.x6 = _json_.x6;
        if (_json_.x7 === undefined) { throw new Error() };
        this.x7 = _json_.x7;
    }

    resolve(tables) {
        
        
        
        
        
        
        
    }
}


export class TestDemoGroup {

    constructor(_json_) {
        if (_json_.id === undefined) { throw new Error() };
        this.id = _json_.id;
        if (_json_.x1 === undefined) { throw new Error() };
        this.x1 = _json_.x1;
        if (_json_.x2 === undefined) { throw new Error() };
        this.x2 = _json_.x2;
        if (_json_.x3 === undefined) { throw new Error() };
        this.x3 = _json_.x3;
        if (_json_.x4 === undefined) { throw new Error() };
        this.x4 = _json_.x4;
        if (_json_.x5 === undefined) { throw new Error() };
        this.x5 = new TestInnerGroup(_json_.x5);
    }

    resolve(tables) {
        
        this.x1_ref = tables.TbDemoGroup_C.get(this.x1)
        this.x2_ref = tables.TbDemoGroup_S.get(this.x2)
        this.x3_ref = tables.TbDemoGroup_E.get(this.x3)
        
        this.x5?.resolve(tables);
    }
}


export class TestDemoPrimitiveTypesTable {

    constructor(_json_) {
        if (_json_.x1 === undefined) { throw new Error() };
        this.x1 = _json_.x1;
        if (_json_.x2 === undefined) { throw new Error() };
        this.x2 = _json_.x2;
        if (_json_.x3 === undefined) { throw new Error() };
        this.x3 = _json_.x3;
        if (_json_.x4 === undefined) { throw new Error() };
        this.x4 = _json_.x4;
        if (_json_.x5 === undefined) { throw new Error() };
        this.x5 = _json_.x5;
        if (_json_.x6 === undefined) { throw new Error() };
        this.x6 = _json_.x6;
        if (_json_.x7 === undefined) { throw new Error() };
        this.x7 = _json_.x7;
        if (_json_.s1 === undefined) { throw new Error() };
        this.s1 = _json_.s1;
        if (_json_.s2 === undefined) { throw new Error() };
        this.s2 = _json_.s2;
        if (_json_.v2 === undefined) { throw new Error() };
        this.v2 = new vec2(_json_.v2);
        if (_json_.v3 === undefined) { throw new Error() };
        this.v3 = new vec3(_json_.v3);
        if (_json_.v4 === undefined) { throw new Error() };
        this.v4 = new vec4(_json_.v4);
        if (_json_.t1 === undefined) { throw new Error() };
        this.t1 = _json_.t1;
    }

    resolve(tables) {
        
        
        
        
        
        
        
        
        
        
        
        
        
    }
}


export class TestDemoSingletonType {

    constructor(_json_) {
        if (_json_.id === undefined) { throw new Error() };
        this.id = _json_.id;
        if (_json_.name === undefined) { throw new Error() };
        this.name = _json_.name;
        if (_json_.date === undefined) { throw new Error() };
        this.date = TestDemoDynamic.constructorFrom(_json_.date);
    }

    resolve(tables) {
        
        
        this.date?.resolve(tables);
    }
}


export class TestDemoType1 {

    constructor(_json_) {
        if (_json_.x1 === undefined) { throw new Error() };
        this.x1 = _json_.x1;
    }

    resolve(tables) {
        
    }
}


export class TestDemoType2 {

    constructor(_json_) {
        if (_json_.x4 === undefined) { throw new Error() };
        this.x4 = _json_.x4;
        if (_json_.x1 === undefined) { throw new Error() };
        this.x1 = _json_.x1;
        if (_json_.x2 === undefined) { throw new Error() };
        this.x2 = _json_.x2;
        if (_json_.x3 === undefined) { throw new Error() };
        this.x3 = _json_.x3;
        if (_json_.x5 === undefined) { throw new Error() };
        this.x5 = _json_.x5;
        if (_json_.x6 === undefined) { throw new Error() };
        this.x6 = _json_.x6;
        if (_json_.x7 === undefined) { throw new Error() };
        this.x7 = _json_.x7;
        if (_json_.x8_0 === undefined) { throw new Error() };
        this.x80 = _json_.x8_0;
        if (_json_.x8 === undefined) { throw new Error() };
        this.x8 = _json_.x8;
        if (_json_.x9 === undefined) { throw new Error() };
        this.x9 = _json_.x9;
        if (_json_.x10 === undefined) { throw new Error() };
        this.x10 = _json_.x10;
        if (_json_.x12 === undefined) { throw new Error() };
        this.x12 = new TestDemoType1(_json_.x12);
        if (_json_.x13 === undefined) { throw new Error() };
        this.x13 = _json_.x13;
        if (_json_.x14 === undefined) { throw new Error() };
        this.x14 = TestDemoDynamic.constructorFrom(_json_.x14);
        if (_json_.s1 === undefined) { throw new Error() };
        this.s1 = _json_.s1;
        if (_json_.t1 === undefined) { throw new Error() };
        this.t1 = _json_.t1;
        if (_json_.k1 === undefined) { throw new Error() };
        { this.k1 = []; for(let _ele0 of _json_.k1) { let _e0; _e0 = _ele0; this.k1.push(_e0);}};
        if (_json_.k2 === undefined) { throw new Error() };
        { this.k2 = []; for(let _ele0 of _json_.k2) { let _e0; _e0 = _ele0; this.k2.push(_e0);}};
        if (_json_.k5 === undefined) { throw new Error() };
        this.k5 = _json_.k5;
        if (_json_.k8 === undefined) { throw new Error() };
        this.k8 = new Map(); for(var _entry0_ of _json_.k8) { let _k0; _k0 = _entry0_[0];  let _v0;  _v0 = _entry0_[1]; this.k8.set(_k0, _v0);  };
        if (_json_.k9 === undefined) { throw new Error() };
        { this.k9 = []; for(let _ele0 of _json_.k9) { let _e0; _e0 = new TestDemoE2(_ele0); this.k9.push(_e0);}};
        if (_json_.k15 === undefined) { throw new Error() };
        { this.k15 = []; for(let _ele0 of _json_.k15) { let _e0; _e0 = TestDemoDynamic.constructorFrom(_ele0); this.k15.push(_e0);}};
    }

    resolve(tables) {
        
        
        
        
        
        
        
        
        
        
        
        this.x12?.resolve(tables);
        
        this.x14?.resolve(tables);
        
        
        
        
        
        
        
        for (let _e of this.k15) { _e?.resolve(tables); }
    }
}


export class TestDetectEncoding {

    constructor(_json_) {
        if (_json_.id === undefined) { throw new Error() };
        this.id = _json_.id;
        if (_json_.name === undefined) { throw new Error() };
        this.name = _json_.name;
    }

    resolve(tables) {
        
        
    }
}


export class TestExcelFromJson {

    constructor(_json_) {
        if (_json_.x4 === undefined) { throw new Error() };
        this.x4 = _json_.x4;
        if (_json_.x1 === undefined) { throw new Error() };
        this.x1 = _json_.x1;
        if (_json_.x5 === undefined) { throw new Error() };
        this.x5 = _json_.x5;
        if (_json_.x6 === undefined) { throw new Error() };
        this.x6 = _json_.x6;
        if (_json_.s1 === undefined) { throw new Error() };
        this.s1 = _json_.s1;
        if (_json_.s2 === undefined) { throw new Error() };
        this.s2 = _json_.s2;
        if (_json_.t1 === undefined) { throw new Error() };
        this.t1 = _json_.t1;
        if (_json_.x12 === undefined) { throw new Error() };
        this.x12 = new TestDemoType1(_json_.x12);
        if (_json_.x13 === undefined) { throw new Error() };
        this.x13 = _json_.x13;
        if (_json_.x14 === undefined) { throw new Error() };
        this.x14 = TestDemoDynamic.constructorFrom(_json_.x14);
        if (_json_.k1 === undefined) { throw new Error() };
        { this.k1 = []; for(let _ele0 of _json_.k1) { let _e0; _e0 = _ele0; this.k1.push(_e0);}};
        if (_json_.k8 === undefined) { throw new Error() };
        this.k8 = new Map(); for(var _entry0_ of _json_.k8) { let _k0; _k0 = _entry0_[0];  let _v0;  _v0 = _entry0_[1]; this.k8.set(_k0, _v0);  };
        if (_json_.k9 === undefined) { throw new Error() };
        { this.k9 = []; for(let _ele0 of _json_.k9) { let _e0; _e0 = new TestDemoE2(_ele0); this.k9.push(_e0);}};
        if (_json_.k15 === undefined) { throw new Error() };
        { this.k15 = []; for(let _ele0 of _json_.k15) { let _e0; _e0 = TestDemoDynamic.constructorFrom(_ele0); this.k15.push(_e0);}};
    }

    resolve(tables) {
        
        
        
        
        
        
        
        this.x12?.resolve(tables);
        
        this.x14?.resolve(tables);
        
        
        
        for (let _e of this.k15) { _e?.resolve(tables); }
    }
}


export class TestExcelFromJsonMultiRow {

    constructor(_json_) {
        if (_json_.id === undefined) { throw new Error() };
        this.id = _json_.id;
        if (_json_.x === undefined) { throw new Error() };
        this.x = _json_.x;
        if (_json_.items === undefined) { throw new Error() };
        { this.items = []; for(let _ele0 of _json_.items) { let _e0; _e0 = new TestTestRow(_ele0); this.items.push(_e0);}};
    }

    resolve(tables) {
        
        
        for (let _e of this.items) { _e?.resolve(tables); }
    }
}


export class TestFoo {

    constructor(_json_) {
        if (_json_.y1 === undefined) { throw new Error() };
        this.y1 = _json_.y1;
        if (_json_.y2 === undefined) { throw new Error() };
        this.y2 = _json_.y2;
        if (_json_.y3 === undefined) { throw new Error() };
        this.y3 = _json_.y3;
    }

    resolve(tables) {
        
        
        
    }
}


export class TestH1 {

    constructor(_json_) {
        if (_json_.y2 === undefined) { throw new Error() };
        this.y2 = new TestH2(_json_.y2);
        if (_json_.y3 === undefined) { throw new Error() };
        this.y3 = _json_.y3;
    }

    resolve(tables) {
        this.y2?.resolve(tables);
        
    }
}


export class TestH2 {

    constructor(_json_) {
        if (_json_.z2 === undefined) { throw new Error() };
        this.z2 = _json_.z2;
        if (_json_.z3 === undefined) { throw new Error() };
        this.z3 = _json_.z3;
    }

    resolve(tables) {
        
        
    }
}


export class TestInnerGroup {

    constructor(_json_) {
        if (_json_.y1 === undefined) { throw new Error() };
        this.y1 = _json_.y1;
        if (_json_.y2 === undefined) { throw new Error() };
        this.y2 = _json_.y2;
        if (_json_.y3 === undefined) { throw new Error() };
        this.y3 = _json_.y3;
        if (_json_.y4 === undefined) { throw new Error() };
        this.y4 = _json_.y4;
    }

    resolve(tables) {
        
        
        
        
    }
}


export class TestItemBase {
    static constructorFrom(_json_) {
        switch (_json_["$type"]) {
            case 'Item': return new TestItem(_json_);
            case 'Equipment': return new TestEquipment(_json_);
            case 'Decorator': return new TestDecorator(_json_);
            default: throw new Error();
        }
    }

    constructor(_json_) {
        if (_json_.id === undefined) { throw new Error() };
        this.id = _json_.id;
        if (_json_.name === undefined) { throw new Error() };
        this.name = _json_.name;
        if (_json_.desc === undefined) { throw new Error() };
        this.desc = _json_.desc;
    }

    resolve(tables) {
        
        
        
    }
}


export class TestDecorator extends TestItemBase {

    constructor(_json_) {
        super(_json_);
        if (_json_.duration === undefined) { throw new Error() };
        this.duration = _json_.duration;
    }

    resolve(tables) {
        super.resolve(tables);
        
    }
}


export class TestEquipment extends TestItemBase {

    constructor(_json_) {
        super(_json_);
        if (_json_.attr === undefined) { throw new Error() };
        this.attr = _json_.attr;
        if (_json_.value === undefined) { throw new Error() };
        this.value = _json_.value;
    }

    resolve(tables) {
        super.resolve(tables);
        
        
    }
}


export class TestItem extends TestItemBase {

    constructor(_json_) {
        super(_json_);
        if (_json_.num === undefined) { throw new Error() };
        this.num = _json_.num;
        if (_json_.price === undefined) { throw new Error() };
        this.price = _json_.price;
    }

    resolve(tables) {
        super.resolve(tables);
        
        
    }
}


export class TestMultiIndexList {

    constructor(_json_) {
        if (_json_.id1 === undefined) { throw new Error() };
        this.id1 = _json_.id1;
        if (_json_.id2 === undefined) { throw new Error() };
        this.id2 = _json_.id2;
        if (_json_.id3 === undefined) { throw new Error() };
        this.id3 = _json_.id3;
        if (_json_.num === undefined) { throw new Error() };
        this.num = _json_.num;
        if (_json_.desc === undefined) { throw new Error() };
        this.desc = _json_.desc;
    }

    resolve(tables) {
        
        
        
        
        
    }
}


export class TestMultiRowRecord {

    constructor(_json_) {
        if (_json_.id === undefined) { throw new Error() };
        this.id = _json_.id;
        if (_json_.name === undefined) { throw new Error() };
        this.name = _json_.name;
        if (_json_.one_rows === undefined) { throw new Error() };
        { this.oneRows = []; for(let _ele0 of _json_.one_rows) { let _e0; _e0 = new TestMultiRowType1(_ele0); this.oneRows.push(_e0);}};
        if (_json_.multi_rows1 === undefined) { throw new Error() };
        { this.multiRows1 = []; for(let _ele0 of _json_.multi_rows1) { let _e0; _e0 = new TestMultiRowType1(_ele0); this.multiRows1.push(_e0);}};
        if (_json_.multi_rows2 === undefined) { throw new Error() };
        { this.multiRows2 = []; for(let _ele0 of _json_.multi_rows2) { let _e0; _e0 = new TestMultiRowType1(_ele0); this.multiRows2.push(_e0);}};
        if (_json_.multi_rows4 === undefined) { throw new Error() };
        this.multiRows4 = new Map(); for(var _entry0_ of _json_.multi_rows4) { let _k0; _k0 = _entry0_[0];  let _v0;  _v0 = new TestMultiRowType2(_entry0_[1]); this.multiRows4.set(_k0, _v0);  };
        if (_json_.multi_rows5 === undefined) { throw new Error() };
        { this.multiRows5 = []; for(let _ele0 of _json_.multi_rows5) { let _e0; _e0 = new TestMultiRowType3(_ele0); this.multiRows5.push(_e0);}};
        if (_json_.multi_rows6 === undefined) { throw new Error() };
        this.multiRows6 = new Map(); for(var _entry0_ of _json_.multi_rows6) { let _k0; _k0 = _entry0_[0];  let _v0;  _v0 = new TestMultiRowType2(_entry0_[1]); this.multiRows6.set(_k0, _v0);  };
        if (_json_.multi_rows7 === undefined) { throw new Error() };
        this.multiRows7 = new Map(); for(var _entry0_ of _json_.multi_rows7) { let _k0; _k0 = _entry0_[0];  let _v0;  _v0 = _entry0_[1]; this.multiRows7.set(_k0, _v0);  };
    }

    resolve(tables) {
        
        
        for (let _e of this.oneRows) { _e?.resolve(tables); }
        for (let _e of this.multiRows1) { _e?.resolve(tables); }
        for (let _e of this.multiRows2) { _e?.resolve(tables); }
        for (let [_, _e] of this.multiRows4) { _e?.resolve(tables); }
        for (let _e of this.multiRows5) { _e?.resolve(tables); }
        for (let [_, _e] of this.multiRows6) { _e?.resolve(tables); }
        
    }
}


export class TestMultiRowTitle {

    constructor(_json_) {
        if (_json_.id === undefined) { throw new Error() };
        this.id = _json_.id;
        if (_json_.name === undefined) { throw new Error() };
        this.name = _json_.name;
        if (_json_.x1 === undefined) { throw new Error() };
        this.x1 = new TestH1(_json_.x1);
        if(_json_.x2_0 != undefined) { this.x20 = new TestH2(_json_.x2_0) } else { this.x20 = undefined };
        if (_json_.x2 === undefined) { throw new Error() };
        { this.x2 = []; for(let _ele0 of _json_.x2) { let _e0; _e0 = new TestH2(_ele0); this.x2.push(_e0);}};
        if (_json_.x3 === undefined) { throw new Error() };
        { this.x3 = []; for(let _ele0 of _json_.x3) { let _e0; _e0 = new TestH2(_ele0); this.x3.push(_e0);}};
        if (_json_.x4 === undefined) { throw new Error() };
        { this.x4 = []; for(let _ele0 of _json_.x4) { let _e0; _e0 = new TestH2(_ele0); this.x4.push(_e0);}};
    }

    resolve(tables) {
        
        
        this.x1?.resolve(tables);
        this.x20?.resolve(tables);
        for (let _e of this.x2) { _e?.resolve(tables); }
        for (let _e of this.x3) { _e?.resolve(tables); }
        for (let _e of this.x4) { _e?.resolve(tables); }
    }
}


export class TestMultiRowType1 {

    constructor(_json_) {
        if (_json_.id === undefined) { throw new Error() };
        this.id = _json_.id;
        if (_json_.x === undefined) { throw new Error() };
        this.x = _json_.x;
    }

    resolve(tables) {
        
        
    }
}


export class TestMultiRowType2 {

    constructor(_json_) {
        if (_json_.id === undefined) { throw new Error() };
        this.id = _json_.id;
        if (_json_.x === undefined) { throw new Error() };
        this.x = _json_.x;
        if (_json_.y === undefined) { throw new Error() };
        this.y = _json_.y;
    }

    resolve(tables) {
        
        
        
    }
}


export class TestMultiRowType3 {

    constructor(_json_) {
        if (_json_.id === undefined) { throw new Error() };
        this.id = _json_.id;
        if (_json_.items === undefined) { throw new Error() };
        { this.items = []; for(let _ele0 of _json_.items) { let _e0; _e0 = new TestMultiRowType1(_ele0); this.items.push(_e0);}};
    }

    resolve(tables) {
        
        for (let _e of this.items) { _e?.resolve(tables); }
    }
}


export class TestMultiUnionIndexList {

    constructor(_json_) {
        if (_json_.id1 === undefined) { throw new Error() };
        this.id1 = _json_.id1;
        if (_json_.id2 === undefined) { throw new Error() };
        this.id2 = _json_.id2;
        if (_json_.id3 === undefined) { throw new Error() };
        this.id3 = _json_.id3;
        if (_json_.num === undefined) { throw new Error() };
        this.num = _json_.num;
        if (_json_.desc === undefined) { throw new Error() };
        this.desc = _json_.desc;
    }

    resolve(tables) {
        
        
        
        
        
    }
}


export class TestNotIndexList {

    constructor(_json_) {
        if (_json_.x === undefined) { throw new Error() };
        this.x = _json_.x;
        if (_json_.y === undefined) { throw new Error() };
        this.y = _json_.y;
    }

    resolve(tables) {
        
        
    }
}


export class TestPath {

    constructor(_json_) {
        if (_json_.id === undefined) { throw new Error() };
        this.id = _json_.id;
        if (_json_.res === undefined) { throw new Error() };
        this.res = _json_.res;
    }

    resolve(tables) {
        
        
    }
}


export class TestRefDynamicBase {
    static constructorFrom(_json_) {
        switch (_json_["$type"]) {
            case 'RefBean': return new TestRefBean(_json_);
            default: throw new Error();
        }
    }

    constructor(_json_) {
        if (_json_.x === undefined) { throw new Error() };
        this.x = _json_.x;
    }

    resolve(tables) {
        this.x_ref = tables.TbTestBeRef.get(this.x)
    }
}


export class TestRefBean extends TestRefDynamicBase {

    constructor(_json_) {
        super(_json_);
        if (_json_.arr === undefined) { throw new Error() };
        { this.arr = []; for(let _ele0 of _json_.arr) { let _e0; _e0 = _ele0; this.arr.push(_e0);}};
    }

    resolve(tables) {
        super.resolve(tables);
        
    }
}


export class TestSepBean1 {

    constructor(_json_) {
        if (_json_.a === undefined) { throw new Error() };
        this.a = _json_.a;
        if (_json_.b === undefined) { throw new Error() };
        this.b = _json_.b;
        if (_json_.c === undefined) { throw new Error() };
        this.c = _json_.c;
    }

    resolve(tables) {
        
        
        
    }
}


export class TestSepVector {

    constructor(_json_) {
        if (_json_.x === undefined) { throw new Error() };
        this.x = _json_.x;
        if (_json_.y === undefined) { throw new Error() };
        this.y = _json_.y;
        if (_json_.z === undefined) { throw new Error() };
        this.z = _json_.z;
    }

    resolve(tables) {
        
        
        
    }
}


export class TestShape {
    static constructorFrom(_json_) {
        switch (_json_["$type"]) {
            case 'Circle': return new TestCircle(_json_);
            case 'test2.Rectangle': return new Test2Rectangle(_json_);
            default: throw new Error();
        }
    }

    constructor(_json_) {
    }

    resolve(tables) {
    }
}


/**
 * 圆
 */
export class TestCircle extends TestShape {

    constructor(_json_) {
        super(_json_);
        if (_json_.radius === undefined) { throw new Error() };
        this.radius = _json_.radius;
    }

    resolve(tables) {
        super.resolve(tables);
        
    }
}


/**
 * 矩形
 */
export class Test2Rectangle extends TestShape {

    constructor(_json_) {
        super(_json_);
        if (_json_.width === undefined) { throw new Error() };
        this.width = _json_.width;
        if (_json_.height === undefined) { throw new Error() };
        this.height = _json_.height;
    }

    resolve(tables) {
        super.resolve(tables);
        
        
    }
}


export class TestTest3 {

    constructor(_json_) {
        if (_json_.x === undefined) { throw new Error() };
        this.x = _json_.x;
        if (_json_.y === undefined) { throw new Error() };
        this.y = _json_.y;
    }

    resolve(tables) {
        
        
    }
}


export class TestTestBeRef {

    constructor(_json_) {
        if (_json_.id === undefined) { throw new Error() };
        this.id = _json_.id;
        if (_json_.count === undefined) { throw new Error() };
        this.count = _json_.count;
    }

    resolve(tables) {
        
        
    }
}


export class TestTestConstAlias {

    constructor(_json_) {
        if (_json_.id === undefined) { throw new Error() };
        this.id = _json_.id;
        if (_json_.x1 === undefined) { throw new Error() };
        this.x1 = _json_.x1;
        if (_json_.x2 === undefined) { throw new Error() };
        this.x2 = _json_.x2;
        if (_json_.x3 === undefined) { throw new Error() };
        this.x3 = _json_.x3;
        if (_json_.x4 === undefined) { throw new Error() };
        this.x4 = _json_.x4;
    }

    resolve(tables) {
        
        
        
        
        
    }
}


/**
 * 这是个测试excel结构
 */
export class TestTestExcelBean1 {

    constructor(_json_) {
        if (_json_.x1 === undefined) { throw new Error() };
        this.x1 = _json_.x1;
        if (_json_.x2 === undefined) { throw new Error() };
        this.x2 = _json_.x2;
        if (_json_.x3 === undefined) { throw new Error() };
        this.x3 = _json_.x3;
        if (_json_.x4 === undefined) { throw new Error() };
        this.x4 = _json_.x4;
    }

    resolve(tables) {
        
        
        
        
    }
}


/**
 * 这是个测试excel结构
 */
export class TestTestExcelBean2 {

    constructor(_json_) {
        if (_json_.y1 === undefined) { throw new Error() };
        this.y1 = _json_.y1;
        if (_json_.y2 === undefined) { throw new Error() };
        this.y2 = _json_.y2;
        if (_json_.y3 === undefined) { throw new Error() };
        this.y3 = _json_.y3;
    }

    resolve(tables) {
        
        
        
    }
}


export class TestTestFieldAlias {

    constructor(_json_) {
        if (_json_.id === undefined) { throw new Error() };
        this.id = _json_.id;
        if (_json_.name === undefined) { throw new Error() };
        this.name = _json_.name;
    }

    resolve(tables) {
        
        
    }
}


export class TestTestFieldVariant {

    constructor(_json_) {
        if (_json_.id === undefined) { throw new Error() };
        this.id = _json_.id;
        if (_json_.name === undefined) { throw new Error() };
        this.name = _json_.name;
    }

    resolve(tables) {
        
        
    }
}


export class TestTestFieldVariant2 {

    constructor(_json_) {
        if (_json_.id === undefined) { throw new Error() };
        this.id = _json_.id;
        if (_json_.name === undefined) { throw new Error() };
        this.name = _json_.name;
    }

    resolve(tables) {
        
        
    }
}


export class TestTestFormat {

    constructor(_json_) {
        if (_json_.id === undefined) { throw new Error() };
        this.id = _json_.id;
        if (_json_.a1 === undefined) { throw new Error() };
        { this.a1 = []; for(let _ele0 of _json_.a1) { let _e0; _e0 = _ele0; this.a1.push(_e0);}};
        if (_json_.a2 === undefined) { throw new Error() };
        { this.a2 = []; for(let _ele0 of _json_.a2) { let _e0; _e0 = _ele0; this.a2.push(_e0);}};
        if (_json_.a3 === undefined) { throw new Error() };
        { this.a3 = []; for(let _ele0 of _json_.a3) { let _e0; _e0 = _ele0; this.a3.push(_e0);}};
        if (_json_.a4 === undefined) { throw new Error() };
        { this.a4 = []; for(let _ele0 of _json_.a4) { let _e0; _e0 = _ele0; this.a4.push(_e0);}};
        if (_json_.b1 === undefined) { throw new Error() };
        { this.b1 = []; for(let _ele0 of _json_.b1) { let _e0; _e0 = _ele0; this.b1.push(_e0);}};
        if (_json_.b2 === undefined) { throw new Error() };
        { this.b2 = []; for(let _ele0 of _json_.b2) { let _e0; _e0 = _ele0; this.b2.push(_e0);}};
        if (_json_.b3 === undefined) { throw new Error() };
        { this.b3 = []; for(let _ele0 of _json_.b3) { let _e0; _e0 = _ele0; this.b3.push(_e0);}};
        if (_json_.b4 === undefined) { throw new Error() };
        { this.b4 = []; for(let _ele0 of _json_.b4) { let _e0; _e0 = _ele0; this.b4.push(_e0);}};
        if (_json_.c1 === undefined) { throw new Error() };
        this.c1 = _json_.c1;
        if (_json_.c2 === undefined) { throw new Error() };
        this.c2 = _json_.c2;
        if (_json_.c3 === undefined) { throw new Error() };
        this.c3 = _json_.c3;
        if (_json_.c4 === undefined) { throw new Error() };
        this.c4 = _json_.c4;
        if (_json_.m1 === undefined) { throw new Error() };
        this.m1 = new Map(); for(var _entry0_ of _json_.m1) { let _k0; _k0 = _entry0_[0];  let _v0;  _v0 = _entry0_[1]; this.m1.set(_k0, _v0);  };
        if (_json_.m2 === undefined) { throw new Error() };
        this.m2 = new Map(); for(var _entry0_ of _json_.m2) { let _k0; _k0 = _entry0_[0];  let _v0;  _v0 = _entry0_[1]; this.m2.set(_k0, _v0);  };
        if (_json_.m3 === undefined) { throw new Error() };
        this.m3 = new Map(); for(var _entry0_ of _json_.m3) { let _k0; _k0 = _entry0_[0];  let _v0;  _v0 = _entry0_[1]; this.m3.set(_k0, _v0);  };
        if (_json_.m4 === undefined) { throw new Error() };
        this.m4 = new Map(); for(var _entry0_ of _json_.m4) { let _k0; _k0 = _entry0_[0];  let _v0;  _v0 = _entry0_[1]; this.m4.set(_k0, _v0);  };
        if (_json_.v31 === undefined) { throw new Error() };
        this.v31 = new vec3(_json_.v31);
        if (_json_.v32 === undefined) { throw new Error() };
        this.v32 = new vec3(_json_.v32);
        if (_json_.v33 === undefined) { throw new Error() };
        this.v33 = new vec3(_json_.v33);
        if (_json_.v34 === undefined) { throw new Error() };
        this.v34 = new vec3(_json_.v34);
        if (_json_.v41 === undefined) { throw new Error() };
        { this.v41 = []; for(let _ele0 of _json_.v41) { let _e0; _e0 = new vec3(_ele0); this.v41.push(_e0);}};
        if (_json_.v42 === undefined) { throw new Error() };
        { this.v42 = []; for(let _ele0 of _json_.v42) { let _e0; _e0 = new vec3(_ele0); this.v42.push(_e0);}};
        if (_json_.v43 === undefined) { throw new Error() };
        { this.v43 = []; for(let _ele0 of _json_.v43) { let _e0; _e0 = new vec3(_ele0); this.v43.push(_e0);}};
        if (_json_.v44 === undefined) { throw new Error() };
        { this.v44 = []; for(let _ele0 of _json_.v44) { let _e0; _e0 = new vec3(_ele0); this.v44.push(_e0);}};
    }

    resolve(tables) {
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
    }
}


export class TestTestGlobal {

    constructor(_json_) {
        if (_json_.unlock_equip === undefined) { throw new Error() };
        this.unlockEquip = _json_.unlock_equip;
        if (_json_.unlock_hero === undefined) { throw new Error() };
        this.unlockHero = _json_.unlock_hero;
    }

    resolve(tables) {
        
        
    }
}


export class TestTestIndex {

    constructor(_json_) {
        if (_json_.id === undefined) { throw new Error() };
        this.id = _json_.id;
        if (_json_.eles === undefined) { throw new Error() };
        { this.eles = []; for(let _ele0 of _json_.eles) { let _e0; _e0 = new TestDemoType1(_ele0); this.eles.push(_e0);}};
    }

    resolve(tables) {
        
        for (let _e of this.eles) { _e?.resolve(tables); }
    }
}


export class TestTestMap {

    constructor(_json_) {
        if (_json_.id === undefined) { throw new Error() };
        this.id = _json_.id;
        if (_json_.x1 === undefined) { throw new Error() };
        this.x1 = new Map(); for(var _entry0_ of _json_.x1) { let _k0; _k0 = _entry0_[0];  let _v0;  _v0 = _entry0_[1]; this.x1.set(_k0, _v0);  };
        if (_json_.x2 === undefined) { throw new Error() };
        this.x2 = new Map(); for(var _entry0_ of _json_.x2) { let _k0; _k0 = _entry0_[0];  let _v0;  _v0 = _entry0_[1]; this.x2.set(_k0, _v0);  };
        if (_json_.x3 === undefined) { throw new Error() };
        this.x3 = new Map(); for(var _entry0_ of _json_.x3) { let _k0; _k0 = _entry0_[0];  let _v0;  _v0 = _entry0_[1]; this.x3.set(_k0, _v0);  };
        if (_json_.x4 === undefined) { throw new Error() };
        this.x4 = new Map(); for(var _entry0_ of _json_.x4) { let _k0; _k0 = _entry0_[0];  let _v0;  _v0 = _entry0_[1]; this.x4.set(_k0, _v0);  };
    }

    resolve(tables) {
        this.id_ref = tables.TbTestIndex.get(this.id)
        
        
        
        
    }
}


export class TestTestMapper {

    constructor(_json_) {
        if (_json_.id === undefined) { throw new Error() };
        this.id = _json_.id;
        if (_json_.audio_type === undefined) { throw new Error() };
        this.audioType = _json_.audio_type;
        if (_json_.v2 === undefined) { throw new Error() };
        this.v2 = new vec2(_json_.v2);
    }

    resolve(tables) {
        
        
        
    }
}


export class TestTestMultiColumn {

    constructor(_json_) {
        if (_json_.id === undefined) { throw new Error() };
        this.id = _json_.id;
        if (_json_.a === undefined) { throw new Error() };
        this.a = new TestFoo(_json_.a);
        if (_json_.b === undefined) { throw new Error() };
        this.b = new TestFoo(_json_.b);
        if (_json_.c === undefined) { throw new Error() };
        this.c = new TestFoo(_json_.c);
    }

    resolve(tables) {
        
        this.a?.resolve(tables);
        this.b?.resolve(tables);
        this.c?.resolve(tables);
    }
}


export class TestTestNull {

    constructor(_json_) {
        if (_json_.id === undefined) { throw new Error() };
        this.id = _json_.id;
        if(_json_.x1 != undefined) { this.x1 = _json_.x1 } else { this.x1 = undefined };
        if(_json_.x2 != undefined) { this.x2 = _json_.x2 } else { this.x2 = undefined };
        if(_json_.x3 != undefined) { this.x3 = new TestDemoType1(_json_.x3) } else { this.x3 = undefined };
        if(_json_.x4 != undefined) { this.x4 = TestDemoDynamic.constructorFrom(_json_.x4) } else { this.x4 = undefined };
        if(_json_.s1 != undefined) { this.s1 = _json_.s1 } else { this.s1 = undefined };
        if(_json_.s2 != undefined) { this.s2 = _json_.s2 } else { this.s2 = undefined };
    }

    resolve(tables) {
        
        
        
        this.x3?.resolve(tables);
        this.x4?.resolve(tables);
        
        
    }
}


export class TestTestRange {

    constructor(_json_) {
        if (_json_.id === undefined) { throw new Error() };
        this.id = _json_.id;
        if (_json_.f1 === undefined) { throw new Error() };
        this.f1 = _json_.f1;
        if (_json_.f2 === undefined) { throw new Error() };
        this.f2 = _json_.f2;
        if (_json_.d1 === undefined) { throw new Error() };
        this.d1 = _json_.d1;
        if (_json_.d2 === undefined) { throw new Error() };
        this.d2 = _json_.d2;
        if (_json_.i1 === undefined) { throw new Error() };
        this.i1 = _json_.i1;
        if (_json_.i2 === undefined) { throw new Error() };
        this.i2 = _json_.i2;
        if (_json_.i3 === undefined) { throw new Error() };
        this.i3 = _json_.i3;
        if (_json_.i4 === undefined) { throw new Error() };
        this.i4 = _json_.i4;
        if (_json_.l1 === undefined) { throw new Error() };
        this.l1 = _json_.l1;
        if (_json_.l2 === undefined) { throw new Error() };
        this.l2 = _json_.l2;
        if (_json_.l3 === undefined) { throw new Error() };
        this.l3 = _json_.l3;
        if (_json_.l4 === undefined) { throw new Error() };
        this.l4 = _json_.l4;
    }

    resolve(tables) {
        
        
        
        
        
        
        
        
        
        
        
        
        
    }
}


export class TestTestRef {

    constructor(_json_) {
        if (_json_.id === undefined) { throw new Error() };
        this.id = _json_.id;
        if (_json_.x1 === undefined) { throw new Error() };
        this.x1 = _json_.x1;
        if (_json_.x1_2 === undefined) { throw new Error() };
        this.x12 = _json_.x1_2;
        if (_json_.x2 === undefined) { throw new Error() };
        this.x2 = _json_.x2;
        if (_json_.x3 === undefined) { throw new Error() };
        this.x3 = _json_.x3;
        if (_json_.x4 === undefined) { throw new Error() };
        this.x4 = _json_.x4;
        if (_json_.a1 === undefined) { throw new Error() };
        { this.a1 = []; for(let _ele0 of _json_.a1) { let _e0; _e0 = _ele0; this.a1.push(_e0);}};
        if (_json_.a2 === undefined) { throw new Error() };
        { this.a2 = []; for(let _ele0 of _json_.a2) { let _e0; _e0 = _ele0; this.a2.push(_e0);}};
        if (_json_.b1 === undefined) { throw new Error() };
        { this.b1 = []; for(let _ele0 of _json_.b1) { let _e0; _e0 = _ele0; this.b1.push(_e0);}};
        if (_json_.b2 === undefined) { throw new Error() };
        { this.b2 = []; for(let _ele0 of _json_.b2) { let _e0; _e0 = _ele0; this.b2.push(_e0);}};
        if (_json_.c1 === undefined) { throw new Error() };
        this.c1 = _json_.c1;
        if (_json_.c2 === undefined) { throw new Error() };
        this.c2 = _json_.c2;
        if (_json_.d1 === undefined) { throw new Error() };
        this.d1 = new Map(); for(var _entry0_ of _json_.d1) { let _k0; _k0 = _entry0_[0];  let _v0;  _v0 = _entry0_[1]; this.d1.set(_k0, _v0);  };
        if (_json_.d2 === undefined) { throw new Error() };
        this.d2 = new Map(); for(var _entry0_ of _json_.d2) { let _k0; _k0 = _entry0_[0];  let _v0;  _v0 = _entry0_[1]; this.d2.set(_k0, _v0);  };
        if (_json_.e1 === undefined) { throw new Error() };
        this.e1 = _json_.e1;
        if (_json_.e2 === undefined) { throw new Error() };
        this.e2 = _json_.e2;
        if (_json_.e3 === undefined) { throw new Error() };
        this.e3 = _json_.e3;
        if (_json_.f1 === undefined) { throw new Error() };
        this.f1 = _json_.f1;
        if (_json_.f2 === undefined) { throw new Error() };
        this.f2 = _json_.f2;
        if (_json_.f3 === undefined) { throw new Error() };
        this.f3 = _json_.f3;
        if (_json_.s1 === undefined) { throw new Error() };
        this.s1 = TestRefDynamicBase.constructorFrom(_json_.s1);
    }

    resolve(tables) {
        
        this.x1_ref = tables.TbTestBeRef.get(this.x1)
        this.x12_ref = tables.TbTestBeRef.get(this.x12)
        
        
        this.x4_ref = tables.TbTestTag.get(this.x4)
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        this.s1?.resolve(tables);
    }
}


export class TestTestRow {

    constructor(_json_) {
        if (_json_.x === undefined) { throw new Error() };
        this.x = _json_.x;
        if (_json_.y === undefined) { throw new Error() };
        this.y = _json_.y;
        if (_json_.z === undefined) { throw new Error() };
        this.z = _json_.z;
        if (_json_.a === undefined) { throw new Error() };
        this.a = new TestTest3(_json_.a);
        if (_json_.b === undefined) { throw new Error() };
        { this.b = []; for(let _ele0 of _json_.b) { let _e0; _e0 = _ele0; this.b.push(_e0);}};
    }

    resolve(tables) {
        
        
        
        this.a?.resolve(tables);
        
    }
}


export class TestTestScriptableObject {

    constructor(_json_) {
        if (_json_.id === undefined) { throw new Error() };
        this.id = _json_.id;
        if (_json_.desc === undefined) { throw new Error() };
        this.desc = _json_.desc;
        if (_json_.rate === undefined) { throw new Error() };
        this.rate = _json_.rate;
        if (_json_.num === undefined) { throw new Error() };
        this.num = _json_.num;
        if (_json_.v2 === undefined) { throw new Error() };
        this.v2 = new vec2(_json_.v2);
        if (_json_.v3 === undefined) { throw new Error() };
        this.v3 = new vec3(_json_.v3);
        if (_json_.v4 === undefined) { throw new Error() };
        this.v4 = new vec4(_json_.v4);
    }

    resolve(tables) {
        
        
        
        
        
        
        
    }
}


export class TestTestSep {

    constructor(_json_) {
        if (_json_.id === undefined) { throw new Error() };
        this.id = _json_.id;
        if (_json_.a1 === undefined) { throw new Error() };
        { this.a1 = []; for(let _ele0 of _json_.a1) { let _e0; _e0 = _ele0; this.a1.push(_e0);}};
        if (_json_.a2 === undefined) { throw new Error() };
        { this.a2 = []; for(let _ele0 of _json_.a2) { let _e0; _e0 = _ele0; this.a2.push(_e0);}};
        if (_json_.a3 === undefined) { throw new Error() };
        { this.a3 = []; for(let _ele0 of _json_.a3) { let _e0; _e0 = _ele0; this.a3.push(_e0);}};
        if (_json_.x2 === undefined) { throw new Error() };
        this.x2 = new TestSepBean1(_json_.x2);
        if (_json_.x3 === undefined) { throw new Error() };
        this.x3 = new TestSepVector(_json_.x3);
        if (_json_.x4 === undefined) { throw new Error() };
        { this.x4 = []; for(let _ele0 of _json_.x4) { let _e0; _e0 = new TestSepVector(_ele0); this.x4.push(_e0);}};
        if (_json_.x6 === undefined) { throw new Error() };
        { this.x6 = []; for(let _ele0 of _json_.x6) { let _e0; _e0 = new TestSepBean1(_ele0); this.x6.push(_e0);}};
    }

    resolve(tables) {
        
        
        
        
        this.x2?.resolve(tables);
        this.x3?.resolve(tables);
        for (let _e of this.x4) { _e?.resolve(tables); }
        for (let _e of this.x6) { _e?.resolve(tables); }
    }
}


export class TestTestSet {

    constructor(_json_) {
        if (_json_.id === undefined) { throw new Error() };
        this.id = _json_.id;
        if (_json_.x0 === undefined) { throw new Error() };
        this.x0 = _json_.x0;
        if (_json_.x1 === undefined) { throw new Error() };
        { this.x1 = []; for(let _ele0 of _json_.x1) { let _e0; _e0 = _ele0; this.x1.push(_e0);}};
        if (_json_.x2 === undefined) { throw new Error() };
        { this.x2 = []; for(let _ele0 of _json_.x2) { let _e0; _e0 = _ele0; this.x2.push(_e0);}};
        if (_json_.x3 === undefined) { throw new Error() };
        { this.x3 = []; for(let _ele0 of _json_.x3) { let _e0; _e0 = _ele0; this.x3.push(_e0);}};
        if (_json_.x4 === undefined) { throw new Error() };
        { this.x4 = []; for(let _ele0 of _json_.x4) { let _e0; _e0 = _ele0; this.x4.push(_e0);}};
    }

    resolve(tables) {
        
        
        
        
        
        
    }
}


export class TestTestSize {

    constructor(_json_) {
        if (_json_.id === undefined) { throw new Error() };
        this.id = _json_.id;
        if (_json_.x1 === undefined) { throw new Error() };
        { this.x1 = []; for(let _ele0 of _json_.x1) { let _e0; _e0 = _ele0; this.x1.push(_e0);}};
        if (_json_.x2 === undefined) { throw new Error() };
        { this.x2 = []; for(let _ele0 of _json_.x2) { let _e0; _e0 = _ele0; this.x2.push(_e0);}};
        if (_json_.x3 === undefined) { throw new Error() };
        this.x3 = _json_.x3;
        if (_json_.x4 === undefined) { throw new Error() };
        this.x4 = new Map(); for(var _entry0_ of _json_.x4) { let _k0; _k0 = _entry0_[0];  let _v0;  _v0 = _entry0_[1]; this.x4.set(_k0, _v0);  };
    }

    resolve(tables) {
        
        
        
        
        
    }
}


export class TestTestString {

    constructor(_json_) {
        if (_json_.id === undefined) { throw new Error() };
        this.id = _json_.id;
        if (_json_.s1 === undefined) { throw new Error() };
        this.s1 = _json_.s1;
        if (_json_.s2 === undefined) { throw new Error() };
        this.s2 = _json_.s2;
        if (_json_.cs1 === undefined) { throw new Error() };
        this.cs1 = new TestCompactString(_json_.cs1);
        if (_json_.cs2 === undefined) { throw new Error() };
        this.cs2 = new TestCompactString(_json_.cs2);
        if (_json_.css === undefined) { throw new Error() };
        { this.css = []; for(let _ele0 of _json_.css) { let _e0; _e0 = _ele0; this.css.push(_e0);}};
        if (_json_.css2 === undefined) { throw new Error() };
        { this.css2 = []; for(let _ele0 of _json_.css2) { let _e0; _e0 = _ele0; this.css2.push(_e0);}};
    }

    resolve(tables) {
        
        
        
        this.cs1?.resolve(tables);
        this.cs2?.resolve(tables);
        
        
    }
}


export class TestTestUeType {

    constructor(_json_) {
        if (_json_.x1 === undefined) { throw new Error() };
        this.x1 = _json_.x1;
        if (_json_.x2 === undefined) { throw new Error() };
        this.x2 = _json_.x2;
        if (_json_.x3 === undefined) { throw new Error() };
        this.x3 = _json_.x3;
        if (_json_.x4 === undefined) { throw new Error() };
        this.x4 = _json_.x4;
        if (_json_.x5 === undefined) { throw new Error() };
        this.x5 = _json_.x5;
        if (_json_.x6 === undefined) { throw new Error() };
        this.x6 = _json_.x6;
        if (_json_.x10 === undefined) { throw new Error() };
        this.x10 = _json_.x10;
        if (_json_.x12 === undefined) { throw new Error() };
        this.x12 = new TestDemoType1(_json_.x12);
        if (_json_.x13 === undefined) { throw new Error() };
        this.x13 = _json_.x13;
        if (_json_.t1 === undefined) { throw new Error() };
        this.t1 = _json_.t1;
        if (_json_.k1 === undefined) { throw new Error() };
        { this.k1 = []; for(let _ele0 of _json_.k1) { let _e0; _e0 = _ele0; this.k1.push(_e0);}};
        if (_json_.k2 === undefined) { throw new Error() };
        { this.k2 = []; for(let _ele0 of _json_.k2) { let _e0; _e0 = _ele0; this.k2.push(_e0);}};
        if (_json_.k5 === undefined) { throw new Error() };
        this.k5 = _json_.k5;
        if (_json_.k8 === undefined) { throw new Error() };
        this.k8 = new Map(); for(var _entry0_ of _json_.k8) { let _k0; _k0 = _entry0_[0];  let _v0;  _v0 = _entry0_[1]; this.k8.set(_k0, _v0);  };
        if (_json_.k9 === undefined) { throw new Error() };
        { this.k9 = []; for(let _ele0 of _json_.k9) { let _e0; _e0 = new TestDemoE2(_ele0); this.k9.push(_e0);}};
    }

    resolve(tables) {
        
        
        
        
        
        
        
        this.x12?.resolve(tables);
        
        
        
        
        
        
        
    }
}


export class vec2 {

    constructor(_json_) {
        if (_json_.x === undefined) { throw new Error() };
        this.x = _json_.x;
        if (_json_.y === undefined) { throw new Error() };
        this.y = _json_.y;
    }

    resolve(tables) {
        
        
    }
}


export class vec3 {

    constructor(_json_) {
        if (_json_.x === undefined) { throw new Error() };
        this.x = _json_.x;
        if (_json_.y === undefined) { throw new Error() };
        this.y = _json_.y;
        if (_json_.z === undefined) { throw new Error() };
        this.z = _json_.z;
    }

    resolve(tables) {
        
        
        
    }
}


export class vec4 {

    constructor(_json_) {
        if (_json_.x === undefined) { throw new Error() };
        this.x = _json_.x;
        if (_json_.y === undefined) { throw new Error() };
        this.y = _json_.y;
        if (_json_.z === undefined) { throw new Error() };
        this.z = _json_.z;
        if (_json_.w === undefined) { throw new Error() };
        this.w = _json_.w;
    }

    resolve(tables) {
        
        
        
        
    }
}



export class AiTbBlackboard {

    constructor(_json_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(var _json2_ of _json_) {
            let _v;
            _v = new AiBlackboard(_json2_);
            this._dataList.push(_v);
            this._dataMap.set(_v.name, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class AiTbBehaviorTree {

    constructor(_json_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(var _json2_ of _json_) {
            let _v;
            _v = new AiBehaviorTree(_json2_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class CommonTbGlobalConfig {

    constructor(_json_) {
        if (_json_.length != 1) throw new Error('table mode=one, but size != 1');
        this._data = new CommonGlobalConfig(_json_[0]);
    }

    getData() { return this._data; }

    /**
     * 背包容量
     */
    get  x1() { return this._data.x1; }
    get  x2() { return this._data.x2; }
    get  x3() { return this._data.x3; }
    get  x4() { return this._data.x4; }
    get  x5() { return this._data.x5; }
    get  x6() { return this._data.x6; }
    get  x7() { return this._data.x7; }

    resolve(tables) {
        this._data.resolve(tables);
    }
    
}


/**
 * 道具表
 */
export class ItemTbItem {

    constructor(_json_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(var _json2_ of _json_) {
            let _v;
            _v = new ItemItem(_json2_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class L10nTbL10NDemo {

    constructor(_json_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(var _json2_ of _json_) {
            let _v;
            _v = new L10nL10NDemo(_json2_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class L10nTbPatchDemo {

    constructor(_json_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(var _json2_ of _json_) {
            let _v;
            _v = new L10nPatchDemo(_json2_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TagTbTestTag {

    constructor(_json_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(var _json2_ of _json_) {
            let _v;
            _v = new TagTestTag(_json2_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TestTbFullTypes {

    constructor(_json_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(var _json2_ of _json_) {
            let _v;
            _v = new TestDemoType2(_json2_);
            this._dataList.push(_v);
            this._dataMap.set(_v.x4, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TestTbSingleton {

    constructor(_json_) {
        if (_json_.length != 1) throw new Error('table mode=one, but size != 1');
        this._data = new TestDemoSingletonType(_json_[0]);
    }

    getData() { return this._data; }

    get  id() { return this._data.id; }
    get  name() { return this._data.name; }
    get  date() { return this._data.date; }

    resolve(tables) {
        this._data.resolve(tables);
    }
    
}


export class TestTbNotIndexList {
    
    constructor(_json_) {
        this._dataList = [];
        for(var _json2_ of _json_) {
            let _v;
            _v = new TestNotIndexList(_json2_);
            this._dataList.push(_v);
        }
    }

    getDataList() { return this._dataList }

    get(index) { return this._dataList[index] }
    
    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TestTbMultiUnionIndexList {
    
    constructor(_json_) {
        this._dataList = [];
        for(var _json2_ of _json_) {
            let _v;
            _v = new TestMultiUnionIndexList(_json2_);
            this._dataList.push(_v);
        }
    }

    getDataList() { return this._dataList }

    get(index) { return this._dataList[index] }
    
    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TestTbMultiIndexList {
    
    constructor(_json_) {
        this._dataList = [];
        for(var _json2_ of _json_) {
            let _v;
            _v = new TestMultiIndexList(_json2_);
            this._dataList.push(_v);
        }
    }

    getDataList() { return this._dataList }

    get(index) { return this._dataList[index] }
    
    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TestTbDataFromMisc {

    constructor(_json_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(var _json2_ of _json_) {
            let _v;
            _v = new TestDemoType2(_json2_);
            this._dataList.push(_v);
            this._dataMap.set(_v.x4, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TestTbMultiRowRecord {

    constructor(_json_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(var _json2_ of _json_) {
            let _v;
            _v = new TestMultiRowRecord(_json2_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TestTbTestMultiColumn {

    constructor(_json_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(var _json2_ of _json_) {
            let _v;
            _v = new TestTestMultiColumn(_json2_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TestTbMultiRowTitle {

    constructor(_json_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(var _json2_ of _json_) {
            let _v;
            _v = new TestMultiRowTitle(_json2_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TestTbTestNull {

    constructor(_json_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(var _json2_ of _json_) {
            let _v;
            _v = new TestTestNull(_json2_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TestTbDemoPrimitive {

    constructor(_json_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(var _json2_ of _json_) {
            let _v;
            _v = new TestDemoPrimitiveTypesTable(_json2_);
            this._dataList.push(_v);
            this._dataMap.set(_v.x4, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TestTbTestString {

    constructor(_json_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(var _json2_ of _json_) {
            let _v;
            _v = new TestTestString(_json2_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TestTbDemoGroup {

    constructor(_json_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(var _json2_ of _json_) {
            let _v;
            _v = new TestDemoGroup(_json2_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TestTbDemoGroup_C {

    constructor(_json_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(var _json2_ of _json_) {
            let _v;
            _v = new TestDemoGroup(_json2_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TestTbDemoGroup_S {

    constructor(_json_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(var _json2_ of _json_) {
            let _v;
            _v = new TestDemoGroup(_json2_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TestTbDemoGroup_E {

    constructor(_json_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(var _json2_ of _json_) {
            let _v;
            _v = new TestDemoGroup(_json2_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TestTbTestGlobal {

    constructor(_json_) {
        if (_json_.length != 1) throw new Error('table mode=one, but size != 1');
        this._data = new TestTestGlobal(_json_[0]);
    }

    getData() { return this._data; }

    get  unlockEquip() { return this._data.unlockEquip; }
    get  unlockHero() { return this._data.unlockHero; }

    resolve(tables) {
        this._data.resolve(tables);
    }
    
}


export class TestTbTestBeRef {

    constructor(_json_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(var _json2_ of _json_) {
            let _v;
            _v = new TestTestBeRef(_json2_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TestTbTestBeRef2 {

    constructor(_json_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(var _json2_ of _json_) {
            let _v;
            _v = new TestTestBeRef(_json2_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TestTbTestRef {

    constructor(_json_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(var _json2_ of _json_) {
            let _v;
            _v = new TestTestRef(_json2_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TestTbTestSize {

    constructor(_json_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(var _json2_ of _json_) {
            let _v;
            _v = new TestTestSize(_json2_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TestTbTestSet {

    constructor(_json_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(var _json2_ of _json_) {
            let _v;
            _v = new TestTestSet(_json2_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TestTbTestRange {

    constructor(_json_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(var _json2_ of _json_) {
            let _v;
            _v = new TestTestRange(_json2_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TestTbDetectCsvEncoding {

    constructor(_json_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(var _json2_ of _json_) {
            let _v;
            _v = new TestDetectEncoding(_json2_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TestTbItem2 {

    constructor(_json_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(var _json2_ of _json_) {
            let _v;
            _v = TestItemBase.constructorFrom(_json2_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TestTbTestIndex {

    constructor(_json_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(var _json2_ of _json_) {
            let _v;
            _v = new TestTestIndex(_json2_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TestTbTestMap {

    constructor(_json_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(var _json2_ of _json_) {
            let _v;
            _v = new TestTestMap(_json2_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TestTbExcelFromJson {

    constructor(_json_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(var _json2_ of _json_) {
            let _v;
            _v = new TestExcelFromJson(_json2_);
            this._dataList.push(_v);
            this._dataMap.set(_v.x4, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TestTbCompositeJsonTable1 {

    constructor(_json_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(var _json2_ of _json_) {
            let _v;
            _v = new TestCompositeJsonTable1(_json2_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TestTbCompositeJsonTable2 {

    constructor(_json_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(var _json2_ of _json_) {
            let _v;
            _v = new TestCompositeJsonTable2(_json2_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TestTbCompositeJsonTable3 {

    constructor(_json_) {
        if (_json_.length != 1) throw new Error('table mode=one, but size != 1');
        this._data = new TestCompositeJsonTable3(_json_[0]);
    }

    getData() { return this._data; }

    get  a() { return this._data.a; }
    get  b() { return this._data.b; }

    resolve(tables) {
        this._data.resolve(tables);
    }
    
}


export class TestTbExcelFromJsonMultiRow {

    constructor(_json_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(var _json2_ of _json_) {
            let _v;
            _v = new TestExcelFromJsonMultiRow(_json2_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TestTbTestSep {

    constructor(_json_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(var _json2_ of _json_) {
            let _v;
            _v = new TestTestSep(_json2_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TestTbTestScriptableObject {

    constructor(_json_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(var _json2_ of _json_) {
            let _v;
            _v = new TestTestScriptableObject(_json2_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TestTbPath {

    constructor(_json_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(var _json2_ of _json_) {
            let _v;
            _v = new TestPath(_json2_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TestTbTestFieldAlias {

    constructor(_json_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(var _json2_ of _json_) {
            let _v;
            _v = new TestTestFieldAlias(_json2_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TestTbTestFieldVariant {

    constructor(_json_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(var _json2_ of _json_) {
            let _v;
            _v = new TestTestFieldVariant(_json2_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TestTbTestFieldVariant2 {

    constructor(_json_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(var _json2_ of _json_) {
            let _v;
            _v = new TestTestFieldVariant2(_json2_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TestTbTestMapper {

    constructor(_json_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(var _json2_ of _json_) {
            let _v;
            _v = new TestTestMapper(_json2_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TestTbTestConstAlias {

    constructor(_json_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(var _json2_ of _json_) {
            let _v;
            _v = new TestTestConstAlias(_json2_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TestTbDefineFromExcel2 {

    constructor(_json_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(var _json2_ of _json_) {
            let _v;
            _v = new TestDefineFromExcel2(_json2_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TbAutoImport1 {

    constructor(_json_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(var _json2_ of _json_) {
            let _v;
            _v = new AutoImport1(_json2_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TestTbAutoImport2 {

    constructor(_json_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(var _json2_ of _json_) {
            let _v;
            _v = new TestAutoImport2(_json2_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class TestTbTestFormat {

    constructor(_json_) {
        this._dataMap = new Map();
        this._dataList = [];
        for(var _json2_ of _json_) {
            let _v;
            _v = new TestTestFormat(_json2_);
            this._dataList.push(_v);
            this._dataMap.set(_v.id, _v);
        }
    }

    getDataMap() { return this._dataMap; }
    getDataList() { return this._dataList; }

    get(key) { return this._dataMap.get(key); }

    resolve(tables) {
        for(let  data of this._dataList) {
            data.resolve(tables);
        }
    }

}


export class Tables {
    get TbBlackboard() { return this._TbBlackboard;}
    get TbBehaviorTree() { return this._TbBehaviorTree;}
    get TbGlobalConfig() { return this._TbGlobalConfig;}
    /**
     * 道具表
     */
    get TbItem() { return this._TbItem;}
    get TbL10NDemo() { return this._TbL10NDemo;}
    get TbPatchDemo() { return this._TbPatchDemo;}
    get TbTestTag() { return this._TbTestTag;}
    get TbFullTypes() { return this._TbFullTypes;}
    get TbSingleton() { return this._TbSingleton;}
    get TbNotIndexList() { return this._TbNotIndexList;}
    get TbMultiUnionIndexList() { return this._TbMultiUnionIndexList;}
    get TbMultiIndexList() { return this._TbMultiIndexList;}
    get TbDataFromMisc() { return this._TbDataFromMisc;}
    get TbMultiRowRecord() { return this._TbMultiRowRecord;}
    get TbTestMultiColumn() { return this._TbTestMultiColumn;}
    get TbMultiRowTitle() { return this._TbMultiRowTitle;}
    get TbTestNull() { return this._TbTestNull;}
    get TbDemoPrimitive() { return this._TbDemoPrimitive;}
    get TbTestString() { return this._TbTestString;}
    get TbDemoGroup() { return this._TbDemoGroup;}
    get TbDemoGroup_C() { return this._TbDemoGroup_C;}
    get TbDemoGroup_S() { return this._TbDemoGroup_S;}
    get TbDemoGroup_E() { return this._TbDemoGroup_E;}
    get TbTestGlobal() { return this._TbTestGlobal;}
    get TbTestBeRef() { return this._TbTestBeRef;}
    get TbTestBeRef2() { return this._TbTestBeRef2;}
    get TbTestRef() { return this._TbTestRef;}
    get TbTestSize() { return this._TbTestSize;}
    get TbTestSet() { return this._TbTestSet;}
    get TbTestRange() { return this._TbTestRange;}
    get TbDetectCsvEncoding() { return this._TbDetectCsvEncoding;}
    get TbItem2() { return this._TbItem2;}
    get TbTestIndex() { return this._TbTestIndex;}
    get TbTestMap() { return this._TbTestMap;}
    get TbExcelFromJson() { return this._TbExcelFromJson;}
    get TbCompositeJsonTable1() { return this._TbCompositeJsonTable1;}
    get TbCompositeJsonTable2() { return this._TbCompositeJsonTable2;}
    get TbCompositeJsonTable3() { return this._TbCompositeJsonTable3;}
    get TbExcelFromJsonMultiRow() { return this._TbExcelFromJsonMultiRow;}
    get TbTestSep() { return this._TbTestSep;}
    get TbTestScriptableObject() { return this._TbTestScriptableObject;}
    get TbPath() { return this._TbPath;}
    get TbTestFieldAlias() { return this._TbTestFieldAlias;}
    get TbTestFieldVariant() { return this._TbTestFieldVariant;}
    get TbTestFieldVariant2() { return this._TbTestFieldVariant2;}
    get TbTestMapper() { return this._TbTestMapper;}
    get TbTestConstAlias() { return this._TbTestConstAlias;}
    get TbDefineFromExcel2() { return this._TbDefineFromExcel2;}
    get TbAutoImport1() { return this._TbAutoImport1;}
    get TbAutoImport2() { return this._TbAutoImport2;}
    get TbTestFormat() { return this._TbTestFormat;}

    constructor(loader) {
        this._TbBlackboard = new AiTbBlackboard(loader('ai_tbblackboard'));
        this._TbBehaviorTree = new AiTbBehaviorTree(loader('ai_tbbehaviortree'));
        this._TbGlobalConfig = new CommonTbGlobalConfig(loader('common_tbglobalconfig'));
        this._TbItem = new ItemTbItem(loader('item_tbitem'));
        this._TbL10NDemo = new L10nTbL10NDemo(loader('l10n_tbl10ndemo'));
        this._TbPatchDemo = new L10nTbPatchDemo(loader('l10n_tbpatchdemo'));
        this._TbTestTag = new TagTbTestTag(loader('tag_tbtesttag'));
        this._TbFullTypes = new TestTbFullTypes(loader('test_tbfulltypes'));
        this._TbSingleton = new TestTbSingleton(loader('test_tbsingleton'));
        this._TbNotIndexList = new TestTbNotIndexList(loader('test_tbnotindexlist'));
        this._TbMultiUnionIndexList = new TestTbMultiUnionIndexList(loader('test_tbmultiunionindexlist'));
        this._TbMultiIndexList = new TestTbMultiIndexList(loader('test_tbmultiindexlist'));
        this._TbDataFromMisc = new TestTbDataFromMisc(loader('test_tbdatafrommisc'));
        this._TbMultiRowRecord = new TestTbMultiRowRecord(loader('test_tbmultirowrecord'));
        this._TbTestMultiColumn = new TestTbTestMultiColumn(loader('test_tbtestmulticolumn'));
        this._TbMultiRowTitle = new TestTbMultiRowTitle(loader('test_tbmultirowtitle'));
        this._TbTestNull = new TestTbTestNull(loader('test_tbtestnull'));
        this._TbDemoPrimitive = new TestTbDemoPrimitive(loader('test_tbdemoprimitive'));
        this._TbTestString = new TestTbTestString(loader('test_tbteststring'));
        this._TbDemoGroup = new TestTbDemoGroup(loader('test_tbdemogroup'));
        this._TbDemoGroup_C = new TestTbDemoGroup_C(loader('test_tbdemogroup_c'));
        this._TbDemoGroup_S = new TestTbDemoGroup_S(loader('test_tbdemogroup_s'));
        this._TbDemoGroup_E = new TestTbDemoGroup_E(loader('test_tbdemogroup_e'));
        this._TbTestGlobal = new TestTbTestGlobal(loader('test_tbtestglobal'));
        this._TbTestBeRef = new TestTbTestBeRef(loader('test_tbtestberef'));
        this._TbTestBeRef2 = new TestTbTestBeRef2(loader('test_tbtestberef2'));
        this._TbTestRef = new TestTbTestRef(loader('test_tbtestref'));
        this._TbTestSize = new TestTbTestSize(loader('test_tbtestsize'));
        this._TbTestSet = new TestTbTestSet(loader('test_tbtestset'));
        this._TbTestRange = new TestTbTestRange(loader('test_tbtestrange'));
        this._TbDetectCsvEncoding = new TestTbDetectCsvEncoding(loader('test_tbdetectcsvencoding'));
        this._TbItem2 = new TestTbItem2(loader('test_tbitem2'));
        this._TbTestIndex = new TestTbTestIndex(loader('test_tbtestindex'));
        this._TbTestMap = new TestTbTestMap(loader('test_tbtestmap'));
        this._TbExcelFromJson = new TestTbExcelFromJson(loader('test_tbexcelfromjson'));
        this._TbCompositeJsonTable1 = new TestTbCompositeJsonTable1(loader('test_tbcompositejsontable1'));
        this._TbCompositeJsonTable2 = new TestTbCompositeJsonTable2(loader('test_tbcompositejsontable2'));
        this._TbCompositeJsonTable3 = new TestTbCompositeJsonTable3(loader('test_tbcompositejsontable3'));
        this._TbExcelFromJsonMultiRow = new TestTbExcelFromJsonMultiRow(loader('test_tbexcelfromjsonmultirow'));
        this._TbTestSep = new TestTbTestSep(loader('test_tbtestsep'));
        this._TbTestScriptableObject = new TestTbTestScriptableObject(loader('test_tbtestscriptableobject'));
        this._TbPath = new TestTbPath(loader('test_tbpath'));
        this._TbTestFieldAlias = new TestTbTestFieldAlias(loader('test_tbtestfieldalias'));
        this._TbTestFieldVariant = new TestTbTestFieldVariant(loader('test_tbtestfieldvariant'));
        this._TbTestFieldVariant2 = new TestTbTestFieldVariant2(loader('test_tbtestfieldvariant2'));
        this._TbTestMapper = new TestTbTestMapper(loader('test_tbtestmapper'));
        this._TbTestConstAlias = new TestTbTestConstAlias(loader('test_tbtestconstalias'));
        this._TbDefineFromExcel2 = new TestTbDefineFromExcel2(loader('test_tbdefinefromexcel2'));
        this._TbAutoImport1 = new TbAutoImport1(loader('tbautoimport1'));
        this._TbAutoImport2 = new TestTbAutoImport2(loader('test_tbautoimport2'));
        this._TbTestFormat = new TestTbTestFormat(loader('test_tbtestformat'));

        this._TbBlackboard.resolve(this);
        this._TbBehaviorTree.resolve(this);
        this._TbGlobalConfig.resolve(this);
        this._TbItem.resolve(this);
        this._TbL10NDemo.resolve(this);
        this._TbPatchDemo.resolve(this);
        this._TbTestTag.resolve(this);
        this._TbFullTypes.resolve(this);
        this._TbSingleton.resolve(this);
        this._TbNotIndexList.resolve(this);
        this._TbMultiUnionIndexList.resolve(this);
        this._TbMultiIndexList.resolve(this);
        this._TbDataFromMisc.resolve(this);
        this._TbMultiRowRecord.resolve(this);
        this._TbTestMultiColumn.resolve(this);
        this._TbMultiRowTitle.resolve(this);
        this._TbTestNull.resolve(this);
        this._TbDemoPrimitive.resolve(this);
        this._TbTestString.resolve(this);
        this._TbDemoGroup.resolve(this);
        this._TbDemoGroup_C.resolve(this);
        this._TbDemoGroup_S.resolve(this);
        this._TbDemoGroup_E.resolve(this);
        this._TbTestGlobal.resolve(this);
        this._TbTestBeRef.resolve(this);
        this._TbTestBeRef2.resolve(this);
        this._TbTestRef.resolve(this);
        this._TbTestSize.resolve(this);
        this._TbTestSet.resolve(this);
        this._TbTestRange.resolve(this);
        this._TbDetectCsvEncoding.resolve(this);
        this._TbItem2.resolve(this);
        this._TbTestIndex.resolve(this);
        this._TbTestMap.resolve(this);
        this._TbExcelFromJson.resolve(this);
        this._TbCompositeJsonTable1.resolve(this);
        this._TbCompositeJsonTable2.resolve(this);
        this._TbCompositeJsonTable3.resolve(this);
        this._TbExcelFromJsonMultiRow.resolve(this);
        this._TbTestSep.resolve(this);
        this._TbTestScriptableObject.resolve(this);
        this._TbPath.resolve(this);
        this._TbTestFieldAlias.resolve(this);
        this._TbTestFieldVariant.resolve(this);
        this._TbTestFieldVariant2.resolve(this);
        this._TbTestMapper.resolve(this);
        this._TbTestConstAlias.resolve(this);
        this._TbDefineFromExcel2.resolve(this);
        this._TbAutoImport1.resolve(this);
        this._TbAutoImport2.resolve(this);
        this._TbTestFormat.resolve(this);
    }
}

