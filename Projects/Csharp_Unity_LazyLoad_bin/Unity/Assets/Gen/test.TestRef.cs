
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;


namespace cfg.test
{
    public sealed partial class TestRef : Luban.BeanBase
    {
        public TestRef(ByteBuf _buf) 
        {
            Id = _buf.ReadInt();
            X1 = _buf.ReadInt();
            X1_Ref = null;
            X12 = _buf.ReadInt();
            X12_Ref = null;
            X2 = _buf.ReadInt();
            X3 = _buf.ReadInt();
            X4 = _buf.ReadInt();
            X4_Ref = null;
            {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);A1 = new int[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { int __e0;__e0 = _buf.ReadInt(); A1[__index0] = __e0;}}
            {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);A2 = new int[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { int __e0;__e0 = _buf.ReadInt(); A2[__index0] = __e0;}}
            {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);B1 = new System.Collections.Generic.List<int>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { int _e0;  _e0 = _buf.ReadInt(); B1.Add(_e0);}}
            {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);B2 = new System.Collections.Generic.List<int>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { int _e0;  _e0 = _buf.ReadInt(); B2.Add(_e0);}}
            {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);C1 = new System.Collections.Generic.HashSet<int>(/*n0 * 3 / 2*/);for(var i0 = 0 ; i0 < n0 ; i0++) { int _e0;  _e0 = _buf.ReadInt(); C1.Add(_e0);}}
            {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);C2 = new System.Collections.Generic.HashSet<int>(/*n0 * 3 / 2*/);for(var i0 = 0 ; i0 < n0 ; i0++) { int _e0;  _e0 = _buf.ReadInt(); C2.Add(_e0);}}
            {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);D1 = new System.Collections.Generic.Dictionary<int, int>(n0 * 3 / 2);for(var i0 = 0 ; i0 < n0 ; i0++) { int _k0;  _k0 = _buf.ReadInt(); int _v0;  _v0 = _buf.ReadInt();     D1.Add(_k0, _v0);}}
            {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);D2 = new System.Collections.Generic.Dictionary<int, int>(n0 * 3 / 2);for(var i0 = 0 ; i0 < n0 ; i0++) { int _k0;  _k0 = _buf.ReadInt(); int _v0;  _v0 = _buf.ReadInt();     D2.Add(_k0, _v0);}}
            E1 = _buf.ReadInt();
            E2 = _buf.ReadLong();
            E3 = _buf.ReadString();
            F1 = _buf.ReadInt();
            F2 = _buf.ReadLong();
            F3 = _buf.ReadString();
            S1 = test.RefDynamicBase.DeserializeRefDynamicBase(_buf);
        }

        public static TestRef DeserializeTestRef(ByteBuf _buf)
        {
            return new test.TestRef(_buf);
        }

        public readonly int Id;
        public readonly int X1;
        public test.TestBeRef X1_Ref;
        public readonly int X12;
        public test.TestBeRef X12_Ref;
        public readonly int X2;
        public readonly int X3;
        public readonly int X4;
        public tag.TestTag X4_Ref;
        public readonly int[] A1;
        public readonly int[] A2;
        public readonly System.Collections.Generic.List<int> B1;
        public readonly System.Collections.Generic.List<int> B2;
        public readonly System.Collections.Generic.HashSet<int> C1;
        public readonly System.Collections.Generic.HashSet<int> C2;
        public readonly System.Collections.Generic.Dictionary<int, int> D1;
        public readonly System.Collections.Generic.Dictionary<int, int> D2;
        public readonly int E1;
        public readonly long E2;
        public readonly string E3;
        public readonly int F1;
        public readonly long F2;
        public readonly string F3;
        public readonly test.RefDynamicBase S1;
   
        public const int __ID__ = -543222491;
        public override int GetTypeId() => __ID__;

        public  void ResolveRef(Tables tables)
        {
            
            X1_Ref = tables.TbTestBeRef.GetOrDefault(X1);
            X12_Ref = tables.TbTestBeRef.GetOrDefault(X12);
            
            
            X4_Ref = tables.TbTestTag.GetOrDefault(X4);
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            S1?.ResolveRef(tables);
        }

        public override string ToString()
        {
            return "{ "
            + "id:" + Id + ","
            + "x1:" + X1 + ","
            + "x12:" + X12 + ","
            + "x2:" + X2 + ","
            + "x3:" + X3 + ","
            + "x4:" + X4 + ","
            + "a1:" + Luban.StringUtil.CollectionToString(A1) + ","
            + "a2:" + Luban.StringUtil.CollectionToString(A2) + ","
            + "b1:" + Luban.StringUtil.CollectionToString(B1) + ","
            + "b2:" + Luban.StringUtil.CollectionToString(B2) + ","
            + "c1:" + Luban.StringUtil.CollectionToString(C1) + ","
            + "c2:" + Luban.StringUtil.CollectionToString(C2) + ","
            + "d1:" + Luban.StringUtil.CollectionToString(D1) + ","
            + "d2:" + Luban.StringUtil.CollectionToString(D2) + ","
            + "e1:" + E1 + ","
            + "e2:" + E2 + ","
            + "e3:" + E3 + ","
            + "f1:" + F1 + ","
            + "f2:" + F2 + ","
            + "f3:" + F3 + ","
            + "s1:" + S1 + ","
            + "}";
        }
    }

}
