
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;


namespace cfg.test
{
    public sealed partial class ExcelFromJson : Luban.BeanBase
    {
        public ExcelFromJson(ByteBuf _buf) 
        {
            X4 = _buf.ReadInt();
            X1 = _buf.ReadBool();
            X5 = _buf.ReadLong();
            X6 = _buf.ReadFloat();
            S1 = _buf.ReadString();
            S2 = _buf.ReadString();
            T1 = _buf.ReadLong();
            X12 = test.DemoType1.DeserializeDemoType1(_buf);
            X13 = (test.DemoEnum)_buf.ReadInt();
            X14 = test.DemoDynamic.DeserializeDemoDynamic(_buf);
            {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);K1 = new int[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { int __e0;__e0 = _buf.ReadInt(); K1[__index0] = __e0;}}
            {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);K8 = new System.Collections.Generic.Dictionary<int, int>(n0 * 3 / 2);for(var i0 = 0 ; i0 < n0 ; i0++) { int _k0;  _k0 = _buf.ReadInt(); int _v0;  _v0 = _buf.ReadInt();     K8.Add(_k0, _v0);}}
            {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);K9 = new System.Collections.Generic.List<test.DemoE2>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { test.DemoE2 _e0;  _e0 = test.DemoE2.DeserializeDemoE2(_buf); K9.Add(_e0);}}
            {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);K15 = new test.DemoDynamic[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { test.DemoDynamic __e0;__e0 = test.DemoDynamic.DeserializeDemoDynamic(_buf); K15[__index0] = __e0;}}
        }

        public static ExcelFromJson DeserializeExcelFromJson(ByteBuf _buf)
        {
            return new test.ExcelFromJson(_buf);
        }

        public readonly int X4;
        public readonly bool X1;
        public readonly long X5;
        public readonly float X6;
        public readonly string S1;
        public readonly string S2;
        public readonly long T1;
        public readonly test.DemoType1 X12;
        public readonly test.DemoEnum X13;
        public readonly test.DemoDynamic X14;
        public readonly int[] K1;
        public readonly System.Collections.Generic.Dictionary<int, int> K8;
        public readonly System.Collections.Generic.List<test.DemoE2> K9;
        public readonly test.DemoDynamic[] K15;
   
        public const int __ID__ = -1485706483;
        public override int GetTypeId() => __ID__;

        public  void ResolveRef(Tables tables)
        {
            
            
            
            
            
            
            
            X12?.ResolveRef(tables);
            
            X14?.ResolveRef(tables);
            
            
            
            foreach (var _e in K15) { _e?.ResolveRef(tables); }
        }

        public override string ToString()
        {
            return "{ "
            + "x4:" + X4 + ","
            + "x1:" + X1 + ","
            + "x5:" + X5 + ","
            + "x6:" + X6 + ","
            + "s1:" + S1 + ","
            + "s2:" + S2 + ","
            + "t1:" + T1 + ","
            + "x12:" + X12 + ","
            + "x13:" + X13 + ","
            + "x14:" + X14 + ","
            + "k1:" + Luban.StringUtil.CollectionToString(K1) + ","
            + "k8:" + Luban.StringUtil.CollectionToString(K8) + ","
            + "k9:" + Luban.StringUtil.CollectionToString(K9) + ","
            + "k15:" + Luban.StringUtil.CollectionToString(K15) + ","
            + "}";
        }
    }

}
