
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;
using System.Linq;


namespace cfg.test
{
    public partial class TbNotIndexList
    {
        private readonly System.Func<string, int, int, ByteBuf> _byteBufLoader;
        private readonly string _fileName;
        private Tables _tables;



        private readonly System.Collections.Generic.Dictionary<int,test.NotIndexList> _indexDataMap;
        private readonly System.Collections.Generic.List<int> _offsetList;
        private readonly System.Collections.Generic.List<int> _lengthList;

        public TbNotIndexList(ByteBuf _buf, string fileName, System.Func<string, int, int, ByteBuf> byteBufLoader)
        {
            _indexDataMap = new System.Collections.Generic.Dictionary<int, test.NotIndexList>();
            _offsetList = new System.Collections.Generic.List<int>();
            _lengthList = new System.Collections.Generic.List<int>();
            _fileName = fileName;
            _byteBufLoader = byteBufLoader;
            
            for (int n = _buf.ReadSize(); n > 0; --n)
            {
                int offset = _buf.ReadInt();
                int length = _buf.ReadInt();

                _offsetList.Add(offset);
                _lengthList.Add(length);
            }
        }
        
        public test.NotIndexList GetByIndex(int index)
        {
            if (_indexDataMap.TryGetValue(index, out var v))
            {
                return v;
            }
            int offset = _offsetList[index];
            int length = _lengthList[index];
            ByteBuf buf = this._byteBufLoader(this._fileName, offset, length);
            v = test.NotIndexList.DeserializeNotIndexList(buf);;
            _indexDataMap[index] = v;
            v.ResolveRef(_tables);
            return v;
        }

        public void LoadAll(System.Action<int,test.NotIndexList> onLoad = null)
        {
            for (int i = 0; i < _offsetList.Count; ++i)
            {
                var value = this.GetByIndex(i);
                if (value != null)
                {
                    onLoad?.Invoke(i, value);
                }
            }
        }
        public void ResolveRef(Tables tables)
        {
            this._tables = tables;
        }
    }

}
