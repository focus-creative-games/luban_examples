
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;
using System.Linq;


namespace cfg.test
{
    public partial class TbMultiUnionIndexList
    {
        private readonly System.Func<string, int, int, ByteBuf> _byteBufLoader;
        private readonly string _fileName;
        private Tables _tables;


        private System.Collections.Generic.Dictionary<(int, long, string), test.MultiUnionIndexList> _dataMapUnion;
        private System.Collections.Generic.Dictionary<(int, long, string), int> _offsetMapUnion;
        private System.Collections.Generic.Dictionary<(int, long, string), int> _lengthMapUnion;

        public TbMultiUnionIndexList(ByteBuf _buf, string fileName, System.Func<string, int, int, ByteBuf> byteBufLoader)
        {
            _dataMapUnion = new System.Collections.Generic.Dictionary<(int, long, string), test.MultiUnionIndexList>();
            _offsetMapUnion = new System.Collections.Generic.Dictionary<(int, long, string), int>();
            _lengthMapUnion = new System.Collections.Generic.Dictionary<(int, long, string), int>();
            _fileName = fileName;
            _byteBufLoader = byteBufLoader;

            for (int n = _buf.ReadSize() ; n > 0 ; --n)
            {
                int key_id1;
                key_id1 = _buf.ReadInt();

                long key_id2;
                key_id2 = _buf.ReadLong();

                string key_id3;
                key_id3 = _buf.ReadString();
                int offset = _buf.ReadInt();
                int length = _buf.ReadInt();

                _offsetMapUnion.Add((key_id1, key_id2, key_id3), offset);
                _lengthMapUnion.Add((key_id1, key_id2, key_id3), length);
            }
        }

        public void LoadAll(System.Action<int, long, string,test.MultiUnionIndexList> onLoad = null)
        {
            foreach(var ((id1, id2, id3),offset) in _offsetMapUnion)
            {
                var value = this.Get(id1, id2, id3);
                if (value != null)
                {
                    onLoad?.Invoke(value.Id1, value.Id2, value.Id3, value);
                }
            }
        }

        public test.MultiUnionIndexList GetOrDefault(int id1, long id2, string id3) => this.Get(id1, id2, id3) ?? default;
        public test.MultiUnionIndexList Get(int id1, long id2, string id3)
        {
            if (_dataMapUnion.TryGetValue((id1, id2, id3), out var v))
            {
                return v;
            }
            int offset = _offsetMapUnion[(id1, id2, id3)];
            int length = _lengthMapUnion[(id1, id2, id3)];
            ByteBuf buf = this._byteBufLoader(this._fileName, offset, length);
        
            v = test.MultiUnionIndexList.DeserializeMultiUnionIndexList(buf);;
            _dataMapUnion[(id1, id2, id3)] = v;
            v.ResolveRef(_tables);
            return v;
        }
        public void ResolveRef(Tables tables)
        {
            this._tables = tables;
        }
    }

}
