
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;
using Newtonsoft.Json.Linq;



namespace cfg.test
{

public sealed partial class MultiRowRecord : Luban.BeanBase
{
    public MultiRowRecord(JToken _buf) 
    {
        JObject _obj = _buf as JObject;
        Id = (int)_obj.GetValue("id");
        Name = (string)_obj.GetValue("name");
        { var __json0 = _obj.GetValue("one_rows"); OneRows = new System.Collections.Generic.List<test.MultiRowType1>((__json0 as JArray).Count); foreach(JToken __e0 in __json0) { test.MultiRowType1 __v0;  __v0 = test.MultiRowType1.DeserializeMultiRowType1(__e0);  OneRows.Add(__v0); }   }
        { var __json0 = _obj.GetValue("multi_rows1"); MultiRows1 = new System.Collections.Generic.List<test.MultiRowType1>((__json0 as JArray).Count); foreach(JToken __e0 in __json0) { test.MultiRowType1 __v0;  __v0 = test.MultiRowType1.DeserializeMultiRowType1(__e0);  MultiRows1.Add(__v0); }   }
        { var __json0 = _obj.GetValue("multi_rows2"); int _n0 = (__json0 as JArray).Count; MultiRows2 = new test.MultiRowType1[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { test.MultiRowType1 __v0;  __v0 = test.MultiRowType1.DeserializeMultiRowType1(__e0);  MultiRows2[__index0++] = __v0; }   }
        { var __json0 = _obj.GetValue("multi_rows4"); MultiRows4 = new System.Collections.Generic.Dictionary<int, test.MultiRowType2>((__json0 as JArray).Count); foreach(JToken __e0 in __json0) { int _k0;  _k0 = (int)__e0[0]; test.MultiRowType2 _v0;  _v0 = test.MultiRowType2.DeserializeMultiRowType2(__e0[1]);  MultiRows4.Add(_k0, _v0); }   }
        { var __json0 = _obj.GetValue("multi_rows5"); MultiRows5 = new System.Collections.Generic.List<test.MultiRowType3>((__json0 as JArray).Count); foreach(JToken __e0 in __json0) { test.MultiRowType3 __v0;  __v0 = test.MultiRowType3.DeserializeMultiRowType3(__e0);  MultiRows5.Add(__v0); }   }
        { var __json0 = _obj.GetValue("multi_rows6"); MultiRows6 = new System.Collections.Generic.Dictionary<int, test.MultiRowType2>((__json0 as JArray).Count); foreach(JToken __e0 in __json0) { int _k0;  _k0 = (int)__e0[0]; test.MultiRowType2 _v0;  _v0 = test.MultiRowType2.DeserializeMultiRowType2(__e0[1]);  MultiRows6.Add(_k0, _v0); }   }
        { var __json0 = _obj.GetValue("multi_rows7"); MultiRows7 = new System.Collections.Generic.Dictionary<int, int>((__json0 as JArray).Count); foreach(JToken __e0 in __json0) { int _k0;  _k0 = (int)__e0[0]; int _v0;  _v0 = (int)__e0[1];  MultiRows7.Add(_k0, _v0); }   }
    }

    public static MultiRowRecord DeserializeMultiRowRecord(JToken _buf)
    {
        return new test.MultiRowRecord(_buf);
    }

    public readonly int Id;
    public readonly string Name;
    public readonly System.Collections.Generic.List<test.MultiRowType1> OneRows;
    public readonly System.Collections.Generic.List<test.MultiRowType1> MultiRows1;
    public readonly test.MultiRowType1[] MultiRows2;
    public readonly System.Collections.Generic.Dictionary<int, test.MultiRowType2> MultiRows4;
    public readonly System.Collections.Generic.List<test.MultiRowType3> MultiRows5;
    public readonly System.Collections.Generic.Dictionary<int, test.MultiRowType2> MultiRows6;
    public readonly System.Collections.Generic.Dictionary<int, int> MultiRows7;


    public const int __ID__ = -501249394;
    public override int GetTypeId() => __ID__;

    public  void ResolveRef(Tables tables)
    {
        foreach (var _e in OneRows) { _e?.ResolveRef(tables); }
        foreach (var _e in MultiRows1) { _e?.ResolveRef(tables); }
        foreach (var _e in MultiRows2) { _e?.ResolveRef(tables); }
        foreach (var _e in MultiRows4.Values) { _e?.ResolveRef(tables); }
        foreach (var _e in MultiRows5) { _e?.ResolveRef(tables); }
        foreach (var _e in MultiRows6.Values) { _e?.ResolveRef(tables); }
    }

    public override string ToString()
    {
        return "{ "
        + "id:" + Id + ","
        + "name:" + Name + ","
        + "oneRows:" + Luban.StringUtil.CollectionToString(OneRows) + ","
        + "multiRows1:" + Luban.StringUtil.CollectionToString(MultiRows1) + ","
        + "multiRows2:" + Luban.StringUtil.CollectionToString(MultiRows2) + ","
        + "multiRows4:" + Luban.StringUtil.CollectionToString(MultiRows4) + ","
        + "multiRows5:" + Luban.StringUtil.CollectionToString(MultiRows5) + ","
        + "multiRows6:" + Luban.StringUtil.CollectionToString(MultiRows6) + ","
        + "multiRows7:" + Luban.StringUtil.CollectionToString(MultiRows7) + ","
        + "}";
    }
}
}

