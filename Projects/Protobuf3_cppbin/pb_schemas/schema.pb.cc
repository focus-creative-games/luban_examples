// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: schema.proto

#include "schema.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace cfg {
        template <typename>
PROTOBUF_CONSTEXPR vec4::vec4(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.x_)*/ 0,
      /*decltype(_impl_.y_)*/ 0,
      /*decltype(_impl_.z_)*/ 0,
      /*decltype(_impl_.w_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct vec4DefaultTypeInternal {
  PROTOBUF_CONSTEXPR vec4DefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~vec4DefaultTypeInternal() {}
  union {
    vec4 _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 vec4DefaultTypeInternal _vec4_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR vec3::vec3(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.x_)*/ 0,
      /*decltype(_impl_.y_)*/ 0,
      /*decltype(_impl_.z_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct vec3DefaultTypeInternal {
  PROTOBUF_CONSTEXPR vec3DefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~vec3DefaultTypeInternal() {}
  union {
    vec3 _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 vec3DefaultTypeInternal _vec3_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR vec2::vec2(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.x_)*/ 0,
      /*decltype(_impl_.y_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct vec2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR vec2DefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~vec2DefaultTypeInternal() {}
  union {
    vec2 _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 vec2DefaultTypeInternal _vec2_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR TestTestSize_X4Entry_DoNotUse::TestTestSize_X4Entry_DoNotUse(::_pbi::ConstantInitialized) {}
struct TestTestSize_X4Entry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestTestSize_X4Entry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestTestSize_X4Entry_DoNotUseDefaultTypeInternal() {}
  union {
    TestTestSize_X4Entry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestTestSize_X4Entry_DoNotUseDefaultTypeInternal _TestTestSize_X4Entry_DoNotUse_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestTestSet::TestTestSet(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.x1_)*/ {},
      /* _impl_._x1_cached_byte_size_ = */ {0},
      /*decltype(_impl_.x2_)*/ {},
      /* _impl_._x2_cached_byte_size_ = */ {0},
      /*decltype(_impl_.x3_)*/ {},
      /*decltype(_impl_.x4_)*/ {},
      /*decltype(_impl_.x0_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.id_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TestTestSetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestTestSetDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestTestSetDefaultTypeInternal() {}
  union {
    TestTestSet _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestTestSetDefaultTypeInternal _TestTestSet_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR TestTestRef_D2Entry_DoNotUse::TestTestRef_D2Entry_DoNotUse(::_pbi::ConstantInitialized) {}
struct TestTestRef_D2Entry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestTestRef_D2Entry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestTestRef_D2Entry_DoNotUseDefaultTypeInternal() {}
  union {
    TestTestRef_D2Entry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestTestRef_D2Entry_DoNotUseDefaultTypeInternal _TestTestRef_D2Entry_DoNotUse_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR TestTestRef_D1Entry_DoNotUse::TestTestRef_D1Entry_DoNotUse(::_pbi::ConstantInitialized) {}
struct TestTestRef_D1Entry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestTestRef_D1Entry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestTestRef_D1Entry_DoNotUseDefaultTypeInternal() {}
  union {
    TestTestRef_D1Entry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestTestRef_D1Entry_DoNotUseDefaultTypeInternal _TestTestRef_D1Entry_DoNotUse_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR TestTestMap_X4Entry_DoNotUse::TestTestMap_X4Entry_DoNotUse(::_pbi::ConstantInitialized) {}
struct TestTestMap_X4Entry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestTestMap_X4Entry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestTestMap_X4Entry_DoNotUseDefaultTypeInternal() {}
  union {
    TestTestMap_X4Entry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestTestMap_X4Entry_DoNotUseDefaultTypeInternal _TestTestMap_X4Entry_DoNotUse_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR TestTestMap_X3Entry_DoNotUse::TestTestMap_X3Entry_DoNotUse(::_pbi::ConstantInitialized) {}
struct TestTestMap_X3Entry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestTestMap_X3Entry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestTestMap_X3Entry_DoNotUseDefaultTypeInternal() {}
  union {
    TestTestMap_X3Entry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestTestMap_X3Entry_DoNotUseDefaultTypeInternal _TestTestMap_X3Entry_DoNotUse_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR TestTestMap_X2Entry_DoNotUse::TestTestMap_X2Entry_DoNotUse(::_pbi::ConstantInitialized) {}
struct TestTestMap_X2Entry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestTestMap_X2Entry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestTestMap_X2Entry_DoNotUseDefaultTypeInternal() {}
  union {
    TestTestMap_X2Entry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestTestMap_X2Entry_DoNotUseDefaultTypeInternal _TestTestMap_X2Entry_DoNotUse_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR TestTestMap_X1Entry_DoNotUse::TestTestMap_X1Entry_DoNotUse(::_pbi::ConstantInitialized) {}
struct TestTestMap_X1Entry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestTestMap_X1Entry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestTestMap_X1Entry_DoNotUseDefaultTypeInternal() {}
  union {
    TestTestMap_X1Entry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestTestMap_X1Entry_DoNotUseDefaultTypeInternal _TestTestMap_X1Entry_DoNotUse_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestTestGlobal::TestTestGlobal(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.unlock_equip_)*/ 0,
      /*decltype(_impl_.unlock_hero_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TestTestGlobalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestTestGlobalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestTestGlobalDefaultTypeInternal() {}
  union {
    TestTestGlobal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestTestGlobalDefaultTypeInternal _TestTestGlobal_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestTestBeRef::TestTestBeRef(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.id_)*/ 0,
      /*decltype(_impl_.count_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TestTestBeRefDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestTestBeRefDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestTestBeRefDefaultTypeInternal() {}
  union {
    TestTestBeRef _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestTestBeRefDefaultTypeInternal _TestTestBeRef_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestTest3::TestTest3(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.x_)*/ 0,
      /*decltype(_impl_.y_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TestTest3DefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestTest3DefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestTest3DefaultTypeInternal() {}
  union {
    TestTest3 _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestTest3DefaultTypeInternal _TestTest3_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestRefBean::TestRefBean(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.arr_)*/ {},
      /* _impl_._arr_cached_byte_size_ = */ {0},
      /*decltype(_impl_.x_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TestRefBeanDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestRefBeanDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestRefBeanDefaultTypeInternal() {}
  union {
    TestRefBean _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestRefBeanDefaultTypeInternal _TestRefBean_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestNotIndexList::TestNotIndexList(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.x_)*/ 0,
      /*decltype(_impl_.y_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TestNotIndexListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestNotIndexListDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestNotIndexListDefaultTypeInternal() {}
  union {
    TestNotIndexList _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestNotIndexListDefaultTypeInternal _TestNotIndexList_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestMultiUnionIndexList::TestMultiUnionIndexList(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.id3_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.desc_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.id2_)*/ ::int64_t{0},
      /*decltype(_impl_.id1_)*/ 0,
      /*decltype(_impl_.num_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TestMultiUnionIndexListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMultiUnionIndexListDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMultiUnionIndexListDefaultTypeInternal() {}
  union {
    TestMultiUnionIndexList _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMultiUnionIndexListDefaultTypeInternal _TestMultiUnionIndexList_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestMultiRowType2::TestMultiRowType2(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.id_)*/ 0,
      /*decltype(_impl_.x_)*/ 0,
      /*decltype(_impl_.y_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TestMultiRowType2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMultiRowType2DefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMultiRowType2DefaultTypeInternal() {}
  union {
    TestMultiRowType2 _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMultiRowType2DefaultTypeInternal _TestMultiRowType2_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestMultiRowType1::TestMultiRowType1(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.id_)*/ 0,
      /*decltype(_impl_.x_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TestMultiRowType1DefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMultiRowType1DefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMultiRowType1DefaultTypeInternal() {}
  union {
    TestMultiRowType1 _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMultiRowType1DefaultTypeInternal _TestMultiRowType1_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR TestMultiRowRecord_MultiRows7Entry_DoNotUse::TestMultiRowRecord_MultiRows7Entry_DoNotUse(::_pbi::ConstantInitialized) {}
struct TestMultiRowRecord_MultiRows7Entry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMultiRowRecord_MultiRows7Entry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMultiRowRecord_MultiRows7Entry_DoNotUseDefaultTypeInternal() {}
  union {
    TestMultiRowRecord_MultiRows7Entry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMultiRowRecord_MultiRows7Entry_DoNotUseDefaultTypeInternal _TestMultiRowRecord_MultiRows7Entry_DoNotUse_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestMultiIndexList::TestMultiIndexList(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.id3_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.desc_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.id2_)*/ ::int64_t{0},
      /*decltype(_impl_.id1_)*/ 0,
      /*decltype(_impl_.num_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TestMultiIndexListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMultiIndexListDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMultiIndexListDefaultTypeInternal() {}
  union {
    TestMultiIndexList _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMultiIndexListDefaultTypeInternal _TestMultiIndexList_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestLoginRoleInfo::TestLoginRoleInfo(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.x1_)*/ 0,
      /*decltype(_impl_.x3_)*/ 0,
      /*decltype(_impl_.role_id_)*/ ::int64_t{0},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TestLoginRoleInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestLoginRoleInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestLoginRoleInfoDefaultTypeInternal() {}
  union {
    TestLoginRoleInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestLoginRoleInfoDefaultTypeInternal _TestLoginRoleInfo_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestItem::TestItem(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.desc_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.id_)*/ 0,
      /*decltype(_impl_.num_)*/ 0,
      /*decltype(_impl_.price_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TestItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestItemDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestItemDefaultTypeInternal() {}
  union {
    TestItem _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestItemDefaultTypeInternal _TestItem_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestInnerGroup::TestInnerGroup(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.y1_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TestInnerGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestInnerGroupDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestInnerGroupDefaultTypeInternal() {}
  union {
    TestInnerGroup _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestInnerGroupDefaultTypeInternal _TestInnerGroup_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestH2::TestH2(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.z2_)*/ 0,
      /*decltype(_impl_.z3_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TestH2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestH2DefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestH2DefaultTypeInternal() {}
  union {
    TestH2 _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestH2DefaultTypeInternal _TestH2_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestFoo::TestFoo(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.y1_)*/ 0,
      /*decltype(_impl_.y2_)*/ 0,
      /*decltype(_impl_.y3_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TestFooDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestFooDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestFooDefaultTypeInternal() {}
  union {
    TestFoo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestFooDefaultTypeInternal _TestFoo_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR TestExcelFromJson_K8Entry_DoNotUse::TestExcelFromJson_K8Entry_DoNotUse(::_pbi::ConstantInitialized) {}
struct TestExcelFromJson_K8Entry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestExcelFromJson_K8Entry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestExcelFromJson_K8Entry_DoNotUseDefaultTypeInternal() {}
  union {
    TestExcelFromJson_K8Entry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestExcelFromJson_K8Entry_DoNotUseDefaultTypeInternal _TestExcelFromJson_K8Entry_DoNotUse_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestEquipment::TestEquipment(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.desc_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.id_)*/ 0,
      /*decltype(_impl_.attr_)*/ 0,
      /*decltype(_impl_.value_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TestEquipmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestEquipmentDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestEquipmentDefaultTypeInternal() {}
  union {
    TestEquipment _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestEquipmentDefaultTypeInternal _TestEquipment_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestDetectEncoding::TestDetectEncoding(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.id_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TestDetectEncodingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestDetectEncodingDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestDetectEncodingDefaultTypeInternal() {}
  union {
    TestDetectEncoding _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestDetectEncodingDefaultTypeInternal _TestDetectEncoding_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR TestDemoType2_K8Entry_DoNotUse::TestDemoType2_K8Entry_DoNotUse(::_pbi::ConstantInitialized) {}
struct TestDemoType2_K8Entry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestDemoType2_K8Entry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestDemoType2_K8Entry_DoNotUseDefaultTypeInternal() {}
  union {
    TestDemoType2_K8Entry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestDemoType2_K8Entry_DoNotUseDefaultTypeInternal _TestDemoType2_K8Entry_DoNotUse_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestDemoType1::TestDemoType1(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.x1_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TestDemoType1DefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestDemoType1DefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestDemoType1DefaultTypeInternal() {}
  union {
    TestDemoType1 _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestDemoType1DefaultTypeInternal _TestDemoType1_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestDemoE2::TestDemoE2(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.y1_)*/ 0,
      /*decltype(_impl_.y2_)*/ false,
    } {}
struct TestDemoE2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestDemoE2DefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestDemoE2DefaultTypeInternal() {}
  union {
    TestDemoE2 _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestDemoE2DefaultTypeInternal _TestDemoE2_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestDemoE1::TestDemoE1(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.x1_)*/ 0,
      /*decltype(_impl_.x3_)*/ 0,
      /*decltype(_impl_.x4_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TestDemoE1DefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestDemoE1DefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestDemoE1DefaultTypeInternal() {}
  union {
    TestDemoE1 _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestDemoE1DefaultTypeInternal _TestDemoE1_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestDemoD2::TestDemoD2(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.x1_)*/ 0,
      /*decltype(_impl_.x2_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TestDemoD2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestDemoD2DefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestDemoD2DefaultTypeInternal() {}
  union {
    TestDemoD2 _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestDemoD2DefaultTypeInternal _TestDemoD2_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestDecorator::TestDecorator(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.desc_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.id_)*/ 0,
      /*decltype(_impl_.duration_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TestDecoratorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestDecoratorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestDecoratorDefaultTypeInternal() {}
  union {
    TestDecorator _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestDecoratorDefaultTypeInternal _TestDecorator_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestDateTimeRange::TestDateTimeRange(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.start_time_)*/ ::int64_t{0},
      /*decltype(_impl_.end_time_)*/ ::int64_t{0},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TestDateTimeRangeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestDateTimeRangeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestDateTimeRangeDefaultTypeInternal() {}
  union {
    TestDateTimeRange _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestDateTimeRangeDefaultTypeInternal _TestDateTimeRange_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestCompositeJsonTable3::TestCompositeJsonTable3(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.a_)*/ 0,
      /*decltype(_impl_.b_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TestCompositeJsonTable3DefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestCompositeJsonTable3DefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestCompositeJsonTable3DefaultTypeInternal() {}
  union {
    TestCompositeJsonTable3 _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestCompositeJsonTable3DefaultTypeInternal _TestCompositeJsonTable3_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestCompositeJsonTable2::TestCompositeJsonTable2(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.id_)*/ 0,
      /*decltype(_impl_.y_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TestCompositeJsonTable2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestCompositeJsonTable2DefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestCompositeJsonTable2DefaultTypeInternal() {}
  union {
    TestCompositeJsonTable2 _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestCompositeJsonTable2DefaultTypeInternal _TestCompositeJsonTable2_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestCompositeJsonTable1::TestCompositeJsonTable1(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.x_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.id_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TestCompositeJsonTable1DefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestCompositeJsonTable1DefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestCompositeJsonTable1DefaultTypeInternal() {}
  union {
    TestCompositeJsonTable1 _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestCompositeJsonTable1DefaultTypeInternal _TestCompositeJsonTable1_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestCompactString::TestCompactString(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.s2_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.s3_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.id_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TestCompactStringDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestCompactStringDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestCompactStringDefaultTypeInternal() {}
  union {
    TestCompactString _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestCompactStringDefaultTypeInternal _TestCompactString_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestCircle::TestCircle(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.radius_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TestCircleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestCircleDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestCircleDefaultTypeInternal() {}
  union {
    TestCircle _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestCircleDefaultTypeInternal _TestCircle_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR Test2Rectangle::Test2Rectangle(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.width_)*/ 0,
      /*decltype(_impl_.height_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct Test2RectangleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Test2RectangleDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Test2RectangleDefaultTypeInternal() {}
  union {
    Test2Rectangle _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Test2RectangleDefaultTypeInternal _Test2Rectangle_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TagTestTag::TagTestTag(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.value_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.id_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TagTestTagDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TagTestTagDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TagTestTagDefaultTypeInternal() {}
  union {
    TagTestTag _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TagTestTagDefaultTypeInternal _TagTestTag_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR L10nPatchDemo::L10nPatchDemo(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.id_)*/ 0,
      /*decltype(_impl_.value_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct L10nPatchDemoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR L10nPatchDemoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~L10nPatchDemoDefaultTypeInternal() {}
  union {
    L10nPatchDemo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 L10nPatchDemoDefaultTypeInternal _L10nPatchDemo_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR L10nL10NDemo::L10nL10NDemo(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.text_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.id_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct L10nL10NDemoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR L10nL10NDemoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~L10nL10NDemoDefaultTypeInternal() {}
  union {
    L10nL10NDemo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 L10nL10NDemoDefaultTypeInternal _L10nL10NDemo_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR ItemItem::ItemItem(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.icon_backgroud_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.icon_mask_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.desc_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.id_)*/ 0,
      /*decltype(_impl_.minor_type_)*/ 0,
      /*decltype(_impl_.quality_)*/ 0,
      /*decltype(_impl_.show_order_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct ItemItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ItemItemDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ItemItemDefaultTypeInternal() {}
  union {
    ItemItem _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ItemItemDefaultTypeInternal _ItemItem_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR DefineFromExcel2_K8Entry_DoNotUse::DefineFromExcel2_K8Entry_DoNotUse(::_pbi::ConstantInitialized) {}
struct DefineFromExcel2_K8Entry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DefineFromExcel2_K8Entry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DefineFromExcel2_K8Entry_DoNotUseDefaultTypeInternal() {}
  union {
    DefineFromExcel2_K8Entry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DefineFromExcel2_K8Entry_DoNotUseDefaultTypeInternal _DefineFromExcel2_K8Entry_DoNotUse_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CommonGlobalConfig::CommonGlobalConfig(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.x7_)*/ {},
      /* _impl_._x7_cached_byte_size_ = */ {0},
      /*decltype(_impl_.x1_)*/ 0,
      /*decltype(_impl_.x2_)*/ 0,
      /*decltype(_impl_.x3_)*/ 0,
      /*decltype(_impl_.x4_)*/ 0,
      /*decltype(_impl_.x5_)*/ 0,
      /*decltype(_impl_.x6_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct CommonGlobalConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommonGlobalConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommonGlobalConfigDefaultTypeInternal() {}
  union {
    CommonGlobalConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommonGlobalConfigDefaultTypeInternal _CommonGlobalConfig_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR AiUpdateDailyBehaviorProps::AiUpdateDailyBehaviorProps(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.node_name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.satiety_key_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.energy_key_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.mood_key_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.satiety_lower_threshold_key_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.satiety_upper_threshold_key_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.energy_lower_threshold_key_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.energy_upper_threshold_key_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.mood_lower_threshold_key_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.mood_upper_threshold_key_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.id_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct AiUpdateDailyBehaviorPropsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AiUpdateDailyBehaviorPropsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AiUpdateDailyBehaviorPropsDefaultTypeInternal() {}
  union {
    AiUpdateDailyBehaviorProps _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AiUpdateDailyBehaviorPropsDefaultTypeInternal _AiUpdateDailyBehaviorProps_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR AiUeTimeLimit::AiUeTimeLimit(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.node_name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.id_)*/ 0,
      /*decltype(_impl_.flow_abort_mode_)*/ 0,
      /*decltype(_impl_.limit_time_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct AiUeTimeLimitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AiUeTimeLimitDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AiUeTimeLimitDefaultTypeInternal() {}
  union {
    AiUeTimeLimit _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AiUeTimeLimitDefaultTypeInternal _AiUeTimeLimit_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR AiUeSetDefaultFocus::AiUeSetDefaultFocus(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.node_name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.keyboard_key_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.id_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct AiUeSetDefaultFocusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AiUeSetDefaultFocusDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AiUeSetDefaultFocusDefaultTypeInternal() {}
  union {
    AiUeSetDefaultFocus _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AiUeSetDefaultFocusDefaultTypeInternal _AiUeSetDefaultFocus_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR AiUeLoop::AiUeLoop(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.node_name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.id_)*/ 0,
      /*decltype(_impl_.flow_abort_mode_)*/ 0,
      /*decltype(_impl_.num_loops_)*/ 0,
      /*decltype(_impl_.infinite_loop_)*/ false,
      /*decltype(_impl_.infinite_loop_timeout_time_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct AiUeLoopDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AiUeLoopDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AiUeLoopDefaultTypeInternal() {}
  union {
    AiUeLoop _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AiUeLoopDefaultTypeInternal _AiUeLoop_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR AiUeForceSuccess::AiUeForceSuccess(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.node_name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.id_)*/ 0,
      /*decltype(_impl_.flow_abort_mode_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct AiUeForceSuccessDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AiUeForceSuccessDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AiUeForceSuccessDefaultTypeInternal() {}
  union {
    AiUeForceSuccess _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AiUeForceSuccessDefaultTypeInternal _AiUeForceSuccess_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR AiUeCooldown::AiUeCooldown(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.node_name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.id_)*/ 0,
      /*decltype(_impl_.flow_abort_mode_)*/ 0,
      /*decltype(_impl_.cooldown_time_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct AiUeCooldownDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AiUeCooldownDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AiUeCooldownDefaultTypeInternal() {}
  union {
    AiUeCooldown _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AiUeCooldownDefaultTypeInternal _AiUeCooldown_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR AiStringKeyData::AiStringKeyData(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.value_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct AiStringKeyDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AiStringKeyDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AiStringKeyDataDefaultTypeInternal() {}
  union {
    AiStringKeyData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AiStringKeyDataDefaultTypeInternal _AiStringKeyData_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR AiKeepFaceTarget::AiKeepFaceTarget(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.node_name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.target_actor_key_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.id_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct AiKeepFaceTargetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AiKeepFaceTargetDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AiKeepFaceTargetDefaultTypeInternal() {}
  union {
    AiKeepFaceTarget _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AiKeepFaceTargetDefaultTypeInternal _AiKeepFaceTarget_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR AiIsSet::AiIsSet(::_pbi::ConstantInitialized) {}
struct AiIsSetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AiIsSetDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AiIsSetDefaultTypeInternal() {}
  union {
    AiIsSet _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AiIsSetDefaultTypeInternal _AiIsSet_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR AiIsNotSet::AiIsNotSet(::_pbi::ConstantInitialized) {}
struct AiIsNotSetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AiIsNotSetDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AiIsNotSetDefaultTypeInternal() {}
  union {
    AiIsNotSet _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AiIsNotSetDefaultTypeInternal _AiIsNotSet_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR AiIsAtLocation::AiIsAtLocation(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.node_name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.keyboard_key_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.id_)*/ 0,
      /*decltype(_impl_.flow_abort_mode_)*/ 0,
      /*decltype(_impl_.acceptable_radius_)*/ 0,
      /*decltype(_impl_.inverse_condition_)*/ false,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct AiIsAtLocationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AiIsAtLocationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AiIsAtLocationDefaultTypeInternal() {}
  union {
    AiIsAtLocation _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AiIsAtLocationDefaultTypeInternal _AiIsAtLocation_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR AiIntKeyData::AiIntKeyData(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.value_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct AiIntKeyDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AiIntKeyDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AiIntKeyDataDefaultTypeInternal() {}
  union {
    AiIntKeyData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AiIntKeyDataDefaultTypeInternal _AiIntKeyData_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR AiGetOwnerPlayer::AiGetOwnerPlayer(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.node_name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.player_actor_key_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.id_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct AiGetOwnerPlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AiGetOwnerPlayerDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AiGetOwnerPlayerDefaultTypeInternal() {}
  union {
    AiGetOwnerPlayer _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AiGetOwnerPlayerDefaultTypeInternal _AiGetOwnerPlayer_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR AiFloatKeyData::AiFloatKeyData(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.value_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct AiFloatKeyDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AiFloatKeyDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AiFloatKeyDataDefaultTypeInternal() {}
  union {
    AiFloatKeyData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AiFloatKeyDataDefaultTypeInternal _AiFloatKeyData_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR AiExecuteTimeStatistic::AiExecuteTimeStatistic(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.node_name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.id_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct AiExecuteTimeStatisticDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AiExecuteTimeStatisticDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AiExecuteTimeStatisticDefaultTypeInternal() {}
  union {
    AiExecuteTimeStatistic _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AiExecuteTimeStatisticDefaultTypeInternal _AiExecuteTimeStatistic_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR AiDistanceLessThan::AiDistanceLessThan(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.node_name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.actor1_key_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.actor2_key_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.id_)*/ 0,
      /*decltype(_impl_.flow_abort_mode_)*/ 0,
      /*decltype(_impl_.distance_)*/ 0,
      /*decltype(_impl_.reverse_result_)*/ false,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct AiDistanceLessThanDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AiDistanceLessThanDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AiDistanceLessThanDefaultTypeInternal() {}
  union {
    AiDistanceLessThan _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AiDistanceLessThanDefaultTypeInternal _AiDistanceLessThan_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR AiChooseTarget::AiChooseTarget(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.node_name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.result_target_key_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.id_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct AiChooseTargetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AiChooseTargetDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AiChooseTargetDefaultTypeInternal() {}
  union {
    AiChooseTarget _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AiChooseTargetDefaultTypeInternal _AiChooseTarget_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR AiBlackboardKeyData::AiBlackboardKeyData(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.value_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct AiBlackboardKeyDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AiBlackboardKeyDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AiBlackboardKeyDataDefaultTypeInternal() {}
  union {
    AiBlackboardKeyData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AiBlackboardKeyDataDefaultTypeInternal _AiBlackboardKeyData_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR AiBlackboardKey::AiBlackboardKey(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.desc_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.type_class_name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.is_static_)*/ false,
      /*decltype(_impl_.type_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct AiBlackboardKeyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AiBlackboardKeyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AiBlackboardKeyDefaultTypeInternal() {}
  union {
    AiBlackboardKey _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AiBlackboardKeyDefaultTypeInternal _AiBlackboardKey_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestTestString::TestTestString(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.id_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.s1_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.s2_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.cs1_)*/ nullptr,
      /*decltype(_impl_.cs2_)*/ nullptr,
    } {}
struct TestTestStringDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestTestStringDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestTestStringDefaultTypeInternal() {}
  union {
    TestTestString _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestTestStringDefaultTypeInternal _TestTestString_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestTestSize::TestTestSize(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.x1_)*/ {},
      /* _impl_._x1_cached_byte_size_ = */ {0},
      /*decltype(_impl_.x2_)*/ {},
      /* _impl_._x2_cached_byte_size_ = */ {0},
      /*decltype(_impl_.x3_)*/ {},
      /* _impl_._x3_cached_byte_size_ = */ {0},
      /* decltype(_impl_.x4_) */ {},
      /*decltype(_impl_.id_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TestTestSizeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestTestSizeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestTestSizeDefaultTypeInternal() {}
  union {
    TestTestSize _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestTestSizeDefaultTypeInternal _TestTestSize_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestTestScriptableObject::TestTestScriptableObject(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.desc_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.v2_)*/ nullptr,
      /*decltype(_impl_.v3_)*/ nullptr,
      /*decltype(_impl_.v4_)*/ nullptr,
      /*decltype(_impl_.id_)*/ 0,
      /*decltype(_impl_.rate_)*/ 0,
      /*decltype(_impl_.num_)*/ 0,
    } {}
struct TestTestScriptableObjectDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestTestScriptableObjectDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestTestScriptableObjectDefaultTypeInternal() {}
  union {
    TestTestScriptableObject _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestTestScriptableObjectDefaultTypeInternal _TestTestScriptableObject_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestTestRow::TestTestRow(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.b_)*/ {},
      /* _impl_._b_cached_byte_size_ = */ {0},
      /*decltype(_impl_.z_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.a_)*/ nullptr,
      /*decltype(_impl_.x_)*/ 0,
      /*decltype(_impl_.y_)*/ false,
    } {}
struct TestTestRowDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestTestRowDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestTestRowDefaultTypeInternal() {}
  union {
    TestTestRow _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestTestRowDefaultTypeInternal _TestTestRow_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestTestMultiColumn::TestTestMultiColumn(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.a_)*/ nullptr,
      /*decltype(_impl_.b_)*/ nullptr,
      /*decltype(_impl_.c_)*/ nullptr,
      /*decltype(_impl_.id_)*/ 0,
    } {}
struct TestTestMultiColumnDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestTestMultiColumnDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestTestMultiColumnDefaultTypeInternal() {}
  union {
    TestTestMultiColumn _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestTestMultiColumnDefaultTypeInternal _TestTestMultiColumn_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestTestMapper::TestTestMapper(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.v2_)*/ nullptr,
      /*decltype(_impl_.id_)*/ 0,
      /*decltype(_impl_.audio_type_)*/ 0,
    } {}
struct TestTestMapperDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestTestMapperDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestTestMapperDefaultTypeInternal() {}
  union {
    TestTestMapper _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestTestMapperDefaultTypeInternal _TestTestMapper_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestTestMap::TestTestMap(::_pbi::ConstantInitialized)
    : _impl_{
      /* decltype(_impl_.x1_) */ {},
      /* decltype(_impl_.x2_) */ {},
      /* decltype(_impl_.x3_) */ {},
      /* decltype(_impl_.x4_) */ {},
      /*decltype(_impl_.id_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TestTestMapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestTestMapDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestTestMapDefaultTypeInternal() {}
  union {
    TestTestMap _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestTestMapDefaultTypeInternal _TestTestMap_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestTestIndex::TestTestIndex(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.eles_)*/ {},
      /*decltype(_impl_.id_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TestTestIndexDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestTestIndexDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestTestIndexDefaultTypeInternal() {}
  union {
    TestTestIndex _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestTestIndexDefaultTypeInternal _TestTestIndex_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestTbTestSet::TestTbTestSet(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.data_list_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TestTbTestSetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestTbTestSetDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestTbTestSetDefaultTypeInternal() {}
  union {
    TestTbTestSet _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestTbTestSetDefaultTypeInternal _TestTbTestSet_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestTbTestGlobal::TestTbTestGlobal(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.data_list_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TestTbTestGlobalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestTbTestGlobalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestTbTestGlobalDefaultTypeInternal() {}
  union {
    TestTbTestGlobal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestTbTestGlobalDefaultTypeInternal _TestTbTestGlobal_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestTbTestBeRef2::TestTbTestBeRef2(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.data_list_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TestTbTestBeRef2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestTbTestBeRef2DefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestTbTestBeRef2DefaultTypeInternal() {}
  union {
    TestTbTestBeRef2 _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestTbTestBeRef2DefaultTypeInternal _TestTbTestBeRef2_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestTbTestBeRef::TestTbTestBeRef(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.data_list_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TestTbTestBeRefDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestTbTestBeRefDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestTbTestBeRefDefaultTypeInternal() {}
  union {
    TestTbTestBeRef _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestTbTestBeRefDefaultTypeInternal _TestTbTestBeRef_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestTbNotIndexList::TestTbNotIndexList(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.data_list_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TestTbNotIndexListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestTbNotIndexListDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestTbNotIndexListDefaultTypeInternal() {}
  union {
    TestTbNotIndexList _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestTbNotIndexListDefaultTypeInternal _TestTbNotIndexList_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestTbMultiUnionIndexList::TestTbMultiUnionIndexList(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.data_list_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TestTbMultiUnionIndexListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestTbMultiUnionIndexListDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestTbMultiUnionIndexListDefaultTypeInternal() {}
  union {
    TestTbMultiUnionIndexList _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestTbMultiUnionIndexListDefaultTypeInternal _TestTbMultiUnionIndexList_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestTbMultiIndexList::TestTbMultiIndexList(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.data_list_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TestTbMultiIndexListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestTbMultiIndexListDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestTbMultiIndexListDefaultTypeInternal() {}
  union {
    TestTbMultiIndexList _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestTbMultiIndexListDefaultTypeInternal _TestTbMultiIndexList_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestTbDetectCsvEncoding::TestTbDetectCsvEncoding(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.data_list_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TestTbDetectCsvEncodingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestTbDetectCsvEncodingDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestTbDetectCsvEncodingDefaultTypeInternal() {}
  union {
    TestTbDetectCsvEncoding _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestTbDetectCsvEncodingDefaultTypeInternal _TestTbDetectCsvEncoding_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestTbCompositeJsonTable3::TestTbCompositeJsonTable3(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.data_list_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TestTbCompositeJsonTable3DefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestTbCompositeJsonTable3DefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestTbCompositeJsonTable3DefaultTypeInternal() {}
  union {
    TestTbCompositeJsonTable3 _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestTbCompositeJsonTable3DefaultTypeInternal _TestTbCompositeJsonTable3_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestTbCompositeJsonTable2::TestTbCompositeJsonTable2(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.data_list_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TestTbCompositeJsonTable2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestTbCompositeJsonTable2DefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestTbCompositeJsonTable2DefaultTypeInternal() {}
  union {
    TestTbCompositeJsonTable2 _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestTbCompositeJsonTable2DefaultTypeInternal _TestTbCompositeJsonTable2_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestTbCompositeJsonTable1::TestTbCompositeJsonTable1(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.data_list_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TestTbCompositeJsonTable1DefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestTbCompositeJsonTable1DefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestTbCompositeJsonTable1DefaultTypeInternal() {}
  union {
    TestTbCompositeJsonTable1 _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestTbCompositeJsonTable1DefaultTypeInternal _TestTbCompositeJsonTable1_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestShape::TestShape(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.value_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_._oneof_case_)*/ {},
    } {}
struct TestShapeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestShapeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestShapeDefaultTypeInternal() {}
  union {
    TestShape _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestShapeDefaultTypeInternal _TestShape_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestRefDynamicBase::TestRefDynamicBase(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.value_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_._oneof_case_)*/ {},
    } {}
struct TestRefDynamicBaseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestRefDynamicBaseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestRefDynamicBaseDefaultTypeInternal() {}
  union {
    TestRefDynamicBase _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestRefDynamicBaseDefaultTypeInternal _TestRefDynamicBase_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestMultiRowType3::TestMultiRowType3(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.items_)*/ {},
      /*decltype(_impl_.id_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TestMultiRowType3DefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMultiRowType3DefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMultiRowType3DefaultTypeInternal() {}
  union {
    TestMultiRowType3 _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMultiRowType3DefaultTypeInternal _TestMultiRowType3_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR TestMultiRowRecord_MultiRows6Entry_DoNotUse::TestMultiRowRecord_MultiRows6Entry_DoNotUse(::_pbi::ConstantInitialized) {}
struct TestMultiRowRecord_MultiRows6Entry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMultiRowRecord_MultiRows6Entry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMultiRowRecord_MultiRows6Entry_DoNotUseDefaultTypeInternal() {}
  union {
    TestMultiRowRecord_MultiRows6Entry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMultiRowRecord_MultiRows6Entry_DoNotUseDefaultTypeInternal _TestMultiRowRecord_MultiRows6Entry_DoNotUse_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR TestMultiRowRecord_MultiRows4Entry_DoNotUse::TestMultiRowRecord_MultiRows4Entry_DoNotUse(::_pbi::ConstantInitialized) {}
struct TestMultiRowRecord_MultiRows4Entry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMultiRowRecord_MultiRows4Entry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMultiRowRecord_MultiRows4Entry_DoNotUseDefaultTypeInternal() {}
  union {
    TestMultiRowRecord_MultiRows4Entry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMultiRowRecord_MultiRows4Entry_DoNotUseDefaultTypeInternal _TestMultiRowRecord_MultiRows4Entry_DoNotUse_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestItemBase::TestItemBase(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.value_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_._oneof_case_)*/ {},
    } {}
struct TestItemBaseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestItemBaseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestItemBaseDefaultTypeInternal() {}
  union {
    TestItemBase _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestItemBaseDefaultTypeInternal _TestItemBase_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestH1::TestH1(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.y2_)*/ nullptr,
      /*decltype(_impl_.y3_)*/ 0,
    } {}
struct TestH1DefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestH1DefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestH1DefaultTypeInternal() {}
  union {
    TestH1 _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestH1DefaultTypeInternal _TestH1_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestDemoPrimitiveTypesTable::TestDemoPrimitiveTypesTable(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.s1_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.s2_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.v2_)*/ nullptr,
      /*decltype(_impl_.v3_)*/ nullptr,
      /*decltype(_impl_.v4_)*/ nullptr,
      /*decltype(_impl_.x1_)*/ false,
      /*decltype(_impl_.x2_)*/ 0,
      /*decltype(_impl_.x3_)*/ 0,
      /*decltype(_impl_.x4_)*/ 0,
      /*decltype(_impl_.x5_)*/ ::int64_t{0},
      /*decltype(_impl_.x7_)*/ 0,
      /*decltype(_impl_.t1_)*/ ::int64_t{0},
      /*decltype(_impl_.x6_)*/ 0,
    } {}
struct TestDemoPrimitiveTypesTableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestDemoPrimitiveTypesTableDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestDemoPrimitiveTypesTableDefaultTypeInternal() {}
  union {
    TestDemoPrimitiveTypesTable _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestDemoPrimitiveTypesTableDefaultTypeInternal _TestDemoPrimitiveTypesTable_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestDemoGroup::TestDemoGroup(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.x5_)*/ nullptr,
      /*decltype(_impl_.id_)*/ 0,
    } {}
struct TestDemoGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestDemoGroupDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestDemoGroupDefaultTypeInternal() {}
  union {
    TestDemoGroup _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestDemoGroupDefaultTypeInternal _TestDemoGroup_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestDemoD5::TestDemoD5(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.time_)*/ nullptr,
      /*decltype(_impl_.x1_)*/ 0,
    } {}
struct TestDemoD5DefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestDemoD5DefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestDemoD5DefaultTypeInternal() {}
  union {
    TestDemoD5 _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestDemoD5DefaultTypeInternal _TestDemoD5_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestDemoD3::TestDemoD3(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.value_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_._oneof_case_)*/ {},
    } {}
struct TestDemoD3DefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestDemoD3DefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestDemoD3DefaultTypeInternal() {}
  union {
    TestDemoD3 _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestDemoD3DefaultTypeInternal _TestDemoD3_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TagTbTestTag::TagTbTestTag(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.data_list_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TagTbTestTagDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TagTbTestTagDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TagTbTestTagDefaultTypeInternal() {}
  union {
    TagTbTestTag _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TagTbTestTagDefaultTypeInternal _TagTbTestTag_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR L10nTbPatchDemo::L10nTbPatchDemo(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.data_list_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct L10nTbPatchDemoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR L10nTbPatchDemoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~L10nTbPatchDemoDefaultTypeInternal() {}
  union {
    L10nTbPatchDemo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 L10nTbPatchDemoDefaultTypeInternal _L10nTbPatchDemo_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR L10nTbL10NDemo::L10nTbL10NDemo(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.data_list_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct L10nTbL10NDemoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR L10nTbL10NDemoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~L10nTbL10NDemoDefaultTypeInternal() {}
  union {
    L10nTbL10NDemo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 L10nTbL10NDemoDefaultTypeInternal _L10nTbL10NDemo_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR ItemTbItem::ItemTbItem(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.data_list_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct ItemTbItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ItemTbItemDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ItemTbItemDefaultTypeInternal() {}
  union {
    ItemTbItem _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ItemTbItemDefaultTypeInternal _ItemTbItem_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CommonTbGlobalConfig::CommonTbGlobalConfig(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.data_list_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct CommonTbGlobalConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommonTbGlobalConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommonTbGlobalConfigDefaultTypeInternal() {}
  union {
    CommonTbGlobalConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommonTbGlobalConfigDefaultTypeInternal _CommonTbGlobalConfig_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR AiService::AiService(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.value_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_._oneof_case_)*/ {},
    } {}
struct AiServiceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AiServiceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AiServiceDefaultTypeInternal() {}
  union {
    AiService _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AiServiceDefaultTypeInternal _AiService_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR AiKeyData::AiKeyData(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.value_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_._oneof_case_)*/ {},
    } {}
struct AiKeyDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AiKeyDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AiKeyDataDefaultTypeInternal() {}
  union {
    AiKeyData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AiKeyDataDefaultTypeInternal _AiKeyData_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR AiBlackboard::AiBlackboard(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.keys_)*/ {},
      /*decltype(_impl_.name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.desc_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.parent_name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct AiBlackboardDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AiBlackboardDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AiBlackboardDefaultTypeInternal() {}
  union {
    AiBlackboard _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AiBlackboardDefaultTypeInternal _AiBlackboard_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestTestRef::TestTestRef(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.a1_)*/ {},
      /* _impl_._a1_cached_byte_size_ = */ {0},
      /*decltype(_impl_.a2_)*/ {},
      /* _impl_._a2_cached_byte_size_ = */ {0},
      /*decltype(_impl_.b1_)*/ {},
      /* _impl_._b1_cached_byte_size_ = */ {0},
      /*decltype(_impl_.b2_)*/ {},
      /* _impl_._b2_cached_byte_size_ = */ {0},
      /*decltype(_impl_.c1_)*/ {},
      /* _impl_._c1_cached_byte_size_ = */ {0},
      /*decltype(_impl_.c2_)*/ {},
      /* _impl_._c2_cached_byte_size_ = */ {0},
      /* decltype(_impl_.d1_) */ {},
      /* decltype(_impl_.d2_) */ {},
      /*decltype(_impl_.e3_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.f3_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.s1_)*/ nullptr,
      /*decltype(_impl_.id_)*/ 0,
      /*decltype(_impl_.x1_)*/ 0,
      /*decltype(_impl_.x1_2_)*/ 0,
      /*decltype(_impl_.x2_)*/ 0,
      /*decltype(_impl_.x3_)*/ 0,
      /*decltype(_impl_.x4_)*/ 0,
      /*decltype(_impl_.e2_)*/ ::int64_t{0},
      /*decltype(_impl_.e1_)*/ 0,
      /*decltype(_impl_.f1_)*/ 0,
      /*decltype(_impl_.f2_)*/ ::int64_t{0},
    } {}
struct TestTestRefDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestTestRefDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestTestRefDefaultTypeInternal() {}
  union {
    TestTestRef _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestTestRefDefaultTypeInternal _TestTestRef_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestTbTestString::TestTbTestString(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.data_list_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TestTbTestStringDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestTbTestStringDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestTbTestStringDefaultTypeInternal() {}
  union {
    TestTbTestString _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestTbTestStringDefaultTypeInternal _TestTbTestString_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestTbTestSize::TestTbTestSize(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.data_list_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TestTbTestSizeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestTbTestSizeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestTbTestSizeDefaultTypeInternal() {}
  union {
    TestTbTestSize _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestTbTestSizeDefaultTypeInternal _TestTbTestSize_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestTbTestScriptableObject::TestTbTestScriptableObject(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.data_list_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TestTbTestScriptableObjectDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestTbTestScriptableObjectDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestTbTestScriptableObjectDefaultTypeInternal() {}
  union {
    TestTbTestScriptableObject _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestTbTestScriptableObjectDefaultTypeInternal _TestTbTestScriptableObject_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestTbTestMultiColumn::TestTbTestMultiColumn(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.data_list_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TestTbTestMultiColumnDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestTbTestMultiColumnDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestTbTestMultiColumnDefaultTypeInternal() {}
  union {
    TestTbTestMultiColumn _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestTbTestMultiColumnDefaultTypeInternal _TestTbTestMultiColumn_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestTbTestMapper::TestTbTestMapper(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.data_list_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TestTbTestMapperDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestTbTestMapperDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestTbTestMapperDefaultTypeInternal() {}
  union {
    TestTbTestMapper _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestTbTestMapperDefaultTypeInternal _TestTbTestMapper_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestTbTestMap::TestTbTestMap(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.data_list_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TestTbTestMapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestTbTestMapDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestTbTestMapDefaultTypeInternal() {}
  union {
    TestTbTestMap _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestTbTestMapDefaultTypeInternal _TestTbTestMap_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestTbTestIndex::TestTbTestIndex(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.data_list_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TestTbTestIndexDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestTbTestIndexDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestTbTestIndexDefaultTypeInternal() {}
  union {
    TestTbTestIndex _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestTbTestIndexDefaultTypeInternal _TestTbTestIndex_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestTbItem2::TestTbItem2(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.data_list_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TestTbItem2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestTbItem2DefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestTbItem2DefaultTypeInternal() {}
  union {
    TestTbItem2 _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestTbItem2DefaultTypeInternal _TestTbItem2_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestTbDemoPrimitive::TestTbDemoPrimitive(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.data_list_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TestTbDemoPrimitiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestTbDemoPrimitiveDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestTbDemoPrimitiveDefaultTypeInternal() {}
  union {
    TestTbDemoPrimitive _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestTbDemoPrimitiveDefaultTypeInternal _TestTbDemoPrimitive_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestTbDemoGroup::TestTbDemoGroup(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.data_list_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TestTbDemoGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestTbDemoGroupDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestTbDemoGroupDefaultTypeInternal() {}
  union {
    TestTbDemoGroup _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestTbDemoGroupDefaultTypeInternal _TestTbDemoGroup_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestMultiRowTitle::TestMultiRowTitle(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.x2_)*/ {},
      /*decltype(_impl_.x3_)*/ {},
      /*decltype(_impl_.x4_)*/ {},
      /*decltype(_impl_.name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.x1_)*/ nullptr,
      /*decltype(_impl_.x2_0_)*/ nullptr,
      /*decltype(_impl_.id_)*/ 0,
    } {}
struct TestMultiRowTitleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMultiRowTitleDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMultiRowTitleDefaultTypeInternal() {}
  union {
    TestMultiRowTitle _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMultiRowTitleDefaultTypeInternal _TestMultiRowTitle_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestMultiRowRecord::TestMultiRowRecord(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.one_rows_)*/ {},
      /*decltype(_impl_.multi_rows1_)*/ {},
      /*decltype(_impl_.multi_rows2_)*/ {},
      /* decltype(_impl_.multi_rows4_) */ {},
      /*decltype(_impl_.multi_rows5_)*/ {},
      /* decltype(_impl_.multi_rows6_) */ {},
      /* decltype(_impl_.multi_rows7_) */ {},
      /*decltype(_impl_.name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.id_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TestMultiRowRecordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMultiRowRecordDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMultiRowRecordDefaultTypeInternal() {}
  union {
    TestMultiRowRecord _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMultiRowRecordDefaultTypeInternal _TestMultiRowRecord_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestExcelFromJsonMultiRow::TestExcelFromJsonMultiRow(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.items_)*/ {},
      /*decltype(_impl_.id_)*/ 0,
      /*decltype(_impl_.x_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TestExcelFromJsonMultiRowDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestExcelFromJsonMultiRowDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestExcelFromJsonMultiRowDefaultTypeInternal() {}
  union {
    TestExcelFromJsonMultiRow _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestExcelFromJsonMultiRowDefaultTypeInternal _TestExcelFromJsonMultiRow_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestDemoDynamic::TestDemoDynamic(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.value_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_._oneof_case_)*/ {},
    } {}
struct TestDemoDynamicDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestDemoDynamicDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestDemoDynamicDefaultTypeInternal() {}
  union {
    TestDemoDynamic _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestDemoDynamicDefaultTypeInternal _TestDemoDynamic_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR AiTbBlackboard::AiTbBlackboard(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.data_list_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct AiTbBlackboardDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AiTbBlackboardDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AiTbBlackboardDefaultTypeInternal() {}
  union {
    AiTbBlackboard _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AiTbBlackboardDefaultTypeInternal _AiTbBlackboard_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR AiBinaryOperator::AiBinaryOperator(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.data_)*/ nullptr,
      /*decltype(_impl_.oper_)*/ 0,
    } {}
struct AiBinaryOperatorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AiBinaryOperatorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AiBinaryOperatorDefaultTypeInternal() {}
  union {
    AiBinaryOperator _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AiBinaryOperatorDefaultTypeInternal _AiBinaryOperator_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestTestNull::TestTestNull(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.s1_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.s2_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.x3_)*/ nullptr,
      /*decltype(_impl_.x4_)*/ nullptr,
      /*decltype(_impl_.id_)*/ 0,
      /*decltype(_impl_.x1_)*/ 0,
      /*decltype(_impl_.x2_)*/ 0,
    } {}
struct TestTestNullDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestTestNullDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestTestNullDefaultTypeInternal() {}
  union {
    TestTestNull _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestTestNullDefaultTypeInternal _TestTestNull_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestTbTestRef::TestTbTestRef(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.data_list_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TestTbTestRefDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestTbTestRefDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestTbTestRefDefaultTypeInternal() {}
  union {
    TestTbTestRef _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestTbTestRefDefaultTypeInternal _TestTbTestRef_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestTbMultiRowTitle::TestTbMultiRowTitle(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.data_list_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TestTbMultiRowTitleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestTbMultiRowTitleDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestTbMultiRowTitleDefaultTypeInternal() {}
  union {
    TestTbMultiRowTitle _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestTbMultiRowTitleDefaultTypeInternal _TestTbMultiRowTitle_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestTbMultiRowRecord::TestTbMultiRowRecord(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.data_list_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TestTbMultiRowRecordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestTbMultiRowRecordDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestTbMultiRowRecordDefaultTypeInternal() {}
  union {
    TestTbMultiRowRecord _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestTbMultiRowRecordDefaultTypeInternal _TestTbMultiRowRecord_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestTbExcelFromJsonMultiRow::TestTbExcelFromJsonMultiRow(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.data_list_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TestTbExcelFromJsonMultiRowDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestTbExcelFromJsonMultiRowDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestTbExcelFromJsonMultiRowDefaultTypeInternal() {}
  union {
    TestTbExcelFromJsonMultiRow _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestTbExcelFromJsonMultiRowDefaultTypeInternal _TestTbExcelFromJsonMultiRow_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestExcelFromJson::TestExcelFromJson(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.k1_)*/ {},
      /* _impl_._k1_cached_byte_size_ = */ {0},
      /* decltype(_impl_.k8_) */ {},
      /*decltype(_impl_.k9_)*/ {},
      /*decltype(_impl_.k15_)*/ {},
      /*decltype(_impl_.s1_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.s2_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.x12_)*/ nullptr,
      /*decltype(_impl_.x14_)*/ nullptr,
      /*decltype(_impl_.x4_)*/ 0,
      /*decltype(_impl_.x1_)*/ false,
      /*decltype(_impl_.x5_)*/ ::int64_t{0},
      /*decltype(_impl_.x6_)*/ 0,
      /*decltype(_impl_.x13_)*/ 0,
      /*decltype(_impl_.t1_)*/ ::int64_t{0},
    } {}
struct TestExcelFromJsonDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestExcelFromJsonDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestExcelFromJsonDefaultTypeInternal() {}
  union {
    TestExcelFromJson _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestExcelFromJsonDefaultTypeInternal _TestExcelFromJson_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestDemoType2::TestDemoType2(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.k1_)*/ {},
      /* _impl_._k1_cached_byte_size_ = */ {0},
      /*decltype(_impl_.k2_)*/ {},
      /* _impl_._k2_cached_byte_size_ = */ {0},
      /*decltype(_impl_.k5_)*/ {},
      /* _impl_._k5_cached_byte_size_ = */ {0},
      /* decltype(_impl_.k8_) */ {},
      /*decltype(_impl_.k9_)*/ {},
      /*decltype(_impl_.k15_)*/ {},
      /*decltype(_impl_.x10_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.s1_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.x12_)*/ nullptr,
      /*decltype(_impl_.x14_)*/ nullptr,
      /*decltype(_impl_.x4_)*/ 0,
      /*decltype(_impl_.x1_)*/ false,
      /*decltype(_impl_.x2_)*/ 0,
      /*decltype(_impl_.x3_)*/ 0,
      /*decltype(_impl_.x5_)*/ ::int64_t{0},
      /*decltype(_impl_.x7_)*/ 0,
      /*decltype(_impl_.x6_)*/ 0,
      /*decltype(_impl_.x8_0_)*/ 0,
      /*decltype(_impl_.x9_)*/ ::int64_t{0},
      /*decltype(_impl_.x8_)*/ 0,
      /*decltype(_impl_.x13_)*/ 0,
      /*decltype(_impl_.t1_)*/ ::int64_t{0},
    } {}
struct TestDemoType2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestDemoType2DefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestDemoType2DefaultTypeInternal() {}
  union {
    TestDemoType2 _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestDemoType2DefaultTypeInternal _TestDemoType2_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestDemoSingletonType::TestDemoSingletonType(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.date_)*/ nullptr,
      /*decltype(_impl_.id_)*/ 0,
    } {}
struct TestDemoSingletonTypeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestDemoSingletonTypeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestDemoSingletonTypeDefaultTypeInternal() {}
  union {
    TestDemoSingletonType _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestDemoSingletonTypeDefaultTypeInternal _TestDemoSingletonType_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR DefineFromExcel2::DefineFromExcel2(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.k1_)*/ {},
      /* _impl_._k1_cached_byte_size_ = */ {0},
      /*decltype(_impl_.k2_)*/ {},
      /* _impl_._k2_cached_byte_size_ = */ {0},
      /* decltype(_impl_.k8_) */ {},
      /*decltype(_impl_.k9_)*/ {},
      /*decltype(_impl_.k10_)*/ {},
      /*decltype(_impl_.k11_)*/ {},
      /*decltype(_impl_.x10_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.x14_)*/ nullptr,
      /*decltype(_impl_.x15_)*/ nullptr,
      /*decltype(_impl_.v2_)*/ nullptr,
      /*decltype(_impl_.id_)*/ 0,
      /*decltype(_impl_.x1_)*/ false,
      /*decltype(_impl_.x5_)*/ ::int64_t{0},
      /*decltype(_impl_.x6_)*/ 0,
      /*decltype(_impl_.x8_)*/ 0,
      /*decltype(_impl_.x13_)*/ 0,
      /*decltype(_impl_.x13_2_)*/ 0,
      /*decltype(_impl_.t1_)*/ ::int64_t{0},
    } {}
struct DefineFromExcel2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR DefineFromExcel2DefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DefineFromExcel2DefaultTypeInternal() {}
  union {
    DefineFromExcel2 _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DefineFromExcel2DefaultTypeInternal _DefineFromExcel2_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR AiKeyQueryOperator::AiKeyQueryOperator(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.value_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_._oneof_case_)*/ {},
    } {}
struct AiKeyQueryOperatorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AiKeyQueryOperatorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AiKeyQueryOperatorDefaultTypeInternal() {}
  union {
    AiKeyQueryOperator _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AiKeyQueryOperatorDefaultTypeInternal _AiKeyQueryOperator_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestTbTestNull::TestTbTestNull(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.data_list_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TestTbTestNullDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestTbTestNullDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestTbTestNullDefaultTypeInternal() {}
  union {
    TestTbTestNull _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestTbTestNullDefaultTypeInternal _TestTbTestNull_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestTbSingleton::TestTbSingleton(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.data_list_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TestTbSingletonDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestTbSingletonDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestTbSingletonDefaultTypeInternal() {}
  union {
    TestTbSingleton _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestTbSingletonDefaultTypeInternal _TestTbSingleton_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestTbFullTypes::TestTbFullTypes(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.data_list_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TestTbFullTypesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestTbFullTypesDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestTbFullTypesDefaultTypeInternal() {}
  union {
    TestTbFullTypes _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestTbFullTypesDefaultTypeInternal _TestTbFullTypes_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestTbExcelFromJson::TestTbExcelFromJson(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.data_list_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TestTbExcelFromJsonDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestTbExcelFromJsonDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestTbExcelFromJsonDefaultTypeInternal() {}
  union {
    TestTbExcelFromJson _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestTbExcelFromJsonDefaultTypeInternal _TestTbExcelFromJson_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestTbDefineFromExcel2::TestTbDefineFromExcel2(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.data_list_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TestTbDefineFromExcel2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestTbDefineFromExcel2DefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestTbDefineFromExcel2DefaultTypeInternal() {}
  union {
    TestTbDefineFromExcel2 _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestTbDefineFromExcel2DefaultTypeInternal _TestTbDefineFromExcel2_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestTbDataFromMisc::TestTbDataFromMisc(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.data_list_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TestTbDataFromMiscDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestTbDataFromMiscDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestTbDataFromMiscDefaultTypeInternal() {}
  union {
    TestTbDataFromMisc _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestTbDataFromMiscDefaultTypeInternal _TestTbDataFromMisc_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR AiUeBlackboard::AiUeBlackboard(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.node_name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.blackboard_key_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.key_query_)*/ nullptr,
      /*decltype(_impl_.id_)*/ 0,
      /*decltype(_impl_.flow_abort_mode_)*/ 0,
      /*decltype(_impl_.notify_observer_)*/ 0,
    } {}
struct AiUeBlackboardDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AiUeBlackboardDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AiUeBlackboardDefaultTypeInternal() {}
  union {
    AiUeBlackboard _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AiUeBlackboardDefaultTypeInternal _AiUeBlackboard_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR AiDecorator::AiDecorator(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.value_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_._oneof_case_)*/ {},
    } {}
struct AiDecoratorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AiDecoratorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AiDecoratorDefaultTypeInternal() {}
  union {
    AiDecorator _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AiDecoratorDefaultTypeInternal _AiDecorator_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR AiUeWaitBlackboardTime::AiUeWaitBlackboardTime(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.decorators_)*/ {},
      /*decltype(_impl_.services_)*/ {},
      /*decltype(_impl_.node_name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.blackboard_key_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.id_)*/ 0,
      /*decltype(_impl_.ignore_restart_self_)*/ false,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct AiUeWaitBlackboardTimeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AiUeWaitBlackboardTimeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AiUeWaitBlackboardTimeDefaultTypeInternal() {}
  union {
    AiUeWaitBlackboardTime _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AiUeWaitBlackboardTimeDefaultTypeInternal _AiUeWaitBlackboardTime_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR AiUeWait::AiUeWait(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.decorators_)*/ {},
      /*decltype(_impl_.services_)*/ {},
      /*decltype(_impl_.node_name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.id_)*/ 0,
      /*decltype(_impl_.ignore_restart_self_)*/ false,
      /*decltype(_impl_.wait_time_)*/ 0,
      /*decltype(_impl_.random_deviation_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct AiUeWaitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AiUeWaitDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AiUeWaitDefaultTypeInternal() {}
  union {
    AiUeWait _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AiUeWaitDefaultTypeInternal _AiUeWait_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR AiMoveToTarget::AiMoveToTarget(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.decorators_)*/ {},
      /*decltype(_impl_.services_)*/ {},
      /*decltype(_impl_.node_name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.target_actor_key_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.id_)*/ 0,
      /*decltype(_impl_.ignore_restart_self_)*/ false,
      /*decltype(_impl_.acceptable_radius_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct AiMoveToTargetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AiMoveToTargetDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AiMoveToTargetDefaultTypeInternal() {}
  union {
    AiMoveToTarget _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AiMoveToTargetDefaultTypeInternal _AiMoveToTarget_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR AiMoveToRandomLocation::AiMoveToRandomLocation(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.decorators_)*/ {},
      /*decltype(_impl_.services_)*/ {},
      /*decltype(_impl_.node_name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.origin_position_key_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.id_)*/ 0,
      /*decltype(_impl_.ignore_restart_self_)*/ false,
      /*decltype(_impl_.radius_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct AiMoveToRandomLocationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AiMoveToRandomLocationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AiMoveToRandomLocationDefaultTypeInternal() {}
  union {
    AiMoveToRandomLocation _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AiMoveToRandomLocationDefaultTypeInternal _AiMoveToRandomLocation_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR AiMoveToLocation::AiMoveToLocation(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.decorators_)*/ {},
      /*decltype(_impl_.services_)*/ {},
      /*decltype(_impl_.node_name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.id_)*/ 0,
      /*decltype(_impl_.ignore_restart_self_)*/ false,
      /*decltype(_impl_.acceptable_radius_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct AiMoveToLocationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AiMoveToLocationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AiMoveToLocationDefaultTypeInternal() {}
  union {
    AiMoveToLocation _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AiMoveToLocationDefaultTypeInternal _AiMoveToLocation_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR AiDebugPrint::AiDebugPrint(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.decorators_)*/ {},
      /*decltype(_impl_.services_)*/ {},
      /*decltype(_impl_.node_name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.text_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.id_)*/ 0,
      /*decltype(_impl_.ignore_restart_self_)*/ false,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct AiDebugPrintDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AiDebugPrintDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AiDebugPrintDefaultTypeInternal() {}
  union {
    AiDebugPrint _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AiDebugPrintDefaultTypeInternal _AiDebugPrint_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR AiChooseSkill::AiChooseSkill(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.decorators_)*/ {},
      /*decltype(_impl_.services_)*/ {},
      /*decltype(_impl_.node_name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.target_actor_key_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.result_skill_id_key_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.id_)*/ 0,
      /*decltype(_impl_.ignore_restart_self_)*/ false,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct AiChooseSkillDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AiChooseSkillDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AiChooseSkillDefaultTypeInternal() {}
  union {
    AiChooseSkill _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AiChooseSkillDefaultTypeInternal _AiChooseSkill_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR AiTask::AiTask(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.value_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_._oneof_case_)*/ {},
    } {}
struct AiTaskDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AiTaskDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AiTaskDefaultTypeInternal() {}
  union {
    AiTask _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AiTaskDefaultTypeInternal _AiTask_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR AiFlowNode::AiFlowNode(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.value_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_._oneof_case_)*/ {},
    } {}
struct AiFlowNodeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AiFlowNodeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AiFlowNodeDefaultTypeInternal() {}
  union {
    AiFlowNode _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AiFlowNodeDefaultTypeInternal _AiFlowNode_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR AiSelector::AiSelector(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.decorators_)*/ {},
      /*decltype(_impl_.services_)*/ {},
      /*decltype(_impl_.children_)*/ {},
      /*decltype(_impl_.node_name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.id_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct AiSelectorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AiSelectorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AiSelectorDefaultTypeInternal() {}
  union {
    AiSelector _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AiSelectorDefaultTypeInternal _AiSelector_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR AiSequence::AiSequence(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.decorators_)*/ {},
      /*decltype(_impl_.services_)*/ {},
      /*decltype(_impl_.children_)*/ {},
      /*decltype(_impl_.node_name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.id_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct AiSequenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AiSequenceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AiSequenceDefaultTypeInternal() {}
  union {
    AiSequence _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AiSequenceDefaultTypeInternal _AiSequence_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR AiSimpleParallel::AiSimpleParallel(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.decorators_)*/ {},
      /*decltype(_impl_.services_)*/ {},
      /*decltype(_impl_.node_name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.main_task_)*/ nullptr,
      /*decltype(_impl_.background_node_)*/ nullptr,
      /*decltype(_impl_.id_)*/ 0,
      /*decltype(_impl_.finish_mode_)*/ 0,
    } {}
struct AiSimpleParallelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AiSimpleParallelDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AiSimpleParallelDefaultTypeInternal() {}
  union {
    AiSimpleParallel _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AiSimpleParallelDefaultTypeInternal _AiSimpleParallel_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR AiNode::AiNode(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.value_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_._oneof_case_)*/ {},
    } {}
struct AiNodeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AiNodeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AiNodeDefaultTypeInternal() {}
  union {
    AiNode _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AiNodeDefaultTypeInternal _AiNode_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR AiComposeNode::AiComposeNode(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.value_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_._oneof_case_)*/ {},
    } {}
struct AiComposeNodeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AiComposeNodeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AiComposeNodeDefaultTypeInternal() {}
  union {
    AiComposeNode _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AiComposeNodeDefaultTypeInternal _AiComposeNode_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR AiBehaviorTree::AiBehaviorTree(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.desc_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.blackboard_id_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.root_)*/ nullptr,
      /*decltype(_impl_.id_)*/ 0,
    } {}
struct AiBehaviorTreeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AiBehaviorTreeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AiBehaviorTreeDefaultTypeInternal() {}
  union {
    AiBehaviorTree _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AiBehaviorTreeDefaultTypeInternal _AiBehaviorTree_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR AiTbBehaviorTree::AiTbBehaviorTree(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.data_list_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct AiTbBehaviorTreeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AiTbBehaviorTreeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AiTbBehaviorTreeDefaultTypeInternal() {}
  union {
    AiTbBehaviorTree _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AiTbBehaviorTreeDefaultTypeInternal _AiTbBehaviorTree_default_instance_;
}  // namespace cfg
static ::_pb::Metadata file_level_metadata_schema_2eproto[156];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_schema_2eproto[24];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_schema_2eproto = nullptr;
const ::uint32_t TableStruct_schema_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::AiBlackboard, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::AiBlackboard, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiBlackboard, _impl_.desc_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiBlackboard, _impl_.parent_name_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiBlackboard, _impl_.keys_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::AiBlackboardKey, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::AiBlackboardKey, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiBlackboardKey, _impl_.desc_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiBlackboardKey, _impl_.is_static_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiBlackboardKey, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiBlackboardKey, _impl_.type_class_name_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiBehaviorTree, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiBehaviorTree, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::AiBehaviorTree, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiBehaviorTree, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiBehaviorTree, _impl_.desc_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiBehaviorTree, _impl_.blackboard_id_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiBehaviorTree, _impl_.root_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::AiNode, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::cfg::AiNode, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::cfg::AiNode, _impl_.value_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::AiService, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::cfg::AiService, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::cfg::AiService, _impl_.value_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::AiUeSetDefaultFocus, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::AiUeSetDefaultFocus, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiUeSetDefaultFocus, _impl_.node_name_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiUeSetDefaultFocus, _impl_.keyboard_key_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::AiExecuteTimeStatistic, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::AiExecuteTimeStatistic, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiExecuteTimeStatistic, _impl_.node_name_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::AiChooseTarget, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::AiChooseTarget, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiChooseTarget, _impl_.node_name_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiChooseTarget, _impl_.result_target_key_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::AiKeepFaceTarget, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::AiKeepFaceTarget, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiKeepFaceTarget, _impl_.node_name_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiKeepFaceTarget, _impl_.target_actor_key_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::AiGetOwnerPlayer, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::AiGetOwnerPlayer, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiGetOwnerPlayer, _impl_.node_name_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiGetOwnerPlayer, _impl_.player_actor_key_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::AiUpdateDailyBehaviorProps, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::AiUpdateDailyBehaviorProps, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiUpdateDailyBehaviorProps, _impl_.node_name_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiUpdateDailyBehaviorProps, _impl_.satiety_key_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiUpdateDailyBehaviorProps, _impl_.energy_key_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiUpdateDailyBehaviorProps, _impl_.mood_key_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiUpdateDailyBehaviorProps, _impl_.satiety_lower_threshold_key_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiUpdateDailyBehaviorProps, _impl_.satiety_upper_threshold_key_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiUpdateDailyBehaviorProps, _impl_.energy_lower_threshold_key_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiUpdateDailyBehaviorProps, _impl_.energy_upper_threshold_key_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiUpdateDailyBehaviorProps, _impl_.mood_lower_threshold_key_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiUpdateDailyBehaviorProps, _impl_.mood_upper_threshold_key_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::AiDecorator, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::cfg::AiDecorator, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::cfg::AiDecorator, _impl_.value_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::AiUeLoop, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::AiUeLoop, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiUeLoop, _impl_.node_name_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiUeLoop, _impl_.flow_abort_mode_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiUeLoop, _impl_.num_loops_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiUeLoop, _impl_.infinite_loop_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiUeLoop, _impl_.infinite_loop_timeout_time_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::AiUeCooldown, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::AiUeCooldown, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiUeCooldown, _impl_.node_name_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiUeCooldown, _impl_.flow_abort_mode_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiUeCooldown, _impl_.cooldown_time_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::AiUeTimeLimit, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::AiUeTimeLimit, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiUeTimeLimit, _impl_.node_name_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiUeTimeLimit, _impl_.flow_abort_mode_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiUeTimeLimit, _impl_.limit_time_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiUeBlackboard, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiUeBlackboard, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::AiUeBlackboard, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiUeBlackboard, _impl_.node_name_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiUeBlackboard, _impl_.flow_abort_mode_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiUeBlackboard, _impl_.notify_observer_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiUeBlackboard, _impl_.blackboard_key_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiUeBlackboard, _impl_.key_query_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::AiKeyQueryOperator, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::cfg::AiKeyQueryOperator, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::cfg::AiKeyQueryOperator, _impl_.value_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::AiIsSet, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::AiIsNotSet, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::AiBinaryOperator, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiBinaryOperator, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::AiBinaryOperator, _impl_.oper_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiBinaryOperator, _impl_.data_),
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::AiKeyData, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::cfg::AiKeyData, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::cfg::AiKeyData, _impl_.value_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::AiFloatKeyData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::AiFloatKeyData, _impl_.value_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::AiIntKeyData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::AiIntKeyData, _impl_.value_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::AiStringKeyData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::AiStringKeyData, _impl_.value_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::AiBlackboardKeyData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::AiBlackboardKeyData, _impl_.value_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::AiUeForceSuccess, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::AiUeForceSuccess, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiUeForceSuccess, _impl_.node_name_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiUeForceSuccess, _impl_.flow_abort_mode_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::AiIsAtLocation, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::AiIsAtLocation, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiIsAtLocation, _impl_.node_name_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiIsAtLocation, _impl_.flow_abort_mode_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiIsAtLocation, _impl_.acceptable_radius_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiIsAtLocation, _impl_.keyboard_key_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiIsAtLocation, _impl_.inverse_condition_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::AiDistanceLessThan, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::AiDistanceLessThan, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiDistanceLessThan, _impl_.node_name_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiDistanceLessThan, _impl_.flow_abort_mode_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiDistanceLessThan, _impl_.actor1_key_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiDistanceLessThan, _impl_.actor2_key_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiDistanceLessThan, _impl_.distance_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiDistanceLessThan, _impl_.reverse_result_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::AiFlowNode, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::cfg::AiFlowNode, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::cfg::AiFlowNode, _impl_.value_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::AiComposeNode, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::cfg::AiComposeNode, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::cfg::AiComposeNode, _impl_.value_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::AiSequence, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::AiSequence, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiSequence, _impl_.node_name_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiSequence, _impl_.decorators_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiSequence, _impl_.services_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiSequence, _impl_.children_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::AiSelector, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::AiSelector, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiSelector, _impl_.node_name_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiSelector, _impl_.decorators_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiSelector, _impl_.services_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiSelector, _impl_.children_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiSimpleParallel, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiSimpleParallel, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::AiSimpleParallel, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiSimpleParallel, _impl_.node_name_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiSimpleParallel, _impl_.decorators_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiSimpleParallel, _impl_.services_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiSimpleParallel, _impl_.finish_mode_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiSimpleParallel, _impl_.main_task_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiSimpleParallel, _impl_.background_node_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::AiTask, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::cfg::AiTask, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::cfg::AiTask, _impl_.value_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::AiUeWait, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::AiUeWait, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiUeWait, _impl_.node_name_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiUeWait, _impl_.decorators_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiUeWait, _impl_.services_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiUeWait, _impl_.ignore_restart_self_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiUeWait, _impl_.wait_time_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiUeWait, _impl_.random_deviation_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::AiUeWaitBlackboardTime, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::AiUeWaitBlackboardTime, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiUeWaitBlackboardTime, _impl_.node_name_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiUeWaitBlackboardTime, _impl_.decorators_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiUeWaitBlackboardTime, _impl_.services_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiUeWaitBlackboardTime, _impl_.ignore_restart_self_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiUeWaitBlackboardTime, _impl_.blackboard_key_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::AiMoveToTarget, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::AiMoveToTarget, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiMoveToTarget, _impl_.node_name_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiMoveToTarget, _impl_.decorators_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiMoveToTarget, _impl_.services_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiMoveToTarget, _impl_.ignore_restart_self_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiMoveToTarget, _impl_.target_actor_key_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiMoveToTarget, _impl_.acceptable_radius_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::AiChooseSkill, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::AiChooseSkill, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiChooseSkill, _impl_.node_name_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiChooseSkill, _impl_.decorators_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiChooseSkill, _impl_.services_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiChooseSkill, _impl_.ignore_restart_self_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiChooseSkill, _impl_.target_actor_key_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiChooseSkill, _impl_.result_skill_id_key_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::AiMoveToRandomLocation, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::AiMoveToRandomLocation, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiMoveToRandomLocation, _impl_.node_name_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiMoveToRandomLocation, _impl_.decorators_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiMoveToRandomLocation, _impl_.services_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiMoveToRandomLocation, _impl_.ignore_restart_self_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiMoveToRandomLocation, _impl_.origin_position_key_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiMoveToRandomLocation, _impl_.radius_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::AiMoveToLocation, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::AiMoveToLocation, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiMoveToLocation, _impl_.node_name_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiMoveToLocation, _impl_.decorators_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiMoveToLocation, _impl_.services_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiMoveToLocation, _impl_.ignore_restart_self_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiMoveToLocation, _impl_.acceptable_radius_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::AiDebugPrint, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::AiDebugPrint, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiDebugPrint, _impl_.node_name_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiDebugPrint, _impl_.decorators_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiDebugPrint, _impl_.services_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiDebugPrint, _impl_.ignore_restart_self_),
    PROTOBUF_FIELD_OFFSET(::cfg::AiDebugPrint, _impl_.text_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::CommonGlobalConfig, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::CommonGlobalConfig, _impl_.x1_),
    PROTOBUF_FIELD_OFFSET(::cfg::CommonGlobalConfig, _impl_.x2_),
    PROTOBUF_FIELD_OFFSET(::cfg::CommonGlobalConfig, _impl_.x3_),
    PROTOBUF_FIELD_OFFSET(::cfg::CommonGlobalConfig, _impl_.x4_),
    PROTOBUF_FIELD_OFFSET(::cfg::CommonGlobalConfig, _impl_.x5_),
    PROTOBUF_FIELD_OFFSET(::cfg::CommonGlobalConfig, _impl_.x6_),
    PROTOBUF_FIELD_OFFSET(::cfg::CommonGlobalConfig, _impl_.x7_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::ItemItem, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::ItemItem, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::cfg::ItemItem, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::cfg::ItemItem, _impl_.minor_type_),
    PROTOBUF_FIELD_OFFSET(::cfg::ItemItem, _impl_.quality_),
    PROTOBUF_FIELD_OFFSET(::cfg::ItemItem, _impl_.icon_backgroud_),
    PROTOBUF_FIELD_OFFSET(::cfg::ItemItem, _impl_.icon_mask_),
    PROTOBUF_FIELD_OFFSET(::cfg::ItemItem, _impl_.desc_),
    PROTOBUF_FIELD_OFFSET(::cfg::ItemItem, _impl_.show_order_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::L10nL10NDemo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::L10nL10NDemo, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::cfg::L10nL10NDemo, _impl_.text_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::L10nPatchDemo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::L10nPatchDemo, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::cfg::L10nPatchDemo, _impl_.value_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::TagTestTag, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TagTestTag, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::cfg::TagTestTag, _impl_.value_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestDemoType2_K8Entry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestDemoType2_K8Entry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestDemoType2_K8Entry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestDemoType2_K8Entry_DoNotUse, value_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::cfg::TestDemoType2, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestDemoType2, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestDemoType2, _impl_.x4_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestDemoType2, _impl_.x1_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestDemoType2, _impl_.x2_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestDemoType2, _impl_.x3_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestDemoType2, _impl_.x5_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestDemoType2, _impl_.x6_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestDemoType2, _impl_.x7_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestDemoType2, _impl_.x8_0_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestDemoType2, _impl_.x8_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestDemoType2, _impl_.x9_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestDemoType2, _impl_.x10_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestDemoType2, _impl_.x12_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestDemoType2, _impl_.x13_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestDemoType2, _impl_.x14_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestDemoType2, _impl_.s1_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestDemoType2, _impl_.t1_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestDemoType2, _impl_.k1_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestDemoType2, _impl_.k2_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestDemoType2, _impl_.k5_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestDemoType2, _impl_.k8_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestDemoType2, _impl_.k9_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestDemoType2, _impl_.k15_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,
    1,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::TestDemoType1, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestDemoType1, _impl_.x1_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::TestDemoDynamic, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::cfg::TestDemoDynamic, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::cfg::TestDemoDynamic, _impl_.value_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::TestDemoD2, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestDemoD2, _impl_.x1_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestDemoD2, _impl_.x2_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::TestDemoD3, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::cfg::TestDemoD3, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::cfg::TestDemoD3, _impl_.value_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::TestDemoE1, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestDemoE1, _impl_.x1_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestDemoE1, _impl_.x3_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestDemoE1, _impl_.x4_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::TestLoginRoleInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestLoginRoleInfo, _impl_.x1_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestLoginRoleInfo, _impl_.x3_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestLoginRoleInfo, _impl_.role_id_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestDemoD5, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestDemoD5, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestDemoD5, _impl_.x1_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestDemoD5, _impl_.time_),
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::TestDateTimeRange, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestDateTimeRange, _impl_.start_time_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestDateTimeRange, _impl_.end_time_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestDemoE2, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestDemoE2, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestDemoE2, _impl_.y1_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestDemoE2, _impl_.y2_),
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::cfg::TestDemoSingletonType, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestDemoSingletonType, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestDemoSingletonType, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestDemoSingletonType, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestDemoSingletonType, _impl_.date_),
    ~0u,
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::TestNotIndexList, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestNotIndexList, _impl_.x_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestNotIndexList, _impl_.y_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::TestMultiUnionIndexList, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestMultiUnionIndexList, _impl_.id1_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestMultiUnionIndexList, _impl_.id2_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestMultiUnionIndexList, _impl_.id3_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestMultiUnionIndexList, _impl_.num_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestMultiUnionIndexList, _impl_.desc_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::TestMultiIndexList, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestMultiIndexList, _impl_.id1_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestMultiIndexList, _impl_.id2_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestMultiIndexList, _impl_.id3_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestMultiIndexList, _impl_.num_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestMultiIndexList, _impl_.desc_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestMultiRowRecord_MultiRows4Entry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestMultiRowRecord_MultiRows4Entry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestMultiRowRecord_MultiRows4Entry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestMultiRowRecord_MultiRows4Entry_DoNotUse, value_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::cfg::TestMultiRowRecord_MultiRows6Entry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestMultiRowRecord_MultiRows6Entry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestMultiRowRecord_MultiRows6Entry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestMultiRowRecord_MultiRows6Entry_DoNotUse, value_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::cfg::TestMultiRowRecord_MultiRows7Entry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestMultiRowRecord_MultiRows7Entry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestMultiRowRecord_MultiRows7Entry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestMultiRowRecord_MultiRows7Entry_DoNotUse, value_),
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::TestMultiRowRecord, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestMultiRowRecord, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestMultiRowRecord, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestMultiRowRecord, _impl_.one_rows_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestMultiRowRecord, _impl_.multi_rows1_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestMultiRowRecord, _impl_.multi_rows2_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestMultiRowRecord, _impl_.multi_rows4_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestMultiRowRecord, _impl_.multi_rows5_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestMultiRowRecord, _impl_.multi_rows6_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestMultiRowRecord, _impl_.multi_rows7_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::TestMultiRowType1, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestMultiRowType1, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestMultiRowType1, _impl_.x_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::TestMultiRowType2, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestMultiRowType2, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestMultiRowType2, _impl_.x_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestMultiRowType2, _impl_.y_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::TestMultiRowType3, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestMultiRowType3, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestMultiRowType3, _impl_.items_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestMultiColumn, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestMultiColumn, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestMultiColumn, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestMultiColumn, _impl_.a_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestMultiColumn, _impl_.b_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestMultiColumn, _impl_.c_),
    ~0u,
    0,
    1,
    2,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::TestFoo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestFoo, _impl_.y1_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestFoo, _impl_.y2_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestFoo, _impl_.y3_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestMultiRowTitle, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestMultiRowTitle, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestMultiRowTitle, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestMultiRowTitle, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestMultiRowTitle, _impl_.x1_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestMultiRowTitle, _impl_.x2_0_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestMultiRowTitle, _impl_.x2_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestMultiRowTitle, _impl_.x3_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestMultiRowTitle, _impl_.x4_),
    ~0u,
    ~0u,
    0,
    1,
    ~0u,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::cfg::TestH1, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestH1, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestH1, _impl_.y2_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestH1, _impl_.y3_),
    0,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::TestH2, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestH2, _impl_.z2_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestH2, _impl_.z3_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestNull, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestNull, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestNull, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestNull, _impl_.x1_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestNull, _impl_.x2_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestNull, _impl_.x3_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestNull, _impl_.x4_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestNull, _impl_.s1_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestNull, _impl_.s2_),
    ~0u,
    4,
    5,
    2,
    3,
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::cfg::TestDemoPrimitiveTypesTable, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestDemoPrimitiveTypesTable, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestDemoPrimitiveTypesTable, _impl_.x1_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestDemoPrimitiveTypesTable, _impl_.x2_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestDemoPrimitiveTypesTable, _impl_.x3_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestDemoPrimitiveTypesTable, _impl_.x4_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestDemoPrimitiveTypesTable, _impl_.x5_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestDemoPrimitiveTypesTable, _impl_.x6_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestDemoPrimitiveTypesTable, _impl_.x7_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestDemoPrimitiveTypesTable, _impl_.s1_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestDemoPrimitiveTypesTable, _impl_.s2_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestDemoPrimitiveTypesTable, _impl_.v2_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestDemoPrimitiveTypesTable, _impl_.v3_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestDemoPrimitiveTypesTable, _impl_.v4_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestDemoPrimitiveTypesTable, _impl_.t1_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    1,
    2,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::vec2, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::vec2, _impl_.x_),
    PROTOBUF_FIELD_OFFSET(::cfg::vec2, _impl_.y_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::vec3, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::vec3, _impl_.x_),
    PROTOBUF_FIELD_OFFSET(::cfg::vec3, _impl_.y_),
    PROTOBUF_FIELD_OFFSET(::cfg::vec3, _impl_.z_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::vec4, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::vec4, _impl_.x_),
    PROTOBUF_FIELD_OFFSET(::cfg::vec4, _impl_.y_),
    PROTOBUF_FIELD_OFFSET(::cfg::vec4, _impl_.z_),
    PROTOBUF_FIELD_OFFSET(::cfg::vec4, _impl_.w_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestString, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestString, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestString, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestString, _impl_.s1_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestString, _impl_.s2_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestString, _impl_.cs1_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestString, _impl_.cs2_),
    ~0u,
    ~0u,
    ~0u,
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::TestCompactString, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestCompactString, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestCompactString, _impl_.s2_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestCompactString, _impl_.s3_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestDemoGroup, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestDemoGroup, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestDemoGroup, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestDemoGroup, _impl_.x5_),
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::TestInnerGroup, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestInnerGroup, _impl_.y1_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestGlobal, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestGlobal, _impl_.unlock_equip_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestGlobal, _impl_.unlock_hero_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestBeRef, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestBeRef, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestBeRef, _impl_.count_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestRef_D1Entry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestRef_D1Entry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestRef_D1Entry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestRef_D1Entry_DoNotUse, value_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestRef_D2Entry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestRef_D2Entry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestRef_D2Entry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestRef_D2Entry_DoNotUse, value_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestRef, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestRef, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestRef, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestRef, _impl_.x1_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestRef, _impl_.x1_2_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestRef, _impl_.x2_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestRef, _impl_.x3_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestRef, _impl_.x4_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestRef, _impl_.a1_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestRef, _impl_.a2_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestRef, _impl_.b1_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestRef, _impl_.b2_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestRef, _impl_.c1_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestRef, _impl_.c2_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestRef, _impl_.d1_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestRef, _impl_.d2_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestRef, _impl_.e1_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestRef, _impl_.e2_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestRef, _impl_.e3_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestRef, _impl_.f1_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestRef, _impl_.f2_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestRef, _impl_.f3_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestRef, _impl_.s1_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::TestRefDynamicBase, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::cfg::TestRefDynamicBase, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::cfg::TestRefDynamicBase, _impl_.value_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::TestRefBean, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestRefBean, _impl_.x_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestRefBean, _impl_.arr_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestSize_X4Entry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestSize_X4Entry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestSize_X4Entry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestSize_X4Entry_DoNotUse, value_),
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestSize, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestSize, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestSize, _impl_.x1_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestSize, _impl_.x2_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestSize, _impl_.x3_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestSize, _impl_.x4_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestSet, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestSet, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestSet, _impl_.x0_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestSet, _impl_.x1_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestSet, _impl_.x2_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestSet, _impl_.x3_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestSet, _impl_.x4_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::TestDetectEncoding, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestDetectEncoding, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestDetectEncoding, _impl_.name_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::TestItemBase, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::cfg::TestItemBase, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::cfg::TestItemBase, _impl_.value_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::TestItem, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestItem, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestItem, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestItem, _impl_.desc_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestItem, _impl_.num_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestItem, _impl_.price_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::TestEquipment, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestEquipment, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestEquipment, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestEquipment, _impl_.desc_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestEquipment, _impl_.attr_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestEquipment, _impl_.value_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::TestDecorator, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestDecorator, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestDecorator, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestDecorator, _impl_.desc_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestDecorator, _impl_.duration_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestIndex, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestIndex, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestIndex, _impl_.eles_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestMap_X1Entry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestMap_X1Entry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestMap_X1Entry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestMap_X1Entry_DoNotUse, value_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestMap_X2Entry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestMap_X2Entry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestMap_X2Entry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestMap_X2Entry_DoNotUse, value_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestMap_X3Entry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestMap_X3Entry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestMap_X3Entry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestMap_X3Entry_DoNotUse, value_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestMap_X4Entry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestMap_X4Entry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestMap_X4Entry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestMap_X4Entry_DoNotUse, value_),
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestMap, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestMap, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestMap, _impl_.x1_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestMap, _impl_.x2_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestMap, _impl_.x3_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestMap, _impl_.x4_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestExcelFromJson_K8Entry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestExcelFromJson_K8Entry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestExcelFromJson_K8Entry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestExcelFromJson_K8Entry_DoNotUse, value_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::cfg::TestExcelFromJson, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestExcelFromJson, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestExcelFromJson, _impl_.x4_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestExcelFromJson, _impl_.x1_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestExcelFromJson, _impl_.x5_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestExcelFromJson, _impl_.x6_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestExcelFromJson, _impl_.s1_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestExcelFromJson, _impl_.s2_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestExcelFromJson, _impl_.t1_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestExcelFromJson, _impl_.x12_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestExcelFromJson, _impl_.x13_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestExcelFromJson, _impl_.x14_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestExcelFromJson, _impl_.k1_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestExcelFromJson, _impl_.k8_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestExcelFromJson, _impl_.k9_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestExcelFromJson, _impl_.k15_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,
    1,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::TestCompositeJsonTable1, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestCompositeJsonTable1, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestCompositeJsonTable1, _impl_.x_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::TestCompositeJsonTable2, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestCompositeJsonTable2, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestCompositeJsonTable2, _impl_.y_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::TestCompositeJsonTable3, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestCompositeJsonTable3, _impl_.a_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestCompositeJsonTable3, _impl_.b_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::TestExcelFromJsonMultiRow, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestExcelFromJsonMultiRow, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestExcelFromJsonMultiRow, _impl_.x_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestExcelFromJsonMultiRow, _impl_.items_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestRow, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestRow, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestRow, _impl_.x_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestRow, _impl_.y_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestRow, _impl_.z_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestRow, _impl_.a_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestRow, _impl_.b_),
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::TestTest3, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestTest3, _impl_.x_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTest3, _impl_.y_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestScriptableObject, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestScriptableObject, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestScriptableObject, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestScriptableObject, _impl_.desc_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestScriptableObject, _impl_.rate_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestScriptableObject, _impl_.num_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestScriptableObject, _impl_.v2_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestScriptableObject, _impl_.v3_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestScriptableObject, _impl_.v4_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestMapper, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestMapper, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestMapper, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestMapper, _impl_.audio_type_),
    PROTOBUF_FIELD_OFFSET(::cfg::TestTestMapper, _impl_.v2_),
    ~0u,
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::cfg::DefineFromExcel2_K8Entry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::cfg::DefineFromExcel2_K8Entry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::DefineFromExcel2_K8Entry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::cfg::DefineFromExcel2_K8Entry_DoNotUse, value_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::cfg::DefineFromExcel2, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cfg::DefineFromExcel2, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::DefineFromExcel2, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::cfg::DefineFromExcel2, _impl_.x1_),
    PROTOBUF_FIELD_OFFSET(::cfg::DefineFromExcel2, _impl_.x5_),
    PROTOBUF_FIELD_OFFSET(::cfg::DefineFromExcel2, _impl_.x6_),
    PROTOBUF_FIELD_OFFSET(::cfg::DefineFromExcel2, _impl_.x8_),
    PROTOBUF_FIELD_OFFSET(::cfg::DefineFromExcel2, _impl_.x10_),
    PROTOBUF_FIELD_OFFSET(::cfg::DefineFromExcel2, _impl_.x13_),
    PROTOBUF_FIELD_OFFSET(::cfg::DefineFromExcel2, _impl_.x13_2_),
    PROTOBUF_FIELD_OFFSET(::cfg::DefineFromExcel2, _impl_.x14_),
    PROTOBUF_FIELD_OFFSET(::cfg::DefineFromExcel2, _impl_.x15_),
    PROTOBUF_FIELD_OFFSET(::cfg::DefineFromExcel2, _impl_.v2_),
    PROTOBUF_FIELD_OFFSET(::cfg::DefineFromExcel2, _impl_.t1_),
    PROTOBUF_FIELD_OFFSET(::cfg::DefineFromExcel2, _impl_.k1_),
    PROTOBUF_FIELD_OFFSET(::cfg::DefineFromExcel2, _impl_.k2_),
    PROTOBUF_FIELD_OFFSET(::cfg::DefineFromExcel2, _impl_.k8_),
    PROTOBUF_FIELD_OFFSET(::cfg::DefineFromExcel2, _impl_.k9_),
    PROTOBUF_FIELD_OFFSET(::cfg::DefineFromExcel2, _impl_.k10_),
    PROTOBUF_FIELD_OFFSET(::cfg::DefineFromExcel2, _impl_.k11_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    1,
    2,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::TestShape, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::cfg::TestShape, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::cfg::TestShape, _impl_.value_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::TestCircle, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestCircle, _impl_.radius_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::Test2Rectangle, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::Test2Rectangle, _impl_.width_),
    PROTOBUF_FIELD_OFFSET(::cfg::Test2Rectangle, _impl_.height_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::AiTbBlackboard, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::AiTbBlackboard, _impl_.data_list_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::AiTbBehaviorTree, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::AiTbBehaviorTree, _impl_.data_list_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::CommonTbGlobalConfig, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::CommonTbGlobalConfig, _impl_.data_list_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::ItemTbItem, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::ItemTbItem, _impl_.data_list_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::L10nTbL10NDemo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::L10nTbL10NDemo, _impl_.data_list_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::L10nTbPatchDemo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::L10nTbPatchDemo, _impl_.data_list_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::TagTbTestTag, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TagTbTestTag, _impl_.data_list_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::TestTbFullTypes, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestTbFullTypes, _impl_.data_list_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::TestTbSingleton, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestTbSingleton, _impl_.data_list_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::TestTbNotIndexList, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestTbNotIndexList, _impl_.data_list_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::TestTbMultiUnionIndexList, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestTbMultiUnionIndexList, _impl_.data_list_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::TestTbMultiIndexList, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestTbMultiIndexList, _impl_.data_list_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::TestTbDataFromMisc, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestTbDataFromMisc, _impl_.data_list_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::TestTbMultiRowRecord, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestTbMultiRowRecord, _impl_.data_list_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::TestTbTestMultiColumn, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestTbTestMultiColumn, _impl_.data_list_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::TestTbMultiRowTitle, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestTbMultiRowTitle, _impl_.data_list_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::TestTbTestNull, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestTbTestNull, _impl_.data_list_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::TestTbDemoPrimitive, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestTbDemoPrimitive, _impl_.data_list_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::TestTbTestString, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestTbTestString, _impl_.data_list_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::TestTbDemoGroup, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestTbDemoGroup, _impl_.data_list_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::TestTbTestGlobal, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestTbTestGlobal, _impl_.data_list_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::TestTbTestBeRef, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestTbTestBeRef, _impl_.data_list_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::TestTbTestBeRef2, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestTbTestBeRef2, _impl_.data_list_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::TestTbTestRef, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestTbTestRef, _impl_.data_list_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::TestTbTestSize, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestTbTestSize, _impl_.data_list_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::TestTbTestSet, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestTbTestSet, _impl_.data_list_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::TestTbDetectCsvEncoding, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestTbDetectCsvEncoding, _impl_.data_list_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::TestTbItem2, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestTbItem2, _impl_.data_list_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::TestTbTestIndex, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestTbTestIndex, _impl_.data_list_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::TestTbTestMap, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestTbTestMap, _impl_.data_list_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::TestTbExcelFromJson, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestTbExcelFromJson, _impl_.data_list_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::TestTbCompositeJsonTable1, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestTbCompositeJsonTable1, _impl_.data_list_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::TestTbCompositeJsonTable2, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestTbCompositeJsonTable2, _impl_.data_list_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::TestTbCompositeJsonTable3, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestTbCompositeJsonTable3, _impl_.data_list_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::TestTbExcelFromJsonMultiRow, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestTbExcelFromJsonMultiRow, _impl_.data_list_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::TestTbTestScriptableObject, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestTbTestScriptableObject, _impl_.data_list_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::TestTbTestMapper, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestTbTestMapper, _impl_.data_list_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cfg::TestTbDefineFromExcel2, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cfg::TestTbDefineFromExcel2, _impl_.data_list_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::cfg::AiBlackboard)},
        {12, -1, -1, sizeof(::cfg::AiBlackboardKey)},
        {25, 38, -1, sizeof(::cfg::AiBehaviorTree)},
        {43, -1, -1, sizeof(::cfg::AiNode)},
        {75, -1, -1, sizeof(::cfg::AiService)},
        {90, -1, -1, sizeof(::cfg::AiUeSetDefaultFocus)},
        {101, -1, -1, sizeof(::cfg::AiExecuteTimeStatistic)},
        {111, -1, -1, sizeof(::cfg::AiChooseTarget)},
        {122, -1, -1, sizeof(::cfg::AiKeepFaceTarget)},
        {133, -1, -1, sizeof(::cfg::AiGetOwnerPlayer)},
        {144, -1, -1, sizeof(::cfg::AiUpdateDailyBehaviorProps)},
        {163, -1, -1, sizeof(::cfg::AiDecorator)},
        {179, -1, -1, sizeof(::cfg::AiUeLoop)},
        {193, -1, -1, sizeof(::cfg::AiUeCooldown)},
        {205, -1, -1, sizeof(::cfg::AiUeTimeLimit)},
        {217, 231, -1, sizeof(::cfg::AiUeBlackboard)},
        {237, -1, -1, sizeof(::cfg::AiKeyQueryOperator)},
        {249, -1, -1, sizeof(::cfg::AiIsSet)},
        {257, -1, -1, sizeof(::cfg::AiIsNotSet)},
        {265, 275, -1, sizeof(::cfg::AiBinaryOperator)},
        {277, -1, -1, sizeof(::cfg::AiKeyData)},
        {290, -1, -1, sizeof(::cfg::AiFloatKeyData)},
        {299, -1, -1, sizeof(::cfg::AiIntKeyData)},
        {308, -1, -1, sizeof(::cfg::AiStringKeyData)},
        {317, -1, -1, sizeof(::cfg::AiBlackboardKeyData)},
        {326, -1, -1, sizeof(::cfg::AiUeForceSuccess)},
        {337, -1, -1, sizeof(::cfg::AiIsAtLocation)},
        {351, -1, -1, sizeof(::cfg::AiDistanceLessThan)},
        {366, -1, -1, sizeof(::cfg::AiFlowNode)},
        {385, -1, -1, sizeof(::cfg::AiComposeNode)},
        {397, -1, -1, sizeof(::cfg::AiSequence)},
        {410, -1, -1, sizeof(::cfg::AiSelector)},
        {423, 438, -1, sizeof(::cfg::AiSimpleParallel)},
        {445, -1, -1, sizeof(::cfg::AiTask)},
        {461, -1, -1, sizeof(::cfg::AiUeWait)},
        {476, -1, -1, sizeof(::cfg::AiUeWaitBlackboardTime)},
        {490, -1, -1, sizeof(::cfg::AiMoveToTarget)},
        {505, -1, -1, sizeof(::cfg::AiChooseSkill)},
        {520, -1, -1, sizeof(::cfg::AiMoveToRandomLocation)},
        {535, -1, -1, sizeof(::cfg::AiMoveToLocation)},
        {549, -1, -1, sizeof(::cfg::AiDebugPrint)},
        {563, -1, -1, sizeof(::cfg::CommonGlobalConfig)},
        {578, -1, -1, sizeof(::cfg::ItemItem)},
        {594, -1, -1, sizeof(::cfg::L10nL10NDemo)},
        {604, -1, -1, sizeof(::cfg::L10nPatchDemo)},
        {614, -1, -1, sizeof(::cfg::TagTestTag)},
        {624, 634, -1, sizeof(::cfg::TestDemoType2_K8Entry_DoNotUse)},
        {636, 666, -1, sizeof(::cfg::TestDemoType2)},
        {688, -1, -1, sizeof(::cfg::TestDemoType1)},
        {697, -1, -1, sizeof(::cfg::TestDemoDynamic)},
        {710, -1, -1, sizeof(::cfg::TestDemoD2)},
        {720, -1, -1, sizeof(::cfg::TestDemoD3)},
        {731, -1, -1, sizeof(::cfg::TestDemoE1)},
        {742, -1, -1, sizeof(::cfg::TestLoginRoleInfo)},
        {753, 763, -1, sizeof(::cfg::TestDemoD5)},
        {765, -1, -1, sizeof(::cfg::TestDateTimeRange)},
        {775, 785, -1, sizeof(::cfg::TestDemoE2)},
        {787, 798, -1, sizeof(::cfg::TestDemoSingletonType)},
        {801, -1, -1, sizeof(::cfg::TestNotIndexList)},
        {811, -1, -1, sizeof(::cfg::TestMultiUnionIndexList)},
        {824, -1, -1, sizeof(::cfg::TestMultiIndexList)},
        {837, 847, -1, sizeof(::cfg::TestMultiRowRecord_MultiRows4Entry_DoNotUse)},
        {849, 859, -1, sizeof(::cfg::TestMultiRowRecord_MultiRows6Entry_DoNotUse)},
        {861, 871, -1, sizeof(::cfg::TestMultiRowRecord_MultiRows7Entry_DoNotUse)},
        {873, -1, -1, sizeof(::cfg::TestMultiRowRecord)},
        {890, -1, -1, sizeof(::cfg::TestMultiRowType1)},
        {900, -1, -1, sizeof(::cfg::TestMultiRowType2)},
        {911, -1, -1, sizeof(::cfg::TestMultiRowType3)},
        {921, 933, -1, sizeof(::cfg::TestTestMultiColumn)},
        {937, -1, -1, sizeof(::cfg::TestFoo)},
        {948, 963, -1, sizeof(::cfg::TestMultiRowTitle)},
        {970, 980, -1, sizeof(::cfg::TestH1)},
        {982, -1, -1, sizeof(::cfg::TestH2)},
        {992, 1007, -1, sizeof(::cfg::TestTestNull)},
        {1014, 1035, -1, sizeof(::cfg::TestDemoPrimitiveTypesTable)},
        {1048, -1, -1, sizeof(::cfg::vec2)},
        {1058, -1, -1, sizeof(::cfg::vec3)},
        {1069, -1, -1, sizeof(::cfg::vec4)},
        {1081, 1094, -1, sizeof(::cfg::TestTestString)},
        {1099, -1, -1, sizeof(::cfg::TestCompactString)},
        {1110, 1120, -1, sizeof(::cfg::TestDemoGroup)},
        {1122, -1, -1, sizeof(::cfg::TestInnerGroup)},
        {1131, -1, -1, sizeof(::cfg::TestTestGlobal)},
        {1141, -1, -1, sizeof(::cfg::TestTestBeRef)},
        {1151, 1161, -1, sizeof(::cfg::TestTestRef_D1Entry_DoNotUse)},
        {1163, 1173, -1, sizeof(::cfg::TestTestRef_D2Entry_DoNotUse)},
        {1175, 1204, -1, sizeof(::cfg::TestTestRef)},
        {1225, -1, -1, sizeof(::cfg::TestRefDynamicBase)},
        {1235, -1, -1, sizeof(::cfg::TestRefBean)},
        {1245, 1255, -1, sizeof(::cfg::TestTestSize_X4Entry_DoNotUse)},
        {1257, -1, -1, sizeof(::cfg::TestTestSize)},
        {1270, -1, -1, sizeof(::cfg::TestTestSet)},
        {1284, -1, -1, sizeof(::cfg::TestDetectEncoding)},
        {1294, -1, -1, sizeof(::cfg::TestItemBase)},
        {1306, -1, -1, sizeof(::cfg::TestItem)},
        {1319, -1, -1, sizeof(::cfg::TestEquipment)},
        {1332, -1, -1, sizeof(::cfg::TestDecorator)},
        {1344, -1, -1, sizeof(::cfg::TestTestIndex)},
        {1354, 1364, -1, sizeof(::cfg::TestTestMap_X1Entry_DoNotUse)},
        {1366, 1376, -1, sizeof(::cfg::TestTestMap_X2Entry_DoNotUse)},
        {1378, 1388, -1, sizeof(::cfg::TestTestMap_X3Entry_DoNotUse)},
        {1390, 1400, -1, sizeof(::cfg::TestTestMap_X4Entry_DoNotUse)},
        {1402, -1, -1, sizeof(::cfg::TestTestMap)},
        {1415, 1425, -1, sizeof(::cfg::TestExcelFromJson_K8Entry_DoNotUse)},
        {1427, 1449, -1, sizeof(::cfg::TestExcelFromJson)},
        {1463, -1, -1, sizeof(::cfg::TestCompositeJsonTable1)},
        {1473, -1, -1, sizeof(::cfg::TestCompositeJsonTable2)},
        {1483, -1, -1, sizeof(::cfg::TestCompositeJsonTable3)},
        {1493, -1, -1, sizeof(::cfg::TestExcelFromJsonMultiRow)},
        {1504, 1517, -1, sizeof(::cfg::TestTestRow)},
        {1522, -1, -1, sizeof(::cfg::TestTest3)},
        {1532, 1547, -1, sizeof(::cfg::TestTestScriptableObject)},
        {1554, 1565, -1, sizeof(::cfg::TestTestMapper)},
        {1568, 1578, -1, sizeof(::cfg::DefineFromExcel2_K8Entry_DoNotUse)},
        {1580, 1606, -1, sizeof(::cfg::DefineFromExcel2)},
        {1624, -1, -1, sizeof(::cfg::TestShape)},
        {1635, -1, -1, sizeof(::cfg::TestCircle)},
        {1644, -1, -1, sizeof(::cfg::Test2Rectangle)},
        {1654, -1, -1, sizeof(::cfg::AiTbBlackboard)},
        {1663, -1, -1, sizeof(::cfg::AiTbBehaviorTree)},
        {1672, -1, -1, sizeof(::cfg::CommonTbGlobalConfig)},
        {1681, -1, -1, sizeof(::cfg::ItemTbItem)},
        {1690, -1, -1, sizeof(::cfg::L10nTbL10NDemo)},
        {1699, -1, -1, sizeof(::cfg::L10nTbPatchDemo)},
        {1708, -1, -1, sizeof(::cfg::TagTbTestTag)},
        {1717, -1, -1, sizeof(::cfg::TestTbFullTypes)},
        {1726, -1, -1, sizeof(::cfg::TestTbSingleton)},
        {1735, -1, -1, sizeof(::cfg::TestTbNotIndexList)},
        {1744, -1, -1, sizeof(::cfg::TestTbMultiUnionIndexList)},
        {1753, -1, -1, sizeof(::cfg::TestTbMultiIndexList)},
        {1762, -1, -1, sizeof(::cfg::TestTbDataFromMisc)},
        {1771, -1, -1, sizeof(::cfg::TestTbMultiRowRecord)},
        {1780, -1, -1, sizeof(::cfg::TestTbTestMultiColumn)},
        {1789, -1, -1, sizeof(::cfg::TestTbMultiRowTitle)},
        {1798, -1, -1, sizeof(::cfg::TestTbTestNull)},
        {1807, -1, -1, sizeof(::cfg::TestTbDemoPrimitive)},
        {1816, -1, -1, sizeof(::cfg::TestTbTestString)},
        {1825, -1, -1, sizeof(::cfg::TestTbDemoGroup)},
        {1834, -1, -1, sizeof(::cfg::TestTbTestGlobal)},
        {1843, -1, -1, sizeof(::cfg::TestTbTestBeRef)},
        {1852, -1, -1, sizeof(::cfg::TestTbTestBeRef2)},
        {1861, -1, -1, sizeof(::cfg::TestTbTestRef)},
        {1870, -1, -1, sizeof(::cfg::TestTbTestSize)},
        {1879, -1, -1, sizeof(::cfg::TestTbTestSet)},
        {1888, -1, -1, sizeof(::cfg::TestTbDetectCsvEncoding)},
        {1897, -1, -1, sizeof(::cfg::TestTbItem2)},
        {1906, -1, -1, sizeof(::cfg::TestTbTestIndex)},
        {1915, -1, -1, sizeof(::cfg::TestTbTestMap)},
        {1924, -1, -1, sizeof(::cfg::TestTbExcelFromJson)},
        {1933, -1, -1, sizeof(::cfg::TestTbCompositeJsonTable1)},
        {1942, -1, -1, sizeof(::cfg::TestTbCompositeJsonTable2)},
        {1951, -1, -1, sizeof(::cfg::TestTbCompositeJsonTable3)},
        {1960, -1, -1, sizeof(::cfg::TestTbExcelFromJsonMultiRow)},
        {1969, -1, -1, sizeof(::cfg::TestTbTestScriptableObject)},
        {1978, -1, -1, sizeof(::cfg::TestTbTestMapper)},
        {1987, -1, -1, sizeof(::cfg::TestTbDefineFromExcel2)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::cfg::_AiBlackboard_default_instance_._instance,
    &::cfg::_AiBlackboardKey_default_instance_._instance,
    &::cfg::_AiBehaviorTree_default_instance_._instance,
    &::cfg::_AiNode_default_instance_._instance,
    &::cfg::_AiService_default_instance_._instance,
    &::cfg::_AiUeSetDefaultFocus_default_instance_._instance,
    &::cfg::_AiExecuteTimeStatistic_default_instance_._instance,
    &::cfg::_AiChooseTarget_default_instance_._instance,
    &::cfg::_AiKeepFaceTarget_default_instance_._instance,
    &::cfg::_AiGetOwnerPlayer_default_instance_._instance,
    &::cfg::_AiUpdateDailyBehaviorProps_default_instance_._instance,
    &::cfg::_AiDecorator_default_instance_._instance,
    &::cfg::_AiUeLoop_default_instance_._instance,
    &::cfg::_AiUeCooldown_default_instance_._instance,
    &::cfg::_AiUeTimeLimit_default_instance_._instance,
    &::cfg::_AiUeBlackboard_default_instance_._instance,
    &::cfg::_AiKeyQueryOperator_default_instance_._instance,
    &::cfg::_AiIsSet_default_instance_._instance,
    &::cfg::_AiIsNotSet_default_instance_._instance,
    &::cfg::_AiBinaryOperator_default_instance_._instance,
    &::cfg::_AiKeyData_default_instance_._instance,
    &::cfg::_AiFloatKeyData_default_instance_._instance,
    &::cfg::_AiIntKeyData_default_instance_._instance,
    &::cfg::_AiStringKeyData_default_instance_._instance,
    &::cfg::_AiBlackboardKeyData_default_instance_._instance,
    &::cfg::_AiUeForceSuccess_default_instance_._instance,
    &::cfg::_AiIsAtLocation_default_instance_._instance,
    &::cfg::_AiDistanceLessThan_default_instance_._instance,
    &::cfg::_AiFlowNode_default_instance_._instance,
    &::cfg::_AiComposeNode_default_instance_._instance,
    &::cfg::_AiSequence_default_instance_._instance,
    &::cfg::_AiSelector_default_instance_._instance,
    &::cfg::_AiSimpleParallel_default_instance_._instance,
    &::cfg::_AiTask_default_instance_._instance,
    &::cfg::_AiUeWait_default_instance_._instance,
    &::cfg::_AiUeWaitBlackboardTime_default_instance_._instance,
    &::cfg::_AiMoveToTarget_default_instance_._instance,
    &::cfg::_AiChooseSkill_default_instance_._instance,
    &::cfg::_AiMoveToRandomLocation_default_instance_._instance,
    &::cfg::_AiMoveToLocation_default_instance_._instance,
    &::cfg::_AiDebugPrint_default_instance_._instance,
    &::cfg::_CommonGlobalConfig_default_instance_._instance,
    &::cfg::_ItemItem_default_instance_._instance,
    &::cfg::_L10nL10NDemo_default_instance_._instance,
    &::cfg::_L10nPatchDemo_default_instance_._instance,
    &::cfg::_TagTestTag_default_instance_._instance,
    &::cfg::_TestDemoType2_K8Entry_DoNotUse_default_instance_._instance,
    &::cfg::_TestDemoType2_default_instance_._instance,
    &::cfg::_TestDemoType1_default_instance_._instance,
    &::cfg::_TestDemoDynamic_default_instance_._instance,
    &::cfg::_TestDemoD2_default_instance_._instance,
    &::cfg::_TestDemoD3_default_instance_._instance,
    &::cfg::_TestDemoE1_default_instance_._instance,
    &::cfg::_TestLoginRoleInfo_default_instance_._instance,
    &::cfg::_TestDemoD5_default_instance_._instance,
    &::cfg::_TestDateTimeRange_default_instance_._instance,
    &::cfg::_TestDemoE2_default_instance_._instance,
    &::cfg::_TestDemoSingletonType_default_instance_._instance,
    &::cfg::_TestNotIndexList_default_instance_._instance,
    &::cfg::_TestMultiUnionIndexList_default_instance_._instance,
    &::cfg::_TestMultiIndexList_default_instance_._instance,
    &::cfg::_TestMultiRowRecord_MultiRows4Entry_DoNotUse_default_instance_._instance,
    &::cfg::_TestMultiRowRecord_MultiRows6Entry_DoNotUse_default_instance_._instance,
    &::cfg::_TestMultiRowRecord_MultiRows7Entry_DoNotUse_default_instance_._instance,
    &::cfg::_TestMultiRowRecord_default_instance_._instance,
    &::cfg::_TestMultiRowType1_default_instance_._instance,
    &::cfg::_TestMultiRowType2_default_instance_._instance,
    &::cfg::_TestMultiRowType3_default_instance_._instance,
    &::cfg::_TestTestMultiColumn_default_instance_._instance,
    &::cfg::_TestFoo_default_instance_._instance,
    &::cfg::_TestMultiRowTitle_default_instance_._instance,
    &::cfg::_TestH1_default_instance_._instance,
    &::cfg::_TestH2_default_instance_._instance,
    &::cfg::_TestTestNull_default_instance_._instance,
    &::cfg::_TestDemoPrimitiveTypesTable_default_instance_._instance,
    &::cfg::_vec2_default_instance_._instance,
    &::cfg::_vec3_default_instance_._instance,
    &::cfg::_vec4_default_instance_._instance,
    &::cfg::_TestTestString_default_instance_._instance,
    &::cfg::_TestCompactString_default_instance_._instance,
    &::cfg::_TestDemoGroup_default_instance_._instance,
    &::cfg::_TestInnerGroup_default_instance_._instance,
    &::cfg::_TestTestGlobal_default_instance_._instance,
    &::cfg::_TestTestBeRef_default_instance_._instance,
    &::cfg::_TestTestRef_D1Entry_DoNotUse_default_instance_._instance,
    &::cfg::_TestTestRef_D2Entry_DoNotUse_default_instance_._instance,
    &::cfg::_TestTestRef_default_instance_._instance,
    &::cfg::_TestRefDynamicBase_default_instance_._instance,
    &::cfg::_TestRefBean_default_instance_._instance,
    &::cfg::_TestTestSize_X4Entry_DoNotUse_default_instance_._instance,
    &::cfg::_TestTestSize_default_instance_._instance,
    &::cfg::_TestTestSet_default_instance_._instance,
    &::cfg::_TestDetectEncoding_default_instance_._instance,
    &::cfg::_TestItemBase_default_instance_._instance,
    &::cfg::_TestItem_default_instance_._instance,
    &::cfg::_TestEquipment_default_instance_._instance,
    &::cfg::_TestDecorator_default_instance_._instance,
    &::cfg::_TestTestIndex_default_instance_._instance,
    &::cfg::_TestTestMap_X1Entry_DoNotUse_default_instance_._instance,
    &::cfg::_TestTestMap_X2Entry_DoNotUse_default_instance_._instance,
    &::cfg::_TestTestMap_X3Entry_DoNotUse_default_instance_._instance,
    &::cfg::_TestTestMap_X4Entry_DoNotUse_default_instance_._instance,
    &::cfg::_TestTestMap_default_instance_._instance,
    &::cfg::_TestExcelFromJson_K8Entry_DoNotUse_default_instance_._instance,
    &::cfg::_TestExcelFromJson_default_instance_._instance,
    &::cfg::_TestCompositeJsonTable1_default_instance_._instance,
    &::cfg::_TestCompositeJsonTable2_default_instance_._instance,
    &::cfg::_TestCompositeJsonTable3_default_instance_._instance,
    &::cfg::_TestExcelFromJsonMultiRow_default_instance_._instance,
    &::cfg::_TestTestRow_default_instance_._instance,
    &::cfg::_TestTest3_default_instance_._instance,
    &::cfg::_TestTestScriptableObject_default_instance_._instance,
    &::cfg::_TestTestMapper_default_instance_._instance,
    &::cfg::_DefineFromExcel2_K8Entry_DoNotUse_default_instance_._instance,
    &::cfg::_DefineFromExcel2_default_instance_._instance,
    &::cfg::_TestShape_default_instance_._instance,
    &::cfg::_TestCircle_default_instance_._instance,
    &::cfg::_Test2Rectangle_default_instance_._instance,
    &::cfg::_AiTbBlackboard_default_instance_._instance,
    &::cfg::_AiTbBehaviorTree_default_instance_._instance,
    &::cfg::_CommonTbGlobalConfig_default_instance_._instance,
    &::cfg::_ItemTbItem_default_instance_._instance,
    &::cfg::_L10nTbL10NDemo_default_instance_._instance,
    &::cfg::_L10nTbPatchDemo_default_instance_._instance,
    &::cfg::_TagTbTestTag_default_instance_._instance,
    &::cfg::_TestTbFullTypes_default_instance_._instance,
    &::cfg::_TestTbSingleton_default_instance_._instance,
    &::cfg::_TestTbNotIndexList_default_instance_._instance,
    &::cfg::_TestTbMultiUnionIndexList_default_instance_._instance,
    &::cfg::_TestTbMultiIndexList_default_instance_._instance,
    &::cfg::_TestTbDataFromMisc_default_instance_._instance,
    &::cfg::_TestTbMultiRowRecord_default_instance_._instance,
    &::cfg::_TestTbTestMultiColumn_default_instance_._instance,
    &::cfg::_TestTbMultiRowTitle_default_instance_._instance,
    &::cfg::_TestTbTestNull_default_instance_._instance,
    &::cfg::_TestTbDemoPrimitive_default_instance_._instance,
    &::cfg::_TestTbTestString_default_instance_._instance,
    &::cfg::_TestTbDemoGroup_default_instance_._instance,
    &::cfg::_TestTbTestGlobal_default_instance_._instance,
    &::cfg::_TestTbTestBeRef_default_instance_._instance,
    &::cfg::_TestTbTestBeRef2_default_instance_._instance,
    &::cfg::_TestTbTestRef_default_instance_._instance,
    &::cfg::_TestTbTestSize_default_instance_._instance,
    &::cfg::_TestTbTestSet_default_instance_._instance,
    &::cfg::_TestTbDetectCsvEncoding_default_instance_._instance,
    &::cfg::_TestTbItem2_default_instance_._instance,
    &::cfg::_TestTbTestIndex_default_instance_._instance,
    &::cfg::_TestTbTestMap_default_instance_._instance,
    &::cfg::_TestTbExcelFromJson_default_instance_._instance,
    &::cfg::_TestTbCompositeJsonTable1_default_instance_._instance,
    &::cfg::_TestTbCompositeJsonTable2_default_instance_._instance,
    &::cfg::_TestTbCompositeJsonTable3_default_instance_._instance,
    &::cfg::_TestTbExcelFromJsonMultiRow_default_instance_._instance,
    &::cfg::_TestTbTestScriptableObject_default_instance_._instance,
    &::cfg::_TestTbTestMapper_default_instance_._instance,
    &::cfg::_TestTbDefineFromExcel2_default_instance_._instance,
};
const char descriptor_table_protodef_schema_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\014schema.proto\022\003cfg\"g\n\014AiBlackboard\022\014\n\004n"
    "ame\030\001 \001(\t\022\014\n\004desc\030\002 \001(\t\022\023\n\013parent_name\030\003"
    " \001(\t\022&\n\004keys\030\004 \003(\0132\024.cfg.AiBlackboardKey"
    "B\002\020\000\"x\n\017AiBlackboardKey\022\014\n\004name\030\001 \001(\t\022\014\n"
    "\004desc\030\002 \001(\t\022\021\n\tis_static\030\003 \001(\010\022\035\n\004type\030\004"
    " \001(\0162\017.cfg.AiEKeyType\022\027\n\017type_class_name"
    "\030\005 \001(\t\"q\n\016AiBehaviorTree\022\n\n\002id\030\001 \001(\005\022\014\n\004"
    "name\030\002 \001(\t\022\014\n\004desc\030\003 \001(\t\022\025\n\rblackboard_i"
    "d\030\004 \001(\t\022 \n\004root\030\005 \001(\0132\022.cfg.AiComposeNod"
    "e\"\326\010\n\006AiNode\0225\n\021UeSetDefaultFocus\030\001 \001(\0132"
    "\030.cfg.AiUeSetDefaultFocusH\000\022;\n\024ExecuteTi"
    "meStatistic\030\002 \001(\0132\033.cfg.AiExecuteTimeSta"
    "tisticH\000\022+\n\014ChooseTarget\030\003 \001(\0132\023.cfg.AiC"
    "hooseTargetH\000\022/\n\016KeepFaceTarget\030\004 \001(\0132\025."
    "cfg.AiKeepFaceTargetH\000\022/\n\016GetOwnerPlayer"
    "\030\005 \001(\0132\025.cfg.AiGetOwnerPlayerH\000\022C\n\030Updat"
    "eDailyBehaviorProps\030\006 \001(\0132\037.cfg.AiUpdate"
    "DailyBehaviorPropsH\000\022\037\n\006UeLoop\030\007 \001(\0132\r.c"
    "fg.AiUeLoopH\000\022\'\n\nUeCooldown\030\010 \001(\0132\021.cfg."
    "AiUeCooldownH\000\022)\n\013UeTimeLimit\030\t \001(\0132\022.cf"
    "g.AiUeTimeLimitH\000\022+\n\014UeBlackboard\030\n \001(\0132"
    "\023.cfg.AiUeBlackboardH\000\022/\n\016UeForceSuccess"
    "\030\013 \001(\0132\025.cfg.AiUeForceSuccessH\000\022+\n\014IsAtL"
    "ocation\030\014 \001(\0132\023.cfg.AiIsAtLocationH\000\0223\n\020"
    "DistanceLessThan\030\r \001(\0132\027.cfg.AiDistanceL"
    "essThanH\000\022#\n\010Sequence\030\016 \001(\0132\017.cfg.AiSequ"
    "enceH\000\022#\n\010Selector\030\017 \001(\0132\017.cfg.AiSelecto"
    "rH\000\022/\n\016SimpleParallel\030\020 \001(\0132\025.cfg.AiSimp"
    "leParallelH\000\022\037\n\006UeWait\030\021 \001(\0132\r.cfg.AiUeW"
    "aitH\000\022;\n\024UeWaitBlackboardTime\030\022 \001(\0132\033.cf"
    "g.AiUeWaitBlackboardTimeH\000\022+\n\014MoveToTarg"
    "et\030\023 \001(\0132\023.cfg.AiMoveToTargetH\000\022)\n\013Choos"
    "eSkill\030\024 \001(\0132\022.cfg.AiChooseSkillH\000\022;\n\024Mo"
    "veToRandomLocation\030\025 \001(\0132\033.cfg.AiMoveToR"
    "andomLocationH\000\022/\n\016MoveToLocation\030\026 \001(\0132"
    "\025.cfg.AiMoveToLocationH\000\022\'\n\nDebugPrint\030\027"
    " \001(\0132\021.cfg.AiDebugPrintH\000B\007\n\005value\"\334\002\n\tA"
    "iService\0225\n\021UeSetDefaultFocus\030\001 \001(\0132\030.cf"
    "g.AiUeSetDefaultFocusH\000\022;\n\024ExecuteTimeSt"
    "atistic\030\002 \001(\0132\033.cfg.AiExecuteTimeStatist"
    "icH\000\022+\n\014ChooseTarget\030\003 \001(\0132\023.cfg.AiChoos"
    "eTargetH\000\022/\n\016KeepFaceTarget\030\004 \001(\0132\025.cfg."
    "AiKeepFaceTargetH\000\022/\n\016GetOwnerPlayer\030\005 \001"
    "(\0132\025.cfg.AiGetOwnerPlayerH\000\022C\n\030UpdateDai"
    "lyBehaviorProps\030\006 \001(\0132\037.cfg.AiUpdateDail"
    "yBehaviorPropsH\000B\007\n\005value\"J\n\023AiUeSetDefa"
    "ultFocus\022\n\n\002id\030\001 \001(\005\022\021\n\tnode_name\030\002 \001(\t\022"
    "\024\n\014keyboard_key\030\003 \001(\t\"7\n\026AiExecuteTimeSt"
    "atistic\022\n\n\002id\030\001 \001(\005\022\021\n\tnode_name\030\002 \001(\t\"J"
    "\n\016AiChooseTarget\022\n\n\002id\030\001 \001(\005\022\021\n\tnode_nam"
    "e\030\002 \001(\t\022\031\n\021result_target_key\030\003 \001(\t\"K\n\020Ai"
    "KeepFaceTarget\022\n\n\002id\030\001 \001(\005\022\021\n\tnode_name\030"
    "\002 \001(\t\022\030\n\020target_actor_key\030\003 \001(\t\"K\n\020AiGet"
    "OwnerPlayer\022\n\n\002id\030\001 \001(\005\022\021\n\tnode_name\030\002 \001"
    "(\t\022\030\n\020player_actor_key\030\003 \001(\t\"\314\002\n\032AiUpdat"
    "eDailyBehaviorProps\022\n\n\002id\030\001 \001(\005\022\021\n\tnode_"
    "name\030\002 \001(\t\022\023\n\013satiety_key\030\003 \001(\t\022\022\n\nenerg"
    "y_key\030\004 \001(\t\022\020\n\010mood_key\030\005 \001(\t\022#\n\033satiety"
    "_lower_threshold_key\030\006 \001(\t\022#\n\033satiety_up"
    "per_threshold_key\030\007 \001(\t\022\"\n\032energy_lower_"
    "threshold_key\030\010 \001(\t\022\"\n\032energy_upper_thre"
    "shold_key\030\t \001(\t\022 \n\030mood_lower_threshold_"
    "key\030\n \001(\t\022 \n\030mood_upper_threshold_key\030\013 "
    "\001(\t\"\313\002\n\013AiDecorator\022\037\n\006UeLoop\030\007 \001(\0132\r.cf"
    "g.AiUeLoopH\000\022\'\n\nUeCooldown\030\010 \001(\0132\021.cfg.A"
    "iUeCooldownH\000\022)\n\013UeTimeLimit\030\t \001(\0132\022.cfg"
    ".AiUeTimeLimitH\000\022+\n\014UeBlackboard\030\n \001(\0132\023"
    ".cfg.AiUeBlackboardH\000\022/\n\016UeForceSuccess\030"
    "\013 \001(\0132\025.cfg.AiUeForceSuccessH\000\022+\n\014IsAtLo"
    "cation\030\014 \001(\0132\023.cfg.AiIsAtLocationH\000\0223\n\020D"
    "istanceLessThan\030\r \001(\0132\027.cfg.AiDistanceLe"
    "ssThanH\000B\007\n\005value\"\247\001\n\010AiUeLoop\022\n\n\002id\030\001 \001"
    "(\005\022\021\n\tnode_name\030\002 \001(\t\022.\n\017flow_abort_mode"
    "\030\003 \001(\0162\025.cfg.AiEFlowAbortMode\022\021\n\tnum_loo"
    "ps\030\004 \001(\005\022\025\n\rinfinite_loop\030\005 \001(\010\022\"\n\032infin"
    "ite_loop_timeout_time\030\006 \001(\002\"t\n\014AiUeCoold"
    "own\022\n\n\002id\030\001 \001(\005\022\021\n\tnode_name\030\002 \001(\t\022.\n\017fl"
    "ow_abort_mode\030\003 \001(\0162\025.cfg.AiEFlowAbortMo"
    "de\022\025\n\rcooldown_time\030\004 \001(\002\"r\n\rAiUeTimeLim"
    "it\022\n\n\002id\030\001 \001(\005\022\021\n\tnode_name\030\002 \001(\t\022.\n\017flo"
    "w_abort_mode\030\003 \001(\0162\025.cfg.AiEFlowAbortMod"
    "e\022\022\n\nlimit_time\030\004 \001(\002\"\330\001\n\016AiUeBlackboard"
    "\022\n\n\002id\030\001 \001(\005\022\021\n\tnode_name\030\002 \001(\t\022.\n\017flow_"
    "abort_mode\030\003 \001(\0162\025.cfg.AiEFlowAbortMode\022"
    "3\n\017notify_observer\030\004 \001(\0162\032.cfg.AiENotify"
    "ObserverMode\022\026\n\016blackboard_key\030\005 \001(\t\022*\n\t"
    "key_query\030\006 \001(\0132\027.cfg.AiKeyQueryOperator"
    "\"\222\001\n\022AiKeyQueryOperator\022\035\n\005IsSet\030\001 \001(\0132\014"
    ".cfg.AiIsSetH\000\022#\n\010IsNotSet\030\002 \001(\0132\017.cfg.A"
    "iIsNotSetH\000\022/\n\016BinaryOperator\030\003 \001(\0132\025.cf"
    "g.AiBinaryOperatorH\000B\007\n\005value\"\t\n\007AiIsSet"
    "\"\014\n\nAiIsNotSet\"P\n\020AiBinaryOperator\022\036\n\004op"
    "er\030\001 \001(\0162\020.cfg.AiEOperator\022\034\n\004data\030\002 \001(\013"
    "2\016.cfg.AiKeyData\"\320\001\n\tAiKeyData\022+\n\014FloatK"
    "eyData\030\001 \001(\0132\023.cfg.AiFloatKeyDataH\000\022\'\n\nI"
    "ntKeyData\030\002 \001(\0132\021.cfg.AiIntKeyDataH\000\022-\n\r"
    "StringKeyData\030\003 \001(\0132\024.cfg.AiStringKeyDat"
    "aH\000\0225\n\021BlackboardKeyData\030\004 \001(\0132\030.cfg.AiB"
    "lackboardKeyDataH\000B\007\n\005value\"\037\n\016AiFloatKe"
    "yData\022\r\n\005value\030\001 \001(\002\"\035\n\014AiIntKeyData\022\r\n\005"
    "value\030\001 \001(\005\" \n\017AiStringKeyData\022\r\n\005value\030"
    "\001 \001(\t\"$\n\023AiBlackboardKeyData\022\r\n\005value\030\001 "
    "\001(\t\"a\n\020AiUeForceSuccess\022\n\n\002id\030\001 \001(\005\022\021\n\tn"
    "ode_name\030\002 \001(\t\022.\n\017flow_abort_mode\030\003 \001(\0162"
    "\025.cfg.AiEFlowAbortMode\"\253\001\n\016AiIsAtLocatio"
    "n\022\n\n\002id\030\001 \001(\005\022\021\n\tnode_name\030\002 \001(\t\022.\n\017flow"
    "_abort_mode\030\003 \001(\0162\025.cfg.AiEFlowAbortMode"
    "\022\031\n\021acceptable_radius\030\004 \001(\002\022\024\n\014keyboard_"
    "key\030\005 \001(\t\022\031\n\021inverse_condition\030\006 \001(\010\"\265\001\n"
    "\022AiDistanceLessThan\022\n\n\002id\030\001 \001(\005\022\021\n\tnode_"
    "name\030\002 \001(\t\022.\n\017flow_abort_mode\030\003 \001(\0162\025.cf"
    "g.AiEFlowAbortMode\022\022\n\nactor1_key\030\004 \001(\t\022\022"
    "\n\nactor2_key\030\005 \001(\t\022\020\n\010distance\030\006 \001(\002\022\026\n\016"
    "reverse_result\030\007 \001(\010\"\335\003\n\nAiFlowNode\022#\n\010S"
    "equence\030\016 \001(\0132\017.cfg.AiSequenceH\000\022#\n\010Sele"
    "ctor\030\017 \001(\0132\017.cfg.AiSelectorH\000\022/\n\016SimpleP"
    "arallel\030\020 \001(\0132\025.cfg.AiSimpleParallelH\000\022\037"
    "\n\006UeWait\030\021 \001(\0132\r.cfg.AiUeWaitH\000\022;\n\024UeWai"
    "tBlackboardTime\030\022 \001(\0132\033.cfg.AiUeWaitBlac"
    "kboardTimeH\000\022+\n\014MoveToTarget\030\023 \001(\0132\023.cfg"
    ".AiMoveToTargetH\000\022)\n\013ChooseSkill\030\024 \001(\0132\022"
    ".cfg.AiChooseSkillH\000\022;\n\024MoveToRandomLoca"
    "tion\030\025 \001(\0132\033.cfg.AiMoveToRandomLocationH"
    "\000\022/\n\016MoveToLocation\030\026 \001(\0132\025.cfg.AiMoveTo"
    "LocationH\000\022\'\n\nDebugPrint\030\027 \001(\0132\021.cfg.AiD"
    "ebugPrintH\000B\007\n\005value\"\223\001\n\rAiComposeNode\022#"
    "\n\010Sequence\030\016 \001(\0132\017.cfg.AiSequenceH\000\022#\n\010S"
    "elector\030\017 \001(\0132\017.cfg.AiSelectorH\000\022/\n\016Simp"
    "leParallel\030\020 \001(\0132\025.cfg.AiSimpleParallelH"
    "\000B\007\n\005value\"\242\001\n\nAiSequence\022\n\n\002id\030\001 \001(\005\022\021\n"
    "\tnode_name\030\002 \001(\t\022(\n\ndecorators\030\003 \003(\0132\020.c"
    "fg.AiDecoratorB\002\020\000\022$\n\010services\030\004 \003(\0132\016.c"
    "fg.AiServiceB\002\020\000\022%\n\010children\030\005 \003(\0132\017.cfg"
    ".AiFlowNodeB\002\020\000\"\242\001\n\nAiSelector\022\n\n\002id\030\001 \001"
    "(\005\022\021\n\tnode_name\030\002 \001(\t\022(\n\ndecorators\030\003 \003("
    "\0132\020.cfg.AiDecoratorB\002\020\000\022$\n\010services\030\004 \003("
    "\0132\016.cfg.AiServiceB\002\020\000\022%\n\010children\030\005 \003(\0132"
    "\017.cfg.AiFlowNodeB\002\020\000\"\364\001\n\020AiSimpleParalle"
    "l\022\n\n\002id\030\001 \001(\005\022\021\n\tnode_name\030\002 \001(\t\022(\n\ndeco"
    "rators\030\003 \003(\0132\020.cfg.AiDecoratorB\002\020\000\022$\n\010se"
    "rvices\030\004 \003(\0132\016.cfg.AiServiceB\002\020\000\022\'\n\013fini"
    "sh_mode\030\005 \001(\0162\022.cfg.AiEFinishMode\022\036\n\tmai"
    "n_task\030\006 \001(\0132\013.cfg.AiTask\022(\n\017background_"
    "node\030\007 \001(\0132\017.cfg.AiFlowNode\"\336\002\n\006AiTask\022\037"
    "\n\006UeWait\030\021 \001(\0132\r.cfg.AiUeWaitH\000\022;\n\024UeWai"
    "tBlackboardTime\030\022 \001(\0132\033.cfg.AiUeWaitBlac"
    "kboardTimeH\000\022+\n\014MoveToTarget\030\023 \001(\0132\023.cfg"
    ".AiMoveToTargetH\000\022)\n\013ChooseSkill\030\024 \001(\0132\022"
    ".cfg.AiChooseSkillH\000\022;\n\024MoveToRandomLoca"
    "tion\030\025 \001(\0132\033.cfg.AiMoveToRandomLocationH"
    "\000\022/\n\016MoveToLocation\030\026 \001(\0132\025.cfg.AiMoveTo"
    "LocationH\000\022\'\n\nDebugPrint\030\027 \001(\0132\021.cfg.AiD"
    "ebugPrintH\000B\007\n\005value\"\303\001\n\010AiUeWait\022\n\n\002id\030"
    "\001 \001(\005\022\021\n\tnode_name\030\002 \001(\t\022(\n\ndecorators\030\003"
    " \003(\0132\020.cfg.AiDecoratorB\002\020\000\022$\n\010services\030\004"
    " \003(\0132\016.cfg.AiServiceB\002\020\000\022\033\n\023ignore_resta"
    "rt_self\030\005 \001(\010\022\021\n\twait_time\030\006 \001(\002\022\030\n\020rand"
    "om_deviation\030\007 \001(\002\"\274\001\n\026AiUeWaitBlackboar"
    "dTime\022\n\n\002id\030\001 \001(\005\022\021\n\tnode_name\030\002 \001(\t\022(\n\n"
    "decorators\030\003 \003(\0132\020.cfg.AiDecoratorB\002\020\000\022$"
    "\n\010services\030\004 \003(\0132\016.cfg.AiServiceB\002\020\000\022\033\n\023"
    "ignore_restart_self\030\005 \001(\010\022\026\n\016blackboard_"
    "key\030\006 \001(\t\"\321\001\n\016AiMoveToTarget\022\n\n\002id\030\001 \001(\005"
    "\022\021\n\tnode_name\030\002 \001(\t\022(\n\ndecorators\030\003 \003(\0132"
    "\020.cfg.AiDecoratorB\002\020\000\022$\n\010services\030\004 \003(\0132"
    "\016.cfg.AiServiceB\002\020\000\022\033\n\023ignore_restart_se"
    "lf\030\005 \001(\010\022\030\n\020target_actor_key\030\006 \001(\t\022\031\n\021ac"
    "ceptable_radius\030\007 \001(\002\"\322\001\n\rAiChooseSkill\022"
    "\n\n\002id\030\001 \001(\005\022\021\n\tnode_name\030\002 \001(\t\022(\n\ndecora"
    "tors\030\003 \003(\0132\020.cfg.AiDecoratorB\002\020\000\022$\n\010serv"
    "ices\030\004 \003(\0132\016.cfg.AiServiceB\002\020\000\022\033\n\023ignore"
    "_restart_self\030\005 \001(\010\022\030\n\020target_actor_key\030"
    "\006 \001(\t\022\033\n\023result_skill_id_key\030\007 \001(\t\"\321\001\n\026A"
    "iMoveToRandomLocation\022\n\n\002id\030\001 \001(\005\022\021\n\tnod"
    "e_name\030\002 \001(\t\022(\n\ndecorators\030\003 \003(\0132\020.cfg.A"
    "iDecoratorB\002\020\000\022$\n\010services\030\004 \003(\0132\016.cfg.A"
    "iServiceB\002\020\000\022\033\n\023ignore_restart_self\030\005 \001("
    "\010\022\033\n\023origin_position_key\030\006 \001(\t\022\016\n\006radius"
    "\030\007 \001(\002\"\271\001\n\020AiMoveToLocation\022\n\n\002id\030\001 \001(\005\022"
    "\021\n\tnode_name\030\002 \001(\t\022(\n\ndecorators\030\003 \003(\0132\020"
    ".cfg.AiDecoratorB\002\020\000\022$\n\010services\030\004 \003(\0132\016"
    ".cfg.AiServiceB\002\020\000\022\033\n\023ignore_restart_sel"
    "f\030\005 \001(\010\022\031\n\021acceptable_radius\030\006 \001(\002\"\250\001\n\014A"
    "iDebugPrint\022\n\n\002id\030\001 \001(\005\022\021\n\tnode_name\030\002 \001"
    "(\t\022(\n\ndecorators\030\003 \003(\0132\020.cfg.AiDecorator"
    "B\002\020\000\022$\n\010services\030\004 \003(\0132\016.cfg.AiServiceB\002"
    "\020\000\022\033\n\023ignore_restart_self\030\005 \001(\010\022\014\n\004text\030"
    "\006 \001(\t\"l\n\022CommonGlobalConfig\022\n\n\002x1\030\001 \001(\005\022"
    "\n\n\002x2\030\002 \001(\005\022\n\n\002x3\030\003 \001(\005\022\n\n\002x4\030\004 \001(\005\022\n\n\002x"
    "5\030\005 \001(\005\022\n\n\002x6\030\006 \001(\005\022\016\n\002x7\030\007 \003(\005B\002\020\001\"\302\001\n\010"
    "ItemItem\022\n\n\002id\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\022\'\n\nmi"
    "nor_type\030\004 \001(\0162\023.cfg.ItemEMinorType\022&\n\007q"
    "uality\030\006 \001(\0162\025.cfg.ItemEItemQuality\022\026\n\016i"
    "con_backgroud\030\010 \001(\t\022\021\n\ticon_mask\030\t \001(\t\022\014"
    "\n\004desc\030\n \001(\t\022\022\n\nshow_order\030\013 \001(\005\"(\n\014L10n"
    "L10NDemo\022\n\n\002id\030\001 \001(\005\022\014\n\004text\030\002 \001(\t\"*\n\rL1"
    "0nPatchDemo\022\n\n\002id\030\001 \001(\005\022\r\n\005value\030\002 \001(\005\"\'"
    "\n\nTagTestTag\022\n\n\002id\030\001 \001(\005\022\r\n\005value\030\002 \001(\t\""
    "\335\003\n\rTestDemoType2\022\n\n\002x4\030\001 \001(\005\022\n\n\002x1\030\002 \001("
    "\010\022\n\n\002x2\030\003 \001(\005\022\n\n\002x3\030\004 \001(\005\022\n\n\002x5\030\005 \001(\003\022\n\n"
    "\002x6\030\006 \001(\002\022\n\n\002x7\030\007 \001(\001\022\014\n\004x8_0\030\010 \001(\005\022\n\n\002x"
    "8\030\t \001(\005\022\n\n\002x9\030\n \001(\003\022\013\n\003x10\030\013 \001(\t\022\037\n\003x12\030"
    "\014 \001(\0132\022.cfg.TestDemoType1\022\036\n\003x13\030\r \001(\0162\021"
    ".cfg.TestDemoEnum\022!\n\003x14\030\016 \001(\0132\024.cfg.Tes"
    "tDemoDynamic\022\n\n\002s1\030\017 \001(\t\022\n\n\002t1\030\020 \001(\003\022\016\n\002"
    "k1\030\021 \003(\005B\002\020\001\022\016\n\002k2\030\022 \003(\005B\002\020\001\022\016\n\002k5\030\023 \003(\005"
    "B\002\020\001\022&\n\002k8\030\024 \003(\0132\032.cfg.TestDemoType2.K8E"
    "ntry\022\037\n\002k9\030\025 \003(\0132\017.cfg.TestDemoE2B\002\020\000\022%\n"
    "\003k15\030\026 \003(\0132\024.cfg.TestDemoDynamicB\002\020\000\032)\n\007"
    "K8Entry\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\005:\0028\001\""
    "\033\n\rTestDemoType1\022\n\n\002x1\030\001 \001(\005\"\257\001\n\017TestDem"
    "oDynamic\022!\n\006DemoD2\030\001 \001(\0132\017.cfg.TestDemoD"
    "2H\000\022!\n\006DemoE1\030\002 \001(\0132\017.cfg.TestDemoE1H\000\022*"
    "\n\010RoleInfo\030\003 \001(\0132\026.cfg.TestLoginRoleInfo"
    "H\000\022!\n\006DemoD5\030\004 \001(\0132\017.cfg.TestDemoD5H\000B\007\n"
    "\005value\"$\n\nTestDemoD2\022\n\n\002x1\030\001 \001(\005\022\n\n\002x2\030\002"
    " \001(\005\"d\n\nTestDemoD3\022!\n\006DemoE1\030\002 \001(\0132\017.cfg"
    ".TestDemoE1H\000\022*\n\010RoleInfo\030\003 \001(\0132\026.cfg.Te"
    "stLoginRoleInfoH\000B\007\n\005value\"0\n\nTestDemoE1"
    "\022\n\n\002x1\030\001 \001(\005\022\n\n\002x3\030\002 \001(\005\022\n\n\002x4\030\003 \001(\005\"<\n\021"
    "TestLoginRoleInfo\022\n\n\002x1\030\001 \001(\005\022\n\n\002x3\030\002 \001("
    "\005\022\017\n\007role_id\030\003 \001(\003\">\n\nTestDemoD5\022\n\n\002x1\030\001"
    " \001(\005\022$\n\004time\030\002 \001(\0132\026.cfg.TestDateTimeRan"
    "ge\"9\n\021TestDateTimeRange\022\022\n\nstart_time\030\001 "
    "\001(\003\022\020\n\010end_time\030\002 \001(\003\"0\n\nTestDemoE2\022\017\n\002y"
    "1\030\001 \001(\005H\000\210\001\001\022\n\n\002y2\030\002 \001(\010B\005\n\003_y1\"U\n\025TestD"
    "emoSingletonType\022\n\n\002id\030\001 \001(\005\022\014\n\004name\030\002 \001"
    "(\t\022\"\n\004date\030\003 \001(\0132\024.cfg.TestDemoDynamic\"("
    "\n\020TestNotIndexList\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005"
    "\"[\n\027TestMultiUnionIndexList\022\013\n\003id1\030\001 \001(\005"
    "\022\013\n\003id2\030\002 \001(\003\022\013\n\003id3\030\003 \001(\t\022\013\n\003num\030\004 \001(\005\022"
    "\014\n\004desc\030\005 \001(\t\"V\n\022TestMultiIndexList\022\013\n\003i"
    "d1\030\001 \001(\005\022\013\n\003id2\030\002 \001(\003\022\013\n\003id3\030\003 \001(\t\022\013\n\003nu"
    "m\030\004 \001(\005\022\014\n\004desc\030\005 \001(\t\"\362\004\n\022TestMultiRowRe"
    "cord\022\n\n\002id\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\022,\n\010one_ro"
    "ws\030\003 \003(\0132\026.cfg.TestMultiRowType1B\002\020\000\022/\n\013"
    "multi_rows1\030\004 \003(\0132\026.cfg.TestMultiRowType"
    "1B\002\020\000\022/\n\013multi_rows2\030\005 \003(\0132\026.cfg.TestMul"
    "tiRowType1B\002\020\000\022<\n\013multi_rows4\030\006 \003(\0132\'.cf"
    "g.TestMultiRowRecord.MultiRows4Entry\022/\n\013"
    "multi_rows5\030\007 \003(\0132\026.cfg.TestMultiRowType"
    "3B\002\020\000\022<\n\013multi_rows6\030\010 \003(\0132\'.cfg.TestMul"
    "tiRowRecord.MultiRows6Entry\022<\n\013multi_row"
    "s7\030\t \003(\0132\'.cfg.TestMultiRowRecord.MultiR"
    "ows7Entry\032I\n\017MultiRows4Entry\022\013\n\003key\030\001 \001("
    "\005\022%\n\005value\030\002 \001(\0132\026.cfg.TestMultiRowType2"
    ":\0028\001\032I\n\017MultiRows6Entry\022\013\n\003key\030\001 \001(\005\022%\n\005"
    "value\030\002 \001(\0132\026.cfg.TestMultiRowType2:\0028\001\032"
    "1\n\017MultiRows7Entry\022\013\n\003key\030\001 \001(\005\022\r\n\005value"
    "\030\002 \001(\005:\0028\001\"*\n\021TestMultiRowType1\022\n\n\002id\030\001 "
    "\001(\005\022\t\n\001x\030\002 \001(\005\"5\n\021TestMultiRowType2\022\n\n\002i"
    "d\030\001 \001(\005\022\t\n\001x\030\002 \001(\005\022\t\n\001y\030\003 \001(\002\"J\n\021TestMul"
    "tiRowType3\022\n\n\002id\030\001 \001(\005\022)\n\005items\030\002 \003(\0132\026."
    "cfg.TestMultiRowType1B\002\020\000\"l\n\023TestTestMul"
    "tiColumn\022\n\n\002id\030\001 \001(\005\022\027\n\001a\030\002 \001(\0132\014.cfg.Te"
    "stFoo\022\027\n\001b\030\003 \001(\0132\014.cfg.TestFoo\022\027\n\001c\030\004 \001("
    "\0132\014.cfg.TestFoo\"-\n\007TestFoo\022\n\n\002y1\030\001 \001(\005\022\n"
    "\n\002y2\030\002 \001(\005\022\n\n\002y3\030\003 \001(\005\"\306\001\n\021TestMultiRowT"
    "itle\022\n\n\002id\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\022\027\n\002x1\030\003 \001"
    "(\0132\013.cfg.TestH1\022\036\n\004x2_0\030\004 \001(\0132\013.cfg.Test"
    "H2H\000\210\001\001\022\033\n\002x2\030\005 \003(\0132\013.cfg.TestH2B\002\020\000\022\033\n\002"
    "x3\030\006 \003(\0132\013.cfg.TestH2B\002\020\000\022\033\n\002x4\030\007 \003(\0132\013."
    "cfg.TestH2B\002\020\000B\007\n\005_x2_0\"-\n\006TestH1\022\027\n\002y2\030"
    "\001 \001(\0132\013.cfg.TestH2\022\n\n\002y3\030\002 \001(\005\" \n\006TestH2"
    "\022\n\n\002z2\030\001 \001(\005\022\n\n\002z3\030\002 \001(\005\"\347\001\n\014TestTestNul"
    "l\022\n\n\002id\030\001 \001(\005\022\017\n\002x1\030\002 \001(\005H\000\210\001\001\022\"\n\002x2\030\003 \001"
    "(\0162\021.cfg.TestDemoEnumH\001\210\001\001\022#\n\002x3\030\004 \001(\0132\022"
    ".cfg.TestDemoType1H\002\210\001\001\022%\n\002x4\030\005 \001(\0132\024.cf"
    "g.TestDemoDynamicH\003\210\001\001\022\017\n\002s1\030\006 \001(\tH\004\210\001\001\022"
    "\017\n\002s2\030\007 \001(\tH\005\210\001\001B\005\n\003_x1B\005\n\003_x2B\005\n\003_x3B\005\n"
    "\003_x4B\005\n\003_s1B\005\n\003_s2\"\332\001\n\033TestDemoPrimitive"
    "TypesTable\022\n\n\002x1\030\001 \001(\010\022\n\n\002x2\030\002 \001(\005\022\n\n\002x3"
    "\030\003 \001(\005\022\n\n\002x4\030\004 \001(\005\022\n\n\002x5\030\005 \001(\003\022\n\n\002x6\030\006 \001"
    "(\002\022\n\n\002x7\030\007 \001(\001\022\n\n\002s1\030\010 \001(\t\022\n\n\002s2\030\t \001(\t\022\025"
    "\n\002v2\030\n \001(\0132\t.cfg.vec2\022\025\n\002v3\030\013 \001(\0132\t.cfg."
    "vec3\022\025\n\002v4\030\014 \001(\0132\t.cfg.vec4\022\n\n\002t1\030\r \001(\003\""
    "\034\n\004vec2\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\"\'\n\004vec3\022\t\n"
    "\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"2\n\004vec4\022\t"
    "\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\022\t\n\001w\030\004 \001"
    "(\002\"~\n\016TestTestString\022\n\n\002id\030\001 \001(\t\022\n\n\002s1\030\002"
    " \001(\t\022\n\n\002s2\030\003 \001(\t\022#\n\003cs1\030\004 \001(\0132\026.cfg.Test"
    "CompactString\022#\n\003cs2\030\005 \001(\0132\026.cfg.TestCom"
    "pactString\"7\n\021TestCompactString\022\n\n\002id\030\001 "
    "\001(\005\022\n\n\002s2\030\002 \001(\t\022\n\n\002s3\030\003 \001(\t\"<\n\rTestDemoG"
    "roup\022\n\n\002id\030\001 \001(\005\022\037\n\002x5\030\006 \001(\0132\023.cfg.TestI"
    "nnerGroup\"\034\n\016TestInnerGroup\022\n\n\002y1\030\001 \001(\005\""
    ";\n\016TestTestGlobal\022\024\n\014unlock_equip\030\001 \001(\005\022"
    "\023\n\013unlock_hero\030\002 \001(\005\"*\n\rTestTestBeRef\022\n\n"
    "\002id\030\001 \001(\005\022\r\n\005count\030\002 \001(\005\"\306\003\n\013TestTestRef"
    "\022\n\n\002id\030\001 \001(\005\022\n\n\002x1\030\002 \001(\005\022\014\n\004x1_2\030\003 \001(\005\022\n"
    "\n\002x2\030\004 \001(\005\022\n\n\002x3\030\005 \001(\005\022\n\n\002x4\030\006 \001(\005\022\016\n\002a1"
    "\030\007 \003(\005B\002\020\001\022\016\n\002a2\030\010 \003(\005B\002\020\001\022\016\n\002b1\030\t \003(\005B\002"
    "\020\001\022\016\n\002b2\030\n \003(\005B\002\020\001\022\016\n\002c1\030\013 \003(\005B\002\020\001\022\016\n\002c2"
    "\030\014 \003(\005B\002\020\001\022$\n\002d1\030\r \003(\0132\030.cfg.TestTestRef"
    ".D1Entry\022$\n\002d2\030\016 \003(\0132\030.cfg.TestTestRef.D"
    "2Entry\022\n\n\002e1\030\017 \001(\005\022\n\n\002e2\030\020 \001(\003\022\n\n\002e3\030\021 \001"
    "(\t\022\n\n\002f1\030\022 \001(\005\022\n\n\002f2\030\023 \001(\003\022\n\n\002f3\030\024 \001(\t\022#"
    "\n\002s1\030\025 \001(\0132\027.cfg.TestRefDynamicBase\032)\n\007D"
    "1Entry\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\005:\0028\001\032)"
    "\n\007D2Entry\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\005:\0028"
    "\001\"B\n\022TestRefDynamicBase\022#\n\007RefBean\030\001 \001(\013"
    "2\020.cfg.TestRefBeanH\000B\007\n\005value\")\n\013TestRef"
    "Bean\022\t\n\001x\030\001 \001(\005\022\017\n\003arr\030\002 \003(\005B\002\020\001\"\234\001\n\014Tes"
    "tTestSize\022\n\n\002id\030\001 \001(\005\022\016\n\002x1\030\002 \003(\005B\002\020\001\022\016\n"
    "\002x2\030\003 \003(\005B\002\020\001\022\016\n\002x3\030\004 \003(\005B\002\020\001\022%\n\002x4\030\005 \003("
    "\0132\031.cfg.TestTestSize.X4Entry\032)\n\007X4Entry\022"
    "\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\005:\0028\001\"x\n\013TestT"
    "estSet\022\n\n\002id\030\001 \001(\005\022\n\n\002x0\030\002 \001(\t\022\016\n\002x1\030\003 \003"
    "(\005B\002\020\001\022\016\n\002x2\030\004 \003(\003B\002\020\001\022\016\n\002x3\030\005 \003(\tB\002\020\000\022!"
    "\n\002x4\030\006 \003(\0162\021.cfg.TestDemoEnumB\002\020\000\".\n\022Tes"
    "tDetectEncoding\022\n\n\002id\030\001 \001(\005\022\014\n\004name\030\002 \001("
    "\t\"\210\001\n\014TestItemBase\022\035\n\004Item\030\001 \001(\0132\r.cfg.T"
    "estItemH\000\022\'\n\tEquipment\030\002 \001(\0132\022.cfg.TestE"
    "quipmentH\000\022\'\n\tDecorator\030\003 \001(\0132\022.cfg.Test"
    "DecoratorH\000B\007\n\005value\"N\n\010TestItem\022\n\n\002id\030\001"
    " \001(\005\022\014\n\004name\030\002 \001(\t\022\014\n\004desc\030\003 \001(\t\022\013\n\003num\030"
    "\004 \001(\005\022\r\n\005price\030\005 \001(\005\"g\n\rTestEquipment\022\n\n"
    "\002id\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\022\014\n\004desc\030\003 \001(\t\022\037\n"
    "\004attr\030\004 \001(\0162\021.cfg.TestDemoEnum\022\r\n\005value\030"
    "\005 \001(\005\"I\n\rTestDecorator\022\n\n\002id\030\001 \001(\005\022\014\n\004na"
    "me\030\002 \001(\t\022\014\n\004desc\030\003 \001(\t\022\020\n\010duration\030\004 \001(\005"
    "\"A\n\rTestTestIndex\022\n\n\002id\030\001 \001(\005\022$\n\004eles\030\002 "
    "\003(\0132\022.cfg.TestDemoType1B\002\020\000\"\335\002\n\013TestTest"
    "Map\022\n\n\002id\030\001 \001(\005\022$\n\002x1\030\002 \003(\0132\030.cfg.TestTe"
    "stMap.X1Entry\022$\n\002x2\030\003 \003(\0132\030.cfg.TestTest"
    "Map.X2Entry\022$\n\002x3\030\004 \003(\0132\030.cfg.TestTestMa"
    "p.X3Entry\022$\n\002x4\030\005 \003(\0132\030.cfg.TestTestMap."
    "X4Entry\032)\n\007X1Entry\022\013\n\003key\030\001 \001(\005\022\r\n\005value"
    "\030\002 \001(\005:\0028\001\032)\n\007X2Entry\022\013\n\003key\030\001 \001(\003\022\r\n\005va"
    "lue\030\002 \001(\005:\0028\001\032)\n\007X3Entry\022\013\n\003key\030\001 \001(\t\022\r\n"
    "\005value\030\002 \001(\005:\0028\001\032)\n\007X4Entry\022\013\n\003key\030\001 \001(\005"
    "\022\r\n\005value\030\002 \001(\005:\0028\001\"\372\002\n\021TestExcelFromJso"
    "n\022\n\n\002x4\030\001 \001(\005\022\n\n\002x1\030\002 \001(\010\022\n\n\002x5\030\003 \001(\003\022\n\n"
    "\002x6\030\004 \001(\002\022\n\n\002s1\030\005 \001(\t\022\n\n\002s2\030\006 \001(\t\022\n\n\002t1\030"
    "\007 \001(\003\022\037\n\003x12\030\010 \001(\0132\022.cfg.TestDemoType1\022\036"
    "\n\003x13\030\t \001(\0162\021.cfg.TestDemoEnum\022!\n\003x14\030\n "
    "\001(\0132\024.cfg.TestDemoDynamic\022\016\n\002k1\030\013 \003(\005B\002\020"
    "\001\022*\n\002k8\030\014 \003(\0132\036.cfg.TestExcelFromJson.K8"
    "Entry\022\037\n\002k9\030\r \003(\0132\017.cfg.TestDemoE2B\002\020\000\022%"
    "\n\003k15\030\016 \003(\0132\024.cfg.TestDemoDynamicB\002\020\000\032)\n"
    "\007K8Entry\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\005:\0028\001"
    "\"0\n\027TestCompositeJsonTable1\022\n\n\002id\030\001 \001(\005\022"
    "\t\n\001x\030\002 \001(\t\"0\n\027TestCompositeJsonTable2\022\n\n"
    "\002id\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\"/\n\027TestCompositeJso"
    "nTable3\022\t\n\001a\030\001 \001(\005\022\t\n\001b\030\002 \001(\005\"W\n\031TestExc"
    "elFromJsonMultiRow\022\n\n\002id\030\001 \001(\005\022\t\n\001x\030\002 \001("
    "\005\022#\n\005items\030\003 \003(\0132\020.cfg.TestTestRowB\002\020\000\"X"
    "\n\013TestTestRow\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\010\022\t\n\001z"
    "\030\003 \001(\t\022\031\n\001a\030\004 \001(\0132\016.cfg.TestTest3\022\r\n\001b\030\005"
    " \003(\005B\002\020\001\"!\n\tTestTest3\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 "
    "\001(\005\"\224\001\n\030TestTestScriptableObject\022\n\n\002id\030\001"
    " \001(\005\022\014\n\004desc\030\002 \001(\t\022\014\n\004rate\030\003 \001(\002\022\013\n\003num\030"
    "\004 \001(\005\022\025\n\002v2\030\005 \001(\0132\t.cfg.vec2\022\025\n\002v3\030\006 \001(\013"
    "2\t.cfg.vec3\022\025\n\002v4\030\007 \001(\0132\t.cfg.vec4\"W\n\016Te"
    "stTestMapper\022\n\n\002id\030\001 \001(\005\022\"\n\naudio_type\030\002"
    " \001(\0162\016.cfg.AudioType\022\025\n\002v2\030\003 \001(\0132\t.cfg.v"
    "ec2\"\317\003\n\020DefineFromExcel2\022\n\n\002id\030\001 \001(\005\022\n\n\002"
    "x1\030\002 \001(\010\022\n\n\002x5\030\003 \001(\003\022\n\n\002x6\030\004 \001(\002\022\n\n\002x8\030\005"
    " \001(\005\022\013\n\003x10\030\006 \001(\t\022\036\n\003x13\030\007 \001(\0162\021.cfg.Tes"
    "tDemoEnum\022 \n\005x13_2\030\010 \001(\0162\021.cfg.TestDemoF"
    "lag\022!\n\003x14\030\t \001(\0132\024.cfg.TestDemoDynamic\022\033"
    "\n\003x15\030\n \001(\0132\016.cfg.TestShape\022\025\n\002v2\030\013 \001(\0132"
    "\t.cfg.vec2\022\n\n\002t1\030\014 \001(\003\022\016\n\002k1\030\r \003(\005B\002\020\001\022\016"
    "\n\002k2\030\016 \003(\005B\002\020\001\022)\n\002k8\030\017 \003(\0132\035.cfg.DefineF"
    "romExcel2.K8Entry\022\037\n\002k9\030\020 \003(\0132\017.cfg.Test"
    "DemoE2B\002\020\000\022\032\n\003k10\030\021 \003(\0132\t.cfg.vec3B\002\020\000\022\032"
    "\n\003k11\030\022 \003(\0132\t.cfg.vec4B\002\020\000\032)\n\007K8Entry\022\013\n"
    "\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\005:\0028\001\"a\n\tTestSha"
    "pe\022!\n\006Circle\030\001 \001(\0132\017.cfg.TestCircleH\000\022(\n"
    "\tRectangle\030\002 \001(\0132\023.cfg.Test2RectangleH\000B"
    "\007\n\005value\"\034\n\nTestCircle\022\016\n\006radius\030\001 \001(\002\"/"
    "\n\016Test2Rectangle\022\r\n\005width\030\001 \001(\002\022\016\n\006heigh"
    "t\030\002 \001(\002\":\n\016AiTbBlackboard\022(\n\tdata_list\030\001"
    " \003(\0132\021.cfg.AiBlackboardB\002\020\000\">\n\020AiTbBehav"
    "iorTree\022*\n\tdata_list\030\001 \003(\0132\023.cfg.AiBehav"
    "iorTreeB\002\020\000\"F\n\024CommonTbGlobalConfig\022.\n\td"
    "ata_list\030\001 \003(\0132\027.cfg.CommonGlobalConfigB"
    "\002\020\000\"2\n\nItemTbItem\022$\n\tdata_list\030\001 \003(\0132\r.c"
    "fg.ItemItemB\002\020\000\":\n\016L10nTbL10NDemo\022(\n\tdat"
    "a_list\030\001 \003(\0132\021.cfg.L10nL10NDemoB\002\020\000\"<\n\017L"
    "10nTbPatchDemo\022)\n\tdata_list\030\001 \003(\0132\022.cfg."
    "L10nPatchDemoB\002\020\000\"6\n\014TagTbTestTag\022&\n\tdat"
    "a_list\030\001 \003(\0132\017.cfg.TagTestTagB\002\020\000\"<\n\017Tes"
    "tTbFullTypes\022)\n\tdata_list\030\001 \003(\0132\022.cfg.Te"
    "stDemoType2B\002\020\000\"D\n\017TestTbSingleton\0221\n\tda"
    "ta_list\030\001 \003(\0132\032.cfg.TestDemoSingletonTyp"
    "eB\002\020\000\"B\n\022TestTbNotIndexList\022,\n\tdata_list"
    "\030\001 \003(\0132\025.cfg.TestNotIndexListB\002\020\000\"P\n\031Tes"
    "tTbMultiUnionIndexList\0223\n\tdata_list\030\001 \003("
    "\0132\034.cfg.TestMultiUnionIndexListB\002\020\000\"F\n\024T"
    "estTbMultiIndexList\022.\n\tdata_list\030\001 \003(\0132\027"
    ".cfg.TestMultiIndexListB\002\020\000\"\?\n\022TestTbDat"
    "aFromMisc\022)\n\tdata_list\030\001 \003(\0132\022.cfg.TestD"
    "emoType2B\002\020\000\"F\n\024TestTbMultiRowRecord\022.\n\t"
    "data_list\030\001 \003(\0132\027.cfg.TestMultiRowRecord"
    "B\002\020\000\"H\n\025TestTbTestMultiColumn\022/\n\tdata_li"
    "st\030\001 \003(\0132\030.cfg.TestTestMultiColumnB\002\020\000\"D"
    "\n\023TestTbMultiRowTitle\022-\n\tdata_list\030\001 \003(\013"
    "2\026.cfg.TestMultiRowTitleB\002\020\000\":\n\016TestTbTe"
    "stNull\022(\n\tdata_list\030\001 \003(\0132\021.cfg.TestTest"
    "NullB\002\020\000\"N\n\023TestTbDemoPrimitive\0227\n\tdata_"
    "list\030\001 \003(\0132 .cfg.TestDemoPrimitiveTypesT"
    "ableB\002\020\000\">\n\020TestTbTestString\022*\n\tdata_lis"
    "t\030\001 \003(\0132\023.cfg.TestTestStringB\002\020\000\"<\n\017Test"
    "TbDemoGroup\022)\n\tdata_list\030\001 \003(\0132\022.cfg.Tes"
    "tDemoGroupB\002\020\000\">\n\020TestTbTestGlobal\022*\n\tda"
    "ta_list\030\001 \003(\0132\023.cfg.TestTestGlobalB\002\020\000\"<"
    "\n\017TestTbTestBeRef\022)\n\tdata_list\030\001 \003(\0132\022.c"
    "fg.TestTestBeRefB\002\020\000\"=\n\020TestTbTestBeRef2"
    "\022)\n\tdata_list\030\001 \003(\0132\022.cfg.TestTestBeRefB"
    "\002\020\000\"8\n\rTestTbTestRef\022\'\n\tdata_list\030\001 \003(\0132"
    "\020.cfg.TestTestRefB\002\020\000\":\n\016TestTbTestSize\022"
    "(\n\tdata_list\030\001 \003(\0132\021.cfg.TestTestSizeB\002\020"
    "\000\"8\n\rTestTbTestSet\022\'\n\tdata_list\030\001 \003(\0132\020."
    "cfg.TestTestSetB\002\020\000\"I\n\027TestTbDetectCsvEn"
    "coding\022.\n\tdata_list\030\001 \003(\0132\027.cfg.TestDete"
    "ctEncodingB\002\020\000\"7\n\013TestTbItem2\022(\n\tdata_li"
    "st\030\001 \003(\0132\021.cfg.TestItemBaseB\002\020\000\"<\n\017TestT"
    "bTestIndex\022)\n\tdata_list\030\001 \003(\0132\022.cfg.Test"
    "TestIndexB\002\020\000\"8\n\rTestTbTestMap\022\'\n\tdata_l"
    "ist\030\001 \003(\0132\020.cfg.TestTestMapB\002\020\000\"D\n\023TestT"
    "bExcelFromJson\022-\n\tdata_list\030\001 \003(\0132\026.cfg."
    "TestExcelFromJsonB\002\020\000\"P\n\031TestTbComposite"
    "JsonTable1\0223\n\tdata_list\030\001 \003(\0132\034.cfg.Test"
    "CompositeJsonTable1B\002\020\000\"P\n\031TestTbComposi"
    "teJsonTable2\0223\n\tdata_list\030\001 \003(\0132\034.cfg.Te"
    "stCompositeJsonTable2B\002\020\000\"P\n\031TestTbCompo"
    "siteJsonTable3\0223\n\tdata_list\030\001 \003(\0132\034.cfg."
    "TestCompositeJsonTable3B\002\020\000\"T\n\033TestTbExc"
    "elFromJsonMultiRow\0225\n\tdata_list\030\001 \003(\0132\036."
    "cfg.TestExcelFromJsonMultiRowB\002\020\000\"R\n\032Tes"
    "tTbTestScriptableObject\0224\n\tdata_list\030\001 \003"
    "(\0132\035.cfg.TestTestScriptableObjectB\002\020\000\">\n"
    "\020TestTbTestMapper\022*\n\tdata_list\030\001 \003(\0132\023.c"
    "fg.TestTestMapperB\002\020\000\"F\n\026TestTbDefineFro"
    "mExcel2\022,\n\tdata_list\030\001 \003(\0132\025.cfg.DefineF"
    "romExcel2B\002\020\000*=\n\013AiEExecutor\022\026\n\022AiEExecu"
    "tor_CLIENT\020\000\022\026\n\022AiEExecutor_SERVER\020\001*\375\001\n"
    "\nAiEKeyType\022\023\n\017AiEKeyType_None\020\000\022\023\n\017AiEK"
    "eyType_BOOL\020\001\022\022\n\016AiEKeyType_INT\020\002\022\024\n\020AiE"
    "KeyType_FLOAT\020\003\022\025\n\021AiEKeyType_STRING\020\004\022\025"
    "\n\021AiEKeyType_VECTOR\020\005\022\026\n\022AiEKeyType_ROTA"
    "TOR\020\006\022\023\n\017AiEKeyType_NAME\020\007\022\024\n\020AiEKeyType"
    "_CLASS\020\010\022\023\n\017AiEKeyType_ENUM\020\t\022\025\n\021AiEKeyT"
    "ype_OBJECT\020\n*\210\001\n\020AiEFlowAbortMode\022\031\n\025AiE"
    "FlowAbortMode_NONE\020\000\022#\n\037AiEFlowAbortMode"
    "_LOWER_PRIORITY\020\001\022\031\n\025AiEFlowAbortMode_SE"
    "LF\020\002\022\031\n\025AiEFlowAbortMode_BOTH\020\003*G\n\rAiEFi"
    "nishMode\022\033\n\027AiEFinishMode_IMMEDIATE\020\000\022\031\n"
    "\025AiEFinishMode_DELAYED\020\001*n\n\025AiENotifyObs"
    "erverMode\022)\n%AiENotifyObserverMode_ON_VA"
    "LUE_CHANGE\020\000\022*\n&AiENotifyObserverMode_ON"
    "_RESULT_CHANGE\020\001*\225\002\n\013AiEOperator\022\033\n\027AiEO"
    "perator_IS_EQUAL_TO\020\000\022\037\n\033AiEOperator_IS_"
    "NOT_EQUAL_TO\020\001\022\034\n\030AiEOperator_IS_LESS_TH"
    "AN\020\002\022(\n$AiEOperator_IS_LESS_THAN_OR_EQUA"
    "L_TO\020\003\022\035\n\031AiEOperator_IS_GREAT_THAN\020\004\022)\n"
    "%AiEOperator_IS_GREAT_THAN_OR_EQUAL_TO\020\005"
    "\022\030\n\024AiEOperator_CONTAINS\020\006\022\034\n\030AiEOperato"
    "r_NOT_CONTAINS\020\007*I\n\tAudioType\022\025\n\021AudioTy"
    "pe_UNKNOWN\020\000\022\021\n\rAudioType_ACC\020\001\022\022\n\016Audio"
    "Type_AIFF\020\002*N\n\023CommonEBoolOperator\022\033\n\027Co"
    "mmonEBoolOperator_AND\020\000\022\032\n\026CommonEBoolOp"
    "erator_OR\020\001*\237\001\n\020ItemEItemQuality\022\032\n\026Item"
    "EItemQuality_WHITE\020\000\022\032\n\026ItemEItemQuality"
    "_GREEN\020\001\022\031\n\025ItemEItemQuality_BLUE\020\002\022\033\n\027I"
    "temEItemQuality_PURPLE\020\003\022\033\n\027ItemEItemQua"
    "lity_GOLDEN\020\004*\306\001\n\021ItemECurrencyType\022\032\n\026I"
    "temECurrencyType_None\020\000\022\035\n\031ItemECurrency"
    "Type_DIAMOND\020\001\022\032\n\026ItemECurrencyType_GOLD"
    "\020\002\022\034\n\030ItemECurrencyType_SILVER\020\003\022\031\n\025Item"
    "ECurrencyType_EXP\020\004\022!\n\035ItemECurrencyType"
    "_POWER_POINT\020\005*\364\002\n\016ItemEMajorType\022\027\n\023Ite"
    "mEMajorType_None\020\000\022\033\n\027ItemEMajorType_CUR"
    "RENCY\020\001\022\030\n\024ItemEMajorType_CLOTH\020\002\022\030\n\024Ite"
    "mEMajorType_QUEST\020\003\022\036\n\032ItemEMajorType_CO"
    "NSUMABLES\020\004\022\037\n\033ItemEMajorType_TREASURE_B"
    "OX\020\005\022(\n$ItemEMajorType_ACHIEVEMENT_AND_T"
    "ITLE\020\006\022\035\n\031ItemEMajorType_HEAD_FRAME\020\007\022\030\n"
    "\024ItemEMajorType_VOICE\020\010\022\031\n\025ItemEMajorTyp"
    "e_ACTION\020\t\022\034\n\030ItemEMajorType_EXPANSION\020\n"
    "\022\033\n\027ItemEMajorType_MATERIAL\020\013*\250\014\n\016ItemEM"
    "inorType\022\027\n\023ItemEMinorType_None\020\000\022\032\n\026Ite"
    "mEMinorType_DIAMOND\020e\022\027\n\023ItemEMinorType_"
    "GOLD\020f\022\031\n\025ItemEMinorType_SILVER\020g\022\026\n\022Ite"
    "mEMinorType_EXP\020h\022\036\n\032ItemEMinorType_POWE"
    "R_POINT\020i\022\036\n\031ItemEMinorType_HAIR_STYLE\020\322"
    "\001\022\030\n\023ItemEMinorType_COAT\020\334\001\022 \n\033ItemEMino"
    "rType_UPPER_JACKET\020\346\001\022\034\n\027ItemEMinorType_"
    "TROUSERS\020\361\001\022\031\n\024ItemEMinorType_SKIRT\020\362\001\022\031"
    "\n\024ItemEMinorType_SOCKS\020\372\001\022\031\n\024ItemEMinorT"
    "ype_SHOES\020\204\002\022\"\n\035ItemEMinorType_HAIR_ACCE"
    "SSORY\020\217\002\022\027\n\022ItemEMinorType_HAT\020\220\002\022\033\n\026Ite"
    "mEMinorType_EARRING\020\221\002\022\034\n\027ItemEMinorType"
    "_NECKLACE\020\222\002\022\034\n\027ItemEMinorType_BRACELET\020"
    "\223\002\022\036\n\031ItemEMinorType_HAIR_CLASP\020\224\002\022\031\n\024It"
    "emEMinorType_GLOVE\020\225\002\022#\n\036ItemEMinorType_"
    "HANDHELD_OBJECT\020\226\002\022\033\n\026ItemEMinorType_SPE"
    "CIAL\020\227\002\022!\n\034ItemEMinorType_BASE_COSMETIC\020"
    "\231\002\022$\n\037ItemEMinorType_EYEBROW_COSMETIC\020\232\002"
    "\022\033\n\026ItemEMinorType_EYELASH\020\233\002\022+\n&ItemEMi"
    "norType_COSMETIC_CONTACT_LENSES\020\234\002\022 \n\033It"
    "emEMinorType_LIP_COSMETIC\020\235\002\022\036\n\031ItemEMin"
    "orType_SKIN_COLOR\020\236\002\022#\n\036ItemEMinorType_O"
    "NE_PIECE_DRESS\020\242\002\022(\n#ItemEMinorType_SWIT"
    "CH_CLOTHES_SCENE\020\243\002\022\031\n\024ItemEMinorType_QU"
    "EST\020\255\002\022\030\n\023ItemEMinorType_CAST\020\221\003\022\031\n\024Item"
    "EMinorType_SWORD\020\245\003\022\035\n\030ItemEMinorType_BO"
    "W_ARROW\020\246\003\022\031\n\024ItemEMinorType_WANDS\020\247\003\022 \n"
    "\033ItemEMinorType_SPECIAL_TOOL\020\250\003\022\030\n\023ItemE"
    "MinorType_FOOD\020\223\003\022 \n\033ItemEMinorType_TREA"
    "SURE_BOX\020\365\003\022\027\n\022ItemEMinorType_KEY\020\366\003\022-\n("
    "ItemEMinorType_MULTI_CHOOSE_TREASURE_BOX"
    "\020\367\003\022\037\n\032ItemEMinorType_ACHIEVEMENT\020\331\004\022\031\n\024"
    "ItemEMinorType_TITLE\020\332\004\022 \n\033ItemEMinorTyp"
    "e_AVATAR_FRAME\020\275\005\022\031\n\024ItemEMinorType_VOIC"
    "E\020\241\006\022\035\n\030ItemEMinorType_IDLE_POSE\020\205\007\022\036\n\031I"
    "temEMinorType_PHOTO_POSE\020\206\007\022\027\n\022ItemEMino"
    "rType_BAG\020\351\007\022#\n\036ItemEMinorType_FRIEND_CA"
    "PACITY\020\352\007\022)\n$ItemEMinorType_CONSTRUCTION"
    "_MATERIAL\020\315\010\022\"\n\035ItemEMinorType_DESIGN_DR"
    "AWING\020\316\010*\312\003\n\034ItemEClothersStarQualityTyp"
    "e\022%\n!ItemEClothersStarQualityType_None\020\000"
    "\022$\n ItemEClothersStarQualityType_ONE\020\001\022$"
    "\n ItemEClothersStarQualityType_TWO\020\002\022&\n\""
    "ItemEClothersStarQualityType_THREE\020\003\022%\n!"
    "ItemEClothersStarQualityType_FOUR\020\004\022%\n!I"
    "temEClothersStarQualityType_FIVE\020\005\022$\n It"
    "emEClothersStarQualityType_SIX\020\006\022&\n\"Item"
    "EClothersStarQualityType_SEVEN\020\007\022&\n\"Item"
    "EClothersStarQualityType_EIGHT\020\010\022%\n!Item"
    "EClothersStarQualityType_NINE\020\t\022$\n ItemE"
    "ClothersStarQualityType_TEN\020\n*j\n\020ItemECl"
    "othersTag\022\031\n\025ItemEClothersTag_None\020\000\022\036\n\032"
    "ItemEClothersTag_FANG_SHAI\020\001\022\033\n\027ItemEClo"
    "thersTag_WU_ZHE\020\002*>\n\014ItemEUseType\022\027\n\023Ite"
    "mEUseType_MANUAL\020\000\022\025\n\021ItemEUseType_AUTO\020"
    "\001*\320\002\n\030ItemEClothesHidePartType\022\"\n\036ItemEC"
    "lothesHidePartType_CHEST\020\000\022!\n\035ItemECloth"
    "esHidePartType_HEAD\020\001\022(\n$ItemEClothesHid"
    "ePartType_SPINE_UPPER\020\002\022(\n$ItemEClothesH"
    "idePartType_SPINE_LOWER\020\003\022 \n\034ItemEClothe"
    "sHidePartType_HIP\020\004\022&\n\"ItemEClothesHideP"
    "artType_LEG_UPPER\020\005\022\'\n#ItemEClothesHideP"
    "artType_LEG_MIDDLE\020\006\022&\n\"ItemEClothesHide"
    "PartType_LEG_LOWER\020\007*\276\003\n\030ItemEClothesPro"
    "pertyType\022!\n\035ItemEClothesPropertyType_No"
    "ne\020\000\022%\n!ItemEClothesPropertyType_JIAN_YU"
    "E\020\001\022#\n\037ItemEClothesPropertyType_HUA_LI\020\002"
    "\022\"\n\036ItemEClothesPropertyType_KE_AI\020\003\022&\n\""
    "ItemEClothesPropertyType_CHENG_SHU\020\004\022#\n\037"
    "ItemEClothesPropertyType_HUO_PO\020\005\022#\n\037Ite"
    "mEClothesPropertyType_YOU_YA\020\006\022&\n\"ItemEC"
    "lothesPropertyType_QING_CHUN\020\007\022%\n!ItemEC"
    "lothesPropertyType_XING_GAN\020\010\022\'\n#ItemECl"
    "othesPropertyType_QING_LIANG\020\t\022%\n!ItemEC"
    "lothesPropertyType_BAO_NUAN\020\n*u\n\014TestDem"
    "oEnum\022\025\n\021TestDemoEnum_NONE\020\000\022\022\n\016TestDemo"
    "Enum_A\020\001\022\022\n\016TestDemoEnum_B\020\002\022\022\n\016TestDemo"
    "Enum_C\020\004\022\022\n\016TestDemoEnum_D\020\005*u\n\014TestDemo"
    "Flag\022\025\n\021TestDemoEnum_None\020\000\022\022\n\016TestDemoF"
    "lag_A\020\001\022\022\n\016TestDemoFlag_B\020\002\022\022\n\016TestDemoF"
    "lag_C\020\004\022\022\n\016TestDemoFlag_D\020\010*G\n\017TestETest"
    "UeType\022\031\n\025TestETestUeType_WHITE\020\000\022\031\n\025Tes"
    "tETestUeType_BLACK\020\001*>\n\022TestETestEmptyEn"
    "um\022(\n$TestETestEmptyEnum_EMPTY_PLACEHOLD"
    "ER\020\000*\234\001\n\023TestETestEmptyEnum2\022\034\n\030TestETes"
    "tEmptyEnum2_None\020\000\022\'\n\"TestETestEmptyEnum"
    "2_SMALL_THAN_256\020\377\001\022\036\n\031TestETestEmptyEnu"
    "m2_X_256\020\200\002\022\036\n\031TestETestEmptyEnum2_X_257"
    "\020\201\002*\215\001\n\020TestETestQuality\022\031\n\025TestETestQua"
    "lity_None\020\000\022\026\n\022TestETestQuality_A\020\001\022\026\n\022T"
    "estETestQuality_B\020\002\022\026\n\022TestETestQuality_"
    "C\020\003\022\026\n\022TestETestQuality_D\020\004*\260\001\n\016TestAcce"
    "ssFlag\022\027\n\023TestAccessFlag_None\020\000\022\030\n\024TestA"
    "ccessFlag_WRITE\020\001\022\027\n\023TestAccessFlag_READ"
    "\020\002\022\033\n\027TestAccessFlag_TRUNCATE\020\004\022\026\n\022TestA"
    "ccessFlag_NEW\020\010\022\035\n\031TestAccessFlag_READ_W"
    "RITE\020\003b\006proto3"
};
static ::absl::once_flag descriptor_table_schema_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_schema_2eproto = {
    false,
    false,
    23134,
    descriptor_table_protodef_schema_2eproto,
    "schema.proto",
    &descriptor_table_schema_2eproto_once,
    nullptr,
    0,
    156,
    schemas,
    file_default_instances,
    TableStruct_schema_2eproto::offsets,
    file_level_metadata_schema_2eproto,
    file_level_enum_descriptors_schema_2eproto,
    file_level_service_descriptors_schema_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_schema_2eproto_getter() {
  return &descriptor_table_schema_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_schema_2eproto(&descriptor_table_schema_2eproto);
namespace cfg {
const ::google::protobuf::EnumDescriptor* AiEExecutor_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_schema_2eproto);
  return file_level_enum_descriptors_schema_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t AiEExecutor_internal_data_[] = {
    131072u, 0u, };
bool AiEExecutor_IsValid(int value) {
  return 0 <= value && value <= 1;
}
const ::google::protobuf::EnumDescriptor* AiEKeyType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_schema_2eproto);
  return file_level_enum_descriptors_schema_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t AiEKeyType_internal_data_[] = {
    720896u, 0u, };
bool AiEKeyType_IsValid(int value) {
  return 0 <= value && value <= 10;
}
const ::google::protobuf::EnumDescriptor* AiEFlowAbortMode_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_schema_2eproto);
  return file_level_enum_descriptors_schema_2eproto[2];
}
PROTOBUF_CONSTINIT const uint32_t AiEFlowAbortMode_internal_data_[] = {
    262144u, 0u, };
bool AiEFlowAbortMode_IsValid(int value) {
  return 0 <= value && value <= 3;
}
const ::google::protobuf::EnumDescriptor* AiEFinishMode_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_schema_2eproto);
  return file_level_enum_descriptors_schema_2eproto[3];
}
PROTOBUF_CONSTINIT const uint32_t AiEFinishMode_internal_data_[] = {
    131072u, 0u, };
bool AiEFinishMode_IsValid(int value) {
  return 0 <= value && value <= 1;
}
const ::google::protobuf::EnumDescriptor* AiENotifyObserverMode_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_schema_2eproto);
  return file_level_enum_descriptors_schema_2eproto[4];
}
PROTOBUF_CONSTINIT const uint32_t AiENotifyObserverMode_internal_data_[] = {
    131072u, 0u, };
bool AiENotifyObserverMode_IsValid(int value) {
  return 0 <= value && value <= 1;
}
const ::google::protobuf::EnumDescriptor* AiEOperator_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_schema_2eproto);
  return file_level_enum_descriptors_schema_2eproto[5];
}
PROTOBUF_CONSTINIT const uint32_t AiEOperator_internal_data_[] = {
    524288u, 0u, };
bool AiEOperator_IsValid(int value) {
  return 0 <= value && value <= 7;
}
const ::google::protobuf::EnumDescriptor* AudioType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_schema_2eproto);
  return file_level_enum_descriptors_schema_2eproto[6];
}
PROTOBUF_CONSTINIT const uint32_t AudioType_internal_data_[] = {
    196608u, 0u, };
bool AudioType_IsValid(int value) {
  return 0 <= value && value <= 2;
}
const ::google::protobuf::EnumDescriptor* CommonEBoolOperator_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_schema_2eproto);
  return file_level_enum_descriptors_schema_2eproto[7];
}
PROTOBUF_CONSTINIT const uint32_t CommonEBoolOperator_internal_data_[] = {
    131072u, 0u, };
bool CommonEBoolOperator_IsValid(int value) {
  return 0 <= value && value <= 1;
}
const ::google::protobuf::EnumDescriptor* ItemEItemQuality_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_schema_2eproto);
  return file_level_enum_descriptors_schema_2eproto[8];
}
PROTOBUF_CONSTINIT const uint32_t ItemEItemQuality_internal_data_[] = {
    327680u, 0u, };
bool ItemEItemQuality_IsValid(int value) {
  return 0 <= value && value <= 4;
}
const ::google::protobuf::EnumDescriptor* ItemECurrencyType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_schema_2eproto);
  return file_level_enum_descriptors_schema_2eproto[9];
}
PROTOBUF_CONSTINIT const uint32_t ItemECurrencyType_internal_data_[] = {
    393216u, 0u, };
bool ItemECurrencyType_IsValid(int value) {
  return 0 <= value && value <= 5;
}
const ::google::protobuf::EnumDescriptor* ItemEMajorType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_schema_2eproto);
  return file_level_enum_descriptors_schema_2eproto[10];
}
PROTOBUF_CONSTINIT const uint32_t ItemEMajorType_internal_data_[] = {
    786432u, 0u, };
bool ItemEMajorType_IsValid(int value) {
  return 0 <= value && value <= 11;
}
const ::google::protobuf::EnumDescriptor* ItemEMinorType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_schema_2eproto);
  return file_level_enum_descriptors_schema_2eproto[11];
}
PROTOBUF_CONSTINIT const uint32_t ItemEMinorType_internal_data_[] = {
    65536u, 655872u, 0u, 0u, 0u, 496u, 0u, 0u, 134348800u, 33751072u, 1065336840u, 4102u, 0u, 0u, 327680u, 240u, 0u, 7340032u, 1001u, 801u, 1101u, 602u, 902u, 1002u, 1102u, 601u, 701u, 901u, };
bool ItemEMinorType_IsValid(int value) {
  return ::_pbi::ValidateEnum(value, ItemEMinorType_internal_data_);
}
const ::google::protobuf::EnumDescriptor* ItemEClothersStarQualityType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_schema_2eproto);
  return file_level_enum_descriptors_schema_2eproto[12];
}
PROTOBUF_CONSTINIT const uint32_t ItemEClothersStarQualityType_internal_data_[] = {
    720896u, 0u, };
bool ItemEClothersStarQualityType_IsValid(int value) {
  return 0 <= value && value <= 10;
}
const ::google::protobuf::EnumDescriptor* ItemEClothersTag_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_schema_2eproto);
  return file_level_enum_descriptors_schema_2eproto[13];
}
PROTOBUF_CONSTINIT const uint32_t ItemEClothersTag_internal_data_[] = {
    196608u, 0u, };
bool ItemEClothersTag_IsValid(int value) {
  return 0 <= value && value <= 2;
}
const ::google::protobuf::EnumDescriptor* ItemEUseType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_schema_2eproto);
  return file_level_enum_descriptors_schema_2eproto[14];
}
PROTOBUF_CONSTINIT const uint32_t ItemEUseType_internal_data_[] = {
    131072u, 0u, };
bool ItemEUseType_IsValid(int value) {
  return 0 <= value && value <= 1;
}
const ::google::protobuf::EnumDescriptor* ItemEClothesHidePartType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_schema_2eproto);
  return file_level_enum_descriptors_schema_2eproto[15];
}
PROTOBUF_CONSTINIT const uint32_t ItemEClothesHidePartType_internal_data_[] = {
    524288u, 0u, };
bool ItemEClothesHidePartType_IsValid(int value) {
  return 0 <= value && value <= 7;
}
const ::google::protobuf::EnumDescriptor* ItemEClothesPropertyType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_schema_2eproto);
  return file_level_enum_descriptors_schema_2eproto[16];
}
PROTOBUF_CONSTINIT const uint32_t ItemEClothesPropertyType_internal_data_[] = {
    720896u, 0u, };
bool ItemEClothesPropertyType_IsValid(int value) {
  return 0 <= value && value <= 10;
}
const ::google::protobuf::EnumDescriptor* TestDemoEnum_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_schema_2eproto);
  return file_level_enum_descriptors_schema_2eproto[17];
}
PROTOBUF_CONSTINIT const uint32_t TestDemoEnum_internal_data_[] = {
    196608u, 32u, 6u, };
bool TestDemoEnum_IsValid(int value) {
  return 0 <= value && value <= 5 && ((55u >> value) & 1) != 0;
}
const ::google::protobuf::EnumDescriptor* TestDemoFlag_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_schema_2eproto);
  return file_level_enum_descriptors_schema_2eproto[18];
}
PROTOBUF_CONSTINIT const uint32_t TestDemoFlag_internal_data_[] = {
    196608u, 32u, 34u, };
bool TestDemoFlag_IsValid(int value) {
  return 0 <= value && value <= 8 && ((279u >> value) & 1) != 0;
}
const ::google::protobuf::EnumDescriptor* TestETestUeType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_schema_2eproto);
  return file_level_enum_descriptors_schema_2eproto[19];
}
PROTOBUF_CONSTINIT const uint32_t TestETestUeType_internal_data_[] = {
    131072u, 0u, };
bool TestETestUeType_IsValid(int value) {
  return 0 <= value && value <= 1;
}
const ::google::protobuf::EnumDescriptor* TestETestEmptyEnum_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_schema_2eproto);
  return file_level_enum_descriptors_schema_2eproto[20];
}
PROTOBUF_CONSTINIT const uint32_t TestETestEmptyEnum_internal_data_[] = {
    65536u, 0u, };
bool TestETestEmptyEnum_IsValid(int value) {
  return 0 <= value && value <= 0;
}
const ::google::protobuf::EnumDescriptor* TestETestEmptyEnum2_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_schema_2eproto);
  return file_level_enum_descriptors_schema_2eproto[21];
}
PROTOBUF_CONSTINIT const uint32_t TestETestEmptyEnum2_internal_data_[] = {
    65536u, 196608u, 256u, 255u, 257u, };
bool TestETestEmptyEnum2_IsValid(int value) {
  return ::_pbi::ValidateEnum(value, TestETestEmptyEnum2_internal_data_);
}
const ::google::protobuf::EnumDescriptor* TestETestQuality_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_schema_2eproto);
  return file_level_enum_descriptors_schema_2eproto[22];
}
PROTOBUF_CONSTINIT const uint32_t TestETestQuality_internal_data_[] = {
    327680u, 0u, };
bool TestETestQuality_IsValid(int value) {
  return 0 <= value && value <= 4;
}
const ::google::protobuf::EnumDescriptor* TestAccessFlag_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_schema_2eproto);
  return file_level_enum_descriptors_schema_2eproto[23];
}
PROTOBUF_CONSTINIT const uint32_t TestAccessFlag_internal_data_[] = {
    327680u, 32u, 8u, };
bool TestAccessFlag_IsValid(int value) {
  return 0 <= value && value <= 8 && ((287u >> value) & 1) != 0;
}
// ===================================================================

class AiBlackboard::_Internal {
 public:
};

AiBlackboard::AiBlackboard(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.AiBlackboard)
}
AiBlackboard::AiBlackboard(const AiBlackboard& from) : ::google::protobuf::Message() {
  AiBlackboard* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.keys_){from._impl_.keys_},
      decltype(_impl_.name_){},
      decltype(_impl_.desc_){},
      decltype(_impl_.parent_name_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _impl_.desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.desc_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_desc().empty()) {
    _this->_impl_.desc_.Set(from._internal_desc(), _this->GetArenaForAllocation());
  }
  _impl_.parent_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.parent_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_parent_name().empty()) {
    _this->_impl_.parent_name_.Set(from._internal_parent_name(), _this->GetArenaForAllocation());
  }

  // @@protoc_insertion_point(copy_constructor:cfg.AiBlackboard)
}
inline void AiBlackboard::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.keys_){arena},
      decltype(_impl_.name_){},
      decltype(_impl_.desc_){},
      decltype(_impl_.parent_name_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.desc_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.parent_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.parent_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
AiBlackboard::~AiBlackboard() {
  // @@protoc_insertion_point(destructor:cfg.AiBlackboard)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AiBlackboard::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.keys_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  _impl_.desc_.Destroy();
  _impl_.parent_name_.Destroy();
}
void AiBlackboard::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void AiBlackboard::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.AiBlackboard)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.keys_.Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.desc_.ClearToEmpty();
  _impl_.parent_name_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AiBlackboard::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 1, 44, 2> AiBlackboard::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AiBlackboard_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .cfg.AiBlackboardKey keys = 4 [packed = false];
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(AiBlackboard, _impl_.keys_)}},
    // string name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(AiBlackboard, _impl_.name_)}},
    // string desc = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(AiBlackboard, _impl_.desc_)}},
    // string parent_name = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(AiBlackboard, _impl_.parent_name_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string name = 1;
    {PROTOBUF_FIELD_OFFSET(AiBlackboard, _impl_.name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string desc = 2;
    {PROTOBUF_FIELD_OFFSET(AiBlackboard, _impl_.desc_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string parent_name = 3;
    {PROTOBUF_FIELD_OFFSET(AiBlackboard, _impl_.parent_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .cfg.AiBlackboardKey keys = 4 [packed = false];
    {PROTOBUF_FIELD_OFFSET(AiBlackboard, _impl_.keys_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::AiBlackboardKey>()},
  }}, {{
    "\20\4\4\13\0\0\0\0"
    "cfg.AiBlackboard"
    "name"
    "desc"
    "parent_name"
  }},
};

::uint8_t* AiBlackboard::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.AiBlackboard)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.AiBlackboard.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string desc = 2;
  if (!this->_internal_desc().empty()) {
    const std::string& _s = this->_internal_desc();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.AiBlackboard.desc");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string parent_name = 3;
  if (!this->_internal_parent_name().empty()) {
    const std::string& _s = this->_internal_parent_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.AiBlackboard.parent_name");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // repeated .cfg.AiBlackboardKey keys = 4 [packed = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_keys_size()); i < n; i++) {
    const auto& repfield = this->_internal_keys().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.AiBlackboard)
  return target;
}

::size_t AiBlackboard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.AiBlackboard)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cfg.AiBlackboardKey keys = 4 [packed = false];
  total_size += 1UL * this->_internal_keys_size();
  for (const auto& msg : this->_internal_keys()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // string desc = 2;
  if (!this->_internal_desc().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_desc());
  }

  // string parent_name = 3;
  if (!this->_internal_parent_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_parent_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AiBlackboard::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    AiBlackboard::MergeImpl
};
const ::google::protobuf::Message::ClassData*AiBlackboard::GetClassData() const { return &_class_data_; }


void AiBlackboard::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AiBlackboard*>(&to_msg);
  auto& from = static_cast<const AiBlackboard&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.AiBlackboard)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_keys()->MergeFrom(
      from._internal_keys());
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_desc().empty()) {
    _this->_internal_set_desc(from._internal_desc());
  }
  if (!from._internal_parent_name().empty()) {
    _this->_internal_set_parent_name(from._internal_parent_name());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AiBlackboard::CopyFrom(const AiBlackboard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.AiBlackboard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AiBlackboard::IsInitialized() const {
  return true;
}

void AiBlackboard::InternalSwap(AiBlackboard* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.keys_.InternalSwap(&other->_impl_.keys_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.desc_, lhs_arena,
                                       &other->_impl_.desc_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.parent_name_, lhs_arena,
                                       &other->_impl_.parent_name_, rhs_arena);
}

::google::protobuf::Metadata AiBlackboard::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[0]);
}
// ===================================================================

class AiBlackboardKey::_Internal {
 public:
};

AiBlackboardKey::AiBlackboardKey(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.AiBlackboardKey)
}
AiBlackboardKey::AiBlackboardKey(const AiBlackboardKey& from) : ::google::protobuf::Message() {
  AiBlackboardKey* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){},
      decltype(_impl_.desc_){},
      decltype(_impl_.type_class_name_){},
      decltype(_impl_.is_static_){},
      decltype(_impl_.type_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _impl_.desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.desc_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_desc().empty()) {
    _this->_impl_.desc_.Set(from._internal_desc(), _this->GetArenaForAllocation());
  }
  _impl_.type_class_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.type_class_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type_class_name().empty()) {
    _this->_impl_.type_class_name_.Set(from._internal_type_class_name(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.is_static_, &from._impl_.is_static_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.is_static_)) + sizeof(_impl_.type_));

  // @@protoc_insertion_point(copy_constructor:cfg.AiBlackboardKey)
}
inline void AiBlackboardKey::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){},
      decltype(_impl_.desc_){},
      decltype(_impl_.type_class_name_){},
      decltype(_impl_.is_static_){false},
      decltype(_impl_.type_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.desc_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.type_class_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.type_class_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
AiBlackboardKey::~AiBlackboardKey() {
  // @@protoc_insertion_point(destructor:cfg.AiBlackboardKey)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AiBlackboardKey::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.desc_.Destroy();
  _impl_.type_class_name_.Destroy();
}
void AiBlackboardKey::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void AiBlackboardKey::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.AiBlackboardKey)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.desc_.ClearToEmpty();
  _impl_.type_class_name_.ClearToEmpty();
  ::memset(&_impl_.is_static_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.is_static_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AiBlackboardKey::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 51, 2> AiBlackboardKey::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_AiBlackboardKey_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(AiBlackboardKey, _impl_.name_)}},
    // string desc = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(AiBlackboardKey, _impl_.desc_)}},
    // bool is_static = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AiBlackboardKey, _impl_.is_static_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(AiBlackboardKey, _impl_.is_static_)}},
    // .cfg.AiEKeyType type = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AiBlackboardKey, _impl_.type_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(AiBlackboardKey, _impl_.type_)}},
    // string type_class_name = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(AiBlackboardKey, _impl_.type_class_name_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string name = 1;
    {PROTOBUF_FIELD_OFFSET(AiBlackboardKey, _impl_.name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string desc = 2;
    {PROTOBUF_FIELD_OFFSET(AiBlackboardKey, _impl_.desc_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool is_static = 3;
    {PROTOBUF_FIELD_OFFSET(AiBlackboardKey, _impl_.is_static_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .cfg.AiEKeyType type = 4;
    {PROTOBUF_FIELD_OFFSET(AiBlackboardKey, _impl_.type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string type_class_name = 5;
    {PROTOBUF_FIELD_OFFSET(AiBlackboardKey, _impl_.type_class_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\23\4\4\0\0\17\0\0"
    "cfg.AiBlackboardKey"
    "name"
    "desc"
    "type_class_name"
  }},
};

::uint8_t* AiBlackboardKey::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.AiBlackboardKey)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.AiBlackboardKey.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string desc = 2;
  if (!this->_internal_desc().empty()) {
    const std::string& _s = this->_internal_desc();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.AiBlackboardKey.desc");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // bool is_static = 3;
  if (this->_internal_is_static() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_is_static(), target);
  }

  // .cfg.AiEKeyType type = 4;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_type(), target);
  }

  // string type_class_name = 5;
  if (!this->_internal_type_class_name().empty()) {
    const std::string& _s = this->_internal_type_class_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.AiBlackboardKey.type_class_name");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.AiBlackboardKey)
  return target;
}

::size_t AiBlackboardKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.AiBlackboardKey)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // string desc = 2;
  if (!this->_internal_desc().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_desc());
  }

  // string type_class_name = 5;
  if (!this->_internal_type_class_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_type_class_name());
  }

  // bool is_static = 3;
  if (this->_internal_is_static() != 0) {
    total_size += 2;
  }

  // .cfg.AiEKeyType type = 4;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AiBlackboardKey::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    AiBlackboardKey::MergeImpl
};
const ::google::protobuf::Message::ClassData*AiBlackboardKey::GetClassData() const { return &_class_data_; }


void AiBlackboardKey::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AiBlackboardKey*>(&to_msg);
  auto& from = static_cast<const AiBlackboardKey&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.AiBlackboardKey)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_desc().empty()) {
    _this->_internal_set_desc(from._internal_desc());
  }
  if (!from._internal_type_class_name().empty()) {
    _this->_internal_set_type_class_name(from._internal_type_class_name());
  }
  if (from._internal_is_static() != 0) {
    _this->_internal_set_is_static(from._internal_is_static());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AiBlackboardKey::CopyFrom(const AiBlackboardKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.AiBlackboardKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AiBlackboardKey::IsInitialized() const {
  return true;
}

void AiBlackboardKey::InternalSwap(AiBlackboardKey* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.desc_, lhs_arena,
                                       &other->_impl_.desc_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.type_class_name_, lhs_arena,
                                       &other->_impl_.type_class_name_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AiBlackboardKey, _impl_.type_)
      + sizeof(AiBlackboardKey::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(AiBlackboardKey, _impl_.is_static_)>(
          reinterpret_cast<char*>(&_impl_.is_static_),
          reinterpret_cast<char*>(&other->_impl_.is_static_));
}

::google::protobuf::Metadata AiBlackboardKey::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[1]);
}
// ===================================================================

class AiBehaviorTree::_Internal {
 public:
  using HasBits = decltype(std::declval<AiBehaviorTree>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AiBehaviorTree, _impl_._has_bits_);
  static const ::cfg::AiComposeNode& root(const AiBehaviorTree* msg);
  static void set_has_root(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cfg::AiComposeNode& AiBehaviorTree::_Internal::root(const AiBehaviorTree* msg) {
  return *msg->_impl_.root_;
}
AiBehaviorTree::AiBehaviorTree(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.AiBehaviorTree)
}
AiBehaviorTree::AiBehaviorTree(const AiBehaviorTree& from) : ::google::protobuf::Message() {
  AiBehaviorTree* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.name_){},
      decltype(_impl_.desc_){},
      decltype(_impl_.blackboard_id_){},
      decltype(_impl_.root_){nullptr},
      decltype(_impl_.id_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _impl_.desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.desc_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_desc().empty()) {
    _this->_impl_.desc_.Set(from._internal_desc(), _this->GetArenaForAllocation());
  }
  _impl_.blackboard_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.blackboard_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_blackboard_id().empty()) {
    _this->_impl_.blackboard_id_.Set(from._internal_blackboard_id(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.root_ = new ::cfg::AiComposeNode(*from._impl_.root_);
  }
  _this->_impl_.id_ = from._impl_.id_;

  // @@protoc_insertion_point(copy_constructor:cfg.AiBehaviorTree)
}
inline void AiBehaviorTree::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.name_){},
      decltype(_impl_.desc_){},
      decltype(_impl_.blackboard_id_){},
      decltype(_impl_.root_){nullptr},
      decltype(_impl_.id_){0},
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.desc_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.blackboard_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.blackboard_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
AiBehaviorTree::~AiBehaviorTree() {
  // @@protoc_insertion_point(destructor:cfg.AiBehaviorTree)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AiBehaviorTree::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.desc_.Destroy();
  _impl_.blackboard_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.root_;
}
void AiBehaviorTree::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void AiBehaviorTree::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.AiBehaviorTree)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.desc_.ClearToEmpty();
  _impl_.blackboard_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.root_ != nullptr);
    _impl_.root_->Clear();
  }
  _impl_.id_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AiBehaviorTree::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 1, 48, 2> AiBehaviorTree::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AiBehaviorTree, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AiBehaviorTree_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AiBehaviorTree, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(AiBehaviorTree, _impl_.id_)}},
    // string name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(AiBehaviorTree, _impl_.name_)}},
    // string desc = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(AiBehaviorTree, _impl_.desc_)}},
    // string blackboard_id = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(AiBehaviorTree, _impl_.blackboard_id_)}},
    // .cfg.AiComposeNode root = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 0, 0, PROTOBUF_FIELD_OFFSET(AiBehaviorTree, _impl_.root_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(AiBehaviorTree, _impl_.id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string name = 2;
    {PROTOBUF_FIELD_OFFSET(AiBehaviorTree, _impl_.name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string desc = 3;
    {PROTOBUF_FIELD_OFFSET(AiBehaviorTree, _impl_.desc_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string blackboard_id = 4;
    {PROTOBUF_FIELD_OFFSET(AiBehaviorTree, _impl_.blackboard_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .cfg.AiComposeNode root = 5;
    {PROTOBUF_FIELD_OFFSET(AiBehaviorTree, _impl_.root_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::AiComposeNode>()},
  }}, {{
    "\22\0\4\4\15\0\0\0"
    "cfg.AiBehaviorTree"
    "name"
    "desc"
    "blackboard_id"
  }},
};

::uint8_t* AiBehaviorTree::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.AiBehaviorTree)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.AiBehaviorTree.name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string desc = 3;
  if (!this->_internal_desc().empty()) {
    const std::string& _s = this->_internal_desc();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.AiBehaviorTree.desc");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string blackboard_id = 4;
  if (!this->_internal_blackboard_id().empty()) {
    const std::string& _s = this->_internal_blackboard_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.AiBehaviorTree.blackboard_id");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cfg.AiComposeNode root = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::root(this),
        _Internal::root(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.AiBehaviorTree)
  return target;
}

::size_t AiBehaviorTree::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.AiBehaviorTree)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // string desc = 3;
  if (!this->_internal_desc().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_desc());
  }

  // string blackboard_id = 4;
  if (!this->_internal_blackboard_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_blackboard_id());
  }

  // .cfg.AiComposeNode root = 5;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.root_);
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AiBehaviorTree::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    AiBehaviorTree::MergeImpl
};
const ::google::protobuf::Message::ClassData*AiBehaviorTree::GetClassData() const { return &_class_data_; }


void AiBehaviorTree::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AiBehaviorTree*>(&to_msg);
  auto& from = static_cast<const AiBehaviorTree&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.AiBehaviorTree)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_desc().empty()) {
    _this->_internal_set_desc(from._internal_desc());
  }
  if (!from._internal_blackboard_id().empty()) {
    _this->_internal_set_blackboard_id(from._internal_blackboard_id());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_root()->::cfg::AiComposeNode::MergeFrom(
        from._internal_root());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AiBehaviorTree::CopyFrom(const AiBehaviorTree& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.AiBehaviorTree)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AiBehaviorTree::IsInitialized() const {
  return true;
}

void AiBehaviorTree::InternalSwap(AiBehaviorTree* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.desc_, lhs_arena,
                                       &other->_impl_.desc_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.blackboard_id_, lhs_arena,
                                       &other->_impl_.blackboard_id_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AiBehaviorTree, _impl_.id_)
      + sizeof(AiBehaviorTree::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(AiBehaviorTree, _impl_.root_)>(
          reinterpret_cast<char*>(&_impl_.root_),
          reinterpret_cast<char*>(&other->_impl_.root_));
}

::google::protobuf::Metadata AiBehaviorTree::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[2]);
}
// ===================================================================

class AiNode::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::cfg::AiNode, _impl_._oneof_case_);
  static const ::cfg::AiUeSetDefaultFocus& uesetdefaultfocus(const AiNode* msg);
  static const ::cfg::AiExecuteTimeStatistic& executetimestatistic(const AiNode* msg);
  static const ::cfg::AiChooseTarget& choosetarget(const AiNode* msg);
  static const ::cfg::AiKeepFaceTarget& keepfacetarget(const AiNode* msg);
  static const ::cfg::AiGetOwnerPlayer& getownerplayer(const AiNode* msg);
  static const ::cfg::AiUpdateDailyBehaviorProps& updatedailybehaviorprops(const AiNode* msg);
  static const ::cfg::AiUeLoop& ueloop(const AiNode* msg);
  static const ::cfg::AiUeCooldown& uecooldown(const AiNode* msg);
  static const ::cfg::AiUeTimeLimit& uetimelimit(const AiNode* msg);
  static const ::cfg::AiUeBlackboard& ueblackboard(const AiNode* msg);
  static const ::cfg::AiUeForceSuccess& ueforcesuccess(const AiNode* msg);
  static const ::cfg::AiIsAtLocation& isatlocation(const AiNode* msg);
  static const ::cfg::AiDistanceLessThan& distancelessthan(const AiNode* msg);
  static const ::cfg::AiSequence& sequence(const AiNode* msg);
  static const ::cfg::AiSelector& selector(const AiNode* msg);
  static const ::cfg::AiSimpleParallel& simpleparallel(const AiNode* msg);
  static const ::cfg::AiUeWait& uewait(const AiNode* msg);
  static const ::cfg::AiUeWaitBlackboardTime& uewaitblackboardtime(const AiNode* msg);
  static const ::cfg::AiMoveToTarget& movetotarget(const AiNode* msg);
  static const ::cfg::AiChooseSkill& chooseskill(const AiNode* msg);
  static const ::cfg::AiMoveToRandomLocation& movetorandomlocation(const AiNode* msg);
  static const ::cfg::AiMoveToLocation& movetolocation(const AiNode* msg);
  static const ::cfg::AiDebugPrint& debugprint(const AiNode* msg);
};

const ::cfg::AiUeSetDefaultFocus& AiNode::_Internal::uesetdefaultfocus(const AiNode* msg) {
  return *msg->_impl_.value_.uesetdefaultfocus_;
}
const ::cfg::AiExecuteTimeStatistic& AiNode::_Internal::executetimestatistic(const AiNode* msg) {
  return *msg->_impl_.value_.executetimestatistic_;
}
const ::cfg::AiChooseTarget& AiNode::_Internal::choosetarget(const AiNode* msg) {
  return *msg->_impl_.value_.choosetarget_;
}
const ::cfg::AiKeepFaceTarget& AiNode::_Internal::keepfacetarget(const AiNode* msg) {
  return *msg->_impl_.value_.keepfacetarget_;
}
const ::cfg::AiGetOwnerPlayer& AiNode::_Internal::getownerplayer(const AiNode* msg) {
  return *msg->_impl_.value_.getownerplayer_;
}
const ::cfg::AiUpdateDailyBehaviorProps& AiNode::_Internal::updatedailybehaviorprops(const AiNode* msg) {
  return *msg->_impl_.value_.updatedailybehaviorprops_;
}
const ::cfg::AiUeLoop& AiNode::_Internal::ueloop(const AiNode* msg) {
  return *msg->_impl_.value_.ueloop_;
}
const ::cfg::AiUeCooldown& AiNode::_Internal::uecooldown(const AiNode* msg) {
  return *msg->_impl_.value_.uecooldown_;
}
const ::cfg::AiUeTimeLimit& AiNode::_Internal::uetimelimit(const AiNode* msg) {
  return *msg->_impl_.value_.uetimelimit_;
}
const ::cfg::AiUeBlackboard& AiNode::_Internal::ueblackboard(const AiNode* msg) {
  return *msg->_impl_.value_.ueblackboard_;
}
const ::cfg::AiUeForceSuccess& AiNode::_Internal::ueforcesuccess(const AiNode* msg) {
  return *msg->_impl_.value_.ueforcesuccess_;
}
const ::cfg::AiIsAtLocation& AiNode::_Internal::isatlocation(const AiNode* msg) {
  return *msg->_impl_.value_.isatlocation_;
}
const ::cfg::AiDistanceLessThan& AiNode::_Internal::distancelessthan(const AiNode* msg) {
  return *msg->_impl_.value_.distancelessthan_;
}
const ::cfg::AiSequence& AiNode::_Internal::sequence(const AiNode* msg) {
  return *msg->_impl_.value_.sequence_;
}
const ::cfg::AiSelector& AiNode::_Internal::selector(const AiNode* msg) {
  return *msg->_impl_.value_.selector_;
}
const ::cfg::AiSimpleParallel& AiNode::_Internal::simpleparallel(const AiNode* msg) {
  return *msg->_impl_.value_.simpleparallel_;
}
const ::cfg::AiUeWait& AiNode::_Internal::uewait(const AiNode* msg) {
  return *msg->_impl_.value_.uewait_;
}
const ::cfg::AiUeWaitBlackboardTime& AiNode::_Internal::uewaitblackboardtime(const AiNode* msg) {
  return *msg->_impl_.value_.uewaitblackboardtime_;
}
const ::cfg::AiMoveToTarget& AiNode::_Internal::movetotarget(const AiNode* msg) {
  return *msg->_impl_.value_.movetotarget_;
}
const ::cfg::AiChooseSkill& AiNode::_Internal::chooseskill(const AiNode* msg) {
  return *msg->_impl_.value_.chooseskill_;
}
const ::cfg::AiMoveToRandomLocation& AiNode::_Internal::movetorandomlocation(const AiNode* msg) {
  return *msg->_impl_.value_.movetorandomlocation_;
}
const ::cfg::AiMoveToLocation& AiNode::_Internal::movetolocation(const AiNode* msg) {
  return *msg->_impl_.value_.movetolocation_;
}
const ::cfg::AiDebugPrint& AiNode::_Internal::debugprint(const AiNode* msg) {
  return *msg->_impl_.value_.debugprint_;
}
void AiNode::set_allocated_uesetdefaultfocus(::cfg::AiUeSetDefaultFocus* uesetdefaultfocus) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (uesetdefaultfocus) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(uesetdefaultfocus);
    if (message_arena != submessage_arena) {
      uesetdefaultfocus = ::google::protobuf::internal::GetOwnedMessage(message_arena, uesetdefaultfocus, submessage_arena);
    }
    set_has_uesetdefaultfocus();
    _impl_.value_.uesetdefaultfocus_ = uesetdefaultfocus;
  }
  // @@protoc_insertion_point(field_set_allocated:cfg.AiNode.UeSetDefaultFocus)
}
void AiNode::set_allocated_executetimestatistic(::cfg::AiExecuteTimeStatistic* executetimestatistic) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (executetimestatistic) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(executetimestatistic);
    if (message_arena != submessage_arena) {
      executetimestatistic = ::google::protobuf::internal::GetOwnedMessage(message_arena, executetimestatistic, submessage_arena);
    }
    set_has_executetimestatistic();
    _impl_.value_.executetimestatistic_ = executetimestatistic;
  }
  // @@protoc_insertion_point(field_set_allocated:cfg.AiNode.ExecuteTimeStatistic)
}
void AiNode::set_allocated_choosetarget(::cfg::AiChooseTarget* choosetarget) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (choosetarget) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(choosetarget);
    if (message_arena != submessage_arena) {
      choosetarget = ::google::protobuf::internal::GetOwnedMessage(message_arena, choosetarget, submessage_arena);
    }
    set_has_choosetarget();
    _impl_.value_.choosetarget_ = choosetarget;
  }
  // @@protoc_insertion_point(field_set_allocated:cfg.AiNode.ChooseTarget)
}
void AiNode::set_allocated_keepfacetarget(::cfg::AiKeepFaceTarget* keepfacetarget) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (keepfacetarget) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(keepfacetarget);
    if (message_arena != submessage_arena) {
      keepfacetarget = ::google::protobuf::internal::GetOwnedMessage(message_arena, keepfacetarget, submessage_arena);
    }
    set_has_keepfacetarget();
    _impl_.value_.keepfacetarget_ = keepfacetarget;
  }
  // @@protoc_insertion_point(field_set_allocated:cfg.AiNode.KeepFaceTarget)
}
void AiNode::set_allocated_getownerplayer(::cfg::AiGetOwnerPlayer* getownerplayer) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (getownerplayer) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(getownerplayer);
    if (message_arena != submessage_arena) {
      getownerplayer = ::google::protobuf::internal::GetOwnedMessage(message_arena, getownerplayer, submessage_arena);
    }
    set_has_getownerplayer();
    _impl_.value_.getownerplayer_ = getownerplayer;
  }
  // @@protoc_insertion_point(field_set_allocated:cfg.AiNode.GetOwnerPlayer)
}
void AiNode::set_allocated_updatedailybehaviorprops(::cfg::AiUpdateDailyBehaviorProps* updatedailybehaviorprops) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (updatedailybehaviorprops) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(updatedailybehaviorprops);
    if (message_arena != submessage_arena) {
      updatedailybehaviorprops = ::google::protobuf::internal::GetOwnedMessage(message_arena, updatedailybehaviorprops, submessage_arena);
    }
    set_has_updatedailybehaviorprops();
    _impl_.value_.updatedailybehaviorprops_ = updatedailybehaviorprops;
  }
  // @@protoc_insertion_point(field_set_allocated:cfg.AiNode.UpdateDailyBehaviorProps)
}
void AiNode::set_allocated_ueloop(::cfg::AiUeLoop* ueloop) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (ueloop) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(ueloop);
    if (message_arena != submessage_arena) {
      ueloop = ::google::protobuf::internal::GetOwnedMessage(message_arena, ueloop, submessage_arena);
    }
    set_has_ueloop();
    _impl_.value_.ueloop_ = ueloop;
  }
  // @@protoc_insertion_point(field_set_allocated:cfg.AiNode.UeLoop)
}
void AiNode::set_allocated_uecooldown(::cfg::AiUeCooldown* uecooldown) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (uecooldown) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(uecooldown);
    if (message_arena != submessage_arena) {
      uecooldown = ::google::protobuf::internal::GetOwnedMessage(message_arena, uecooldown, submessage_arena);
    }
    set_has_uecooldown();
    _impl_.value_.uecooldown_ = uecooldown;
  }
  // @@protoc_insertion_point(field_set_allocated:cfg.AiNode.UeCooldown)
}
void AiNode::set_allocated_uetimelimit(::cfg::AiUeTimeLimit* uetimelimit) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (uetimelimit) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(uetimelimit);
    if (message_arena != submessage_arena) {
      uetimelimit = ::google::protobuf::internal::GetOwnedMessage(message_arena, uetimelimit, submessage_arena);
    }
    set_has_uetimelimit();
    _impl_.value_.uetimelimit_ = uetimelimit;
  }
  // @@protoc_insertion_point(field_set_allocated:cfg.AiNode.UeTimeLimit)
}
void AiNode::set_allocated_ueblackboard(::cfg::AiUeBlackboard* ueblackboard) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (ueblackboard) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(ueblackboard);
    if (message_arena != submessage_arena) {
      ueblackboard = ::google::protobuf::internal::GetOwnedMessage(message_arena, ueblackboard, submessage_arena);
    }
    set_has_ueblackboard();
    _impl_.value_.ueblackboard_ = ueblackboard;
  }
  // @@protoc_insertion_point(field_set_allocated:cfg.AiNode.UeBlackboard)
}
void AiNode::set_allocated_ueforcesuccess(::cfg::AiUeForceSuccess* ueforcesuccess) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (ueforcesuccess) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(ueforcesuccess);
    if (message_arena != submessage_arena) {
      ueforcesuccess = ::google::protobuf::internal::GetOwnedMessage(message_arena, ueforcesuccess, submessage_arena);
    }
    set_has_ueforcesuccess();
    _impl_.value_.ueforcesuccess_ = ueforcesuccess;
  }
  // @@protoc_insertion_point(field_set_allocated:cfg.AiNode.UeForceSuccess)
}
void AiNode::set_allocated_isatlocation(::cfg::AiIsAtLocation* isatlocation) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (isatlocation) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(isatlocation);
    if (message_arena != submessage_arena) {
      isatlocation = ::google::protobuf::internal::GetOwnedMessage(message_arena, isatlocation, submessage_arena);
    }
    set_has_isatlocation();
    _impl_.value_.isatlocation_ = isatlocation;
  }
  // @@protoc_insertion_point(field_set_allocated:cfg.AiNode.IsAtLocation)
}
void AiNode::set_allocated_distancelessthan(::cfg::AiDistanceLessThan* distancelessthan) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (distancelessthan) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(distancelessthan);
    if (message_arena != submessage_arena) {
      distancelessthan = ::google::protobuf::internal::GetOwnedMessage(message_arena, distancelessthan, submessage_arena);
    }
    set_has_distancelessthan();
    _impl_.value_.distancelessthan_ = distancelessthan;
  }
  // @@protoc_insertion_point(field_set_allocated:cfg.AiNode.DistanceLessThan)
}
void AiNode::set_allocated_sequence(::cfg::AiSequence* sequence) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (sequence) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(sequence);
    if (message_arena != submessage_arena) {
      sequence = ::google::protobuf::internal::GetOwnedMessage(message_arena, sequence, submessage_arena);
    }
    set_has_sequence();
    _impl_.value_.sequence_ = sequence;
  }
  // @@protoc_insertion_point(field_set_allocated:cfg.AiNode.Sequence)
}
void AiNode::set_allocated_selector(::cfg::AiSelector* selector) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (selector) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(selector);
    if (message_arena != submessage_arena) {
      selector = ::google::protobuf::internal::GetOwnedMessage(message_arena, selector, submessage_arena);
    }
    set_has_selector();
    _impl_.value_.selector_ = selector;
  }
  // @@protoc_insertion_point(field_set_allocated:cfg.AiNode.Selector)
}
void AiNode::set_allocated_simpleparallel(::cfg::AiSimpleParallel* simpleparallel) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (simpleparallel) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(simpleparallel);
    if (message_arena != submessage_arena) {
      simpleparallel = ::google::protobuf::internal::GetOwnedMessage(message_arena, simpleparallel, submessage_arena);
    }
    set_has_simpleparallel();
    _impl_.value_.simpleparallel_ = simpleparallel;
  }
  // @@protoc_insertion_point(field_set_allocated:cfg.AiNode.SimpleParallel)
}
void AiNode::set_allocated_uewait(::cfg::AiUeWait* uewait) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (uewait) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(uewait);
    if (message_arena != submessage_arena) {
      uewait = ::google::protobuf::internal::GetOwnedMessage(message_arena, uewait, submessage_arena);
    }
    set_has_uewait();
    _impl_.value_.uewait_ = uewait;
  }
  // @@protoc_insertion_point(field_set_allocated:cfg.AiNode.UeWait)
}
void AiNode::set_allocated_uewaitblackboardtime(::cfg::AiUeWaitBlackboardTime* uewaitblackboardtime) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (uewaitblackboardtime) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(uewaitblackboardtime);
    if (message_arena != submessage_arena) {
      uewaitblackboardtime = ::google::protobuf::internal::GetOwnedMessage(message_arena, uewaitblackboardtime, submessage_arena);
    }
    set_has_uewaitblackboardtime();
    _impl_.value_.uewaitblackboardtime_ = uewaitblackboardtime;
  }
  // @@protoc_insertion_point(field_set_allocated:cfg.AiNode.UeWaitBlackboardTime)
}
void AiNode::set_allocated_movetotarget(::cfg::AiMoveToTarget* movetotarget) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (movetotarget) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(movetotarget);
    if (message_arena != submessage_arena) {
      movetotarget = ::google::protobuf::internal::GetOwnedMessage(message_arena, movetotarget, submessage_arena);
    }
    set_has_movetotarget();
    _impl_.value_.movetotarget_ = movetotarget;
  }
  // @@protoc_insertion_point(field_set_allocated:cfg.AiNode.MoveToTarget)
}
void AiNode::set_allocated_chooseskill(::cfg::AiChooseSkill* chooseskill) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (chooseskill) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(chooseskill);
    if (message_arena != submessage_arena) {
      chooseskill = ::google::protobuf::internal::GetOwnedMessage(message_arena, chooseskill, submessage_arena);
    }
    set_has_chooseskill();
    _impl_.value_.chooseskill_ = chooseskill;
  }
  // @@protoc_insertion_point(field_set_allocated:cfg.AiNode.ChooseSkill)
}
void AiNode::set_allocated_movetorandomlocation(::cfg::AiMoveToRandomLocation* movetorandomlocation) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (movetorandomlocation) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(movetorandomlocation);
    if (message_arena != submessage_arena) {
      movetorandomlocation = ::google::protobuf::internal::GetOwnedMessage(message_arena, movetorandomlocation, submessage_arena);
    }
    set_has_movetorandomlocation();
    _impl_.value_.movetorandomlocation_ = movetorandomlocation;
  }
  // @@protoc_insertion_point(field_set_allocated:cfg.AiNode.MoveToRandomLocation)
}
void AiNode::set_allocated_movetolocation(::cfg::AiMoveToLocation* movetolocation) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (movetolocation) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(movetolocation);
    if (message_arena != submessage_arena) {
      movetolocation = ::google::protobuf::internal::GetOwnedMessage(message_arena, movetolocation, submessage_arena);
    }
    set_has_movetolocation();
    _impl_.value_.movetolocation_ = movetolocation;
  }
  // @@protoc_insertion_point(field_set_allocated:cfg.AiNode.MoveToLocation)
}
void AiNode::set_allocated_debugprint(::cfg::AiDebugPrint* debugprint) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (debugprint) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(debugprint);
    if (message_arena != submessage_arena) {
      debugprint = ::google::protobuf::internal::GetOwnedMessage(message_arena, debugprint, submessage_arena);
    }
    set_has_debugprint();
    _impl_.value_.debugprint_ = debugprint;
  }
  // @@protoc_insertion_point(field_set_allocated:cfg.AiNode.DebugPrint)
}
AiNode::AiNode(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.AiNode)
}
AiNode::AiNode(const AiNode& from) : ::google::protobuf::Message() {
  AiNode* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_._oneof_case_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kUeSetDefaultFocus: {
      _this->_internal_mutable_uesetdefaultfocus()->::cfg::AiUeSetDefaultFocus::MergeFrom(
          from._internal_uesetdefaultfocus());
      break;
    }
    case kExecuteTimeStatistic: {
      _this->_internal_mutable_executetimestatistic()->::cfg::AiExecuteTimeStatistic::MergeFrom(
          from._internal_executetimestatistic());
      break;
    }
    case kChooseTarget: {
      _this->_internal_mutable_choosetarget()->::cfg::AiChooseTarget::MergeFrom(
          from._internal_choosetarget());
      break;
    }
    case kKeepFaceTarget: {
      _this->_internal_mutable_keepfacetarget()->::cfg::AiKeepFaceTarget::MergeFrom(
          from._internal_keepfacetarget());
      break;
    }
    case kGetOwnerPlayer: {
      _this->_internal_mutable_getownerplayer()->::cfg::AiGetOwnerPlayer::MergeFrom(
          from._internal_getownerplayer());
      break;
    }
    case kUpdateDailyBehaviorProps: {
      _this->_internal_mutable_updatedailybehaviorprops()->::cfg::AiUpdateDailyBehaviorProps::MergeFrom(
          from._internal_updatedailybehaviorprops());
      break;
    }
    case kUeLoop: {
      _this->_internal_mutable_ueloop()->::cfg::AiUeLoop::MergeFrom(
          from._internal_ueloop());
      break;
    }
    case kUeCooldown: {
      _this->_internal_mutable_uecooldown()->::cfg::AiUeCooldown::MergeFrom(
          from._internal_uecooldown());
      break;
    }
    case kUeTimeLimit: {
      _this->_internal_mutable_uetimelimit()->::cfg::AiUeTimeLimit::MergeFrom(
          from._internal_uetimelimit());
      break;
    }
    case kUeBlackboard: {
      _this->_internal_mutable_ueblackboard()->::cfg::AiUeBlackboard::MergeFrom(
          from._internal_ueblackboard());
      break;
    }
    case kUeForceSuccess: {
      _this->_internal_mutable_ueforcesuccess()->::cfg::AiUeForceSuccess::MergeFrom(
          from._internal_ueforcesuccess());
      break;
    }
    case kIsAtLocation: {
      _this->_internal_mutable_isatlocation()->::cfg::AiIsAtLocation::MergeFrom(
          from._internal_isatlocation());
      break;
    }
    case kDistanceLessThan: {
      _this->_internal_mutable_distancelessthan()->::cfg::AiDistanceLessThan::MergeFrom(
          from._internal_distancelessthan());
      break;
    }
    case kSequence: {
      _this->_internal_mutable_sequence()->::cfg::AiSequence::MergeFrom(
          from._internal_sequence());
      break;
    }
    case kSelector: {
      _this->_internal_mutable_selector()->::cfg::AiSelector::MergeFrom(
          from._internal_selector());
      break;
    }
    case kSimpleParallel: {
      _this->_internal_mutable_simpleparallel()->::cfg::AiSimpleParallel::MergeFrom(
          from._internal_simpleparallel());
      break;
    }
    case kUeWait: {
      _this->_internal_mutable_uewait()->::cfg::AiUeWait::MergeFrom(
          from._internal_uewait());
      break;
    }
    case kUeWaitBlackboardTime: {
      _this->_internal_mutable_uewaitblackboardtime()->::cfg::AiUeWaitBlackboardTime::MergeFrom(
          from._internal_uewaitblackboardtime());
      break;
    }
    case kMoveToTarget: {
      _this->_internal_mutable_movetotarget()->::cfg::AiMoveToTarget::MergeFrom(
          from._internal_movetotarget());
      break;
    }
    case kChooseSkill: {
      _this->_internal_mutable_chooseskill()->::cfg::AiChooseSkill::MergeFrom(
          from._internal_chooseskill());
      break;
    }
    case kMoveToRandomLocation: {
      _this->_internal_mutable_movetorandomlocation()->::cfg::AiMoveToRandomLocation::MergeFrom(
          from._internal_movetorandomlocation());
      break;
    }
    case kMoveToLocation: {
      _this->_internal_mutable_movetolocation()->::cfg::AiMoveToLocation::MergeFrom(
          from._internal_movetolocation());
      break;
    }
    case kDebugPrint: {
      _this->_internal_mutable_debugprint()->::cfg::AiDebugPrint::MergeFrom(
          from._internal_debugprint());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }

  // @@protoc_insertion_point(copy_constructor:cfg.AiNode)
}
inline void AiNode::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_._oneof_case_)*/ {},
  };
  clear_has_value();
}
AiNode::~AiNode() {
  // @@protoc_insertion_point(destructor:cfg.AiNode)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AiNode::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_value()) {
    clear_value();
  }
}
void AiNode::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AiNode::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:cfg.AiNode)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  switch (value_case()) {
    case kUeSetDefaultFocus: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.uesetdefaultfocus_;
      }
      break;
    }
    case kExecuteTimeStatistic: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.executetimestatistic_;
      }
      break;
    }
    case kChooseTarget: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.choosetarget_;
      }
      break;
    }
    case kKeepFaceTarget: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.keepfacetarget_;
      }
      break;
    }
    case kGetOwnerPlayer: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.getownerplayer_;
      }
      break;
    }
    case kUpdateDailyBehaviorProps: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.updatedailybehaviorprops_;
      }
      break;
    }
    case kUeLoop: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.ueloop_;
      }
      break;
    }
    case kUeCooldown: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.uecooldown_;
      }
      break;
    }
    case kUeTimeLimit: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.uetimelimit_;
      }
      break;
    }
    case kUeBlackboard: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.ueblackboard_;
      }
      break;
    }
    case kUeForceSuccess: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.ueforcesuccess_;
      }
      break;
    }
    case kIsAtLocation: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.isatlocation_;
      }
      break;
    }
    case kDistanceLessThan: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.distancelessthan_;
      }
      break;
    }
    case kSequence: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.sequence_;
      }
      break;
    }
    case kSelector: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.selector_;
      }
      break;
    }
    case kSimpleParallel: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.simpleparallel_;
      }
      break;
    }
    case kUeWait: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.uewait_;
      }
      break;
    }
    case kUeWaitBlackboardTime: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.uewaitblackboardtime_;
      }
      break;
    }
    case kMoveToTarget: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.movetotarget_;
      }
      break;
    }
    case kChooseSkill: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.chooseskill_;
      }
      break;
    }
    case kMoveToRandomLocation: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.movetorandomlocation_;
      }
      break;
    }
    case kMoveToLocation: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.movetolocation_;
      }
      break;
    }
    case kDebugPrint: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.debugprint_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}


PROTOBUF_NOINLINE void AiNode::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.AiNode)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AiNode::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 23, 23, 0, 2> AiNode::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    23, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4286578688,  // skipmap
    offsetof(decltype(_table_), field_entries),
    23,  // num_field_entries
    23,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AiNode_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .cfg.AiUeSetDefaultFocus UeSetDefaultFocus = 1;
    {PROTOBUF_FIELD_OFFSET(AiNode, _impl_.value_.uesetdefaultfocus_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cfg.AiExecuteTimeStatistic ExecuteTimeStatistic = 2;
    {PROTOBUF_FIELD_OFFSET(AiNode, _impl_.value_.executetimestatistic_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cfg.AiChooseTarget ChooseTarget = 3;
    {PROTOBUF_FIELD_OFFSET(AiNode, _impl_.value_.choosetarget_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cfg.AiKeepFaceTarget KeepFaceTarget = 4;
    {PROTOBUF_FIELD_OFFSET(AiNode, _impl_.value_.keepfacetarget_), _Internal::kOneofCaseOffset + 0, 3,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cfg.AiGetOwnerPlayer GetOwnerPlayer = 5;
    {PROTOBUF_FIELD_OFFSET(AiNode, _impl_.value_.getownerplayer_), _Internal::kOneofCaseOffset + 0, 4,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cfg.AiUpdateDailyBehaviorProps UpdateDailyBehaviorProps = 6;
    {PROTOBUF_FIELD_OFFSET(AiNode, _impl_.value_.updatedailybehaviorprops_), _Internal::kOneofCaseOffset + 0, 5,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cfg.AiUeLoop UeLoop = 7;
    {PROTOBUF_FIELD_OFFSET(AiNode, _impl_.value_.ueloop_), _Internal::kOneofCaseOffset + 0, 6,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cfg.AiUeCooldown UeCooldown = 8;
    {PROTOBUF_FIELD_OFFSET(AiNode, _impl_.value_.uecooldown_), _Internal::kOneofCaseOffset + 0, 7,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cfg.AiUeTimeLimit UeTimeLimit = 9;
    {PROTOBUF_FIELD_OFFSET(AiNode, _impl_.value_.uetimelimit_), _Internal::kOneofCaseOffset + 0, 8,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cfg.AiUeBlackboard UeBlackboard = 10;
    {PROTOBUF_FIELD_OFFSET(AiNode, _impl_.value_.ueblackboard_), _Internal::kOneofCaseOffset + 0, 9,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cfg.AiUeForceSuccess UeForceSuccess = 11;
    {PROTOBUF_FIELD_OFFSET(AiNode, _impl_.value_.ueforcesuccess_), _Internal::kOneofCaseOffset + 0, 10,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cfg.AiIsAtLocation IsAtLocation = 12;
    {PROTOBUF_FIELD_OFFSET(AiNode, _impl_.value_.isatlocation_), _Internal::kOneofCaseOffset + 0, 11,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cfg.AiDistanceLessThan DistanceLessThan = 13;
    {PROTOBUF_FIELD_OFFSET(AiNode, _impl_.value_.distancelessthan_), _Internal::kOneofCaseOffset + 0, 12,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cfg.AiSequence Sequence = 14;
    {PROTOBUF_FIELD_OFFSET(AiNode, _impl_.value_.sequence_), _Internal::kOneofCaseOffset + 0, 13,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cfg.AiSelector Selector = 15;
    {PROTOBUF_FIELD_OFFSET(AiNode, _impl_.value_.selector_), _Internal::kOneofCaseOffset + 0, 14,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cfg.AiSimpleParallel SimpleParallel = 16;
    {PROTOBUF_FIELD_OFFSET(AiNode, _impl_.value_.simpleparallel_), _Internal::kOneofCaseOffset + 0, 15,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cfg.AiUeWait UeWait = 17;
    {PROTOBUF_FIELD_OFFSET(AiNode, _impl_.value_.uewait_), _Internal::kOneofCaseOffset + 0, 16,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cfg.AiUeWaitBlackboardTime UeWaitBlackboardTime = 18;
    {PROTOBUF_FIELD_OFFSET(AiNode, _impl_.value_.uewaitblackboardtime_), _Internal::kOneofCaseOffset + 0, 17,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cfg.AiMoveToTarget MoveToTarget = 19;
    {PROTOBUF_FIELD_OFFSET(AiNode, _impl_.value_.movetotarget_), _Internal::kOneofCaseOffset + 0, 18,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cfg.AiChooseSkill ChooseSkill = 20;
    {PROTOBUF_FIELD_OFFSET(AiNode, _impl_.value_.chooseskill_), _Internal::kOneofCaseOffset + 0, 19,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cfg.AiMoveToRandomLocation MoveToRandomLocation = 21;
    {PROTOBUF_FIELD_OFFSET(AiNode, _impl_.value_.movetorandomlocation_), _Internal::kOneofCaseOffset + 0, 20,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cfg.AiMoveToLocation MoveToLocation = 22;
    {PROTOBUF_FIELD_OFFSET(AiNode, _impl_.value_.movetolocation_), _Internal::kOneofCaseOffset + 0, 21,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cfg.AiDebugPrint DebugPrint = 23;
    {PROTOBUF_FIELD_OFFSET(AiNode, _impl_.value_.debugprint_), _Internal::kOneofCaseOffset + 0, 22,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::AiUeSetDefaultFocus>()},
    {::_pbi::TcParser::GetTable<::cfg::AiExecuteTimeStatistic>()},
    {::_pbi::TcParser::GetTable<::cfg::AiChooseTarget>()},
    {::_pbi::TcParser::GetTable<::cfg::AiKeepFaceTarget>()},
    {::_pbi::TcParser::GetTable<::cfg::AiGetOwnerPlayer>()},
    {::_pbi::TcParser::GetTable<::cfg::AiUpdateDailyBehaviorProps>()},
    {::_pbi::TcParser::GetTable<::cfg::AiUeLoop>()},
    {::_pbi::TcParser::GetTable<::cfg::AiUeCooldown>()},
    {::_pbi::TcParser::GetTable<::cfg::AiUeTimeLimit>()},
    {::_pbi::TcParser::GetTable<::cfg::AiUeBlackboard>()},
    {::_pbi::TcParser::GetTable<::cfg::AiUeForceSuccess>()},
    {::_pbi::TcParser::GetTable<::cfg::AiIsAtLocation>()},
    {::_pbi::TcParser::GetTable<::cfg::AiDistanceLessThan>()},
    {::_pbi::TcParser::GetTable<::cfg::AiSequence>()},
    {::_pbi::TcParser::GetTable<::cfg::AiSelector>()},
    {::_pbi::TcParser::GetTable<::cfg::AiSimpleParallel>()},
    {::_pbi::TcParser::GetTable<::cfg::AiUeWait>()},
    {::_pbi::TcParser::GetTable<::cfg::AiUeWaitBlackboardTime>()},
    {::_pbi::TcParser::GetTable<::cfg::AiMoveToTarget>()},
    {::_pbi::TcParser::GetTable<::cfg::AiChooseSkill>()},
    {::_pbi::TcParser::GetTable<::cfg::AiMoveToRandomLocation>()},
    {::_pbi::TcParser::GetTable<::cfg::AiMoveToLocation>()},
    {::_pbi::TcParser::GetTable<::cfg::AiDebugPrint>()},
  }}, {{
  }},
};

::uint8_t* AiNode::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.AiNode)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  switch (value_case()) {
    case kUeSetDefaultFocus: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::uesetdefaultfocus(this),
          _Internal::uesetdefaultfocus(this).GetCachedSize(), target, stream);
      break;
    }
    case kExecuteTimeStatistic: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::executetimestatistic(this),
          _Internal::executetimestatistic(this).GetCachedSize(), target, stream);
      break;
    }
    case kChooseTarget: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::choosetarget(this),
          _Internal::choosetarget(this).GetCachedSize(), target, stream);
      break;
    }
    case kKeepFaceTarget: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::keepfacetarget(this),
          _Internal::keepfacetarget(this).GetCachedSize(), target, stream);
      break;
    }
    case kGetOwnerPlayer: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(5, _Internal::getownerplayer(this),
          _Internal::getownerplayer(this).GetCachedSize(), target, stream);
      break;
    }
    case kUpdateDailyBehaviorProps: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(6, _Internal::updatedailybehaviorprops(this),
          _Internal::updatedailybehaviorprops(this).GetCachedSize(), target, stream);
      break;
    }
    case kUeLoop: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(7, _Internal::ueloop(this),
          _Internal::ueloop(this).GetCachedSize(), target, stream);
      break;
    }
    case kUeCooldown: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(8, _Internal::uecooldown(this),
          _Internal::uecooldown(this).GetCachedSize(), target, stream);
      break;
    }
    case kUeTimeLimit: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(9, _Internal::uetimelimit(this),
          _Internal::uetimelimit(this).GetCachedSize(), target, stream);
      break;
    }
    case kUeBlackboard: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(10, _Internal::ueblackboard(this),
          _Internal::ueblackboard(this).GetCachedSize(), target, stream);
      break;
    }
    case kUeForceSuccess: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(11, _Internal::ueforcesuccess(this),
          _Internal::ueforcesuccess(this).GetCachedSize(), target, stream);
      break;
    }
    case kIsAtLocation: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(12, _Internal::isatlocation(this),
          _Internal::isatlocation(this).GetCachedSize(), target, stream);
      break;
    }
    case kDistanceLessThan: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(13, _Internal::distancelessthan(this),
          _Internal::distancelessthan(this).GetCachedSize(), target, stream);
      break;
    }
    case kSequence: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(14, _Internal::sequence(this),
          _Internal::sequence(this).GetCachedSize(), target, stream);
      break;
    }
    case kSelector: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(15, _Internal::selector(this),
          _Internal::selector(this).GetCachedSize(), target, stream);
      break;
    }
    case kSimpleParallel: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(16, _Internal::simpleparallel(this),
          _Internal::simpleparallel(this).GetCachedSize(), target, stream);
      break;
    }
    case kUeWait: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(17, _Internal::uewait(this),
          _Internal::uewait(this).GetCachedSize(), target, stream);
      break;
    }
    case kUeWaitBlackboardTime: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(18, _Internal::uewaitblackboardtime(this),
          _Internal::uewaitblackboardtime(this).GetCachedSize(), target, stream);
      break;
    }
    case kMoveToTarget: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(19, _Internal::movetotarget(this),
          _Internal::movetotarget(this).GetCachedSize(), target, stream);
      break;
    }
    case kChooseSkill: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(20, _Internal::chooseskill(this),
          _Internal::chooseskill(this).GetCachedSize(), target, stream);
      break;
    }
    case kMoveToRandomLocation: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(21, _Internal::movetorandomlocation(this),
          _Internal::movetorandomlocation(this).GetCachedSize(), target, stream);
      break;
    }
    case kMoveToLocation: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(22, _Internal::movetolocation(this),
          _Internal::movetolocation(this).GetCachedSize(), target, stream);
      break;
    }
    case kDebugPrint: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(23, _Internal::debugprint(this),
          _Internal::debugprint(this).GetCachedSize(), target, stream);
      break;
    }
    default:
      break;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.AiNode)
  return target;
}

::size_t AiNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.AiNode)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_case()) {
    // .cfg.AiUeSetDefaultFocus UeSetDefaultFocus = 1;
    case kUeSetDefaultFocus: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.value_.uesetdefaultfocus_);
      break;
    }
    // .cfg.AiExecuteTimeStatistic ExecuteTimeStatistic = 2;
    case kExecuteTimeStatistic: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.value_.executetimestatistic_);
      break;
    }
    // .cfg.AiChooseTarget ChooseTarget = 3;
    case kChooseTarget: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.value_.choosetarget_);
      break;
    }
    // .cfg.AiKeepFaceTarget KeepFaceTarget = 4;
    case kKeepFaceTarget: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.value_.keepfacetarget_);
      break;
    }
    // .cfg.AiGetOwnerPlayer GetOwnerPlayer = 5;
    case kGetOwnerPlayer: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.value_.getownerplayer_);
      break;
    }
    // .cfg.AiUpdateDailyBehaviorProps UpdateDailyBehaviorProps = 6;
    case kUpdateDailyBehaviorProps: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.value_.updatedailybehaviorprops_);
      break;
    }
    // .cfg.AiUeLoop UeLoop = 7;
    case kUeLoop: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.value_.ueloop_);
      break;
    }
    // .cfg.AiUeCooldown UeCooldown = 8;
    case kUeCooldown: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.value_.uecooldown_);
      break;
    }
    // .cfg.AiUeTimeLimit UeTimeLimit = 9;
    case kUeTimeLimit: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.value_.uetimelimit_);
      break;
    }
    // .cfg.AiUeBlackboard UeBlackboard = 10;
    case kUeBlackboard: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.value_.ueblackboard_);
      break;
    }
    // .cfg.AiUeForceSuccess UeForceSuccess = 11;
    case kUeForceSuccess: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.value_.ueforcesuccess_);
      break;
    }
    // .cfg.AiIsAtLocation IsAtLocation = 12;
    case kIsAtLocation: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.value_.isatlocation_);
      break;
    }
    // .cfg.AiDistanceLessThan DistanceLessThan = 13;
    case kDistanceLessThan: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.value_.distancelessthan_);
      break;
    }
    // .cfg.AiSequence Sequence = 14;
    case kSequence: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.value_.sequence_);
      break;
    }
    // .cfg.AiSelector Selector = 15;
    case kSelector: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.value_.selector_);
      break;
    }
    // .cfg.AiSimpleParallel SimpleParallel = 16;
    case kSimpleParallel: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.value_.simpleparallel_);
      break;
    }
    // .cfg.AiUeWait UeWait = 17;
    case kUeWait: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.value_.uewait_);
      break;
    }
    // .cfg.AiUeWaitBlackboardTime UeWaitBlackboardTime = 18;
    case kUeWaitBlackboardTime: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.value_.uewaitblackboardtime_);
      break;
    }
    // .cfg.AiMoveToTarget MoveToTarget = 19;
    case kMoveToTarget: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.value_.movetotarget_);
      break;
    }
    // .cfg.AiChooseSkill ChooseSkill = 20;
    case kChooseSkill: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.value_.chooseskill_);
      break;
    }
    // .cfg.AiMoveToRandomLocation MoveToRandomLocation = 21;
    case kMoveToRandomLocation: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.value_.movetorandomlocation_);
      break;
    }
    // .cfg.AiMoveToLocation MoveToLocation = 22;
    case kMoveToLocation: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.value_.movetolocation_);
      break;
    }
    // .cfg.AiDebugPrint DebugPrint = 23;
    case kDebugPrint: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.value_.debugprint_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AiNode::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    AiNode::MergeImpl
};
const ::google::protobuf::Message::ClassData*AiNode::GetClassData() const { return &_class_data_; }


void AiNode::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AiNode*>(&to_msg);
  auto& from = static_cast<const AiNode&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.AiNode)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kUeSetDefaultFocus: {
      _this->_internal_mutable_uesetdefaultfocus()->::cfg::AiUeSetDefaultFocus::MergeFrom(
          from._internal_uesetdefaultfocus());
      break;
    }
    case kExecuteTimeStatistic: {
      _this->_internal_mutable_executetimestatistic()->::cfg::AiExecuteTimeStatistic::MergeFrom(
          from._internal_executetimestatistic());
      break;
    }
    case kChooseTarget: {
      _this->_internal_mutable_choosetarget()->::cfg::AiChooseTarget::MergeFrom(
          from._internal_choosetarget());
      break;
    }
    case kKeepFaceTarget: {
      _this->_internal_mutable_keepfacetarget()->::cfg::AiKeepFaceTarget::MergeFrom(
          from._internal_keepfacetarget());
      break;
    }
    case kGetOwnerPlayer: {
      _this->_internal_mutable_getownerplayer()->::cfg::AiGetOwnerPlayer::MergeFrom(
          from._internal_getownerplayer());
      break;
    }
    case kUpdateDailyBehaviorProps: {
      _this->_internal_mutable_updatedailybehaviorprops()->::cfg::AiUpdateDailyBehaviorProps::MergeFrom(
          from._internal_updatedailybehaviorprops());
      break;
    }
    case kUeLoop: {
      _this->_internal_mutable_ueloop()->::cfg::AiUeLoop::MergeFrom(
          from._internal_ueloop());
      break;
    }
    case kUeCooldown: {
      _this->_internal_mutable_uecooldown()->::cfg::AiUeCooldown::MergeFrom(
          from._internal_uecooldown());
      break;
    }
    case kUeTimeLimit: {
      _this->_internal_mutable_uetimelimit()->::cfg::AiUeTimeLimit::MergeFrom(
          from._internal_uetimelimit());
      break;
    }
    case kUeBlackboard: {
      _this->_internal_mutable_ueblackboard()->::cfg::AiUeBlackboard::MergeFrom(
          from._internal_ueblackboard());
      break;
    }
    case kUeForceSuccess: {
      _this->_internal_mutable_ueforcesuccess()->::cfg::AiUeForceSuccess::MergeFrom(
          from._internal_ueforcesuccess());
      break;
    }
    case kIsAtLocation: {
      _this->_internal_mutable_isatlocation()->::cfg::AiIsAtLocation::MergeFrom(
          from._internal_isatlocation());
      break;
    }
    case kDistanceLessThan: {
      _this->_internal_mutable_distancelessthan()->::cfg::AiDistanceLessThan::MergeFrom(
          from._internal_distancelessthan());
      break;
    }
    case kSequence: {
      _this->_internal_mutable_sequence()->::cfg::AiSequence::MergeFrom(
          from._internal_sequence());
      break;
    }
    case kSelector: {
      _this->_internal_mutable_selector()->::cfg::AiSelector::MergeFrom(
          from._internal_selector());
      break;
    }
    case kSimpleParallel: {
      _this->_internal_mutable_simpleparallel()->::cfg::AiSimpleParallel::MergeFrom(
          from._internal_simpleparallel());
      break;
    }
    case kUeWait: {
      _this->_internal_mutable_uewait()->::cfg::AiUeWait::MergeFrom(
          from._internal_uewait());
      break;
    }
    case kUeWaitBlackboardTime: {
      _this->_internal_mutable_uewaitblackboardtime()->::cfg::AiUeWaitBlackboardTime::MergeFrom(
          from._internal_uewaitblackboardtime());
      break;
    }
    case kMoveToTarget: {
      _this->_internal_mutable_movetotarget()->::cfg::AiMoveToTarget::MergeFrom(
          from._internal_movetotarget());
      break;
    }
    case kChooseSkill: {
      _this->_internal_mutable_chooseskill()->::cfg::AiChooseSkill::MergeFrom(
          from._internal_chooseskill());
      break;
    }
    case kMoveToRandomLocation: {
      _this->_internal_mutable_movetorandomlocation()->::cfg::AiMoveToRandomLocation::MergeFrom(
          from._internal_movetorandomlocation());
      break;
    }
    case kMoveToLocation: {
      _this->_internal_mutable_movetolocation()->::cfg::AiMoveToLocation::MergeFrom(
          from._internal_movetolocation());
      break;
    }
    case kDebugPrint: {
      _this->_internal_mutable_debugprint()->::cfg::AiDebugPrint::MergeFrom(
          from._internal_debugprint());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AiNode::CopyFrom(const AiNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.AiNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AiNode::IsInitialized() const {
  return true;
}

void AiNode::InternalSwap(AiNode* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.value_, other->_impl_.value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata AiNode::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[3]);
}
// ===================================================================

class AiService::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::cfg::AiService, _impl_._oneof_case_);
  static const ::cfg::AiUeSetDefaultFocus& uesetdefaultfocus(const AiService* msg);
  static const ::cfg::AiExecuteTimeStatistic& executetimestatistic(const AiService* msg);
  static const ::cfg::AiChooseTarget& choosetarget(const AiService* msg);
  static const ::cfg::AiKeepFaceTarget& keepfacetarget(const AiService* msg);
  static const ::cfg::AiGetOwnerPlayer& getownerplayer(const AiService* msg);
  static const ::cfg::AiUpdateDailyBehaviorProps& updatedailybehaviorprops(const AiService* msg);
};

const ::cfg::AiUeSetDefaultFocus& AiService::_Internal::uesetdefaultfocus(const AiService* msg) {
  return *msg->_impl_.value_.uesetdefaultfocus_;
}
const ::cfg::AiExecuteTimeStatistic& AiService::_Internal::executetimestatistic(const AiService* msg) {
  return *msg->_impl_.value_.executetimestatistic_;
}
const ::cfg::AiChooseTarget& AiService::_Internal::choosetarget(const AiService* msg) {
  return *msg->_impl_.value_.choosetarget_;
}
const ::cfg::AiKeepFaceTarget& AiService::_Internal::keepfacetarget(const AiService* msg) {
  return *msg->_impl_.value_.keepfacetarget_;
}
const ::cfg::AiGetOwnerPlayer& AiService::_Internal::getownerplayer(const AiService* msg) {
  return *msg->_impl_.value_.getownerplayer_;
}
const ::cfg::AiUpdateDailyBehaviorProps& AiService::_Internal::updatedailybehaviorprops(const AiService* msg) {
  return *msg->_impl_.value_.updatedailybehaviorprops_;
}
void AiService::set_allocated_uesetdefaultfocus(::cfg::AiUeSetDefaultFocus* uesetdefaultfocus) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (uesetdefaultfocus) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(uesetdefaultfocus);
    if (message_arena != submessage_arena) {
      uesetdefaultfocus = ::google::protobuf::internal::GetOwnedMessage(message_arena, uesetdefaultfocus, submessage_arena);
    }
    set_has_uesetdefaultfocus();
    _impl_.value_.uesetdefaultfocus_ = uesetdefaultfocus;
  }
  // @@protoc_insertion_point(field_set_allocated:cfg.AiService.UeSetDefaultFocus)
}
void AiService::set_allocated_executetimestatistic(::cfg::AiExecuteTimeStatistic* executetimestatistic) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (executetimestatistic) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(executetimestatistic);
    if (message_arena != submessage_arena) {
      executetimestatistic = ::google::protobuf::internal::GetOwnedMessage(message_arena, executetimestatistic, submessage_arena);
    }
    set_has_executetimestatistic();
    _impl_.value_.executetimestatistic_ = executetimestatistic;
  }
  // @@protoc_insertion_point(field_set_allocated:cfg.AiService.ExecuteTimeStatistic)
}
void AiService::set_allocated_choosetarget(::cfg::AiChooseTarget* choosetarget) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (choosetarget) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(choosetarget);
    if (message_arena != submessage_arena) {
      choosetarget = ::google::protobuf::internal::GetOwnedMessage(message_arena, choosetarget, submessage_arena);
    }
    set_has_choosetarget();
    _impl_.value_.choosetarget_ = choosetarget;
  }
  // @@protoc_insertion_point(field_set_allocated:cfg.AiService.ChooseTarget)
}
void AiService::set_allocated_keepfacetarget(::cfg::AiKeepFaceTarget* keepfacetarget) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (keepfacetarget) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(keepfacetarget);
    if (message_arena != submessage_arena) {
      keepfacetarget = ::google::protobuf::internal::GetOwnedMessage(message_arena, keepfacetarget, submessage_arena);
    }
    set_has_keepfacetarget();
    _impl_.value_.keepfacetarget_ = keepfacetarget;
  }
  // @@protoc_insertion_point(field_set_allocated:cfg.AiService.KeepFaceTarget)
}
void AiService::set_allocated_getownerplayer(::cfg::AiGetOwnerPlayer* getownerplayer) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (getownerplayer) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(getownerplayer);
    if (message_arena != submessage_arena) {
      getownerplayer = ::google::protobuf::internal::GetOwnedMessage(message_arena, getownerplayer, submessage_arena);
    }
    set_has_getownerplayer();
    _impl_.value_.getownerplayer_ = getownerplayer;
  }
  // @@protoc_insertion_point(field_set_allocated:cfg.AiService.GetOwnerPlayer)
}
void AiService::set_allocated_updatedailybehaviorprops(::cfg::AiUpdateDailyBehaviorProps* updatedailybehaviorprops) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (updatedailybehaviorprops) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(updatedailybehaviorprops);
    if (message_arena != submessage_arena) {
      updatedailybehaviorprops = ::google::protobuf::internal::GetOwnedMessage(message_arena, updatedailybehaviorprops, submessage_arena);
    }
    set_has_updatedailybehaviorprops();
    _impl_.value_.updatedailybehaviorprops_ = updatedailybehaviorprops;
  }
  // @@protoc_insertion_point(field_set_allocated:cfg.AiService.UpdateDailyBehaviorProps)
}
AiService::AiService(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.AiService)
}
AiService::AiService(const AiService& from) : ::google::protobuf::Message() {
  AiService* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_._oneof_case_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kUeSetDefaultFocus: {
      _this->_internal_mutable_uesetdefaultfocus()->::cfg::AiUeSetDefaultFocus::MergeFrom(
          from._internal_uesetdefaultfocus());
      break;
    }
    case kExecuteTimeStatistic: {
      _this->_internal_mutable_executetimestatistic()->::cfg::AiExecuteTimeStatistic::MergeFrom(
          from._internal_executetimestatistic());
      break;
    }
    case kChooseTarget: {
      _this->_internal_mutable_choosetarget()->::cfg::AiChooseTarget::MergeFrom(
          from._internal_choosetarget());
      break;
    }
    case kKeepFaceTarget: {
      _this->_internal_mutable_keepfacetarget()->::cfg::AiKeepFaceTarget::MergeFrom(
          from._internal_keepfacetarget());
      break;
    }
    case kGetOwnerPlayer: {
      _this->_internal_mutable_getownerplayer()->::cfg::AiGetOwnerPlayer::MergeFrom(
          from._internal_getownerplayer());
      break;
    }
    case kUpdateDailyBehaviorProps: {
      _this->_internal_mutable_updatedailybehaviorprops()->::cfg::AiUpdateDailyBehaviorProps::MergeFrom(
          from._internal_updatedailybehaviorprops());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }

  // @@protoc_insertion_point(copy_constructor:cfg.AiService)
}
inline void AiService::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_._oneof_case_)*/ {},
  };
  clear_has_value();
}
AiService::~AiService() {
  // @@protoc_insertion_point(destructor:cfg.AiService)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AiService::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_value()) {
    clear_value();
  }
}
void AiService::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AiService::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:cfg.AiService)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  switch (value_case()) {
    case kUeSetDefaultFocus: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.uesetdefaultfocus_;
      }
      break;
    }
    case kExecuteTimeStatistic: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.executetimestatistic_;
      }
      break;
    }
    case kChooseTarget: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.choosetarget_;
      }
      break;
    }
    case kKeepFaceTarget: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.keepfacetarget_;
      }
      break;
    }
    case kGetOwnerPlayer: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.getownerplayer_;
      }
      break;
    }
    case kUpdateDailyBehaviorProps: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.updatedailybehaviorprops_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}


PROTOBUF_NOINLINE void AiService::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.AiService)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AiService::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 6, 6, 0, 2> AiService::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    6, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    6,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AiService_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .cfg.AiUeSetDefaultFocus UeSetDefaultFocus = 1;
    {PROTOBUF_FIELD_OFFSET(AiService, _impl_.value_.uesetdefaultfocus_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cfg.AiExecuteTimeStatistic ExecuteTimeStatistic = 2;
    {PROTOBUF_FIELD_OFFSET(AiService, _impl_.value_.executetimestatistic_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cfg.AiChooseTarget ChooseTarget = 3;
    {PROTOBUF_FIELD_OFFSET(AiService, _impl_.value_.choosetarget_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cfg.AiKeepFaceTarget KeepFaceTarget = 4;
    {PROTOBUF_FIELD_OFFSET(AiService, _impl_.value_.keepfacetarget_), _Internal::kOneofCaseOffset + 0, 3,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cfg.AiGetOwnerPlayer GetOwnerPlayer = 5;
    {PROTOBUF_FIELD_OFFSET(AiService, _impl_.value_.getownerplayer_), _Internal::kOneofCaseOffset + 0, 4,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cfg.AiUpdateDailyBehaviorProps UpdateDailyBehaviorProps = 6;
    {PROTOBUF_FIELD_OFFSET(AiService, _impl_.value_.updatedailybehaviorprops_), _Internal::kOneofCaseOffset + 0, 5,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::AiUeSetDefaultFocus>()},
    {::_pbi::TcParser::GetTable<::cfg::AiExecuteTimeStatistic>()},
    {::_pbi::TcParser::GetTable<::cfg::AiChooseTarget>()},
    {::_pbi::TcParser::GetTable<::cfg::AiKeepFaceTarget>()},
    {::_pbi::TcParser::GetTable<::cfg::AiGetOwnerPlayer>()},
    {::_pbi::TcParser::GetTable<::cfg::AiUpdateDailyBehaviorProps>()},
  }}, {{
  }},
};

::uint8_t* AiService::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.AiService)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  switch (value_case()) {
    case kUeSetDefaultFocus: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::uesetdefaultfocus(this),
          _Internal::uesetdefaultfocus(this).GetCachedSize(), target, stream);
      break;
    }
    case kExecuteTimeStatistic: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::executetimestatistic(this),
          _Internal::executetimestatistic(this).GetCachedSize(), target, stream);
      break;
    }
    case kChooseTarget: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::choosetarget(this),
          _Internal::choosetarget(this).GetCachedSize(), target, stream);
      break;
    }
    case kKeepFaceTarget: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::keepfacetarget(this),
          _Internal::keepfacetarget(this).GetCachedSize(), target, stream);
      break;
    }
    case kGetOwnerPlayer: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(5, _Internal::getownerplayer(this),
          _Internal::getownerplayer(this).GetCachedSize(), target, stream);
      break;
    }
    case kUpdateDailyBehaviorProps: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(6, _Internal::updatedailybehaviorprops(this),
          _Internal::updatedailybehaviorprops(this).GetCachedSize(), target, stream);
      break;
    }
    default:
      break;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.AiService)
  return target;
}

::size_t AiService::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.AiService)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_case()) {
    // .cfg.AiUeSetDefaultFocus UeSetDefaultFocus = 1;
    case kUeSetDefaultFocus: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.value_.uesetdefaultfocus_);
      break;
    }
    // .cfg.AiExecuteTimeStatistic ExecuteTimeStatistic = 2;
    case kExecuteTimeStatistic: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.value_.executetimestatistic_);
      break;
    }
    // .cfg.AiChooseTarget ChooseTarget = 3;
    case kChooseTarget: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.value_.choosetarget_);
      break;
    }
    // .cfg.AiKeepFaceTarget KeepFaceTarget = 4;
    case kKeepFaceTarget: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.value_.keepfacetarget_);
      break;
    }
    // .cfg.AiGetOwnerPlayer GetOwnerPlayer = 5;
    case kGetOwnerPlayer: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.value_.getownerplayer_);
      break;
    }
    // .cfg.AiUpdateDailyBehaviorProps UpdateDailyBehaviorProps = 6;
    case kUpdateDailyBehaviorProps: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.value_.updatedailybehaviorprops_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AiService::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    AiService::MergeImpl
};
const ::google::protobuf::Message::ClassData*AiService::GetClassData() const { return &_class_data_; }


void AiService::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AiService*>(&to_msg);
  auto& from = static_cast<const AiService&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.AiService)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kUeSetDefaultFocus: {
      _this->_internal_mutable_uesetdefaultfocus()->::cfg::AiUeSetDefaultFocus::MergeFrom(
          from._internal_uesetdefaultfocus());
      break;
    }
    case kExecuteTimeStatistic: {
      _this->_internal_mutable_executetimestatistic()->::cfg::AiExecuteTimeStatistic::MergeFrom(
          from._internal_executetimestatistic());
      break;
    }
    case kChooseTarget: {
      _this->_internal_mutable_choosetarget()->::cfg::AiChooseTarget::MergeFrom(
          from._internal_choosetarget());
      break;
    }
    case kKeepFaceTarget: {
      _this->_internal_mutable_keepfacetarget()->::cfg::AiKeepFaceTarget::MergeFrom(
          from._internal_keepfacetarget());
      break;
    }
    case kGetOwnerPlayer: {
      _this->_internal_mutable_getownerplayer()->::cfg::AiGetOwnerPlayer::MergeFrom(
          from._internal_getownerplayer());
      break;
    }
    case kUpdateDailyBehaviorProps: {
      _this->_internal_mutable_updatedailybehaviorprops()->::cfg::AiUpdateDailyBehaviorProps::MergeFrom(
          from._internal_updatedailybehaviorprops());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AiService::CopyFrom(const AiService& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.AiService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AiService::IsInitialized() const {
  return true;
}

void AiService::InternalSwap(AiService* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.value_, other->_impl_.value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata AiService::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[4]);
}
// ===================================================================

class AiUeSetDefaultFocus::_Internal {
 public:
};

AiUeSetDefaultFocus::AiUeSetDefaultFocus(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.AiUeSetDefaultFocus)
}
AiUeSetDefaultFocus::AiUeSetDefaultFocus(const AiUeSetDefaultFocus& from) : ::google::protobuf::Message() {
  AiUeSetDefaultFocus* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.node_name_){},
      decltype(_impl_.keyboard_key_){},
      decltype(_impl_.id_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.node_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.node_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_node_name().empty()) {
    _this->_impl_.node_name_.Set(from._internal_node_name(), _this->GetArenaForAllocation());
  }
  _impl_.keyboard_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.keyboard_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_keyboard_key().empty()) {
    _this->_impl_.keyboard_key_.Set(from._internal_keyboard_key(), _this->GetArenaForAllocation());
  }
  _this->_impl_.id_ = from._impl_.id_;

  // @@protoc_insertion_point(copy_constructor:cfg.AiUeSetDefaultFocus)
}
inline void AiUeSetDefaultFocus::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.node_name_){},
      decltype(_impl_.keyboard_key_){},
      decltype(_impl_.id_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.node_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.node_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.keyboard_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.keyboard_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
AiUeSetDefaultFocus::~AiUeSetDefaultFocus() {
  // @@protoc_insertion_point(destructor:cfg.AiUeSetDefaultFocus)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AiUeSetDefaultFocus::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.node_name_.Destroy();
  _impl_.keyboard_key_.Destroy();
}
void AiUeSetDefaultFocus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void AiUeSetDefaultFocus::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.AiUeSetDefaultFocus)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.node_name_.ClearToEmpty();
  _impl_.keyboard_key_.ClearToEmpty();
  _impl_.id_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AiUeSetDefaultFocus::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 53, 2> AiUeSetDefaultFocus::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_AiUeSetDefaultFocus_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AiUeSetDefaultFocus, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(AiUeSetDefaultFocus, _impl_.id_)}},
    // string node_name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(AiUeSetDefaultFocus, _impl_.node_name_)}},
    // string keyboard_key = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(AiUeSetDefaultFocus, _impl_.keyboard_key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(AiUeSetDefaultFocus, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string node_name = 2;
    {PROTOBUF_FIELD_OFFSET(AiUeSetDefaultFocus, _impl_.node_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string keyboard_key = 3;
    {PROTOBUF_FIELD_OFFSET(AiUeSetDefaultFocus, _impl_.keyboard_key_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\27\0\11\14\0\0\0\0"
    "cfg.AiUeSetDefaultFocus"
    "node_name"
    "keyboard_key"
  }},
};

::uint8_t* AiUeSetDefaultFocus::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.AiUeSetDefaultFocus)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // string node_name = 2;
  if (!this->_internal_node_name().empty()) {
    const std::string& _s = this->_internal_node_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.AiUeSetDefaultFocus.node_name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string keyboard_key = 3;
  if (!this->_internal_keyboard_key().empty()) {
    const std::string& _s = this->_internal_keyboard_key();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.AiUeSetDefaultFocus.keyboard_key");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.AiUeSetDefaultFocus)
  return target;
}

::size_t AiUeSetDefaultFocus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.AiUeSetDefaultFocus)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string node_name = 2;
  if (!this->_internal_node_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_node_name());
  }

  // string keyboard_key = 3;
  if (!this->_internal_keyboard_key().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_keyboard_key());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AiUeSetDefaultFocus::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    AiUeSetDefaultFocus::MergeImpl
};
const ::google::protobuf::Message::ClassData*AiUeSetDefaultFocus::GetClassData() const { return &_class_data_; }


void AiUeSetDefaultFocus::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AiUeSetDefaultFocus*>(&to_msg);
  auto& from = static_cast<const AiUeSetDefaultFocus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.AiUeSetDefaultFocus)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_node_name().empty()) {
    _this->_internal_set_node_name(from._internal_node_name());
  }
  if (!from._internal_keyboard_key().empty()) {
    _this->_internal_set_keyboard_key(from._internal_keyboard_key());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AiUeSetDefaultFocus::CopyFrom(const AiUeSetDefaultFocus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.AiUeSetDefaultFocus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AiUeSetDefaultFocus::IsInitialized() const {
  return true;
}

void AiUeSetDefaultFocus::InternalSwap(AiUeSetDefaultFocus* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.node_name_, lhs_arena,
                                       &other->_impl_.node_name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.keyboard_key_, lhs_arena,
                                       &other->_impl_.keyboard_key_, rhs_arena);
        swap(_impl_.id_, other->_impl_.id_);
}

::google::protobuf::Metadata AiUeSetDefaultFocus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[5]);
}
// ===================================================================

class AiExecuteTimeStatistic::_Internal {
 public:
};

AiExecuteTimeStatistic::AiExecuteTimeStatistic(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.AiExecuteTimeStatistic)
}
AiExecuteTimeStatistic::AiExecuteTimeStatistic(const AiExecuteTimeStatistic& from) : ::google::protobuf::Message() {
  AiExecuteTimeStatistic* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.node_name_){},
      decltype(_impl_.id_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.node_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.node_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_node_name().empty()) {
    _this->_impl_.node_name_.Set(from._internal_node_name(), _this->GetArenaForAllocation());
  }
  _this->_impl_.id_ = from._impl_.id_;

  // @@protoc_insertion_point(copy_constructor:cfg.AiExecuteTimeStatistic)
}
inline void AiExecuteTimeStatistic::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.node_name_){},
      decltype(_impl_.id_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.node_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.node_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
AiExecuteTimeStatistic::~AiExecuteTimeStatistic() {
  // @@protoc_insertion_point(destructor:cfg.AiExecuteTimeStatistic)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AiExecuteTimeStatistic::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.node_name_.Destroy();
}
void AiExecuteTimeStatistic::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void AiExecuteTimeStatistic::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.AiExecuteTimeStatistic)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.node_name_.ClearToEmpty();
  _impl_.id_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AiExecuteTimeStatistic::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 44, 2> AiExecuteTimeStatistic::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_AiExecuteTimeStatistic_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string node_name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(AiExecuteTimeStatistic, _impl_.node_name_)}},
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AiExecuteTimeStatistic, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(AiExecuteTimeStatistic, _impl_.id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(AiExecuteTimeStatistic, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string node_name = 2;
    {PROTOBUF_FIELD_OFFSET(AiExecuteTimeStatistic, _impl_.node_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\32\0\11\0\0\0\0\0"
    "cfg.AiExecuteTimeStatistic"
    "node_name"
  }},
};

::uint8_t* AiExecuteTimeStatistic::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.AiExecuteTimeStatistic)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // string node_name = 2;
  if (!this->_internal_node_name().empty()) {
    const std::string& _s = this->_internal_node_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.AiExecuteTimeStatistic.node_name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.AiExecuteTimeStatistic)
  return target;
}

::size_t AiExecuteTimeStatistic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.AiExecuteTimeStatistic)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string node_name = 2;
  if (!this->_internal_node_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_node_name());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AiExecuteTimeStatistic::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    AiExecuteTimeStatistic::MergeImpl
};
const ::google::protobuf::Message::ClassData*AiExecuteTimeStatistic::GetClassData() const { return &_class_data_; }


void AiExecuteTimeStatistic::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AiExecuteTimeStatistic*>(&to_msg);
  auto& from = static_cast<const AiExecuteTimeStatistic&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.AiExecuteTimeStatistic)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_node_name().empty()) {
    _this->_internal_set_node_name(from._internal_node_name());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AiExecuteTimeStatistic::CopyFrom(const AiExecuteTimeStatistic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.AiExecuteTimeStatistic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AiExecuteTimeStatistic::IsInitialized() const {
  return true;
}

void AiExecuteTimeStatistic::InternalSwap(AiExecuteTimeStatistic* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.node_name_, lhs_arena,
                                       &other->_impl_.node_name_, rhs_arena);
        swap(_impl_.id_, other->_impl_.id_);
}

::google::protobuf::Metadata AiExecuteTimeStatistic::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[6]);
}
// ===================================================================

class AiChooseTarget::_Internal {
 public:
};

AiChooseTarget::AiChooseTarget(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.AiChooseTarget)
}
AiChooseTarget::AiChooseTarget(const AiChooseTarget& from) : ::google::protobuf::Message() {
  AiChooseTarget* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.node_name_){},
      decltype(_impl_.result_target_key_){},
      decltype(_impl_.id_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.node_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.node_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_node_name().empty()) {
    _this->_impl_.node_name_.Set(from._internal_node_name(), _this->GetArenaForAllocation());
  }
  _impl_.result_target_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.result_target_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_result_target_key().empty()) {
    _this->_impl_.result_target_key_.Set(from._internal_result_target_key(), _this->GetArenaForAllocation());
  }
  _this->_impl_.id_ = from._impl_.id_;

  // @@protoc_insertion_point(copy_constructor:cfg.AiChooseTarget)
}
inline void AiChooseTarget::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.node_name_){},
      decltype(_impl_.result_target_key_){},
      decltype(_impl_.id_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.node_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.node_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.result_target_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.result_target_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
AiChooseTarget::~AiChooseTarget() {
  // @@protoc_insertion_point(destructor:cfg.AiChooseTarget)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AiChooseTarget::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.node_name_.Destroy();
  _impl_.result_target_key_.Destroy();
}
void AiChooseTarget::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void AiChooseTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.AiChooseTarget)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.node_name_.ClearToEmpty();
  _impl_.result_target_key_.ClearToEmpty();
  _impl_.id_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AiChooseTarget::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 53, 2> AiChooseTarget::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_AiChooseTarget_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AiChooseTarget, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(AiChooseTarget, _impl_.id_)}},
    // string node_name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(AiChooseTarget, _impl_.node_name_)}},
    // string result_target_key = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(AiChooseTarget, _impl_.result_target_key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(AiChooseTarget, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string node_name = 2;
    {PROTOBUF_FIELD_OFFSET(AiChooseTarget, _impl_.node_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string result_target_key = 3;
    {PROTOBUF_FIELD_OFFSET(AiChooseTarget, _impl_.result_target_key_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\22\0\11\21\0\0\0\0"
    "cfg.AiChooseTarget"
    "node_name"
    "result_target_key"
  }},
};

::uint8_t* AiChooseTarget::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.AiChooseTarget)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // string node_name = 2;
  if (!this->_internal_node_name().empty()) {
    const std::string& _s = this->_internal_node_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.AiChooseTarget.node_name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string result_target_key = 3;
  if (!this->_internal_result_target_key().empty()) {
    const std::string& _s = this->_internal_result_target_key();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.AiChooseTarget.result_target_key");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.AiChooseTarget)
  return target;
}

::size_t AiChooseTarget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.AiChooseTarget)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string node_name = 2;
  if (!this->_internal_node_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_node_name());
  }

  // string result_target_key = 3;
  if (!this->_internal_result_target_key().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_result_target_key());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AiChooseTarget::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    AiChooseTarget::MergeImpl
};
const ::google::protobuf::Message::ClassData*AiChooseTarget::GetClassData() const { return &_class_data_; }


void AiChooseTarget::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AiChooseTarget*>(&to_msg);
  auto& from = static_cast<const AiChooseTarget&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.AiChooseTarget)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_node_name().empty()) {
    _this->_internal_set_node_name(from._internal_node_name());
  }
  if (!from._internal_result_target_key().empty()) {
    _this->_internal_set_result_target_key(from._internal_result_target_key());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AiChooseTarget::CopyFrom(const AiChooseTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.AiChooseTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AiChooseTarget::IsInitialized() const {
  return true;
}

void AiChooseTarget::InternalSwap(AiChooseTarget* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.node_name_, lhs_arena,
                                       &other->_impl_.node_name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.result_target_key_, lhs_arena,
                                       &other->_impl_.result_target_key_, rhs_arena);
        swap(_impl_.id_, other->_impl_.id_);
}

::google::protobuf::Metadata AiChooseTarget::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[7]);
}
// ===================================================================

class AiKeepFaceTarget::_Internal {
 public:
};

AiKeepFaceTarget::AiKeepFaceTarget(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.AiKeepFaceTarget)
}
AiKeepFaceTarget::AiKeepFaceTarget(const AiKeepFaceTarget& from) : ::google::protobuf::Message() {
  AiKeepFaceTarget* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.node_name_){},
      decltype(_impl_.target_actor_key_){},
      decltype(_impl_.id_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.node_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.node_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_node_name().empty()) {
    _this->_impl_.node_name_.Set(from._internal_node_name(), _this->GetArenaForAllocation());
  }
  _impl_.target_actor_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.target_actor_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_target_actor_key().empty()) {
    _this->_impl_.target_actor_key_.Set(from._internal_target_actor_key(), _this->GetArenaForAllocation());
  }
  _this->_impl_.id_ = from._impl_.id_;

  // @@protoc_insertion_point(copy_constructor:cfg.AiKeepFaceTarget)
}
inline void AiKeepFaceTarget::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.node_name_){},
      decltype(_impl_.target_actor_key_){},
      decltype(_impl_.id_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.node_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.node_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.target_actor_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.target_actor_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
AiKeepFaceTarget::~AiKeepFaceTarget() {
  // @@protoc_insertion_point(destructor:cfg.AiKeepFaceTarget)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AiKeepFaceTarget::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.node_name_.Destroy();
  _impl_.target_actor_key_.Destroy();
}
void AiKeepFaceTarget::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void AiKeepFaceTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.AiKeepFaceTarget)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.node_name_.ClearToEmpty();
  _impl_.target_actor_key_.ClearToEmpty();
  _impl_.id_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AiKeepFaceTarget::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 54, 2> AiKeepFaceTarget::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_AiKeepFaceTarget_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AiKeepFaceTarget, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(AiKeepFaceTarget, _impl_.id_)}},
    // string node_name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(AiKeepFaceTarget, _impl_.node_name_)}},
    // string target_actor_key = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(AiKeepFaceTarget, _impl_.target_actor_key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(AiKeepFaceTarget, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string node_name = 2;
    {PROTOBUF_FIELD_OFFSET(AiKeepFaceTarget, _impl_.node_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string target_actor_key = 3;
    {PROTOBUF_FIELD_OFFSET(AiKeepFaceTarget, _impl_.target_actor_key_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\24\0\11\20\0\0\0\0"
    "cfg.AiKeepFaceTarget"
    "node_name"
    "target_actor_key"
  }},
};

::uint8_t* AiKeepFaceTarget::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.AiKeepFaceTarget)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // string node_name = 2;
  if (!this->_internal_node_name().empty()) {
    const std::string& _s = this->_internal_node_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.AiKeepFaceTarget.node_name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string target_actor_key = 3;
  if (!this->_internal_target_actor_key().empty()) {
    const std::string& _s = this->_internal_target_actor_key();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.AiKeepFaceTarget.target_actor_key");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.AiKeepFaceTarget)
  return target;
}

::size_t AiKeepFaceTarget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.AiKeepFaceTarget)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string node_name = 2;
  if (!this->_internal_node_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_node_name());
  }

  // string target_actor_key = 3;
  if (!this->_internal_target_actor_key().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_target_actor_key());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AiKeepFaceTarget::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    AiKeepFaceTarget::MergeImpl
};
const ::google::protobuf::Message::ClassData*AiKeepFaceTarget::GetClassData() const { return &_class_data_; }


void AiKeepFaceTarget::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AiKeepFaceTarget*>(&to_msg);
  auto& from = static_cast<const AiKeepFaceTarget&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.AiKeepFaceTarget)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_node_name().empty()) {
    _this->_internal_set_node_name(from._internal_node_name());
  }
  if (!from._internal_target_actor_key().empty()) {
    _this->_internal_set_target_actor_key(from._internal_target_actor_key());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AiKeepFaceTarget::CopyFrom(const AiKeepFaceTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.AiKeepFaceTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AiKeepFaceTarget::IsInitialized() const {
  return true;
}

void AiKeepFaceTarget::InternalSwap(AiKeepFaceTarget* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.node_name_, lhs_arena,
                                       &other->_impl_.node_name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.target_actor_key_, lhs_arena,
                                       &other->_impl_.target_actor_key_, rhs_arena);
        swap(_impl_.id_, other->_impl_.id_);
}

::google::protobuf::Metadata AiKeepFaceTarget::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[8]);
}
// ===================================================================

class AiGetOwnerPlayer::_Internal {
 public:
};

AiGetOwnerPlayer::AiGetOwnerPlayer(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.AiGetOwnerPlayer)
}
AiGetOwnerPlayer::AiGetOwnerPlayer(const AiGetOwnerPlayer& from) : ::google::protobuf::Message() {
  AiGetOwnerPlayer* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.node_name_){},
      decltype(_impl_.player_actor_key_){},
      decltype(_impl_.id_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.node_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.node_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_node_name().empty()) {
    _this->_impl_.node_name_.Set(from._internal_node_name(), _this->GetArenaForAllocation());
  }
  _impl_.player_actor_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.player_actor_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_player_actor_key().empty()) {
    _this->_impl_.player_actor_key_.Set(from._internal_player_actor_key(), _this->GetArenaForAllocation());
  }
  _this->_impl_.id_ = from._impl_.id_;

  // @@protoc_insertion_point(copy_constructor:cfg.AiGetOwnerPlayer)
}
inline void AiGetOwnerPlayer::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.node_name_){},
      decltype(_impl_.player_actor_key_){},
      decltype(_impl_.id_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.node_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.node_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.player_actor_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.player_actor_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
AiGetOwnerPlayer::~AiGetOwnerPlayer() {
  // @@protoc_insertion_point(destructor:cfg.AiGetOwnerPlayer)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AiGetOwnerPlayer::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.node_name_.Destroy();
  _impl_.player_actor_key_.Destroy();
}
void AiGetOwnerPlayer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void AiGetOwnerPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.AiGetOwnerPlayer)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.node_name_.ClearToEmpty();
  _impl_.player_actor_key_.ClearToEmpty();
  _impl_.id_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AiGetOwnerPlayer::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 54, 2> AiGetOwnerPlayer::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_AiGetOwnerPlayer_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AiGetOwnerPlayer, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(AiGetOwnerPlayer, _impl_.id_)}},
    // string node_name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(AiGetOwnerPlayer, _impl_.node_name_)}},
    // string player_actor_key = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(AiGetOwnerPlayer, _impl_.player_actor_key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(AiGetOwnerPlayer, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string node_name = 2;
    {PROTOBUF_FIELD_OFFSET(AiGetOwnerPlayer, _impl_.node_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string player_actor_key = 3;
    {PROTOBUF_FIELD_OFFSET(AiGetOwnerPlayer, _impl_.player_actor_key_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\24\0\11\20\0\0\0\0"
    "cfg.AiGetOwnerPlayer"
    "node_name"
    "player_actor_key"
  }},
};

::uint8_t* AiGetOwnerPlayer::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.AiGetOwnerPlayer)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // string node_name = 2;
  if (!this->_internal_node_name().empty()) {
    const std::string& _s = this->_internal_node_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.AiGetOwnerPlayer.node_name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string player_actor_key = 3;
  if (!this->_internal_player_actor_key().empty()) {
    const std::string& _s = this->_internal_player_actor_key();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.AiGetOwnerPlayer.player_actor_key");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.AiGetOwnerPlayer)
  return target;
}

::size_t AiGetOwnerPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.AiGetOwnerPlayer)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string node_name = 2;
  if (!this->_internal_node_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_node_name());
  }

  // string player_actor_key = 3;
  if (!this->_internal_player_actor_key().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_player_actor_key());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AiGetOwnerPlayer::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    AiGetOwnerPlayer::MergeImpl
};
const ::google::protobuf::Message::ClassData*AiGetOwnerPlayer::GetClassData() const { return &_class_data_; }


void AiGetOwnerPlayer::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AiGetOwnerPlayer*>(&to_msg);
  auto& from = static_cast<const AiGetOwnerPlayer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.AiGetOwnerPlayer)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_node_name().empty()) {
    _this->_internal_set_node_name(from._internal_node_name());
  }
  if (!from._internal_player_actor_key().empty()) {
    _this->_internal_set_player_actor_key(from._internal_player_actor_key());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AiGetOwnerPlayer::CopyFrom(const AiGetOwnerPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.AiGetOwnerPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AiGetOwnerPlayer::IsInitialized() const {
  return true;
}

void AiGetOwnerPlayer::InternalSwap(AiGetOwnerPlayer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.node_name_, lhs_arena,
                                       &other->_impl_.node_name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.player_actor_key_, lhs_arena,
                                       &other->_impl_.player_actor_key_, rhs_arena);
        swap(_impl_.id_, other->_impl_.id_);
}

::google::protobuf::Metadata AiGetOwnerPlayer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[9]);
}
// ===================================================================

class AiUpdateDailyBehaviorProps::_Internal {
 public:
};

AiUpdateDailyBehaviorProps::AiUpdateDailyBehaviorProps(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.AiUpdateDailyBehaviorProps)
}
AiUpdateDailyBehaviorProps::AiUpdateDailyBehaviorProps(const AiUpdateDailyBehaviorProps& from) : ::google::protobuf::Message() {
  AiUpdateDailyBehaviorProps* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.node_name_){},
      decltype(_impl_.satiety_key_){},
      decltype(_impl_.energy_key_){},
      decltype(_impl_.mood_key_){},
      decltype(_impl_.satiety_lower_threshold_key_){},
      decltype(_impl_.satiety_upper_threshold_key_){},
      decltype(_impl_.energy_lower_threshold_key_){},
      decltype(_impl_.energy_upper_threshold_key_){},
      decltype(_impl_.mood_lower_threshold_key_){},
      decltype(_impl_.mood_upper_threshold_key_){},
      decltype(_impl_.id_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.node_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.node_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_node_name().empty()) {
    _this->_impl_.node_name_.Set(from._internal_node_name(), _this->GetArenaForAllocation());
  }
  _impl_.satiety_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.satiety_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_satiety_key().empty()) {
    _this->_impl_.satiety_key_.Set(from._internal_satiety_key(), _this->GetArenaForAllocation());
  }
  _impl_.energy_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.energy_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_energy_key().empty()) {
    _this->_impl_.energy_key_.Set(from._internal_energy_key(), _this->GetArenaForAllocation());
  }
  _impl_.mood_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.mood_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mood_key().empty()) {
    _this->_impl_.mood_key_.Set(from._internal_mood_key(), _this->GetArenaForAllocation());
  }
  _impl_.satiety_lower_threshold_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.satiety_lower_threshold_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_satiety_lower_threshold_key().empty()) {
    _this->_impl_.satiety_lower_threshold_key_.Set(from._internal_satiety_lower_threshold_key(), _this->GetArenaForAllocation());
  }
  _impl_.satiety_upper_threshold_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.satiety_upper_threshold_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_satiety_upper_threshold_key().empty()) {
    _this->_impl_.satiety_upper_threshold_key_.Set(from._internal_satiety_upper_threshold_key(), _this->GetArenaForAllocation());
  }
  _impl_.energy_lower_threshold_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.energy_lower_threshold_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_energy_lower_threshold_key().empty()) {
    _this->_impl_.energy_lower_threshold_key_.Set(from._internal_energy_lower_threshold_key(), _this->GetArenaForAllocation());
  }
  _impl_.energy_upper_threshold_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.energy_upper_threshold_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_energy_upper_threshold_key().empty()) {
    _this->_impl_.energy_upper_threshold_key_.Set(from._internal_energy_upper_threshold_key(), _this->GetArenaForAllocation());
  }
  _impl_.mood_lower_threshold_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.mood_lower_threshold_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mood_lower_threshold_key().empty()) {
    _this->_impl_.mood_lower_threshold_key_.Set(from._internal_mood_lower_threshold_key(), _this->GetArenaForAllocation());
  }
  _impl_.mood_upper_threshold_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.mood_upper_threshold_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mood_upper_threshold_key().empty()) {
    _this->_impl_.mood_upper_threshold_key_.Set(from._internal_mood_upper_threshold_key(), _this->GetArenaForAllocation());
  }
  _this->_impl_.id_ = from._impl_.id_;

  // @@protoc_insertion_point(copy_constructor:cfg.AiUpdateDailyBehaviorProps)
}
inline void AiUpdateDailyBehaviorProps::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.node_name_){},
      decltype(_impl_.satiety_key_){},
      decltype(_impl_.energy_key_){},
      decltype(_impl_.mood_key_){},
      decltype(_impl_.satiety_lower_threshold_key_){},
      decltype(_impl_.satiety_upper_threshold_key_){},
      decltype(_impl_.energy_lower_threshold_key_){},
      decltype(_impl_.energy_upper_threshold_key_){},
      decltype(_impl_.mood_lower_threshold_key_){},
      decltype(_impl_.mood_upper_threshold_key_){},
      decltype(_impl_.id_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.node_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.node_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.satiety_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.satiety_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.energy_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.energy_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mood_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.mood_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.satiety_lower_threshold_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.satiety_lower_threshold_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.satiety_upper_threshold_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.satiety_upper_threshold_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.energy_lower_threshold_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.energy_lower_threshold_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.energy_upper_threshold_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.energy_upper_threshold_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mood_lower_threshold_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.mood_lower_threshold_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mood_upper_threshold_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.mood_upper_threshold_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
AiUpdateDailyBehaviorProps::~AiUpdateDailyBehaviorProps() {
  // @@protoc_insertion_point(destructor:cfg.AiUpdateDailyBehaviorProps)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AiUpdateDailyBehaviorProps::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.node_name_.Destroy();
  _impl_.satiety_key_.Destroy();
  _impl_.energy_key_.Destroy();
  _impl_.mood_key_.Destroy();
  _impl_.satiety_lower_threshold_key_.Destroy();
  _impl_.satiety_upper_threshold_key_.Destroy();
  _impl_.energy_lower_threshold_key_.Destroy();
  _impl_.energy_upper_threshold_key_.Destroy();
  _impl_.mood_lower_threshold_key_.Destroy();
  _impl_.mood_upper_threshold_key_.Destroy();
}
void AiUpdateDailyBehaviorProps::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void AiUpdateDailyBehaviorProps::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.AiUpdateDailyBehaviorProps)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.node_name_.ClearToEmpty();
  _impl_.satiety_key_.ClearToEmpty();
  _impl_.energy_key_.ClearToEmpty();
  _impl_.mood_key_.ClearToEmpty();
  _impl_.satiety_lower_threshold_key_.ClearToEmpty();
  _impl_.satiety_upper_threshold_key_.ClearToEmpty();
  _impl_.energy_lower_threshold_key_.ClearToEmpty();
  _impl_.energy_upper_threshold_key_.ClearToEmpty();
  _impl_.mood_lower_threshold_key_.ClearToEmpty();
  _impl_.mood_upper_threshold_key_.ClearToEmpty();
  _impl_.id_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AiUpdateDailyBehaviorProps::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 11, 0, 239, 2> AiUpdateDailyBehaviorProps::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    11, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294965248,  // skipmap
    offsetof(decltype(_table_), field_entries),
    11,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_AiUpdateDailyBehaviorProps_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AiUpdateDailyBehaviorProps, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(AiUpdateDailyBehaviorProps, _impl_.id_)}},
    // string node_name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(AiUpdateDailyBehaviorProps, _impl_.node_name_)}},
    // string satiety_key = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(AiUpdateDailyBehaviorProps, _impl_.satiety_key_)}},
    // string energy_key = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(AiUpdateDailyBehaviorProps, _impl_.energy_key_)}},
    // string mood_key = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(AiUpdateDailyBehaviorProps, _impl_.mood_key_)}},
    // string satiety_lower_threshold_key = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(AiUpdateDailyBehaviorProps, _impl_.satiety_lower_threshold_key_)}},
    // string satiety_upper_threshold_key = 7;
    {::_pbi::TcParser::FastUS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(AiUpdateDailyBehaviorProps, _impl_.satiety_upper_threshold_key_)}},
    // string energy_lower_threshold_key = 8;
    {::_pbi::TcParser::FastUS1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(AiUpdateDailyBehaviorProps, _impl_.energy_lower_threshold_key_)}},
    // string energy_upper_threshold_key = 9;
    {::_pbi::TcParser::FastUS1,
     {74, 63, 0, PROTOBUF_FIELD_OFFSET(AiUpdateDailyBehaviorProps, _impl_.energy_upper_threshold_key_)}},
    // string mood_lower_threshold_key = 10;
    {::_pbi::TcParser::FastUS1,
     {82, 63, 0, PROTOBUF_FIELD_OFFSET(AiUpdateDailyBehaviorProps, _impl_.mood_lower_threshold_key_)}},
    // string mood_upper_threshold_key = 11;
    {::_pbi::TcParser::FastUS1,
     {90, 63, 0, PROTOBUF_FIELD_OFFSET(AiUpdateDailyBehaviorProps, _impl_.mood_upper_threshold_key_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(AiUpdateDailyBehaviorProps, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string node_name = 2;
    {PROTOBUF_FIELD_OFFSET(AiUpdateDailyBehaviorProps, _impl_.node_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string satiety_key = 3;
    {PROTOBUF_FIELD_OFFSET(AiUpdateDailyBehaviorProps, _impl_.satiety_key_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string energy_key = 4;
    {PROTOBUF_FIELD_OFFSET(AiUpdateDailyBehaviorProps, _impl_.energy_key_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string mood_key = 5;
    {PROTOBUF_FIELD_OFFSET(AiUpdateDailyBehaviorProps, _impl_.mood_key_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string satiety_lower_threshold_key = 6;
    {PROTOBUF_FIELD_OFFSET(AiUpdateDailyBehaviorProps, _impl_.satiety_lower_threshold_key_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string satiety_upper_threshold_key = 7;
    {PROTOBUF_FIELD_OFFSET(AiUpdateDailyBehaviorProps, _impl_.satiety_upper_threshold_key_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string energy_lower_threshold_key = 8;
    {PROTOBUF_FIELD_OFFSET(AiUpdateDailyBehaviorProps, _impl_.energy_lower_threshold_key_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string energy_upper_threshold_key = 9;
    {PROTOBUF_FIELD_OFFSET(AiUpdateDailyBehaviorProps, _impl_.energy_upper_threshold_key_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string mood_lower_threshold_key = 10;
    {PROTOBUF_FIELD_OFFSET(AiUpdateDailyBehaviorProps, _impl_.mood_lower_threshold_key_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string mood_upper_threshold_key = 11;
    {PROTOBUF_FIELD_OFFSET(AiUpdateDailyBehaviorProps, _impl_.mood_upper_threshold_key_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\36\0\11\13\12\10\33\33\32\32\30\30\0\0\0\0"
    "cfg.AiUpdateDailyBehaviorProps"
    "node_name"
    "satiety_key"
    "energy_key"
    "mood_key"
    "satiety_lower_threshold_key"
    "satiety_upper_threshold_key"
    "energy_lower_threshold_key"
    "energy_upper_threshold_key"
    "mood_lower_threshold_key"
    "mood_upper_threshold_key"
  }},
};

::uint8_t* AiUpdateDailyBehaviorProps::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.AiUpdateDailyBehaviorProps)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // string node_name = 2;
  if (!this->_internal_node_name().empty()) {
    const std::string& _s = this->_internal_node_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.AiUpdateDailyBehaviorProps.node_name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string satiety_key = 3;
  if (!this->_internal_satiety_key().empty()) {
    const std::string& _s = this->_internal_satiety_key();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.AiUpdateDailyBehaviorProps.satiety_key");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string energy_key = 4;
  if (!this->_internal_energy_key().empty()) {
    const std::string& _s = this->_internal_energy_key();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.AiUpdateDailyBehaviorProps.energy_key");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string mood_key = 5;
  if (!this->_internal_mood_key().empty()) {
    const std::string& _s = this->_internal_mood_key();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.AiUpdateDailyBehaviorProps.mood_key");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // string satiety_lower_threshold_key = 6;
  if (!this->_internal_satiety_lower_threshold_key().empty()) {
    const std::string& _s = this->_internal_satiety_lower_threshold_key();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.AiUpdateDailyBehaviorProps.satiety_lower_threshold_key");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // string satiety_upper_threshold_key = 7;
  if (!this->_internal_satiety_upper_threshold_key().empty()) {
    const std::string& _s = this->_internal_satiety_upper_threshold_key();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.AiUpdateDailyBehaviorProps.satiety_upper_threshold_key");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // string energy_lower_threshold_key = 8;
  if (!this->_internal_energy_lower_threshold_key().empty()) {
    const std::string& _s = this->_internal_energy_lower_threshold_key();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.AiUpdateDailyBehaviorProps.energy_lower_threshold_key");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  // string energy_upper_threshold_key = 9;
  if (!this->_internal_energy_upper_threshold_key().empty()) {
    const std::string& _s = this->_internal_energy_upper_threshold_key();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.AiUpdateDailyBehaviorProps.energy_upper_threshold_key");
    target = stream->WriteStringMaybeAliased(9, _s, target);
  }

  // string mood_lower_threshold_key = 10;
  if (!this->_internal_mood_lower_threshold_key().empty()) {
    const std::string& _s = this->_internal_mood_lower_threshold_key();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.AiUpdateDailyBehaviorProps.mood_lower_threshold_key");
    target = stream->WriteStringMaybeAliased(10, _s, target);
  }

  // string mood_upper_threshold_key = 11;
  if (!this->_internal_mood_upper_threshold_key().empty()) {
    const std::string& _s = this->_internal_mood_upper_threshold_key();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.AiUpdateDailyBehaviorProps.mood_upper_threshold_key");
    target = stream->WriteStringMaybeAliased(11, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.AiUpdateDailyBehaviorProps)
  return target;
}

::size_t AiUpdateDailyBehaviorProps::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.AiUpdateDailyBehaviorProps)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string node_name = 2;
  if (!this->_internal_node_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_node_name());
  }

  // string satiety_key = 3;
  if (!this->_internal_satiety_key().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_satiety_key());
  }

  // string energy_key = 4;
  if (!this->_internal_energy_key().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_energy_key());
  }

  // string mood_key = 5;
  if (!this->_internal_mood_key().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_mood_key());
  }

  // string satiety_lower_threshold_key = 6;
  if (!this->_internal_satiety_lower_threshold_key().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_satiety_lower_threshold_key());
  }

  // string satiety_upper_threshold_key = 7;
  if (!this->_internal_satiety_upper_threshold_key().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_satiety_upper_threshold_key());
  }

  // string energy_lower_threshold_key = 8;
  if (!this->_internal_energy_lower_threshold_key().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_energy_lower_threshold_key());
  }

  // string energy_upper_threshold_key = 9;
  if (!this->_internal_energy_upper_threshold_key().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_energy_upper_threshold_key());
  }

  // string mood_lower_threshold_key = 10;
  if (!this->_internal_mood_lower_threshold_key().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_mood_lower_threshold_key());
  }

  // string mood_upper_threshold_key = 11;
  if (!this->_internal_mood_upper_threshold_key().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_mood_upper_threshold_key());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AiUpdateDailyBehaviorProps::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    AiUpdateDailyBehaviorProps::MergeImpl
};
const ::google::protobuf::Message::ClassData*AiUpdateDailyBehaviorProps::GetClassData() const { return &_class_data_; }


void AiUpdateDailyBehaviorProps::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AiUpdateDailyBehaviorProps*>(&to_msg);
  auto& from = static_cast<const AiUpdateDailyBehaviorProps&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.AiUpdateDailyBehaviorProps)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_node_name().empty()) {
    _this->_internal_set_node_name(from._internal_node_name());
  }
  if (!from._internal_satiety_key().empty()) {
    _this->_internal_set_satiety_key(from._internal_satiety_key());
  }
  if (!from._internal_energy_key().empty()) {
    _this->_internal_set_energy_key(from._internal_energy_key());
  }
  if (!from._internal_mood_key().empty()) {
    _this->_internal_set_mood_key(from._internal_mood_key());
  }
  if (!from._internal_satiety_lower_threshold_key().empty()) {
    _this->_internal_set_satiety_lower_threshold_key(from._internal_satiety_lower_threshold_key());
  }
  if (!from._internal_satiety_upper_threshold_key().empty()) {
    _this->_internal_set_satiety_upper_threshold_key(from._internal_satiety_upper_threshold_key());
  }
  if (!from._internal_energy_lower_threshold_key().empty()) {
    _this->_internal_set_energy_lower_threshold_key(from._internal_energy_lower_threshold_key());
  }
  if (!from._internal_energy_upper_threshold_key().empty()) {
    _this->_internal_set_energy_upper_threshold_key(from._internal_energy_upper_threshold_key());
  }
  if (!from._internal_mood_lower_threshold_key().empty()) {
    _this->_internal_set_mood_lower_threshold_key(from._internal_mood_lower_threshold_key());
  }
  if (!from._internal_mood_upper_threshold_key().empty()) {
    _this->_internal_set_mood_upper_threshold_key(from._internal_mood_upper_threshold_key());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AiUpdateDailyBehaviorProps::CopyFrom(const AiUpdateDailyBehaviorProps& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.AiUpdateDailyBehaviorProps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AiUpdateDailyBehaviorProps::IsInitialized() const {
  return true;
}

void AiUpdateDailyBehaviorProps::InternalSwap(AiUpdateDailyBehaviorProps* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.node_name_, lhs_arena,
                                       &other->_impl_.node_name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.satiety_key_, lhs_arena,
                                       &other->_impl_.satiety_key_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.energy_key_, lhs_arena,
                                       &other->_impl_.energy_key_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.mood_key_, lhs_arena,
                                       &other->_impl_.mood_key_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.satiety_lower_threshold_key_, lhs_arena,
                                       &other->_impl_.satiety_lower_threshold_key_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.satiety_upper_threshold_key_, lhs_arena,
                                       &other->_impl_.satiety_upper_threshold_key_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.energy_lower_threshold_key_, lhs_arena,
                                       &other->_impl_.energy_lower_threshold_key_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.energy_upper_threshold_key_, lhs_arena,
                                       &other->_impl_.energy_upper_threshold_key_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.mood_lower_threshold_key_, lhs_arena,
                                       &other->_impl_.mood_lower_threshold_key_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.mood_upper_threshold_key_, lhs_arena,
                                       &other->_impl_.mood_upper_threshold_key_, rhs_arena);
        swap(_impl_.id_, other->_impl_.id_);
}

::google::protobuf::Metadata AiUpdateDailyBehaviorProps::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[10]);
}
// ===================================================================

class AiDecorator::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::cfg::AiDecorator, _impl_._oneof_case_);
  static const ::cfg::AiUeLoop& ueloop(const AiDecorator* msg);
  static const ::cfg::AiUeCooldown& uecooldown(const AiDecorator* msg);
  static const ::cfg::AiUeTimeLimit& uetimelimit(const AiDecorator* msg);
  static const ::cfg::AiUeBlackboard& ueblackboard(const AiDecorator* msg);
  static const ::cfg::AiUeForceSuccess& ueforcesuccess(const AiDecorator* msg);
  static const ::cfg::AiIsAtLocation& isatlocation(const AiDecorator* msg);
  static const ::cfg::AiDistanceLessThan& distancelessthan(const AiDecorator* msg);
};

const ::cfg::AiUeLoop& AiDecorator::_Internal::ueloop(const AiDecorator* msg) {
  return *msg->_impl_.value_.ueloop_;
}
const ::cfg::AiUeCooldown& AiDecorator::_Internal::uecooldown(const AiDecorator* msg) {
  return *msg->_impl_.value_.uecooldown_;
}
const ::cfg::AiUeTimeLimit& AiDecorator::_Internal::uetimelimit(const AiDecorator* msg) {
  return *msg->_impl_.value_.uetimelimit_;
}
const ::cfg::AiUeBlackboard& AiDecorator::_Internal::ueblackboard(const AiDecorator* msg) {
  return *msg->_impl_.value_.ueblackboard_;
}
const ::cfg::AiUeForceSuccess& AiDecorator::_Internal::ueforcesuccess(const AiDecorator* msg) {
  return *msg->_impl_.value_.ueforcesuccess_;
}
const ::cfg::AiIsAtLocation& AiDecorator::_Internal::isatlocation(const AiDecorator* msg) {
  return *msg->_impl_.value_.isatlocation_;
}
const ::cfg::AiDistanceLessThan& AiDecorator::_Internal::distancelessthan(const AiDecorator* msg) {
  return *msg->_impl_.value_.distancelessthan_;
}
void AiDecorator::set_allocated_ueloop(::cfg::AiUeLoop* ueloop) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (ueloop) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(ueloop);
    if (message_arena != submessage_arena) {
      ueloop = ::google::protobuf::internal::GetOwnedMessage(message_arena, ueloop, submessage_arena);
    }
    set_has_ueloop();
    _impl_.value_.ueloop_ = ueloop;
  }
  // @@protoc_insertion_point(field_set_allocated:cfg.AiDecorator.UeLoop)
}
void AiDecorator::set_allocated_uecooldown(::cfg::AiUeCooldown* uecooldown) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (uecooldown) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(uecooldown);
    if (message_arena != submessage_arena) {
      uecooldown = ::google::protobuf::internal::GetOwnedMessage(message_arena, uecooldown, submessage_arena);
    }
    set_has_uecooldown();
    _impl_.value_.uecooldown_ = uecooldown;
  }
  // @@protoc_insertion_point(field_set_allocated:cfg.AiDecorator.UeCooldown)
}
void AiDecorator::set_allocated_uetimelimit(::cfg::AiUeTimeLimit* uetimelimit) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (uetimelimit) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(uetimelimit);
    if (message_arena != submessage_arena) {
      uetimelimit = ::google::protobuf::internal::GetOwnedMessage(message_arena, uetimelimit, submessage_arena);
    }
    set_has_uetimelimit();
    _impl_.value_.uetimelimit_ = uetimelimit;
  }
  // @@protoc_insertion_point(field_set_allocated:cfg.AiDecorator.UeTimeLimit)
}
void AiDecorator::set_allocated_ueblackboard(::cfg::AiUeBlackboard* ueblackboard) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (ueblackboard) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(ueblackboard);
    if (message_arena != submessage_arena) {
      ueblackboard = ::google::protobuf::internal::GetOwnedMessage(message_arena, ueblackboard, submessage_arena);
    }
    set_has_ueblackboard();
    _impl_.value_.ueblackboard_ = ueblackboard;
  }
  // @@protoc_insertion_point(field_set_allocated:cfg.AiDecorator.UeBlackboard)
}
void AiDecorator::set_allocated_ueforcesuccess(::cfg::AiUeForceSuccess* ueforcesuccess) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (ueforcesuccess) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(ueforcesuccess);
    if (message_arena != submessage_arena) {
      ueforcesuccess = ::google::protobuf::internal::GetOwnedMessage(message_arena, ueforcesuccess, submessage_arena);
    }
    set_has_ueforcesuccess();
    _impl_.value_.ueforcesuccess_ = ueforcesuccess;
  }
  // @@protoc_insertion_point(field_set_allocated:cfg.AiDecorator.UeForceSuccess)
}
void AiDecorator::set_allocated_isatlocation(::cfg::AiIsAtLocation* isatlocation) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (isatlocation) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(isatlocation);
    if (message_arena != submessage_arena) {
      isatlocation = ::google::protobuf::internal::GetOwnedMessage(message_arena, isatlocation, submessage_arena);
    }
    set_has_isatlocation();
    _impl_.value_.isatlocation_ = isatlocation;
  }
  // @@protoc_insertion_point(field_set_allocated:cfg.AiDecorator.IsAtLocation)
}
void AiDecorator::set_allocated_distancelessthan(::cfg::AiDistanceLessThan* distancelessthan) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (distancelessthan) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(distancelessthan);
    if (message_arena != submessage_arena) {
      distancelessthan = ::google::protobuf::internal::GetOwnedMessage(message_arena, distancelessthan, submessage_arena);
    }
    set_has_distancelessthan();
    _impl_.value_.distancelessthan_ = distancelessthan;
  }
  // @@protoc_insertion_point(field_set_allocated:cfg.AiDecorator.DistanceLessThan)
}
AiDecorator::AiDecorator(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.AiDecorator)
}
AiDecorator::AiDecorator(const AiDecorator& from) : ::google::protobuf::Message() {
  AiDecorator* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_._oneof_case_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kUeLoop: {
      _this->_internal_mutable_ueloop()->::cfg::AiUeLoop::MergeFrom(
          from._internal_ueloop());
      break;
    }
    case kUeCooldown: {
      _this->_internal_mutable_uecooldown()->::cfg::AiUeCooldown::MergeFrom(
          from._internal_uecooldown());
      break;
    }
    case kUeTimeLimit: {
      _this->_internal_mutable_uetimelimit()->::cfg::AiUeTimeLimit::MergeFrom(
          from._internal_uetimelimit());
      break;
    }
    case kUeBlackboard: {
      _this->_internal_mutable_ueblackboard()->::cfg::AiUeBlackboard::MergeFrom(
          from._internal_ueblackboard());
      break;
    }
    case kUeForceSuccess: {
      _this->_internal_mutable_ueforcesuccess()->::cfg::AiUeForceSuccess::MergeFrom(
          from._internal_ueforcesuccess());
      break;
    }
    case kIsAtLocation: {
      _this->_internal_mutable_isatlocation()->::cfg::AiIsAtLocation::MergeFrom(
          from._internal_isatlocation());
      break;
    }
    case kDistanceLessThan: {
      _this->_internal_mutable_distancelessthan()->::cfg::AiDistanceLessThan::MergeFrom(
          from._internal_distancelessthan());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }

  // @@protoc_insertion_point(copy_constructor:cfg.AiDecorator)
}
inline void AiDecorator::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_._oneof_case_)*/ {},
  };
  clear_has_value();
}
AiDecorator::~AiDecorator() {
  // @@protoc_insertion_point(destructor:cfg.AiDecorator)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AiDecorator::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_value()) {
    clear_value();
  }
}
void AiDecorator::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AiDecorator::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:cfg.AiDecorator)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  switch (value_case()) {
    case kUeLoop: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.ueloop_;
      }
      break;
    }
    case kUeCooldown: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.uecooldown_;
      }
      break;
    }
    case kUeTimeLimit: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.uetimelimit_;
      }
      break;
    }
    case kUeBlackboard: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.ueblackboard_;
      }
      break;
    }
    case kUeForceSuccess: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.ueforcesuccess_;
      }
      break;
    }
    case kIsAtLocation: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.isatlocation_;
      }
      break;
    }
    case kDistanceLessThan: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.distancelessthan_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}


PROTOBUF_NOINLINE void AiDecorator::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.AiDecorator)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AiDecorator::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 7, 7, 0, 2> AiDecorator::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    13, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294959167,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    7,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AiDecorator_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .cfg.AiUeLoop UeLoop = 7;
    {PROTOBUF_FIELD_OFFSET(AiDecorator, _impl_.value_.ueloop_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cfg.AiUeCooldown UeCooldown = 8;
    {PROTOBUF_FIELD_OFFSET(AiDecorator, _impl_.value_.uecooldown_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cfg.AiUeTimeLimit UeTimeLimit = 9;
    {PROTOBUF_FIELD_OFFSET(AiDecorator, _impl_.value_.uetimelimit_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cfg.AiUeBlackboard UeBlackboard = 10;
    {PROTOBUF_FIELD_OFFSET(AiDecorator, _impl_.value_.ueblackboard_), _Internal::kOneofCaseOffset + 0, 3,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cfg.AiUeForceSuccess UeForceSuccess = 11;
    {PROTOBUF_FIELD_OFFSET(AiDecorator, _impl_.value_.ueforcesuccess_), _Internal::kOneofCaseOffset + 0, 4,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cfg.AiIsAtLocation IsAtLocation = 12;
    {PROTOBUF_FIELD_OFFSET(AiDecorator, _impl_.value_.isatlocation_), _Internal::kOneofCaseOffset + 0, 5,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cfg.AiDistanceLessThan DistanceLessThan = 13;
    {PROTOBUF_FIELD_OFFSET(AiDecorator, _impl_.value_.distancelessthan_), _Internal::kOneofCaseOffset + 0, 6,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::AiUeLoop>()},
    {::_pbi::TcParser::GetTable<::cfg::AiUeCooldown>()},
    {::_pbi::TcParser::GetTable<::cfg::AiUeTimeLimit>()},
    {::_pbi::TcParser::GetTable<::cfg::AiUeBlackboard>()},
    {::_pbi::TcParser::GetTable<::cfg::AiUeForceSuccess>()},
    {::_pbi::TcParser::GetTable<::cfg::AiIsAtLocation>()},
    {::_pbi::TcParser::GetTable<::cfg::AiDistanceLessThan>()},
  }}, {{
  }},
};

::uint8_t* AiDecorator::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.AiDecorator)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  switch (value_case()) {
    case kUeLoop: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(7, _Internal::ueloop(this),
          _Internal::ueloop(this).GetCachedSize(), target, stream);
      break;
    }
    case kUeCooldown: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(8, _Internal::uecooldown(this),
          _Internal::uecooldown(this).GetCachedSize(), target, stream);
      break;
    }
    case kUeTimeLimit: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(9, _Internal::uetimelimit(this),
          _Internal::uetimelimit(this).GetCachedSize(), target, stream);
      break;
    }
    case kUeBlackboard: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(10, _Internal::ueblackboard(this),
          _Internal::ueblackboard(this).GetCachedSize(), target, stream);
      break;
    }
    case kUeForceSuccess: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(11, _Internal::ueforcesuccess(this),
          _Internal::ueforcesuccess(this).GetCachedSize(), target, stream);
      break;
    }
    case kIsAtLocation: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(12, _Internal::isatlocation(this),
          _Internal::isatlocation(this).GetCachedSize(), target, stream);
      break;
    }
    case kDistanceLessThan: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(13, _Internal::distancelessthan(this),
          _Internal::distancelessthan(this).GetCachedSize(), target, stream);
      break;
    }
    default:
      break;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.AiDecorator)
  return target;
}

::size_t AiDecorator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.AiDecorator)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_case()) {
    // .cfg.AiUeLoop UeLoop = 7;
    case kUeLoop: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.value_.ueloop_);
      break;
    }
    // .cfg.AiUeCooldown UeCooldown = 8;
    case kUeCooldown: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.value_.uecooldown_);
      break;
    }
    // .cfg.AiUeTimeLimit UeTimeLimit = 9;
    case kUeTimeLimit: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.value_.uetimelimit_);
      break;
    }
    // .cfg.AiUeBlackboard UeBlackboard = 10;
    case kUeBlackboard: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.value_.ueblackboard_);
      break;
    }
    // .cfg.AiUeForceSuccess UeForceSuccess = 11;
    case kUeForceSuccess: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.value_.ueforcesuccess_);
      break;
    }
    // .cfg.AiIsAtLocation IsAtLocation = 12;
    case kIsAtLocation: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.value_.isatlocation_);
      break;
    }
    // .cfg.AiDistanceLessThan DistanceLessThan = 13;
    case kDistanceLessThan: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.value_.distancelessthan_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AiDecorator::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    AiDecorator::MergeImpl
};
const ::google::protobuf::Message::ClassData*AiDecorator::GetClassData() const { return &_class_data_; }


void AiDecorator::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AiDecorator*>(&to_msg);
  auto& from = static_cast<const AiDecorator&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.AiDecorator)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kUeLoop: {
      _this->_internal_mutable_ueloop()->::cfg::AiUeLoop::MergeFrom(
          from._internal_ueloop());
      break;
    }
    case kUeCooldown: {
      _this->_internal_mutable_uecooldown()->::cfg::AiUeCooldown::MergeFrom(
          from._internal_uecooldown());
      break;
    }
    case kUeTimeLimit: {
      _this->_internal_mutable_uetimelimit()->::cfg::AiUeTimeLimit::MergeFrom(
          from._internal_uetimelimit());
      break;
    }
    case kUeBlackboard: {
      _this->_internal_mutable_ueblackboard()->::cfg::AiUeBlackboard::MergeFrom(
          from._internal_ueblackboard());
      break;
    }
    case kUeForceSuccess: {
      _this->_internal_mutable_ueforcesuccess()->::cfg::AiUeForceSuccess::MergeFrom(
          from._internal_ueforcesuccess());
      break;
    }
    case kIsAtLocation: {
      _this->_internal_mutable_isatlocation()->::cfg::AiIsAtLocation::MergeFrom(
          from._internal_isatlocation());
      break;
    }
    case kDistanceLessThan: {
      _this->_internal_mutable_distancelessthan()->::cfg::AiDistanceLessThan::MergeFrom(
          from._internal_distancelessthan());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AiDecorator::CopyFrom(const AiDecorator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.AiDecorator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AiDecorator::IsInitialized() const {
  return true;
}

void AiDecorator::InternalSwap(AiDecorator* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.value_, other->_impl_.value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata AiDecorator::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[11]);
}
// ===================================================================

class AiUeLoop::_Internal {
 public:
};

AiUeLoop::AiUeLoop(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.AiUeLoop)
}
AiUeLoop::AiUeLoop(const AiUeLoop& from) : ::google::protobuf::Message() {
  AiUeLoop* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.node_name_){},
      decltype(_impl_.id_){},
      decltype(_impl_.flow_abort_mode_){},
      decltype(_impl_.num_loops_){},
      decltype(_impl_.infinite_loop_){},
      decltype(_impl_.infinite_loop_timeout_time_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.node_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.node_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_node_name().empty()) {
    _this->_impl_.node_name_.Set(from._internal_node_name(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.infinite_loop_timeout_time_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.infinite_loop_timeout_time_));

  // @@protoc_insertion_point(copy_constructor:cfg.AiUeLoop)
}
inline void AiUeLoop::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.node_name_){},
      decltype(_impl_.id_){0},
      decltype(_impl_.flow_abort_mode_){0},
      decltype(_impl_.num_loops_){0},
      decltype(_impl_.infinite_loop_){false},
      decltype(_impl_.infinite_loop_timeout_time_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.node_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.node_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
AiUeLoop::~AiUeLoop() {
  // @@protoc_insertion_point(destructor:cfg.AiUeLoop)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AiUeLoop::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.node_name_.Destroy();
}
void AiUeLoop::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void AiUeLoop::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.AiUeLoop)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.node_name_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.infinite_loop_timeout_time_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.infinite_loop_timeout_time_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AiUeLoop::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 0, 30, 2> AiUeLoop::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_AiUeLoop_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AiUeLoop, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(AiUeLoop, _impl_.id_)}},
    // string node_name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(AiUeLoop, _impl_.node_name_)}},
    // .cfg.AiEFlowAbortMode flow_abort_mode = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AiUeLoop, _impl_.flow_abort_mode_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(AiUeLoop, _impl_.flow_abort_mode_)}},
    // int32 num_loops = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AiUeLoop, _impl_.num_loops_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(AiUeLoop, _impl_.num_loops_)}},
    // bool infinite_loop = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AiUeLoop, _impl_.infinite_loop_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(AiUeLoop, _impl_.infinite_loop_)}},
    // float infinite_loop_timeout_time = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 63, 0, PROTOBUF_FIELD_OFFSET(AiUeLoop, _impl_.infinite_loop_timeout_time_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(AiUeLoop, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string node_name = 2;
    {PROTOBUF_FIELD_OFFSET(AiUeLoop, _impl_.node_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .cfg.AiEFlowAbortMode flow_abort_mode = 3;
    {PROTOBUF_FIELD_OFFSET(AiUeLoop, _impl_.flow_abort_mode_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // int32 num_loops = 4;
    {PROTOBUF_FIELD_OFFSET(AiUeLoop, _impl_.num_loops_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool infinite_loop = 5;
    {PROTOBUF_FIELD_OFFSET(AiUeLoop, _impl_.infinite_loop_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // float infinite_loop_timeout_time = 6;
    {PROTOBUF_FIELD_OFFSET(AiUeLoop, _impl_.infinite_loop_timeout_time_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
    "\14\0\11\0\0\0\0\0"
    "cfg.AiUeLoop"
    "node_name"
  }},
};

::uint8_t* AiUeLoop::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.AiUeLoop)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // string node_name = 2;
  if (!this->_internal_node_name().empty()) {
    const std::string& _s = this->_internal_node_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.AiUeLoop.node_name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // .cfg.AiEFlowAbortMode flow_abort_mode = 3;
  if (this->_internal_flow_abort_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_flow_abort_mode(), target);
  }

  // int32 num_loops = 4;
  if (this->_internal_num_loops() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_num_loops(), target);
  }

  // bool infinite_loop = 5;
  if (this->_internal_infinite_loop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_infinite_loop(), target);
  }

  // float infinite_loop_timeout_time = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_infinite_loop_timeout_time = this->_internal_infinite_loop_timeout_time();
  ::uint32_t raw_infinite_loop_timeout_time;
  memcpy(&raw_infinite_loop_timeout_time, &tmp_infinite_loop_timeout_time, sizeof(tmp_infinite_loop_timeout_time));
  if (raw_infinite_loop_timeout_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        6, this->_internal_infinite_loop_timeout_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.AiUeLoop)
  return target;
}

::size_t AiUeLoop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.AiUeLoop)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string node_name = 2;
  if (!this->_internal_node_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_node_name());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  // .cfg.AiEFlowAbortMode flow_abort_mode = 3;
  if (this->_internal_flow_abort_mode() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_flow_abort_mode());
  }

  // int32 num_loops = 4;
  if (this->_internal_num_loops() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_num_loops());
  }

  // bool infinite_loop = 5;
  if (this->_internal_infinite_loop() != 0) {
    total_size += 2;
  }

  // float infinite_loop_timeout_time = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_infinite_loop_timeout_time = this->_internal_infinite_loop_timeout_time();
  ::uint32_t raw_infinite_loop_timeout_time;
  memcpy(&raw_infinite_loop_timeout_time, &tmp_infinite_loop_timeout_time, sizeof(tmp_infinite_loop_timeout_time));
  if (raw_infinite_loop_timeout_time != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AiUeLoop::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    AiUeLoop::MergeImpl
};
const ::google::protobuf::Message::ClassData*AiUeLoop::GetClassData() const { return &_class_data_; }


void AiUeLoop::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AiUeLoop*>(&to_msg);
  auto& from = static_cast<const AiUeLoop&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.AiUeLoop)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_node_name().empty()) {
    _this->_internal_set_node_name(from._internal_node_name());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_flow_abort_mode() != 0) {
    _this->_internal_set_flow_abort_mode(from._internal_flow_abort_mode());
  }
  if (from._internal_num_loops() != 0) {
    _this->_internal_set_num_loops(from._internal_num_loops());
  }
  if (from._internal_infinite_loop() != 0) {
    _this->_internal_set_infinite_loop(from._internal_infinite_loop());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_infinite_loop_timeout_time = from._internal_infinite_loop_timeout_time();
  ::uint32_t raw_infinite_loop_timeout_time;
  memcpy(&raw_infinite_loop_timeout_time, &tmp_infinite_loop_timeout_time, sizeof(tmp_infinite_loop_timeout_time));
  if (raw_infinite_loop_timeout_time != 0) {
    _this->_internal_set_infinite_loop_timeout_time(from._internal_infinite_loop_timeout_time());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AiUeLoop::CopyFrom(const AiUeLoop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.AiUeLoop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AiUeLoop::IsInitialized() const {
  return true;
}

void AiUeLoop::InternalSwap(AiUeLoop* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.node_name_, lhs_arena,
                                       &other->_impl_.node_name_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AiUeLoop, _impl_.infinite_loop_timeout_time_)
      + sizeof(AiUeLoop::_impl_.infinite_loop_timeout_time_)
      - PROTOBUF_FIELD_OFFSET(AiUeLoop, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::google::protobuf::Metadata AiUeLoop::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[12]);
}
// ===================================================================

class AiUeCooldown::_Internal {
 public:
};

AiUeCooldown::AiUeCooldown(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.AiUeCooldown)
}
AiUeCooldown::AiUeCooldown(const AiUeCooldown& from) : ::google::protobuf::Message() {
  AiUeCooldown* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.node_name_){},
      decltype(_impl_.id_){},
      decltype(_impl_.flow_abort_mode_){},
      decltype(_impl_.cooldown_time_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.node_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.node_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_node_name().empty()) {
    _this->_impl_.node_name_.Set(from._internal_node_name(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.cooldown_time_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.cooldown_time_));

  // @@protoc_insertion_point(copy_constructor:cfg.AiUeCooldown)
}
inline void AiUeCooldown::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.node_name_){},
      decltype(_impl_.id_){0},
      decltype(_impl_.flow_abort_mode_){0},
      decltype(_impl_.cooldown_time_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.node_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.node_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
AiUeCooldown::~AiUeCooldown() {
  // @@protoc_insertion_point(destructor:cfg.AiUeCooldown)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AiUeCooldown::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.node_name_.Destroy();
}
void AiUeCooldown::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void AiUeCooldown::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.AiUeCooldown)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.node_name_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.cooldown_time_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.cooldown_time_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AiUeCooldown::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 34, 2> AiUeCooldown::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_AiUeCooldown_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // float cooldown_time = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(AiUeCooldown, _impl_.cooldown_time_)}},
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AiUeCooldown, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(AiUeCooldown, _impl_.id_)}},
    // string node_name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(AiUeCooldown, _impl_.node_name_)}},
    // .cfg.AiEFlowAbortMode flow_abort_mode = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AiUeCooldown, _impl_.flow_abort_mode_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(AiUeCooldown, _impl_.flow_abort_mode_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(AiUeCooldown, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string node_name = 2;
    {PROTOBUF_FIELD_OFFSET(AiUeCooldown, _impl_.node_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .cfg.AiEFlowAbortMode flow_abort_mode = 3;
    {PROTOBUF_FIELD_OFFSET(AiUeCooldown, _impl_.flow_abort_mode_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // float cooldown_time = 4;
    {PROTOBUF_FIELD_OFFSET(AiUeCooldown, _impl_.cooldown_time_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
    "\20\0\11\0\0\0\0\0"
    "cfg.AiUeCooldown"
    "node_name"
  }},
};

::uint8_t* AiUeCooldown::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.AiUeCooldown)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // string node_name = 2;
  if (!this->_internal_node_name().empty()) {
    const std::string& _s = this->_internal_node_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.AiUeCooldown.node_name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // .cfg.AiEFlowAbortMode flow_abort_mode = 3;
  if (this->_internal_flow_abort_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_flow_abort_mode(), target);
  }

  // float cooldown_time = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_cooldown_time = this->_internal_cooldown_time();
  ::uint32_t raw_cooldown_time;
  memcpy(&raw_cooldown_time, &tmp_cooldown_time, sizeof(tmp_cooldown_time));
  if (raw_cooldown_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_cooldown_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.AiUeCooldown)
  return target;
}

::size_t AiUeCooldown::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.AiUeCooldown)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string node_name = 2;
  if (!this->_internal_node_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_node_name());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  // .cfg.AiEFlowAbortMode flow_abort_mode = 3;
  if (this->_internal_flow_abort_mode() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_flow_abort_mode());
  }

  // float cooldown_time = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_cooldown_time = this->_internal_cooldown_time();
  ::uint32_t raw_cooldown_time;
  memcpy(&raw_cooldown_time, &tmp_cooldown_time, sizeof(tmp_cooldown_time));
  if (raw_cooldown_time != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AiUeCooldown::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    AiUeCooldown::MergeImpl
};
const ::google::protobuf::Message::ClassData*AiUeCooldown::GetClassData() const { return &_class_data_; }


void AiUeCooldown::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AiUeCooldown*>(&to_msg);
  auto& from = static_cast<const AiUeCooldown&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.AiUeCooldown)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_node_name().empty()) {
    _this->_internal_set_node_name(from._internal_node_name());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_flow_abort_mode() != 0) {
    _this->_internal_set_flow_abort_mode(from._internal_flow_abort_mode());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_cooldown_time = from._internal_cooldown_time();
  ::uint32_t raw_cooldown_time;
  memcpy(&raw_cooldown_time, &tmp_cooldown_time, sizeof(tmp_cooldown_time));
  if (raw_cooldown_time != 0) {
    _this->_internal_set_cooldown_time(from._internal_cooldown_time());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AiUeCooldown::CopyFrom(const AiUeCooldown& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.AiUeCooldown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AiUeCooldown::IsInitialized() const {
  return true;
}

void AiUeCooldown::InternalSwap(AiUeCooldown* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.node_name_, lhs_arena,
                                       &other->_impl_.node_name_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AiUeCooldown, _impl_.cooldown_time_)
      + sizeof(AiUeCooldown::_impl_.cooldown_time_)
      - PROTOBUF_FIELD_OFFSET(AiUeCooldown, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::google::protobuf::Metadata AiUeCooldown::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[13]);
}
// ===================================================================

class AiUeTimeLimit::_Internal {
 public:
};

AiUeTimeLimit::AiUeTimeLimit(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.AiUeTimeLimit)
}
AiUeTimeLimit::AiUeTimeLimit(const AiUeTimeLimit& from) : ::google::protobuf::Message() {
  AiUeTimeLimit* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.node_name_){},
      decltype(_impl_.id_){},
      decltype(_impl_.flow_abort_mode_){},
      decltype(_impl_.limit_time_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.node_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.node_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_node_name().empty()) {
    _this->_impl_.node_name_.Set(from._internal_node_name(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.limit_time_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.limit_time_));

  // @@protoc_insertion_point(copy_constructor:cfg.AiUeTimeLimit)
}
inline void AiUeTimeLimit::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.node_name_){},
      decltype(_impl_.id_){0},
      decltype(_impl_.flow_abort_mode_){0},
      decltype(_impl_.limit_time_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.node_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.node_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
AiUeTimeLimit::~AiUeTimeLimit() {
  // @@protoc_insertion_point(destructor:cfg.AiUeTimeLimit)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AiUeTimeLimit::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.node_name_.Destroy();
}
void AiUeTimeLimit::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void AiUeTimeLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.AiUeTimeLimit)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.node_name_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.limit_time_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.limit_time_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AiUeTimeLimit::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 35, 2> AiUeTimeLimit::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_AiUeTimeLimit_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // float limit_time = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(AiUeTimeLimit, _impl_.limit_time_)}},
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AiUeTimeLimit, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(AiUeTimeLimit, _impl_.id_)}},
    // string node_name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(AiUeTimeLimit, _impl_.node_name_)}},
    // .cfg.AiEFlowAbortMode flow_abort_mode = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AiUeTimeLimit, _impl_.flow_abort_mode_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(AiUeTimeLimit, _impl_.flow_abort_mode_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(AiUeTimeLimit, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string node_name = 2;
    {PROTOBUF_FIELD_OFFSET(AiUeTimeLimit, _impl_.node_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .cfg.AiEFlowAbortMode flow_abort_mode = 3;
    {PROTOBUF_FIELD_OFFSET(AiUeTimeLimit, _impl_.flow_abort_mode_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // float limit_time = 4;
    {PROTOBUF_FIELD_OFFSET(AiUeTimeLimit, _impl_.limit_time_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
    "\21\0\11\0\0\0\0\0"
    "cfg.AiUeTimeLimit"
    "node_name"
  }},
};

::uint8_t* AiUeTimeLimit::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.AiUeTimeLimit)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // string node_name = 2;
  if (!this->_internal_node_name().empty()) {
    const std::string& _s = this->_internal_node_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.AiUeTimeLimit.node_name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // .cfg.AiEFlowAbortMode flow_abort_mode = 3;
  if (this->_internal_flow_abort_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_flow_abort_mode(), target);
  }

  // float limit_time = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_limit_time = this->_internal_limit_time();
  ::uint32_t raw_limit_time;
  memcpy(&raw_limit_time, &tmp_limit_time, sizeof(tmp_limit_time));
  if (raw_limit_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_limit_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.AiUeTimeLimit)
  return target;
}

::size_t AiUeTimeLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.AiUeTimeLimit)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string node_name = 2;
  if (!this->_internal_node_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_node_name());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  // .cfg.AiEFlowAbortMode flow_abort_mode = 3;
  if (this->_internal_flow_abort_mode() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_flow_abort_mode());
  }

  // float limit_time = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_limit_time = this->_internal_limit_time();
  ::uint32_t raw_limit_time;
  memcpy(&raw_limit_time, &tmp_limit_time, sizeof(tmp_limit_time));
  if (raw_limit_time != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AiUeTimeLimit::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    AiUeTimeLimit::MergeImpl
};
const ::google::protobuf::Message::ClassData*AiUeTimeLimit::GetClassData() const { return &_class_data_; }


void AiUeTimeLimit::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AiUeTimeLimit*>(&to_msg);
  auto& from = static_cast<const AiUeTimeLimit&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.AiUeTimeLimit)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_node_name().empty()) {
    _this->_internal_set_node_name(from._internal_node_name());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_flow_abort_mode() != 0) {
    _this->_internal_set_flow_abort_mode(from._internal_flow_abort_mode());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_limit_time = from._internal_limit_time();
  ::uint32_t raw_limit_time;
  memcpy(&raw_limit_time, &tmp_limit_time, sizeof(tmp_limit_time));
  if (raw_limit_time != 0) {
    _this->_internal_set_limit_time(from._internal_limit_time());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AiUeTimeLimit::CopyFrom(const AiUeTimeLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.AiUeTimeLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AiUeTimeLimit::IsInitialized() const {
  return true;
}

void AiUeTimeLimit::InternalSwap(AiUeTimeLimit* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.node_name_, lhs_arena,
                                       &other->_impl_.node_name_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AiUeTimeLimit, _impl_.limit_time_)
      + sizeof(AiUeTimeLimit::_impl_.limit_time_)
      - PROTOBUF_FIELD_OFFSET(AiUeTimeLimit, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::google::protobuf::Metadata AiUeTimeLimit::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[14]);
}
// ===================================================================

class AiUeBlackboard::_Internal {
 public:
  using HasBits = decltype(std::declval<AiUeBlackboard>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AiUeBlackboard, _impl_._has_bits_);
  static const ::cfg::AiKeyQueryOperator& key_query(const AiUeBlackboard* msg);
  static void set_has_key_query(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cfg::AiKeyQueryOperator& AiUeBlackboard::_Internal::key_query(const AiUeBlackboard* msg) {
  return *msg->_impl_.key_query_;
}
AiUeBlackboard::AiUeBlackboard(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.AiUeBlackboard)
}
AiUeBlackboard::AiUeBlackboard(const AiUeBlackboard& from) : ::google::protobuf::Message() {
  AiUeBlackboard* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.node_name_){},
      decltype(_impl_.blackboard_key_){},
      decltype(_impl_.key_query_){nullptr},
      decltype(_impl_.id_){},
      decltype(_impl_.flow_abort_mode_){},
      decltype(_impl_.notify_observer_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.node_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.node_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_node_name().empty()) {
    _this->_impl_.node_name_.Set(from._internal_node_name(), _this->GetArenaForAllocation());
  }
  _impl_.blackboard_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.blackboard_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_blackboard_key().empty()) {
    _this->_impl_.blackboard_key_.Set(from._internal_blackboard_key(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.key_query_ = new ::cfg::AiKeyQueryOperator(*from._impl_.key_query_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.notify_observer_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.notify_observer_));

  // @@protoc_insertion_point(copy_constructor:cfg.AiUeBlackboard)
}
inline void AiUeBlackboard::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.node_name_){},
      decltype(_impl_.blackboard_key_){},
      decltype(_impl_.key_query_){nullptr},
      decltype(_impl_.id_){0},
      decltype(_impl_.flow_abort_mode_){0},
      decltype(_impl_.notify_observer_){0},
  };
  _impl_.node_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.node_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.blackboard_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.blackboard_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
AiUeBlackboard::~AiUeBlackboard() {
  // @@protoc_insertion_point(destructor:cfg.AiUeBlackboard)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AiUeBlackboard::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.node_name_.Destroy();
  _impl_.blackboard_key_.Destroy();
  if (this != internal_default_instance()) delete _impl_.key_query_;
}
void AiUeBlackboard::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void AiUeBlackboard::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.AiUeBlackboard)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.node_name_.ClearToEmpty();
  _impl_.blackboard_key_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.key_query_ != nullptr);
    _impl_.key_query_->Clear();
  }
  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.notify_observer_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.notify_observer_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AiUeBlackboard::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 1, 50, 2> AiUeBlackboard::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AiUeBlackboard, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AiUeBlackboard_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AiUeBlackboard, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(AiUeBlackboard, _impl_.id_)}},
    // string node_name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(AiUeBlackboard, _impl_.node_name_)}},
    // .cfg.AiEFlowAbortMode flow_abort_mode = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AiUeBlackboard, _impl_.flow_abort_mode_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(AiUeBlackboard, _impl_.flow_abort_mode_)}},
    // .cfg.AiENotifyObserverMode notify_observer = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AiUeBlackboard, _impl_.notify_observer_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(AiUeBlackboard, _impl_.notify_observer_)}},
    // string blackboard_key = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(AiUeBlackboard, _impl_.blackboard_key_)}},
    // .cfg.AiKeyQueryOperator key_query = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 0, 0, PROTOBUF_FIELD_OFFSET(AiUeBlackboard, _impl_.key_query_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(AiUeBlackboard, _impl_.id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string node_name = 2;
    {PROTOBUF_FIELD_OFFSET(AiUeBlackboard, _impl_.node_name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .cfg.AiEFlowAbortMode flow_abort_mode = 3;
    {PROTOBUF_FIELD_OFFSET(AiUeBlackboard, _impl_.flow_abort_mode_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .cfg.AiENotifyObserverMode notify_observer = 4;
    {PROTOBUF_FIELD_OFFSET(AiUeBlackboard, _impl_.notify_observer_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string blackboard_key = 5;
    {PROTOBUF_FIELD_OFFSET(AiUeBlackboard, _impl_.blackboard_key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .cfg.AiKeyQueryOperator key_query = 6;
    {PROTOBUF_FIELD_OFFSET(AiUeBlackboard, _impl_.key_query_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::AiKeyQueryOperator>()},
  }}, {{
    "\22\0\11\0\0\16\0\0"
    "cfg.AiUeBlackboard"
    "node_name"
    "blackboard_key"
  }},
};

::uint8_t* AiUeBlackboard::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.AiUeBlackboard)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // string node_name = 2;
  if (!this->_internal_node_name().empty()) {
    const std::string& _s = this->_internal_node_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.AiUeBlackboard.node_name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // .cfg.AiEFlowAbortMode flow_abort_mode = 3;
  if (this->_internal_flow_abort_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_flow_abort_mode(), target);
  }

  // .cfg.AiENotifyObserverMode notify_observer = 4;
  if (this->_internal_notify_observer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_notify_observer(), target);
  }

  // string blackboard_key = 5;
  if (!this->_internal_blackboard_key().empty()) {
    const std::string& _s = this->_internal_blackboard_key();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.AiUeBlackboard.blackboard_key");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cfg.AiKeyQueryOperator key_query = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::key_query(this),
        _Internal::key_query(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.AiUeBlackboard)
  return target;
}

::size_t AiUeBlackboard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.AiUeBlackboard)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string node_name = 2;
  if (!this->_internal_node_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_node_name());
  }

  // string blackboard_key = 5;
  if (!this->_internal_blackboard_key().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_blackboard_key());
  }

  // .cfg.AiKeyQueryOperator key_query = 6;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.key_query_);
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  // .cfg.AiEFlowAbortMode flow_abort_mode = 3;
  if (this->_internal_flow_abort_mode() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_flow_abort_mode());
  }

  // .cfg.AiENotifyObserverMode notify_observer = 4;
  if (this->_internal_notify_observer() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_notify_observer());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AiUeBlackboard::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    AiUeBlackboard::MergeImpl
};
const ::google::protobuf::Message::ClassData*AiUeBlackboard::GetClassData() const { return &_class_data_; }


void AiUeBlackboard::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AiUeBlackboard*>(&to_msg);
  auto& from = static_cast<const AiUeBlackboard&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.AiUeBlackboard)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_node_name().empty()) {
    _this->_internal_set_node_name(from._internal_node_name());
  }
  if (!from._internal_blackboard_key().empty()) {
    _this->_internal_set_blackboard_key(from._internal_blackboard_key());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_key_query()->::cfg::AiKeyQueryOperator::MergeFrom(
        from._internal_key_query());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_flow_abort_mode() != 0) {
    _this->_internal_set_flow_abort_mode(from._internal_flow_abort_mode());
  }
  if (from._internal_notify_observer() != 0) {
    _this->_internal_set_notify_observer(from._internal_notify_observer());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AiUeBlackboard::CopyFrom(const AiUeBlackboard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.AiUeBlackboard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AiUeBlackboard::IsInitialized() const {
  return true;
}

void AiUeBlackboard::InternalSwap(AiUeBlackboard* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.node_name_, lhs_arena,
                                       &other->_impl_.node_name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.blackboard_key_, lhs_arena,
                                       &other->_impl_.blackboard_key_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AiUeBlackboard, _impl_.notify_observer_)
      + sizeof(AiUeBlackboard::_impl_.notify_observer_)
      - PROTOBUF_FIELD_OFFSET(AiUeBlackboard, _impl_.key_query_)>(
          reinterpret_cast<char*>(&_impl_.key_query_),
          reinterpret_cast<char*>(&other->_impl_.key_query_));
}

::google::protobuf::Metadata AiUeBlackboard::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[15]);
}
// ===================================================================

class AiKeyQueryOperator::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::cfg::AiKeyQueryOperator, _impl_._oneof_case_);
  static const ::cfg::AiIsSet& isset(const AiKeyQueryOperator* msg);
  static const ::cfg::AiIsNotSet& isnotset(const AiKeyQueryOperator* msg);
  static const ::cfg::AiBinaryOperator& binaryoperator(const AiKeyQueryOperator* msg);
};

const ::cfg::AiIsSet& AiKeyQueryOperator::_Internal::isset(const AiKeyQueryOperator* msg) {
  return *msg->_impl_.value_.isset_;
}
const ::cfg::AiIsNotSet& AiKeyQueryOperator::_Internal::isnotset(const AiKeyQueryOperator* msg) {
  return *msg->_impl_.value_.isnotset_;
}
const ::cfg::AiBinaryOperator& AiKeyQueryOperator::_Internal::binaryoperator(const AiKeyQueryOperator* msg) {
  return *msg->_impl_.value_.binaryoperator_;
}
void AiKeyQueryOperator::set_allocated_isset(::cfg::AiIsSet* isset) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (isset) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(isset);
    if (message_arena != submessage_arena) {
      isset = ::google::protobuf::internal::GetOwnedMessage(message_arena, isset, submessage_arena);
    }
    set_has_isset();
    _impl_.value_.isset_ = isset;
  }
  // @@protoc_insertion_point(field_set_allocated:cfg.AiKeyQueryOperator.IsSet)
}
void AiKeyQueryOperator::set_allocated_isnotset(::cfg::AiIsNotSet* isnotset) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (isnotset) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(isnotset);
    if (message_arena != submessage_arena) {
      isnotset = ::google::protobuf::internal::GetOwnedMessage(message_arena, isnotset, submessage_arena);
    }
    set_has_isnotset();
    _impl_.value_.isnotset_ = isnotset;
  }
  // @@protoc_insertion_point(field_set_allocated:cfg.AiKeyQueryOperator.IsNotSet)
}
void AiKeyQueryOperator::set_allocated_binaryoperator(::cfg::AiBinaryOperator* binaryoperator) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (binaryoperator) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(binaryoperator);
    if (message_arena != submessage_arena) {
      binaryoperator = ::google::protobuf::internal::GetOwnedMessage(message_arena, binaryoperator, submessage_arena);
    }
    set_has_binaryoperator();
    _impl_.value_.binaryoperator_ = binaryoperator;
  }
  // @@protoc_insertion_point(field_set_allocated:cfg.AiKeyQueryOperator.BinaryOperator)
}
AiKeyQueryOperator::AiKeyQueryOperator(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.AiKeyQueryOperator)
}
AiKeyQueryOperator::AiKeyQueryOperator(const AiKeyQueryOperator& from) : ::google::protobuf::Message() {
  AiKeyQueryOperator* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_._oneof_case_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kIsSet: {
      _this->_internal_mutable_isset()->::cfg::AiIsSet::MergeFrom(
          from._internal_isset());
      break;
    }
    case kIsNotSet: {
      _this->_internal_mutable_isnotset()->::cfg::AiIsNotSet::MergeFrom(
          from._internal_isnotset());
      break;
    }
    case kBinaryOperator: {
      _this->_internal_mutable_binaryoperator()->::cfg::AiBinaryOperator::MergeFrom(
          from._internal_binaryoperator());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }

  // @@protoc_insertion_point(copy_constructor:cfg.AiKeyQueryOperator)
}
inline void AiKeyQueryOperator::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_._oneof_case_)*/ {},
  };
  clear_has_value();
}
AiKeyQueryOperator::~AiKeyQueryOperator() {
  // @@protoc_insertion_point(destructor:cfg.AiKeyQueryOperator)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AiKeyQueryOperator::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_value()) {
    clear_value();
  }
}
void AiKeyQueryOperator::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AiKeyQueryOperator::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:cfg.AiKeyQueryOperator)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  switch (value_case()) {
    case kIsSet: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.isset_;
      }
      break;
    }
    case kIsNotSet: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.isnotset_;
      }
      break;
    }
    case kBinaryOperator: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.binaryoperator_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}


PROTOBUF_NOINLINE void AiKeyQueryOperator::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.AiKeyQueryOperator)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AiKeyQueryOperator::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 3, 3, 0, 2> AiKeyQueryOperator::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AiKeyQueryOperator_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .cfg.AiIsSet IsSet = 1;
    {PROTOBUF_FIELD_OFFSET(AiKeyQueryOperator, _impl_.value_.isset_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvDefault)},
    // .cfg.AiIsNotSet IsNotSet = 2;
    {PROTOBUF_FIELD_OFFSET(AiKeyQueryOperator, _impl_.value_.isnotset_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvDefault)},
    // .cfg.AiBinaryOperator BinaryOperator = 3;
    {PROTOBUF_FIELD_OFFSET(AiKeyQueryOperator, _impl_.value_.binaryoperator_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::FieldAuxDefaultMessage{}, &::cfg::_AiIsSet_default_instance_},
    {::_pbi::FieldAuxDefaultMessage{}, &::cfg::_AiIsNotSet_default_instance_},
    {::_pbi::TcParser::GetTable<::cfg::AiBinaryOperator>()},
  }}, {{
  }},
};

::uint8_t* AiKeyQueryOperator::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.AiKeyQueryOperator)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  switch (value_case()) {
    case kIsSet: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::isset(this),
          _Internal::isset(this).GetCachedSize(), target, stream);
      break;
    }
    case kIsNotSet: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::isnotset(this),
          _Internal::isnotset(this).GetCachedSize(), target, stream);
      break;
    }
    case kBinaryOperator: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::binaryoperator(this),
          _Internal::binaryoperator(this).GetCachedSize(), target, stream);
      break;
    }
    default:
      break;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.AiKeyQueryOperator)
  return target;
}

::size_t AiKeyQueryOperator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.AiKeyQueryOperator)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_case()) {
    // .cfg.AiIsSet IsSet = 1;
    case kIsSet: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.value_.isset_);
      break;
    }
    // .cfg.AiIsNotSet IsNotSet = 2;
    case kIsNotSet: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.value_.isnotset_);
      break;
    }
    // .cfg.AiBinaryOperator BinaryOperator = 3;
    case kBinaryOperator: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.value_.binaryoperator_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AiKeyQueryOperator::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    AiKeyQueryOperator::MergeImpl
};
const ::google::protobuf::Message::ClassData*AiKeyQueryOperator::GetClassData() const { return &_class_data_; }


void AiKeyQueryOperator::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AiKeyQueryOperator*>(&to_msg);
  auto& from = static_cast<const AiKeyQueryOperator&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.AiKeyQueryOperator)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kIsSet: {
      _this->_internal_mutable_isset()->::cfg::AiIsSet::MergeFrom(
          from._internal_isset());
      break;
    }
    case kIsNotSet: {
      _this->_internal_mutable_isnotset()->::cfg::AiIsNotSet::MergeFrom(
          from._internal_isnotset());
      break;
    }
    case kBinaryOperator: {
      _this->_internal_mutable_binaryoperator()->::cfg::AiBinaryOperator::MergeFrom(
          from._internal_binaryoperator());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AiKeyQueryOperator::CopyFrom(const AiKeyQueryOperator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.AiKeyQueryOperator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AiKeyQueryOperator::IsInitialized() const {
  return true;
}

void AiKeyQueryOperator::InternalSwap(AiKeyQueryOperator* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.value_, other->_impl_.value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata AiKeyQueryOperator::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[16]);
}
// ===================================================================

class AiIsSet::_Internal {
 public:
};

AiIsSet::AiIsSet(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:cfg.AiIsSet)
}
AiIsSet::AiIsSet(const AiIsSet& from) : ::google::protobuf::internal::ZeroFieldsBase() {
  AiIsSet* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:cfg.AiIsSet)
}




const ::google::protobuf::Message::ClassData AiIsSet::_class_data_ = {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl,
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl,
};
const ::google::protobuf::Message::ClassData*AiIsSet::GetClassData() const { return &_class_data_; }







::google::protobuf::Metadata AiIsSet::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[17]);
}
// ===================================================================

class AiIsNotSet::_Internal {
 public:
};

AiIsNotSet::AiIsNotSet(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:cfg.AiIsNotSet)
}
AiIsNotSet::AiIsNotSet(const AiIsNotSet& from) : ::google::protobuf::internal::ZeroFieldsBase() {
  AiIsNotSet* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:cfg.AiIsNotSet)
}




const ::google::protobuf::Message::ClassData AiIsNotSet::_class_data_ = {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl,
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl,
};
const ::google::protobuf::Message::ClassData*AiIsNotSet::GetClassData() const { return &_class_data_; }







::google::protobuf::Metadata AiIsNotSet::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[18]);
}
// ===================================================================

class AiBinaryOperator::_Internal {
 public:
  using HasBits = decltype(std::declval<AiBinaryOperator>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AiBinaryOperator, _impl_._has_bits_);
  static const ::cfg::AiKeyData& data(const AiBinaryOperator* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cfg::AiKeyData& AiBinaryOperator::_Internal::data(const AiBinaryOperator* msg) {
  return *msg->_impl_.data_;
}
AiBinaryOperator::AiBinaryOperator(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.AiBinaryOperator)
}
AiBinaryOperator::AiBinaryOperator(const AiBinaryOperator& from) : ::google::protobuf::Message() {
  AiBinaryOperator* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.data_){nullptr},
      decltype(_impl_.oper_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.data_ = new ::cfg::AiKeyData(*from._impl_.data_);
  }
  _this->_impl_.oper_ = from._impl_.oper_;

  // @@protoc_insertion_point(copy_constructor:cfg.AiBinaryOperator)
}
inline void AiBinaryOperator::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.data_){nullptr},
      decltype(_impl_.oper_){0},
  };
}
AiBinaryOperator::~AiBinaryOperator() {
  // @@protoc_insertion_point(destructor:cfg.AiBinaryOperator)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AiBinaryOperator::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.data_;
}
void AiBinaryOperator::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void AiBinaryOperator::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.AiBinaryOperator)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.data_ != nullptr);
    _impl_.data_->Clear();
  }
  _impl_.oper_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AiBinaryOperator::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> AiBinaryOperator::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AiBinaryOperator, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AiBinaryOperator_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .cfg.AiKeyData data = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(AiBinaryOperator, _impl_.data_)}},
    // .cfg.AiEOperator oper = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AiBinaryOperator, _impl_.oper_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(AiBinaryOperator, _impl_.oper_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .cfg.AiEOperator oper = 1;
    {PROTOBUF_FIELD_OFFSET(AiBinaryOperator, _impl_.oper_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .cfg.AiKeyData data = 2;
    {PROTOBUF_FIELD_OFFSET(AiBinaryOperator, _impl_.data_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::AiKeyData>()},
  }}, {{
  }},
};

::uint8_t* AiBinaryOperator::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.AiBinaryOperator)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .cfg.AiEOperator oper = 1;
  if (this->_internal_oper() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_oper(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cfg.AiKeyData data = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.AiBinaryOperator)
  return target;
}

::size_t AiBinaryOperator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.AiBinaryOperator)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cfg.AiKeyData data = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.data_);
  }

  // .cfg.AiEOperator oper = 1;
  if (this->_internal_oper() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_oper());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AiBinaryOperator::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    AiBinaryOperator::MergeImpl
};
const ::google::protobuf::Message::ClassData*AiBinaryOperator::GetClassData() const { return &_class_data_; }


void AiBinaryOperator::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AiBinaryOperator*>(&to_msg);
  auto& from = static_cast<const AiBinaryOperator&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.AiBinaryOperator)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_data()->::cfg::AiKeyData::MergeFrom(
        from._internal_data());
  }
  if (from._internal_oper() != 0) {
    _this->_internal_set_oper(from._internal_oper());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AiBinaryOperator::CopyFrom(const AiBinaryOperator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.AiBinaryOperator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AiBinaryOperator::IsInitialized() const {
  return true;
}

void AiBinaryOperator::InternalSwap(AiBinaryOperator* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AiBinaryOperator, _impl_.oper_)
      + sizeof(AiBinaryOperator::_impl_.oper_)
      - PROTOBUF_FIELD_OFFSET(AiBinaryOperator, _impl_.data_)>(
          reinterpret_cast<char*>(&_impl_.data_),
          reinterpret_cast<char*>(&other->_impl_.data_));
}

::google::protobuf::Metadata AiBinaryOperator::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[19]);
}
// ===================================================================

class AiKeyData::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::cfg::AiKeyData, _impl_._oneof_case_);
  static const ::cfg::AiFloatKeyData& floatkeydata(const AiKeyData* msg);
  static const ::cfg::AiIntKeyData& intkeydata(const AiKeyData* msg);
  static const ::cfg::AiStringKeyData& stringkeydata(const AiKeyData* msg);
  static const ::cfg::AiBlackboardKeyData& blackboardkeydata(const AiKeyData* msg);
};

const ::cfg::AiFloatKeyData& AiKeyData::_Internal::floatkeydata(const AiKeyData* msg) {
  return *msg->_impl_.value_.floatkeydata_;
}
const ::cfg::AiIntKeyData& AiKeyData::_Internal::intkeydata(const AiKeyData* msg) {
  return *msg->_impl_.value_.intkeydata_;
}
const ::cfg::AiStringKeyData& AiKeyData::_Internal::stringkeydata(const AiKeyData* msg) {
  return *msg->_impl_.value_.stringkeydata_;
}
const ::cfg::AiBlackboardKeyData& AiKeyData::_Internal::blackboardkeydata(const AiKeyData* msg) {
  return *msg->_impl_.value_.blackboardkeydata_;
}
void AiKeyData::set_allocated_floatkeydata(::cfg::AiFloatKeyData* floatkeydata) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (floatkeydata) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(floatkeydata);
    if (message_arena != submessage_arena) {
      floatkeydata = ::google::protobuf::internal::GetOwnedMessage(message_arena, floatkeydata, submessage_arena);
    }
    set_has_floatkeydata();
    _impl_.value_.floatkeydata_ = floatkeydata;
  }
  // @@protoc_insertion_point(field_set_allocated:cfg.AiKeyData.FloatKeyData)
}
void AiKeyData::set_allocated_intkeydata(::cfg::AiIntKeyData* intkeydata) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (intkeydata) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(intkeydata);
    if (message_arena != submessage_arena) {
      intkeydata = ::google::protobuf::internal::GetOwnedMessage(message_arena, intkeydata, submessage_arena);
    }
    set_has_intkeydata();
    _impl_.value_.intkeydata_ = intkeydata;
  }
  // @@protoc_insertion_point(field_set_allocated:cfg.AiKeyData.IntKeyData)
}
void AiKeyData::set_allocated_stringkeydata(::cfg::AiStringKeyData* stringkeydata) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (stringkeydata) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(stringkeydata);
    if (message_arena != submessage_arena) {
      stringkeydata = ::google::protobuf::internal::GetOwnedMessage(message_arena, stringkeydata, submessage_arena);
    }
    set_has_stringkeydata();
    _impl_.value_.stringkeydata_ = stringkeydata;
  }
  // @@protoc_insertion_point(field_set_allocated:cfg.AiKeyData.StringKeyData)
}
void AiKeyData::set_allocated_blackboardkeydata(::cfg::AiBlackboardKeyData* blackboardkeydata) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (blackboardkeydata) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(blackboardkeydata);
    if (message_arena != submessage_arena) {
      blackboardkeydata = ::google::protobuf::internal::GetOwnedMessage(message_arena, blackboardkeydata, submessage_arena);
    }
    set_has_blackboardkeydata();
    _impl_.value_.blackboardkeydata_ = blackboardkeydata;
  }
  // @@protoc_insertion_point(field_set_allocated:cfg.AiKeyData.BlackboardKeyData)
}
AiKeyData::AiKeyData(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.AiKeyData)
}
AiKeyData::AiKeyData(const AiKeyData& from) : ::google::protobuf::Message() {
  AiKeyData* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_._oneof_case_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kFloatKeyData: {
      _this->_internal_mutable_floatkeydata()->::cfg::AiFloatKeyData::MergeFrom(
          from._internal_floatkeydata());
      break;
    }
    case kIntKeyData: {
      _this->_internal_mutable_intkeydata()->::cfg::AiIntKeyData::MergeFrom(
          from._internal_intkeydata());
      break;
    }
    case kStringKeyData: {
      _this->_internal_mutable_stringkeydata()->::cfg::AiStringKeyData::MergeFrom(
          from._internal_stringkeydata());
      break;
    }
    case kBlackboardKeyData: {
      _this->_internal_mutable_blackboardkeydata()->::cfg::AiBlackboardKeyData::MergeFrom(
          from._internal_blackboardkeydata());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }

  // @@protoc_insertion_point(copy_constructor:cfg.AiKeyData)
}
inline void AiKeyData::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_._oneof_case_)*/ {},
  };
  clear_has_value();
}
AiKeyData::~AiKeyData() {
  // @@protoc_insertion_point(destructor:cfg.AiKeyData)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AiKeyData::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_value()) {
    clear_value();
  }
}
void AiKeyData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AiKeyData::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:cfg.AiKeyData)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  switch (value_case()) {
    case kFloatKeyData: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.floatkeydata_;
      }
      break;
    }
    case kIntKeyData: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.intkeydata_;
      }
      break;
    }
    case kStringKeyData: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.stringkeydata_;
      }
      break;
    }
    case kBlackboardKeyData: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.blackboardkeydata_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}


PROTOBUF_NOINLINE void AiKeyData::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.AiKeyData)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AiKeyData::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 4, 4, 0, 2> AiKeyData::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AiKeyData_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .cfg.AiFloatKeyData FloatKeyData = 1;
    {PROTOBUF_FIELD_OFFSET(AiKeyData, _impl_.value_.floatkeydata_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cfg.AiIntKeyData IntKeyData = 2;
    {PROTOBUF_FIELD_OFFSET(AiKeyData, _impl_.value_.intkeydata_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cfg.AiStringKeyData StringKeyData = 3;
    {PROTOBUF_FIELD_OFFSET(AiKeyData, _impl_.value_.stringkeydata_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cfg.AiBlackboardKeyData BlackboardKeyData = 4;
    {PROTOBUF_FIELD_OFFSET(AiKeyData, _impl_.value_.blackboardkeydata_), _Internal::kOneofCaseOffset + 0, 3,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::AiFloatKeyData>()},
    {::_pbi::TcParser::GetTable<::cfg::AiIntKeyData>()},
    {::_pbi::TcParser::GetTable<::cfg::AiStringKeyData>()},
    {::_pbi::TcParser::GetTable<::cfg::AiBlackboardKeyData>()},
  }}, {{
  }},
};

::uint8_t* AiKeyData::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.AiKeyData)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  switch (value_case()) {
    case kFloatKeyData: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::floatkeydata(this),
          _Internal::floatkeydata(this).GetCachedSize(), target, stream);
      break;
    }
    case kIntKeyData: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::intkeydata(this),
          _Internal::intkeydata(this).GetCachedSize(), target, stream);
      break;
    }
    case kStringKeyData: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::stringkeydata(this),
          _Internal::stringkeydata(this).GetCachedSize(), target, stream);
      break;
    }
    case kBlackboardKeyData: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::blackboardkeydata(this),
          _Internal::blackboardkeydata(this).GetCachedSize(), target, stream);
      break;
    }
    default:
      break;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.AiKeyData)
  return target;
}

::size_t AiKeyData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.AiKeyData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_case()) {
    // .cfg.AiFloatKeyData FloatKeyData = 1;
    case kFloatKeyData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.value_.floatkeydata_);
      break;
    }
    // .cfg.AiIntKeyData IntKeyData = 2;
    case kIntKeyData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.value_.intkeydata_);
      break;
    }
    // .cfg.AiStringKeyData StringKeyData = 3;
    case kStringKeyData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.value_.stringkeydata_);
      break;
    }
    // .cfg.AiBlackboardKeyData BlackboardKeyData = 4;
    case kBlackboardKeyData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.value_.blackboardkeydata_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AiKeyData::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    AiKeyData::MergeImpl
};
const ::google::protobuf::Message::ClassData*AiKeyData::GetClassData() const { return &_class_data_; }


void AiKeyData::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AiKeyData*>(&to_msg);
  auto& from = static_cast<const AiKeyData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.AiKeyData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kFloatKeyData: {
      _this->_internal_mutable_floatkeydata()->::cfg::AiFloatKeyData::MergeFrom(
          from._internal_floatkeydata());
      break;
    }
    case kIntKeyData: {
      _this->_internal_mutable_intkeydata()->::cfg::AiIntKeyData::MergeFrom(
          from._internal_intkeydata());
      break;
    }
    case kStringKeyData: {
      _this->_internal_mutable_stringkeydata()->::cfg::AiStringKeyData::MergeFrom(
          from._internal_stringkeydata());
      break;
    }
    case kBlackboardKeyData: {
      _this->_internal_mutable_blackboardkeydata()->::cfg::AiBlackboardKeyData::MergeFrom(
          from._internal_blackboardkeydata());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AiKeyData::CopyFrom(const AiKeyData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.AiKeyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AiKeyData::IsInitialized() const {
  return true;
}

void AiKeyData::InternalSwap(AiKeyData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.value_, other->_impl_.value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata AiKeyData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[20]);
}
// ===================================================================

class AiFloatKeyData::_Internal {
 public:
};

AiFloatKeyData::AiFloatKeyData(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.AiFloatKeyData)
}
AiFloatKeyData::AiFloatKeyData(const AiFloatKeyData& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cfg.AiFloatKeyData)
}
inline void AiFloatKeyData::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
AiFloatKeyData::~AiFloatKeyData() {
  // @@protoc_insertion_point(destructor:cfg.AiFloatKeyData)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AiFloatKeyData::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void AiFloatKeyData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void AiFloatKeyData::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.AiFloatKeyData)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AiFloatKeyData::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> AiFloatKeyData::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_AiFloatKeyData_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // float value = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(AiFloatKeyData, _impl_.value_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float value = 1;
    {PROTOBUF_FIELD_OFFSET(AiFloatKeyData, _impl_.value_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* AiFloatKeyData::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.AiFloatKeyData)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float value = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_value = this->_internal_value();
  ::uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.AiFloatKeyData)
  return target;
}

::size_t AiFloatKeyData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.AiFloatKeyData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float value = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_value = this->_internal_value();
  ::uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AiFloatKeyData::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    AiFloatKeyData::MergeImpl
};
const ::google::protobuf::Message::ClassData*AiFloatKeyData::GetClassData() const { return &_class_data_; }


void AiFloatKeyData::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AiFloatKeyData*>(&to_msg);
  auto& from = static_cast<const AiFloatKeyData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.AiFloatKeyData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_value = from._internal_value();
  ::uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AiFloatKeyData::CopyFrom(const AiFloatKeyData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.AiFloatKeyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AiFloatKeyData::IsInitialized() const {
  return true;
}

void AiFloatKeyData::InternalSwap(AiFloatKeyData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.value_, other->_impl_.value_);
}

::google::protobuf::Metadata AiFloatKeyData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[21]);
}
// ===================================================================

class AiIntKeyData::_Internal {
 public:
};

AiIntKeyData::AiIntKeyData(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.AiIntKeyData)
}
AiIntKeyData::AiIntKeyData(const AiIntKeyData& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cfg.AiIntKeyData)
}
inline void AiIntKeyData::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
AiIntKeyData::~AiIntKeyData() {
  // @@protoc_insertion_point(destructor:cfg.AiIntKeyData)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AiIntKeyData::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void AiIntKeyData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void AiIntKeyData::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.AiIntKeyData)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AiIntKeyData::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> AiIntKeyData::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_AiIntKeyData_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // int32 value = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AiIntKeyData, _impl_.value_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(AiIntKeyData, _impl_.value_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 value = 1;
    {PROTOBUF_FIELD_OFFSET(AiIntKeyData, _impl_.value_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* AiIntKeyData::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.AiIntKeyData)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 value = 1;
  if (this->_internal_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.AiIntKeyData)
  return target;
}

::size_t AiIntKeyData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.AiIntKeyData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 value = 1;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AiIntKeyData::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    AiIntKeyData::MergeImpl
};
const ::google::protobuf::Message::ClassData*AiIntKeyData::GetClassData() const { return &_class_data_; }


void AiIntKeyData::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AiIntKeyData*>(&to_msg);
  auto& from = static_cast<const AiIntKeyData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.AiIntKeyData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AiIntKeyData::CopyFrom(const AiIntKeyData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.AiIntKeyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AiIntKeyData::IsInitialized() const {
  return true;
}

void AiIntKeyData::InternalSwap(AiIntKeyData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.value_, other->_impl_.value_);
}

::google::protobuf::Metadata AiIntKeyData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[22]);
}
// ===================================================================

class AiStringKeyData::_Internal {
 public:
};

AiStringKeyData::AiStringKeyData(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.AiStringKeyData)
}
AiStringKeyData::AiStringKeyData(const AiStringKeyData& from) : ::google::protobuf::Message() {
  AiStringKeyData* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.value_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), _this->GetArenaForAllocation());
  }

  // @@protoc_insertion_point(copy_constructor:cfg.AiStringKeyData)
}
inline void AiStringKeyData::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.value_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
AiStringKeyData::~AiStringKeyData() {
  // @@protoc_insertion_point(destructor:cfg.AiStringKeyData)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AiStringKeyData::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.Destroy();
}
void AiStringKeyData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void AiStringKeyData::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.AiStringKeyData)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AiStringKeyData::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 33, 2> AiStringKeyData::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_AiStringKeyData_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string value = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(AiStringKeyData, _impl_.value_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string value = 1;
    {PROTOBUF_FIELD_OFFSET(AiStringKeyData, _impl_.value_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\23\5\0\0\0\0\0\0"
    "cfg.AiStringKeyData"
    "value"
  }},
};

::uint8_t* AiStringKeyData::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.AiStringKeyData)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string value = 1;
  if (!this->_internal_value().empty()) {
    const std::string& _s = this->_internal_value();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.AiStringKeyData.value");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.AiStringKeyData)
  return target;
}

::size_t AiStringKeyData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.AiStringKeyData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 1;
  if (!this->_internal_value().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AiStringKeyData::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    AiStringKeyData::MergeImpl
};
const ::google::protobuf::Message::ClassData*AiStringKeyData::GetClassData() const { return &_class_data_; }


void AiStringKeyData::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AiStringKeyData*>(&to_msg);
  auto& from = static_cast<const AiStringKeyData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.AiStringKeyData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AiStringKeyData::CopyFrom(const AiStringKeyData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.AiStringKeyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AiStringKeyData::IsInitialized() const {
  return true;
}

void AiStringKeyData::InternalSwap(AiStringKeyData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.value_, lhs_arena,
                                       &other->_impl_.value_, rhs_arena);
}

::google::protobuf::Metadata AiStringKeyData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[23]);
}
// ===================================================================

class AiBlackboardKeyData::_Internal {
 public:
};

AiBlackboardKeyData::AiBlackboardKeyData(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.AiBlackboardKeyData)
}
AiBlackboardKeyData::AiBlackboardKeyData(const AiBlackboardKeyData& from) : ::google::protobuf::Message() {
  AiBlackboardKeyData* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.value_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), _this->GetArenaForAllocation());
  }

  // @@protoc_insertion_point(copy_constructor:cfg.AiBlackboardKeyData)
}
inline void AiBlackboardKeyData::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.value_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
AiBlackboardKeyData::~AiBlackboardKeyData() {
  // @@protoc_insertion_point(destructor:cfg.AiBlackboardKeyData)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AiBlackboardKeyData::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.Destroy();
}
void AiBlackboardKeyData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void AiBlackboardKeyData::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.AiBlackboardKeyData)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AiBlackboardKeyData::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 37, 2> AiBlackboardKeyData::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_AiBlackboardKeyData_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string value = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(AiBlackboardKeyData, _impl_.value_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string value = 1;
    {PROTOBUF_FIELD_OFFSET(AiBlackboardKeyData, _impl_.value_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\27\5\0\0\0\0\0\0"
    "cfg.AiBlackboardKeyData"
    "value"
  }},
};

::uint8_t* AiBlackboardKeyData::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.AiBlackboardKeyData)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string value = 1;
  if (!this->_internal_value().empty()) {
    const std::string& _s = this->_internal_value();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.AiBlackboardKeyData.value");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.AiBlackboardKeyData)
  return target;
}

::size_t AiBlackboardKeyData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.AiBlackboardKeyData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 1;
  if (!this->_internal_value().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AiBlackboardKeyData::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    AiBlackboardKeyData::MergeImpl
};
const ::google::protobuf::Message::ClassData*AiBlackboardKeyData::GetClassData() const { return &_class_data_; }


void AiBlackboardKeyData::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AiBlackboardKeyData*>(&to_msg);
  auto& from = static_cast<const AiBlackboardKeyData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.AiBlackboardKeyData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AiBlackboardKeyData::CopyFrom(const AiBlackboardKeyData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.AiBlackboardKeyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AiBlackboardKeyData::IsInitialized() const {
  return true;
}

void AiBlackboardKeyData::InternalSwap(AiBlackboardKeyData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.value_, lhs_arena,
                                       &other->_impl_.value_, rhs_arena);
}

::google::protobuf::Metadata AiBlackboardKeyData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[24]);
}
// ===================================================================

class AiUeForceSuccess::_Internal {
 public:
};

AiUeForceSuccess::AiUeForceSuccess(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.AiUeForceSuccess)
}
AiUeForceSuccess::AiUeForceSuccess(const AiUeForceSuccess& from) : ::google::protobuf::Message() {
  AiUeForceSuccess* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.node_name_){},
      decltype(_impl_.id_){},
      decltype(_impl_.flow_abort_mode_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.node_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.node_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_node_name().empty()) {
    _this->_impl_.node_name_.Set(from._internal_node_name(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.flow_abort_mode_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.flow_abort_mode_));

  // @@protoc_insertion_point(copy_constructor:cfg.AiUeForceSuccess)
}
inline void AiUeForceSuccess::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.node_name_){},
      decltype(_impl_.id_){0},
      decltype(_impl_.flow_abort_mode_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.node_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.node_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
AiUeForceSuccess::~AiUeForceSuccess() {
  // @@protoc_insertion_point(destructor:cfg.AiUeForceSuccess)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AiUeForceSuccess::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.node_name_.Destroy();
}
void AiUeForceSuccess::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void AiUeForceSuccess::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.AiUeForceSuccess)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.node_name_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.flow_abort_mode_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.flow_abort_mode_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AiUeForceSuccess::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 38, 2> AiUeForceSuccess::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_AiUeForceSuccess_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AiUeForceSuccess, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(AiUeForceSuccess, _impl_.id_)}},
    // string node_name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(AiUeForceSuccess, _impl_.node_name_)}},
    // .cfg.AiEFlowAbortMode flow_abort_mode = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AiUeForceSuccess, _impl_.flow_abort_mode_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(AiUeForceSuccess, _impl_.flow_abort_mode_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(AiUeForceSuccess, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string node_name = 2;
    {PROTOBUF_FIELD_OFFSET(AiUeForceSuccess, _impl_.node_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .cfg.AiEFlowAbortMode flow_abort_mode = 3;
    {PROTOBUF_FIELD_OFFSET(AiUeForceSuccess, _impl_.flow_abort_mode_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
    "\24\0\11\0\0\0\0\0"
    "cfg.AiUeForceSuccess"
    "node_name"
  }},
};

::uint8_t* AiUeForceSuccess::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.AiUeForceSuccess)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // string node_name = 2;
  if (!this->_internal_node_name().empty()) {
    const std::string& _s = this->_internal_node_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.AiUeForceSuccess.node_name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // .cfg.AiEFlowAbortMode flow_abort_mode = 3;
  if (this->_internal_flow_abort_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_flow_abort_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.AiUeForceSuccess)
  return target;
}

::size_t AiUeForceSuccess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.AiUeForceSuccess)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string node_name = 2;
  if (!this->_internal_node_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_node_name());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  // .cfg.AiEFlowAbortMode flow_abort_mode = 3;
  if (this->_internal_flow_abort_mode() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_flow_abort_mode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AiUeForceSuccess::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    AiUeForceSuccess::MergeImpl
};
const ::google::protobuf::Message::ClassData*AiUeForceSuccess::GetClassData() const { return &_class_data_; }


void AiUeForceSuccess::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AiUeForceSuccess*>(&to_msg);
  auto& from = static_cast<const AiUeForceSuccess&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.AiUeForceSuccess)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_node_name().empty()) {
    _this->_internal_set_node_name(from._internal_node_name());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_flow_abort_mode() != 0) {
    _this->_internal_set_flow_abort_mode(from._internal_flow_abort_mode());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AiUeForceSuccess::CopyFrom(const AiUeForceSuccess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.AiUeForceSuccess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AiUeForceSuccess::IsInitialized() const {
  return true;
}

void AiUeForceSuccess::InternalSwap(AiUeForceSuccess* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.node_name_, lhs_arena,
                                       &other->_impl_.node_name_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AiUeForceSuccess, _impl_.flow_abort_mode_)
      + sizeof(AiUeForceSuccess::_impl_.flow_abort_mode_)
      - PROTOBUF_FIELD_OFFSET(AiUeForceSuccess, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::google::protobuf::Metadata AiUeForceSuccess::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[25]);
}
// ===================================================================

class AiIsAtLocation::_Internal {
 public:
};

AiIsAtLocation::AiIsAtLocation(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.AiIsAtLocation)
}
AiIsAtLocation::AiIsAtLocation(const AiIsAtLocation& from) : ::google::protobuf::Message() {
  AiIsAtLocation* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.node_name_){},
      decltype(_impl_.keyboard_key_){},
      decltype(_impl_.id_){},
      decltype(_impl_.flow_abort_mode_){},
      decltype(_impl_.acceptable_radius_){},
      decltype(_impl_.inverse_condition_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.node_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.node_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_node_name().empty()) {
    _this->_impl_.node_name_.Set(from._internal_node_name(), _this->GetArenaForAllocation());
  }
  _impl_.keyboard_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.keyboard_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_keyboard_key().empty()) {
    _this->_impl_.keyboard_key_.Set(from._internal_keyboard_key(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.inverse_condition_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.inverse_condition_));

  // @@protoc_insertion_point(copy_constructor:cfg.AiIsAtLocation)
}
inline void AiIsAtLocation::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.node_name_){},
      decltype(_impl_.keyboard_key_){},
      decltype(_impl_.id_){0},
      decltype(_impl_.flow_abort_mode_){0},
      decltype(_impl_.acceptable_radius_){0},
      decltype(_impl_.inverse_condition_){false},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.node_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.node_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.keyboard_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.keyboard_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
AiIsAtLocation::~AiIsAtLocation() {
  // @@protoc_insertion_point(destructor:cfg.AiIsAtLocation)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AiIsAtLocation::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.node_name_.Destroy();
  _impl_.keyboard_key_.Destroy();
}
void AiIsAtLocation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void AiIsAtLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.AiIsAtLocation)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.node_name_.ClearToEmpty();
  _impl_.keyboard_key_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.inverse_condition_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.inverse_condition_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AiIsAtLocation::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 0, 48, 2> AiIsAtLocation::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_AiIsAtLocation_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AiIsAtLocation, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(AiIsAtLocation, _impl_.id_)}},
    // string node_name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(AiIsAtLocation, _impl_.node_name_)}},
    // .cfg.AiEFlowAbortMode flow_abort_mode = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AiIsAtLocation, _impl_.flow_abort_mode_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(AiIsAtLocation, _impl_.flow_abort_mode_)}},
    // float acceptable_radius = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(AiIsAtLocation, _impl_.acceptable_radius_)}},
    // string keyboard_key = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(AiIsAtLocation, _impl_.keyboard_key_)}},
    // bool inverse_condition = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AiIsAtLocation, _impl_.inverse_condition_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(AiIsAtLocation, _impl_.inverse_condition_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(AiIsAtLocation, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string node_name = 2;
    {PROTOBUF_FIELD_OFFSET(AiIsAtLocation, _impl_.node_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .cfg.AiEFlowAbortMode flow_abort_mode = 3;
    {PROTOBUF_FIELD_OFFSET(AiIsAtLocation, _impl_.flow_abort_mode_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // float acceptable_radius = 4;
    {PROTOBUF_FIELD_OFFSET(AiIsAtLocation, _impl_.acceptable_radius_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // string keyboard_key = 5;
    {PROTOBUF_FIELD_OFFSET(AiIsAtLocation, _impl_.keyboard_key_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool inverse_condition = 6;
    {PROTOBUF_FIELD_OFFSET(AiIsAtLocation, _impl_.inverse_condition_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\22\0\11\0\0\14\0\0"
    "cfg.AiIsAtLocation"
    "node_name"
    "keyboard_key"
  }},
};

::uint8_t* AiIsAtLocation::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.AiIsAtLocation)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // string node_name = 2;
  if (!this->_internal_node_name().empty()) {
    const std::string& _s = this->_internal_node_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.AiIsAtLocation.node_name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // .cfg.AiEFlowAbortMode flow_abort_mode = 3;
  if (this->_internal_flow_abort_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_flow_abort_mode(), target);
  }

  // float acceptable_radius = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_acceptable_radius = this->_internal_acceptable_radius();
  ::uint32_t raw_acceptable_radius;
  memcpy(&raw_acceptable_radius, &tmp_acceptable_radius, sizeof(tmp_acceptable_radius));
  if (raw_acceptable_radius != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_acceptable_radius(), target);
  }

  // string keyboard_key = 5;
  if (!this->_internal_keyboard_key().empty()) {
    const std::string& _s = this->_internal_keyboard_key();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.AiIsAtLocation.keyboard_key");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // bool inverse_condition = 6;
  if (this->_internal_inverse_condition() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        6, this->_internal_inverse_condition(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.AiIsAtLocation)
  return target;
}

::size_t AiIsAtLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.AiIsAtLocation)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string node_name = 2;
  if (!this->_internal_node_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_node_name());
  }

  // string keyboard_key = 5;
  if (!this->_internal_keyboard_key().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_keyboard_key());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  // .cfg.AiEFlowAbortMode flow_abort_mode = 3;
  if (this->_internal_flow_abort_mode() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_flow_abort_mode());
  }

  // float acceptable_radius = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_acceptable_radius = this->_internal_acceptable_radius();
  ::uint32_t raw_acceptable_radius;
  memcpy(&raw_acceptable_radius, &tmp_acceptable_radius, sizeof(tmp_acceptable_radius));
  if (raw_acceptable_radius != 0) {
    total_size += 5;
  }

  // bool inverse_condition = 6;
  if (this->_internal_inverse_condition() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AiIsAtLocation::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    AiIsAtLocation::MergeImpl
};
const ::google::protobuf::Message::ClassData*AiIsAtLocation::GetClassData() const { return &_class_data_; }


void AiIsAtLocation::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AiIsAtLocation*>(&to_msg);
  auto& from = static_cast<const AiIsAtLocation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.AiIsAtLocation)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_node_name().empty()) {
    _this->_internal_set_node_name(from._internal_node_name());
  }
  if (!from._internal_keyboard_key().empty()) {
    _this->_internal_set_keyboard_key(from._internal_keyboard_key());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_flow_abort_mode() != 0) {
    _this->_internal_set_flow_abort_mode(from._internal_flow_abort_mode());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_acceptable_radius = from._internal_acceptable_radius();
  ::uint32_t raw_acceptable_radius;
  memcpy(&raw_acceptable_radius, &tmp_acceptable_radius, sizeof(tmp_acceptable_radius));
  if (raw_acceptable_radius != 0) {
    _this->_internal_set_acceptable_radius(from._internal_acceptable_radius());
  }
  if (from._internal_inverse_condition() != 0) {
    _this->_internal_set_inverse_condition(from._internal_inverse_condition());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AiIsAtLocation::CopyFrom(const AiIsAtLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.AiIsAtLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AiIsAtLocation::IsInitialized() const {
  return true;
}

void AiIsAtLocation::InternalSwap(AiIsAtLocation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.node_name_, lhs_arena,
                                       &other->_impl_.node_name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.keyboard_key_, lhs_arena,
                                       &other->_impl_.keyboard_key_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AiIsAtLocation, _impl_.inverse_condition_)
      + sizeof(AiIsAtLocation::_impl_.inverse_condition_)
      - PROTOBUF_FIELD_OFFSET(AiIsAtLocation, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::google::protobuf::Metadata AiIsAtLocation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[26]);
}
// ===================================================================

class AiDistanceLessThan::_Internal {
 public:
};

AiDistanceLessThan::AiDistanceLessThan(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.AiDistanceLessThan)
}
AiDistanceLessThan::AiDistanceLessThan(const AiDistanceLessThan& from) : ::google::protobuf::Message() {
  AiDistanceLessThan* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.node_name_){},
      decltype(_impl_.actor1_key_){},
      decltype(_impl_.actor2_key_){},
      decltype(_impl_.id_){},
      decltype(_impl_.flow_abort_mode_){},
      decltype(_impl_.distance_){},
      decltype(_impl_.reverse_result_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.node_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.node_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_node_name().empty()) {
    _this->_impl_.node_name_.Set(from._internal_node_name(), _this->GetArenaForAllocation());
  }
  _impl_.actor1_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.actor1_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_actor1_key().empty()) {
    _this->_impl_.actor1_key_.Set(from._internal_actor1_key(), _this->GetArenaForAllocation());
  }
  _impl_.actor2_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.actor2_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_actor2_key().empty()) {
    _this->_impl_.actor2_key_.Set(from._internal_actor2_key(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.reverse_result_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.reverse_result_));

  // @@protoc_insertion_point(copy_constructor:cfg.AiDistanceLessThan)
}
inline void AiDistanceLessThan::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.node_name_){},
      decltype(_impl_.actor1_key_){},
      decltype(_impl_.actor2_key_){},
      decltype(_impl_.id_){0},
      decltype(_impl_.flow_abort_mode_){0},
      decltype(_impl_.distance_){0},
      decltype(_impl_.reverse_result_){false},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.node_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.node_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.actor1_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.actor1_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.actor2_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.actor2_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
AiDistanceLessThan::~AiDistanceLessThan() {
  // @@protoc_insertion_point(destructor:cfg.AiDistanceLessThan)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AiDistanceLessThan::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.node_name_.Destroy();
  _impl_.actor1_key_.Destroy();
  _impl_.actor2_key_.Destroy();
}
void AiDistanceLessThan::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void AiDistanceLessThan::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.AiDistanceLessThan)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.node_name_.ClearToEmpty();
  _impl_.actor1_key_.ClearToEmpty();
  _impl_.actor2_key_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.reverse_result_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.reverse_result_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AiDistanceLessThan::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 0, 60, 2> AiDistanceLessThan::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_AiDistanceLessThan_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AiDistanceLessThan, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(AiDistanceLessThan, _impl_.id_)}},
    // string node_name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(AiDistanceLessThan, _impl_.node_name_)}},
    // .cfg.AiEFlowAbortMode flow_abort_mode = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AiDistanceLessThan, _impl_.flow_abort_mode_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(AiDistanceLessThan, _impl_.flow_abort_mode_)}},
    // string actor1_key = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(AiDistanceLessThan, _impl_.actor1_key_)}},
    // string actor2_key = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(AiDistanceLessThan, _impl_.actor2_key_)}},
    // float distance = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 63, 0, PROTOBUF_FIELD_OFFSET(AiDistanceLessThan, _impl_.distance_)}},
    // bool reverse_result = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AiDistanceLessThan, _impl_.reverse_result_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(AiDistanceLessThan, _impl_.reverse_result_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(AiDistanceLessThan, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string node_name = 2;
    {PROTOBUF_FIELD_OFFSET(AiDistanceLessThan, _impl_.node_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .cfg.AiEFlowAbortMode flow_abort_mode = 3;
    {PROTOBUF_FIELD_OFFSET(AiDistanceLessThan, _impl_.flow_abort_mode_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string actor1_key = 4;
    {PROTOBUF_FIELD_OFFSET(AiDistanceLessThan, _impl_.actor1_key_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string actor2_key = 5;
    {PROTOBUF_FIELD_OFFSET(AiDistanceLessThan, _impl_.actor2_key_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // float distance = 6;
    {PROTOBUF_FIELD_OFFSET(AiDistanceLessThan, _impl_.distance_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // bool reverse_result = 7;
    {PROTOBUF_FIELD_OFFSET(AiDistanceLessThan, _impl_.reverse_result_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\26\0\11\0\12\12\0\0"
    "cfg.AiDistanceLessThan"
    "node_name"
    "actor1_key"
    "actor2_key"
  }},
};

::uint8_t* AiDistanceLessThan::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.AiDistanceLessThan)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // string node_name = 2;
  if (!this->_internal_node_name().empty()) {
    const std::string& _s = this->_internal_node_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.AiDistanceLessThan.node_name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // .cfg.AiEFlowAbortMode flow_abort_mode = 3;
  if (this->_internal_flow_abort_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_flow_abort_mode(), target);
  }

  // string actor1_key = 4;
  if (!this->_internal_actor1_key().empty()) {
    const std::string& _s = this->_internal_actor1_key();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.AiDistanceLessThan.actor1_key");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string actor2_key = 5;
  if (!this->_internal_actor2_key().empty()) {
    const std::string& _s = this->_internal_actor2_key();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.AiDistanceLessThan.actor2_key");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // float distance = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_distance = this->_internal_distance();
  ::uint32_t raw_distance;
  memcpy(&raw_distance, &tmp_distance, sizeof(tmp_distance));
  if (raw_distance != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        6, this->_internal_distance(), target);
  }

  // bool reverse_result = 7;
  if (this->_internal_reverse_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        7, this->_internal_reverse_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.AiDistanceLessThan)
  return target;
}

::size_t AiDistanceLessThan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.AiDistanceLessThan)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string node_name = 2;
  if (!this->_internal_node_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_node_name());
  }

  // string actor1_key = 4;
  if (!this->_internal_actor1_key().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_actor1_key());
  }

  // string actor2_key = 5;
  if (!this->_internal_actor2_key().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_actor2_key());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  // .cfg.AiEFlowAbortMode flow_abort_mode = 3;
  if (this->_internal_flow_abort_mode() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_flow_abort_mode());
  }

  // float distance = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_distance = this->_internal_distance();
  ::uint32_t raw_distance;
  memcpy(&raw_distance, &tmp_distance, sizeof(tmp_distance));
  if (raw_distance != 0) {
    total_size += 5;
  }

  // bool reverse_result = 7;
  if (this->_internal_reverse_result() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AiDistanceLessThan::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    AiDistanceLessThan::MergeImpl
};
const ::google::protobuf::Message::ClassData*AiDistanceLessThan::GetClassData() const { return &_class_data_; }


void AiDistanceLessThan::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AiDistanceLessThan*>(&to_msg);
  auto& from = static_cast<const AiDistanceLessThan&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.AiDistanceLessThan)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_node_name().empty()) {
    _this->_internal_set_node_name(from._internal_node_name());
  }
  if (!from._internal_actor1_key().empty()) {
    _this->_internal_set_actor1_key(from._internal_actor1_key());
  }
  if (!from._internal_actor2_key().empty()) {
    _this->_internal_set_actor2_key(from._internal_actor2_key());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_flow_abort_mode() != 0) {
    _this->_internal_set_flow_abort_mode(from._internal_flow_abort_mode());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_distance = from._internal_distance();
  ::uint32_t raw_distance;
  memcpy(&raw_distance, &tmp_distance, sizeof(tmp_distance));
  if (raw_distance != 0) {
    _this->_internal_set_distance(from._internal_distance());
  }
  if (from._internal_reverse_result() != 0) {
    _this->_internal_set_reverse_result(from._internal_reverse_result());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AiDistanceLessThan::CopyFrom(const AiDistanceLessThan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.AiDistanceLessThan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AiDistanceLessThan::IsInitialized() const {
  return true;
}

void AiDistanceLessThan::InternalSwap(AiDistanceLessThan* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.node_name_, lhs_arena,
                                       &other->_impl_.node_name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.actor1_key_, lhs_arena,
                                       &other->_impl_.actor1_key_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.actor2_key_, lhs_arena,
                                       &other->_impl_.actor2_key_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AiDistanceLessThan, _impl_.reverse_result_)
      + sizeof(AiDistanceLessThan::_impl_.reverse_result_)
      - PROTOBUF_FIELD_OFFSET(AiDistanceLessThan, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::google::protobuf::Metadata AiDistanceLessThan::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[27]);
}
// ===================================================================

class AiFlowNode::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::cfg::AiFlowNode, _impl_._oneof_case_);
  static const ::cfg::AiSequence& sequence(const AiFlowNode* msg);
  static const ::cfg::AiSelector& selector(const AiFlowNode* msg);
  static const ::cfg::AiSimpleParallel& simpleparallel(const AiFlowNode* msg);
  static const ::cfg::AiUeWait& uewait(const AiFlowNode* msg);
  static const ::cfg::AiUeWaitBlackboardTime& uewaitblackboardtime(const AiFlowNode* msg);
  static const ::cfg::AiMoveToTarget& movetotarget(const AiFlowNode* msg);
  static const ::cfg::AiChooseSkill& chooseskill(const AiFlowNode* msg);
  static const ::cfg::AiMoveToRandomLocation& movetorandomlocation(const AiFlowNode* msg);
  static const ::cfg::AiMoveToLocation& movetolocation(const AiFlowNode* msg);
  static const ::cfg::AiDebugPrint& debugprint(const AiFlowNode* msg);
};

const ::cfg::AiSequence& AiFlowNode::_Internal::sequence(const AiFlowNode* msg) {
  return *msg->_impl_.value_.sequence_;
}
const ::cfg::AiSelector& AiFlowNode::_Internal::selector(const AiFlowNode* msg) {
  return *msg->_impl_.value_.selector_;
}
const ::cfg::AiSimpleParallel& AiFlowNode::_Internal::simpleparallel(const AiFlowNode* msg) {
  return *msg->_impl_.value_.simpleparallel_;
}
const ::cfg::AiUeWait& AiFlowNode::_Internal::uewait(const AiFlowNode* msg) {
  return *msg->_impl_.value_.uewait_;
}
const ::cfg::AiUeWaitBlackboardTime& AiFlowNode::_Internal::uewaitblackboardtime(const AiFlowNode* msg) {
  return *msg->_impl_.value_.uewaitblackboardtime_;
}
const ::cfg::AiMoveToTarget& AiFlowNode::_Internal::movetotarget(const AiFlowNode* msg) {
  return *msg->_impl_.value_.movetotarget_;
}
const ::cfg::AiChooseSkill& AiFlowNode::_Internal::chooseskill(const AiFlowNode* msg) {
  return *msg->_impl_.value_.chooseskill_;
}
const ::cfg::AiMoveToRandomLocation& AiFlowNode::_Internal::movetorandomlocation(const AiFlowNode* msg) {
  return *msg->_impl_.value_.movetorandomlocation_;
}
const ::cfg::AiMoveToLocation& AiFlowNode::_Internal::movetolocation(const AiFlowNode* msg) {
  return *msg->_impl_.value_.movetolocation_;
}
const ::cfg::AiDebugPrint& AiFlowNode::_Internal::debugprint(const AiFlowNode* msg) {
  return *msg->_impl_.value_.debugprint_;
}
void AiFlowNode::set_allocated_sequence(::cfg::AiSequence* sequence) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (sequence) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(sequence);
    if (message_arena != submessage_arena) {
      sequence = ::google::protobuf::internal::GetOwnedMessage(message_arena, sequence, submessage_arena);
    }
    set_has_sequence();
    _impl_.value_.sequence_ = sequence;
  }
  // @@protoc_insertion_point(field_set_allocated:cfg.AiFlowNode.Sequence)
}
void AiFlowNode::set_allocated_selector(::cfg::AiSelector* selector) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (selector) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(selector);
    if (message_arena != submessage_arena) {
      selector = ::google::protobuf::internal::GetOwnedMessage(message_arena, selector, submessage_arena);
    }
    set_has_selector();
    _impl_.value_.selector_ = selector;
  }
  // @@protoc_insertion_point(field_set_allocated:cfg.AiFlowNode.Selector)
}
void AiFlowNode::set_allocated_simpleparallel(::cfg::AiSimpleParallel* simpleparallel) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (simpleparallel) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(simpleparallel);
    if (message_arena != submessage_arena) {
      simpleparallel = ::google::protobuf::internal::GetOwnedMessage(message_arena, simpleparallel, submessage_arena);
    }
    set_has_simpleparallel();
    _impl_.value_.simpleparallel_ = simpleparallel;
  }
  // @@protoc_insertion_point(field_set_allocated:cfg.AiFlowNode.SimpleParallel)
}
void AiFlowNode::set_allocated_uewait(::cfg::AiUeWait* uewait) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (uewait) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(uewait);
    if (message_arena != submessage_arena) {
      uewait = ::google::protobuf::internal::GetOwnedMessage(message_arena, uewait, submessage_arena);
    }
    set_has_uewait();
    _impl_.value_.uewait_ = uewait;
  }
  // @@protoc_insertion_point(field_set_allocated:cfg.AiFlowNode.UeWait)
}
void AiFlowNode::set_allocated_uewaitblackboardtime(::cfg::AiUeWaitBlackboardTime* uewaitblackboardtime) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (uewaitblackboardtime) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(uewaitblackboardtime);
    if (message_arena != submessage_arena) {
      uewaitblackboardtime = ::google::protobuf::internal::GetOwnedMessage(message_arena, uewaitblackboardtime, submessage_arena);
    }
    set_has_uewaitblackboardtime();
    _impl_.value_.uewaitblackboardtime_ = uewaitblackboardtime;
  }
  // @@protoc_insertion_point(field_set_allocated:cfg.AiFlowNode.UeWaitBlackboardTime)
}
void AiFlowNode::set_allocated_movetotarget(::cfg::AiMoveToTarget* movetotarget) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (movetotarget) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(movetotarget);
    if (message_arena != submessage_arena) {
      movetotarget = ::google::protobuf::internal::GetOwnedMessage(message_arena, movetotarget, submessage_arena);
    }
    set_has_movetotarget();
    _impl_.value_.movetotarget_ = movetotarget;
  }
  // @@protoc_insertion_point(field_set_allocated:cfg.AiFlowNode.MoveToTarget)
}
void AiFlowNode::set_allocated_chooseskill(::cfg::AiChooseSkill* chooseskill) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (chooseskill) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(chooseskill);
    if (message_arena != submessage_arena) {
      chooseskill = ::google::protobuf::internal::GetOwnedMessage(message_arena, chooseskill, submessage_arena);
    }
    set_has_chooseskill();
    _impl_.value_.chooseskill_ = chooseskill;
  }
  // @@protoc_insertion_point(field_set_allocated:cfg.AiFlowNode.ChooseSkill)
}
void AiFlowNode::set_allocated_movetorandomlocation(::cfg::AiMoveToRandomLocation* movetorandomlocation) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (movetorandomlocation) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(movetorandomlocation);
    if (message_arena != submessage_arena) {
      movetorandomlocation = ::google::protobuf::internal::GetOwnedMessage(message_arena, movetorandomlocation, submessage_arena);
    }
    set_has_movetorandomlocation();
    _impl_.value_.movetorandomlocation_ = movetorandomlocation;
  }
  // @@protoc_insertion_point(field_set_allocated:cfg.AiFlowNode.MoveToRandomLocation)
}
void AiFlowNode::set_allocated_movetolocation(::cfg::AiMoveToLocation* movetolocation) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (movetolocation) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(movetolocation);
    if (message_arena != submessage_arena) {
      movetolocation = ::google::protobuf::internal::GetOwnedMessage(message_arena, movetolocation, submessage_arena);
    }
    set_has_movetolocation();
    _impl_.value_.movetolocation_ = movetolocation;
  }
  // @@protoc_insertion_point(field_set_allocated:cfg.AiFlowNode.MoveToLocation)
}
void AiFlowNode::set_allocated_debugprint(::cfg::AiDebugPrint* debugprint) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (debugprint) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(debugprint);
    if (message_arena != submessage_arena) {
      debugprint = ::google::protobuf::internal::GetOwnedMessage(message_arena, debugprint, submessage_arena);
    }
    set_has_debugprint();
    _impl_.value_.debugprint_ = debugprint;
  }
  // @@protoc_insertion_point(field_set_allocated:cfg.AiFlowNode.DebugPrint)
}
AiFlowNode::AiFlowNode(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.AiFlowNode)
}
AiFlowNode::AiFlowNode(const AiFlowNode& from) : ::google::protobuf::Message() {
  AiFlowNode* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_._oneof_case_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kSequence: {
      _this->_internal_mutable_sequence()->::cfg::AiSequence::MergeFrom(
          from._internal_sequence());
      break;
    }
    case kSelector: {
      _this->_internal_mutable_selector()->::cfg::AiSelector::MergeFrom(
          from._internal_selector());
      break;
    }
    case kSimpleParallel: {
      _this->_internal_mutable_simpleparallel()->::cfg::AiSimpleParallel::MergeFrom(
          from._internal_simpleparallel());
      break;
    }
    case kUeWait: {
      _this->_internal_mutable_uewait()->::cfg::AiUeWait::MergeFrom(
          from._internal_uewait());
      break;
    }
    case kUeWaitBlackboardTime: {
      _this->_internal_mutable_uewaitblackboardtime()->::cfg::AiUeWaitBlackboardTime::MergeFrom(
          from._internal_uewaitblackboardtime());
      break;
    }
    case kMoveToTarget: {
      _this->_internal_mutable_movetotarget()->::cfg::AiMoveToTarget::MergeFrom(
          from._internal_movetotarget());
      break;
    }
    case kChooseSkill: {
      _this->_internal_mutable_chooseskill()->::cfg::AiChooseSkill::MergeFrom(
          from._internal_chooseskill());
      break;
    }
    case kMoveToRandomLocation: {
      _this->_internal_mutable_movetorandomlocation()->::cfg::AiMoveToRandomLocation::MergeFrom(
          from._internal_movetorandomlocation());
      break;
    }
    case kMoveToLocation: {
      _this->_internal_mutable_movetolocation()->::cfg::AiMoveToLocation::MergeFrom(
          from._internal_movetolocation());
      break;
    }
    case kDebugPrint: {
      _this->_internal_mutable_debugprint()->::cfg::AiDebugPrint::MergeFrom(
          from._internal_debugprint());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }

  // @@protoc_insertion_point(copy_constructor:cfg.AiFlowNode)
}
inline void AiFlowNode::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_._oneof_case_)*/ {},
  };
  clear_has_value();
}
AiFlowNode::~AiFlowNode() {
  // @@protoc_insertion_point(destructor:cfg.AiFlowNode)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AiFlowNode::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_value()) {
    clear_value();
  }
}
void AiFlowNode::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AiFlowNode::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:cfg.AiFlowNode)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  switch (value_case()) {
    case kSequence: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.sequence_;
      }
      break;
    }
    case kSelector: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.selector_;
      }
      break;
    }
    case kSimpleParallel: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.simpleparallel_;
      }
      break;
    }
    case kUeWait: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.uewait_;
      }
      break;
    }
    case kUeWaitBlackboardTime: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.uewaitblackboardtime_;
      }
      break;
    }
    case kMoveToTarget: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.movetotarget_;
      }
      break;
    }
    case kChooseSkill: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.chooseskill_;
      }
      break;
    }
    case kMoveToRandomLocation: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.movetorandomlocation_;
      }
      break;
    }
    case kMoveToLocation: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.movetolocation_;
      }
      break;
    }
    case kDebugPrint: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.debugprint_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}


PROTOBUF_NOINLINE void AiFlowNode::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.AiFlowNode)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AiFlowNode::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 10, 10, 0, 2> AiFlowNode::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    23, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4286586879,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    10,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AiFlowNode_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .cfg.AiSequence Sequence = 14;
    {PROTOBUF_FIELD_OFFSET(AiFlowNode, _impl_.value_.sequence_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cfg.AiSelector Selector = 15;
    {PROTOBUF_FIELD_OFFSET(AiFlowNode, _impl_.value_.selector_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cfg.AiSimpleParallel SimpleParallel = 16;
    {PROTOBUF_FIELD_OFFSET(AiFlowNode, _impl_.value_.simpleparallel_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cfg.AiUeWait UeWait = 17;
    {PROTOBUF_FIELD_OFFSET(AiFlowNode, _impl_.value_.uewait_), _Internal::kOneofCaseOffset + 0, 3,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cfg.AiUeWaitBlackboardTime UeWaitBlackboardTime = 18;
    {PROTOBUF_FIELD_OFFSET(AiFlowNode, _impl_.value_.uewaitblackboardtime_), _Internal::kOneofCaseOffset + 0, 4,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cfg.AiMoveToTarget MoveToTarget = 19;
    {PROTOBUF_FIELD_OFFSET(AiFlowNode, _impl_.value_.movetotarget_), _Internal::kOneofCaseOffset + 0, 5,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cfg.AiChooseSkill ChooseSkill = 20;
    {PROTOBUF_FIELD_OFFSET(AiFlowNode, _impl_.value_.chooseskill_), _Internal::kOneofCaseOffset + 0, 6,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cfg.AiMoveToRandomLocation MoveToRandomLocation = 21;
    {PROTOBUF_FIELD_OFFSET(AiFlowNode, _impl_.value_.movetorandomlocation_), _Internal::kOneofCaseOffset + 0, 7,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cfg.AiMoveToLocation MoveToLocation = 22;
    {PROTOBUF_FIELD_OFFSET(AiFlowNode, _impl_.value_.movetolocation_), _Internal::kOneofCaseOffset + 0, 8,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cfg.AiDebugPrint DebugPrint = 23;
    {PROTOBUF_FIELD_OFFSET(AiFlowNode, _impl_.value_.debugprint_), _Internal::kOneofCaseOffset + 0, 9,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::AiSequence>()},
    {::_pbi::TcParser::GetTable<::cfg::AiSelector>()},
    {::_pbi::TcParser::GetTable<::cfg::AiSimpleParallel>()},
    {::_pbi::TcParser::GetTable<::cfg::AiUeWait>()},
    {::_pbi::TcParser::GetTable<::cfg::AiUeWaitBlackboardTime>()},
    {::_pbi::TcParser::GetTable<::cfg::AiMoveToTarget>()},
    {::_pbi::TcParser::GetTable<::cfg::AiChooseSkill>()},
    {::_pbi::TcParser::GetTable<::cfg::AiMoveToRandomLocation>()},
    {::_pbi::TcParser::GetTable<::cfg::AiMoveToLocation>()},
    {::_pbi::TcParser::GetTable<::cfg::AiDebugPrint>()},
  }}, {{
  }},
};

::uint8_t* AiFlowNode::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.AiFlowNode)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  switch (value_case()) {
    case kSequence: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(14, _Internal::sequence(this),
          _Internal::sequence(this).GetCachedSize(), target, stream);
      break;
    }
    case kSelector: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(15, _Internal::selector(this),
          _Internal::selector(this).GetCachedSize(), target, stream);
      break;
    }
    case kSimpleParallel: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(16, _Internal::simpleparallel(this),
          _Internal::simpleparallel(this).GetCachedSize(), target, stream);
      break;
    }
    case kUeWait: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(17, _Internal::uewait(this),
          _Internal::uewait(this).GetCachedSize(), target, stream);
      break;
    }
    case kUeWaitBlackboardTime: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(18, _Internal::uewaitblackboardtime(this),
          _Internal::uewaitblackboardtime(this).GetCachedSize(), target, stream);
      break;
    }
    case kMoveToTarget: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(19, _Internal::movetotarget(this),
          _Internal::movetotarget(this).GetCachedSize(), target, stream);
      break;
    }
    case kChooseSkill: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(20, _Internal::chooseskill(this),
          _Internal::chooseskill(this).GetCachedSize(), target, stream);
      break;
    }
    case kMoveToRandomLocation: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(21, _Internal::movetorandomlocation(this),
          _Internal::movetorandomlocation(this).GetCachedSize(), target, stream);
      break;
    }
    case kMoveToLocation: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(22, _Internal::movetolocation(this),
          _Internal::movetolocation(this).GetCachedSize(), target, stream);
      break;
    }
    case kDebugPrint: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(23, _Internal::debugprint(this),
          _Internal::debugprint(this).GetCachedSize(), target, stream);
      break;
    }
    default:
      break;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.AiFlowNode)
  return target;
}

::size_t AiFlowNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.AiFlowNode)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_case()) {
    // .cfg.AiSequence Sequence = 14;
    case kSequence: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.value_.sequence_);
      break;
    }
    // .cfg.AiSelector Selector = 15;
    case kSelector: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.value_.selector_);
      break;
    }
    // .cfg.AiSimpleParallel SimpleParallel = 16;
    case kSimpleParallel: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.value_.simpleparallel_);
      break;
    }
    // .cfg.AiUeWait UeWait = 17;
    case kUeWait: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.value_.uewait_);
      break;
    }
    // .cfg.AiUeWaitBlackboardTime UeWaitBlackboardTime = 18;
    case kUeWaitBlackboardTime: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.value_.uewaitblackboardtime_);
      break;
    }
    // .cfg.AiMoveToTarget MoveToTarget = 19;
    case kMoveToTarget: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.value_.movetotarget_);
      break;
    }
    // .cfg.AiChooseSkill ChooseSkill = 20;
    case kChooseSkill: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.value_.chooseskill_);
      break;
    }
    // .cfg.AiMoveToRandomLocation MoveToRandomLocation = 21;
    case kMoveToRandomLocation: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.value_.movetorandomlocation_);
      break;
    }
    // .cfg.AiMoveToLocation MoveToLocation = 22;
    case kMoveToLocation: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.value_.movetolocation_);
      break;
    }
    // .cfg.AiDebugPrint DebugPrint = 23;
    case kDebugPrint: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.value_.debugprint_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AiFlowNode::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    AiFlowNode::MergeImpl
};
const ::google::protobuf::Message::ClassData*AiFlowNode::GetClassData() const { return &_class_data_; }


void AiFlowNode::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AiFlowNode*>(&to_msg);
  auto& from = static_cast<const AiFlowNode&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.AiFlowNode)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kSequence: {
      _this->_internal_mutable_sequence()->::cfg::AiSequence::MergeFrom(
          from._internal_sequence());
      break;
    }
    case kSelector: {
      _this->_internal_mutable_selector()->::cfg::AiSelector::MergeFrom(
          from._internal_selector());
      break;
    }
    case kSimpleParallel: {
      _this->_internal_mutable_simpleparallel()->::cfg::AiSimpleParallel::MergeFrom(
          from._internal_simpleparallel());
      break;
    }
    case kUeWait: {
      _this->_internal_mutable_uewait()->::cfg::AiUeWait::MergeFrom(
          from._internal_uewait());
      break;
    }
    case kUeWaitBlackboardTime: {
      _this->_internal_mutable_uewaitblackboardtime()->::cfg::AiUeWaitBlackboardTime::MergeFrom(
          from._internal_uewaitblackboardtime());
      break;
    }
    case kMoveToTarget: {
      _this->_internal_mutable_movetotarget()->::cfg::AiMoveToTarget::MergeFrom(
          from._internal_movetotarget());
      break;
    }
    case kChooseSkill: {
      _this->_internal_mutable_chooseskill()->::cfg::AiChooseSkill::MergeFrom(
          from._internal_chooseskill());
      break;
    }
    case kMoveToRandomLocation: {
      _this->_internal_mutable_movetorandomlocation()->::cfg::AiMoveToRandomLocation::MergeFrom(
          from._internal_movetorandomlocation());
      break;
    }
    case kMoveToLocation: {
      _this->_internal_mutable_movetolocation()->::cfg::AiMoveToLocation::MergeFrom(
          from._internal_movetolocation());
      break;
    }
    case kDebugPrint: {
      _this->_internal_mutable_debugprint()->::cfg::AiDebugPrint::MergeFrom(
          from._internal_debugprint());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AiFlowNode::CopyFrom(const AiFlowNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.AiFlowNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AiFlowNode::IsInitialized() const {
  return true;
}

void AiFlowNode::InternalSwap(AiFlowNode* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.value_, other->_impl_.value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata AiFlowNode::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[28]);
}
// ===================================================================

class AiComposeNode::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::cfg::AiComposeNode, _impl_._oneof_case_);
  static const ::cfg::AiSequence& sequence(const AiComposeNode* msg);
  static const ::cfg::AiSelector& selector(const AiComposeNode* msg);
  static const ::cfg::AiSimpleParallel& simpleparallel(const AiComposeNode* msg);
};

const ::cfg::AiSequence& AiComposeNode::_Internal::sequence(const AiComposeNode* msg) {
  return *msg->_impl_.value_.sequence_;
}
const ::cfg::AiSelector& AiComposeNode::_Internal::selector(const AiComposeNode* msg) {
  return *msg->_impl_.value_.selector_;
}
const ::cfg::AiSimpleParallel& AiComposeNode::_Internal::simpleparallel(const AiComposeNode* msg) {
  return *msg->_impl_.value_.simpleparallel_;
}
void AiComposeNode::set_allocated_sequence(::cfg::AiSequence* sequence) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (sequence) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(sequence);
    if (message_arena != submessage_arena) {
      sequence = ::google::protobuf::internal::GetOwnedMessage(message_arena, sequence, submessage_arena);
    }
    set_has_sequence();
    _impl_.value_.sequence_ = sequence;
  }
  // @@protoc_insertion_point(field_set_allocated:cfg.AiComposeNode.Sequence)
}
void AiComposeNode::set_allocated_selector(::cfg::AiSelector* selector) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (selector) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(selector);
    if (message_arena != submessage_arena) {
      selector = ::google::protobuf::internal::GetOwnedMessage(message_arena, selector, submessage_arena);
    }
    set_has_selector();
    _impl_.value_.selector_ = selector;
  }
  // @@protoc_insertion_point(field_set_allocated:cfg.AiComposeNode.Selector)
}
void AiComposeNode::set_allocated_simpleparallel(::cfg::AiSimpleParallel* simpleparallel) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (simpleparallel) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(simpleparallel);
    if (message_arena != submessage_arena) {
      simpleparallel = ::google::protobuf::internal::GetOwnedMessage(message_arena, simpleparallel, submessage_arena);
    }
    set_has_simpleparallel();
    _impl_.value_.simpleparallel_ = simpleparallel;
  }
  // @@protoc_insertion_point(field_set_allocated:cfg.AiComposeNode.SimpleParallel)
}
AiComposeNode::AiComposeNode(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.AiComposeNode)
}
AiComposeNode::AiComposeNode(const AiComposeNode& from) : ::google::protobuf::Message() {
  AiComposeNode* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_._oneof_case_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kSequence: {
      _this->_internal_mutable_sequence()->::cfg::AiSequence::MergeFrom(
          from._internal_sequence());
      break;
    }
    case kSelector: {
      _this->_internal_mutable_selector()->::cfg::AiSelector::MergeFrom(
          from._internal_selector());
      break;
    }
    case kSimpleParallel: {
      _this->_internal_mutable_simpleparallel()->::cfg::AiSimpleParallel::MergeFrom(
          from._internal_simpleparallel());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }

  // @@protoc_insertion_point(copy_constructor:cfg.AiComposeNode)
}
inline void AiComposeNode::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_._oneof_case_)*/ {},
  };
  clear_has_value();
}
AiComposeNode::~AiComposeNode() {
  // @@protoc_insertion_point(destructor:cfg.AiComposeNode)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AiComposeNode::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_value()) {
    clear_value();
  }
}
void AiComposeNode::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AiComposeNode::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:cfg.AiComposeNode)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  switch (value_case()) {
    case kSequence: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.sequence_;
      }
      break;
    }
    case kSelector: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.selector_;
      }
      break;
    }
    case kSimpleParallel: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.simpleparallel_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}


PROTOBUF_NOINLINE void AiComposeNode::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.AiComposeNode)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AiComposeNode::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 3, 3, 0, 2> AiComposeNode::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    16, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294909951,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AiComposeNode_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .cfg.AiSequence Sequence = 14;
    {PROTOBUF_FIELD_OFFSET(AiComposeNode, _impl_.value_.sequence_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cfg.AiSelector Selector = 15;
    {PROTOBUF_FIELD_OFFSET(AiComposeNode, _impl_.value_.selector_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cfg.AiSimpleParallel SimpleParallel = 16;
    {PROTOBUF_FIELD_OFFSET(AiComposeNode, _impl_.value_.simpleparallel_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::AiSequence>()},
    {::_pbi::TcParser::GetTable<::cfg::AiSelector>()},
    {::_pbi::TcParser::GetTable<::cfg::AiSimpleParallel>()},
  }}, {{
  }},
};

::uint8_t* AiComposeNode::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.AiComposeNode)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  switch (value_case()) {
    case kSequence: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(14, _Internal::sequence(this),
          _Internal::sequence(this).GetCachedSize(), target, stream);
      break;
    }
    case kSelector: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(15, _Internal::selector(this),
          _Internal::selector(this).GetCachedSize(), target, stream);
      break;
    }
    case kSimpleParallel: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(16, _Internal::simpleparallel(this),
          _Internal::simpleparallel(this).GetCachedSize(), target, stream);
      break;
    }
    default:
      break;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.AiComposeNode)
  return target;
}

::size_t AiComposeNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.AiComposeNode)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_case()) {
    // .cfg.AiSequence Sequence = 14;
    case kSequence: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.value_.sequence_);
      break;
    }
    // .cfg.AiSelector Selector = 15;
    case kSelector: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.value_.selector_);
      break;
    }
    // .cfg.AiSimpleParallel SimpleParallel = 16;
    case kSimpleParallel: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.value_.simpleparallel_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AiComposeNode::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    AiComposeNode::MergeImpl
};
const ::google::protobuf::Message::ClassData*AiComposeNode::GetClassData() const { return &_class_data_; }


void AiComposeNode::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AiComposeNode*>(&to_msg);
  auto& from = static_cast<const AiComposeNode&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.AiComposeNode)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kSequence: {
      _this->_internal_mutable_sequence()->::cfg::AiSequence::MergeFrom(
          from._internal_sequence());
      break;
    }
    case kSelector: {
      _this->_internal_mutable_selector()->::cfg::AiSelector::MergeFrom(
          from._internal_selector());
      break;
    }
    case kSimpleParallel: {
      _this->_internal_mutable_simpleparallel()->::cfg::AiSimpleParallel::MergeFrom(
          from._internal_simpleparallel());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AiComposeNode::CopyFrom(const AiComposeNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.AiComposeNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AiComposeNode::IsInitialized() const {
  return true;
}

void AiComposeNode::InternalSwap(AiComposeNode* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.value_, other->_impl_.value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata AiComposeNode::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[29]);
}
// ===================================================================

class AiSequence::_Internal {
 public:
};

AiSequence::AiSequence(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.AiSequence)
}
AiSequence::AiSequence(const AiSequence& from) : ::google::protobuf::Message() {
  AiSequence* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.decorators_){from._impl_.decorators_},
      decltype(_impl_.services_){from._impl_.services_},
      decltype(_impl_.children_){from._impl_.children_},
      decltype(_impl_.node_name_){},
      decltype(_impl_.id_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.node_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.node_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_node_name().empty()) {
    _this->_impl_.node_name_.Set(from._internal_node_name(), _this->GetArenaForAllocation());
  }
  _this->_impl_.id_ = from._impl_.id_;

  // @@protoc_insertion_point(copy_constructor:cfg.AiSequence)
}
inline void AiSequence::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.decorators_){arena},
      decltype(_impl_.services_){arena},
      decltype(_impl_.children_){arena},
      decltype(_impl_.node_name_){},
      decltype(_impl_.id_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.node_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.node_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
AiSequence::~AiSequence() {
  // @@protoc_insertion_point(destructor:cfg.AiSequence)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AiSequence::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.decorators_.~RepeatedPtrField();
  _impl_.services_.~RepeatedPtrField();
  _impl_.children_.~RepeatedPtrField();
  _impl_.node_name_.Destroy();
}
void AiSequence::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void AiSequence::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.AiSequence)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.decorators_.Clear();
  _impl_.services_.Clear();
  _impl_.children_.Clear();
  _impl_.node_name_.ClearToEmpty();
  _impl_.id_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AiSequence::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 3, 32, 2> AiSequence::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AiSequence_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AiSequence, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(AiSequence, _impl_.id_)}},
    // string node_name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(AiSequence, _impl_.node_name_)}},
    // repeated .cfg.AiDecorator decorators = 3 [packed = false];
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(AiSequence, _impl_.decorators_)}},
    // repeated .cfg.AiService services = 4 [packed = false];
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 1, PROTOBUF_FIELD_OFFSET(AiSequence, _impl_.services_)}},
    // repeated .cfg.AiFlowNode children = 5 [packed = false];
    {::_pbi::TcParser::FastMtR1,
     {42, 63, 2, PROTOBUF_FIELD_OFFSET(AiSequence, _impl_.children_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(AiSequence, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string node_name = 2;
    {PROTOBUF_FIELD_OFFSET(AiSequence, _impl_.node_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .cfg.AiDecorator decorators = 3 [packed = false];
    {PROTOBUF_FIELD_OFFSET(AiSequence, _impl_.decorators_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .cfg.AiService services = 4 [packed = false];
    {PROTOBUF_FIELD_OFFSET(AiSequence, _impl_.services_), 0, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .cfg.AiFlowNode children = 5 [packed = false];
    {PROTOBUF_FIELD_OFFSET(AiSequence, _impl_.children_), 0, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::AiDecorator>()},
    {::_pbi::TcParser::GetTable<::cfg::AiService>()},
    {::_pbi::TcParser::GetTable<::cfg::AiFlowNode>()},
  }}, {{
    "\16\0\11\0\0\0\0\0"
    "cfg.AiSequence"
    "node_name"
  }},
};

::uint8_t* AiSequence::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.AiSequence)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // string node_name = 2;
  if (!this->_internal_node_name().empty()) {
    const std::string& _s = this->_internal_node_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.AiSequence.node_name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // repeated .cfg.AiDecorator decorators = 3 [packed = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_decorators_size()); i < n; i++) {
    const auto& repfield = this->_internal_decorators().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cfg.AiService services = 4 [packed = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_services_size()); i < n; i++) {
    const auto& repfield = this->_internal_services().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cfg.AiFlowNode children = 5 [packed = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_children_size()); i < n; i++) {
    const auto& repfield = this->_internal_children().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.AiSequence)
  return target;
}

::size_t AiSequence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.AiSequence)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cfg.AiDecorator decorators = 3 [packed = false];
  total_size += 1UL * this->_internal_decorators_size();
  for (const auto& msg : this->_internal_decorators()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .cfg.AiService services = 4 [packed = false];
  total_size += 1UL * this->_internal_services_size();
  for (const auto& msg : this->_internal_services()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .cfg.AiFlowNode children = 5 [packed = false];
  total_size += 1UL * this->_internal_children_size();
  for (const auto& msg : this->_internal_children()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string node_name = 2;
  if (!this->_internal_node_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_node_name());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AiSequence::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    AiSequence::MergeImpl
};
const ::google::protobuf::Message::ClassData*AiSequence::GetClassData() const { return &_class_data_; }


void AiSequence::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AiSequence*>(&to_msg);
  auto& from = static_cast<const AiSequence&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.AiSequence)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_decorators()->MergeFrom(
      from._internal_decorators());
  _this->_internal_mutable_services()->MergeFrom(
      from._internal_services());
  _this->_internal_mutable_children()->MergeFrom(
      from._internal_children());
  if (!from._internal_node_name().empty()) {
    _this->_internal_set_node_name(from._internal_node_name());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AiSequence::CopyFrom(const AiSequence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.AiSequence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AiSequence::IsInitialized() const {
  return true;
}

void AiSequence::InternalSwap(AiSequence* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.decorators_.InternalSwap(&other->_impl_.decorators_);
  _impl_.services_.InternalSwap(&other->_impl_.services_);
  _impl_.children_.InternalSwap(&other->_impl_.children_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.node_name_, lhs_arena,
                                       &other->_impl_.node_name_, rhs_arena);
        swap(_impl_.id_, other->_impl_.id_);
}

::google::protobuf::Metadata AiSequence::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[30]);
}
// ===================================================================

class AiSelector::_Internal {
 public:
};

AiSelector::AiSelector(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.AiSelector)
}
AiSelector::AiSelector(const AiSelector& from) : ::google::protobuf::Message() {
  AiSelector* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.decorators_){from._impl_.decorators_},
      decltype(_impl_.services_){from._impl_.services_},
      decltype(_impl_.children_){from._impl_.children_},
      decltype(_impl_.node_name_){},
      decltype(_impl_.id_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.node_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.node_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_node_name().empty()) {
    _this->_impl_.node_name_.Set(from._internal_node_name(), _this->GetArenaForAllocation());
  }
  _this->_impl_.id_ = from._impl_.id_;

  // @@protoc_insertion_point(copy_constructor:cfg.AiSelector)
}
inline void AiSelector::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.decorators_){arena},
      decltype(_impl_.services_){arena},
      decltype(_impl_.children_){arena},
      decltype(_impl_.node_name_){},
      decltype(_impl_.id_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.node_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.node_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
AiSelector::~AiSelector() {
  // @@protoc_insertion_point(destructor:cfg.AiSelector)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AiSelector::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.decorators_.~RepeatedPtrField();
  _impl_.services_.~RepeatedPtrField();
  _impl_.children_.~RepeatedPtrField();
  _impl_.node_name_.Destroy();
}
void AiSelector::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void AiSelector::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.AiSelector)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.decorators_.Clear();
  _impl_.services_.Clear();
  _impl_.children_.Clear();
  _impl_.node_name_.ClearToEmpty();
  _impl_.id_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AiSelector::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 3, 32, 2> AiSelector::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AiSelector_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AiSelector, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(AiSelector, _impl_.id_)}},
    // string node_name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(AiSelector, _impl_.node_name_)}},
    // repeated .cfg.AiDecorator decorators = 3 [packed = false];
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(AiSelector, _impl_.decorators_)}},
    // repeated .cfg.AiService services = 4 [packed = false];
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 1, PROTOBUF_FIELD_OFFSET(AiSelector, _impl_.services_)}},
    // repeated .cfg.AiFlowNode children = 5 [packed = false];
    {::_pbi::TcParser::FastMtR1,
     {42, 63, 2, PROTOBUF_FIELD_OFFSET(AiSelector, _impl_.children_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(AiSelector, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string node_name = 2;
    {PROTOBUF_FIELD_OFFSET(AiSelector, _impl_.node_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .cfg.AiDecorator decorators = 3 [packed = false];
    {PROTOBUF_FIELD_OFFSET(AiSelector, _impl_.decorators_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .cfg.AiService services = 4 [packed = false];
    {PROTOBUF_FIELD_OFFSET(AiSelector, _impl_.services_), 0, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .cfg.AiFlowNode children = 5 [packed = false];
    {PROTOBUF_FIELD_OFFSET(AiSelector, _impl_.children_), 0, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::AiDecorator>()},
    {::_pbi::TcParser::GetTable<::cfg::AiService>()},
    {::_pbi::TcParser::GetTable<::cfg::AiFlowNode>()},
  }}, {{
    "\16\0\11\0\0\0\0\0"
    "cfg.AiSelector"
    "node_name"
  }},
};

::uint8_t* AiSelector::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.AiSelector)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // string node_name = 2;
  if (!this->_internal_node_name().empty()) {
    const std::string& _s = this->_internal_node_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.AiSelector.node_name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // repeated .cfg.AiDecorator decorators = 3 [packed = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_decorators_size()); i < n; i++) {
    const auto& repfield = this->_internal_decorators().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cfg.AiService services = 4 [packed = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_services_size()); i < n; i++) {
    const auto& repfield = this->_internal_services().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cfg.AiFlowNode children = 5 [packed = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_children_size()); i < n; i++) {
    const auto& repfield = this->_internal_children().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.AiSelector)
  return target;
}

::size_t AiSelector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.AiSelector)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cfg.AiDecorator decorators = 3 [packed = false];
  total_size += 1UL * this->_internal_decorators_size();
  for (const auto& msg : this->_internal_decorators()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .cfg.AiService services = 4 [packed = false];
  total_size += 1UL * this->_internal_services_size();
  for (const auto& msg : this->_internal_services()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .cfg.AiFlowNode children = 5 [packed = false];
  total_size += 1UL * this->_internal_children_size();
  for (const auto& msg : this->_internal_children()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string node_name = 2;
  if (!this->_internal_node_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_node_name());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AiSelector::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    AiSelector::MergeImpl
};
const ::google::protobuf::Message::ClassData*AiSelector::GetClassData() const { return &_class_data_; }


void AiSelector::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AiSelector*>(&to_msg);
  auto& from = static_cast<const AiSelector&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.AiSelector)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_decorators()->MergeFrom(
      from._internal_decorators());
  _this->_internal_mutable_services()->MergeFrom(
      from._internal_services());
  _this->_internal_mutable_children()->MergeFrom(
      from._internal_children());
  if (!from._internal_node_name().empty()) {
    _this->_internal_set_node_name(from._internal_node_name());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AiSelector::CopyFrom(const AiSelector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.AiSelector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AiSelector::IsInitialized() const {
  return true;
}

void AiSelector::InternalSwap(AiSelector* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.decorators_.InternalSwap(&other->_impl_.decorators_);
  _impl_.services_.InternalSwap(&other->_impl_.services_);
  _impl_.children_.InternalSwap(&other->_impl_.children_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.node_name_, lhs_arena,
                                       &other->_impl_.node_name_, rhs_arena);
        swap(_impl_.id_, other->_impl_.id_);
}

::google::protobuf::Metadata AiSelector::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[31]);
}
// ===================================================================

class AiSimpleParallel::_Internal {
 public:
  using HasBits = decltype(std::declval<AiSimpleParallel>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AiSimpleParallel, _impl_._has_bits_);
  static const ::cfg::AiTask& main_task(const AiSimpleParallel* msg);
  static void set_has_main_task(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::cfg::AiFlowNode& background_node(const AiSimpleParallel* msg);
  static void set_has_background_node(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::cfg::AiTask& AiSimpleParallel::_Internal::main_task(const AiSimpleParallel* msg) {
  return *msg->_impl_.main_task_;
}
const ::cfg::AiFlowNode& AiSimpleParallel::_Internal::background_node(const AiSimpleParallel* msg) {
  return *msg->_impl_.background_node_;
}
AiSimpleParallel::AiSimpleParallel(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.AiSimpleParallel)
}
AiSimpleParallel::AiSimpleParallel(const AiSimpleParallel& from) : ::google::protobuf::Message() {
  AiSimpleParallel* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.decorators_){from._impl_.decorators_},
      decltype(_impl_.services_){from._impl_.services_},
      decltype(_impl_.node_name_){},
      decltype(_impl_.main_task_){nullptr},
      decltype(_impl_.background_node_){nullptr},
      decltype(_impl_.id_){},
      decltype(_impl_.finish_mode_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.node_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.node_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_node_name().empty()) {
    _this->_impl_.node_name_.Set(from._internal_node_name(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.main_task_ = new ::cfg::AiTask(*from._impl_.main_task_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.background_node_ = new ::cfg::AiFlowNode(*from._impl_.background_node_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.finish_mode_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.finish_mode_));

  // @@protoc_insertion_point(copy_constructor:cfg.AiSimpleParallel)
}
inline void AiSimpleParallel::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.decorators_){arena},
      decltype(_impl_.services_){arena},
      decltype(_impl_.node_name_){},
      decltype(_impl_.main_task_){nullptr},
      decltype(_impl_.background_node_){nullptr},
      decltype(_impl_.id_){0},
      decltype(_impl_.finish_mode_){0},
  };
  _impl_.node_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.node_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
AiSimpleParallel::~AiSimpleParallel() {
  // @@protoc_insertion_point(destructor:cfg.AiSimpleParallel)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AiSimpleParallel::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.decorators_.~RepeatedPtrField();
  _impl_.services_.~RepeatedPtrField();
  _impl_.node_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.main_task_;
  if (this != internal_default_instance()) delete _impl_.background_node_;
}
void AiSimpleParallel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void AiSimpleParallel::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.AiSimpleParallel)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.decorators_.Clear();
  _impl_.services_.Clear();
  _impl_.node_name_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.main_task_ != nullptr);
      _impl_.main_task_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.background_node_ != nullptr);
      _impl_.background_node_->Clear();
    }
  }
  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.finish_mode_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.finish_mode_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AiSimpleParallel::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 4, 38, 2> AiSimpleParallel::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AiSimpleParallel, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AiSimpleParallel_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AiSimpleParallel, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(AiSimpleParallel, _impl_.id_)}},
    // string node_name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(AiSimpleParallel, _impl_.node_name_)}},
    // repeated .cfg.AiDecorator decorators = 3 [packed = false];
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(AiSimpleParallel, _impl_.decorators_)}},
    // repeated .cfg.AiService services = 4 [packed = false];
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 1, PROTOBUF_FIELD_OFFSET(AiSimpleParallel, _impl_.services_)}},
    // .cfg.AiEFinishMode finish_mode = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AiSimpleParallel, _impl_.finish_mode_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(AiSimpleParallel, _impl_.finish_mode_)}},
    // .cfg.AiTask main_task = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 0, 2, PROTOBUF_FIELD_OFFSET(AiSimpleParallel, _impl_.main_task_)}},
    // .cfg.AiFlowNode background_node = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 1, 3, PROTOBUF_FIELD_OFFSET(AiSimpleParallel, _impl_.background_node_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(AiSimpleParallel, _impl_.id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string node_name = 2;
    {PROTOBUF_FIELD_OFFSET(AiSimpleParallel, _impl_.node_name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .cfg.AiDecorator decorators = 3 [packed = false];
    {PROTOBUF_FIELD_OFFSET(AiSimpleParallel, _impl_.decorators_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .cfg.AiService services = 4 [packed = false];
    {PROTOBUF_FIELD_OFFSET(AiSimpleParallel, _impl_.services_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cfg.AiEFinishMode finish_mode = 5;
    {PROTOBUF_FIELD_OFFSET(AiSimpleParallel, _impl_.finish_mode_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .cfg.AiTask main_task = 6;
    {PROTOBUF_FIELD_OFFSET(AiSimpleParallel, _impl_.main_task_), _Internal::kHasBitsOffset + 0, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cfg.AiFlowNode background_node = 7;
    {PROTOBUF_FIELD_OFFSET(AiSimpleParallel, _impl_.background_node_), _Internal::kHasBitsOffset + 1, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::AiDecorator>()},
    {::_pbi::TcParser::GetTable<::cfg::AiService>()},
    {::_pbi::TcParser::GetTable<::cfg::AiTask>()},
    {::_pbi::TcParser::GetTable<::cfg::AiFlowNode>()},
  }}, {{
    "\24\0\11\0\0\0\0\0"
    "cfg.AiSimpleParallel"
    "node_name"
  }},
};

::uint8_t* AiSimpleParallel::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.AiSimpleParallel)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // string node_name = 2;
  if (!this->_internal_node_name().empty()) {
    const std::string& _s = this->_internal_node_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.AiSimpleParallel.node_name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // repeated .cfg.AiDecorator decorators = 3 [packed = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_decorators_size()); i < n; i++) {
    const auto& repfield = this->_internal_decorators().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cfg.AiService services = 4 [packed = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_services_size()); i < n; i++) {
    const auto& repfield = this->_internal_services().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .cfg.AiEFinishMode finish_mode = 5;
  if (this->_internal_finish_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        5, this->_internal_finish_mode(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cfg.AiTask main_task = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::main_task(this),
        _Internal::main_task(this).GetCachedSize(), target, stream);
  }

  // .cfg.AiFlowNode background_node = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::background_node(this),
        _Internal::background_node(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.AiSimpleParallel)
  return target;
}

::size_t AiSimpleParallel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.AiSimpleParallel)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cfg.AiDecorator decorators = 3 [packed = false];
  total_size += 1UL * this->_internal_decorators_size();
  for (const auto& msg : this->_internal_decorators()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .cfg.AiService services = 4 [packed = false];
  total_size += 1UL * this->_internal_services_size();
  for (const auto& msg : this->_internal_services()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string node_name = 2;
  if (!this->_internal_node_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_node_name());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .cfg.AiTask main_task = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.main_task_);
    }

    // .cfg.AiFlowNode background_node = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.background_node_);
    }

  }
  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  // .cfg.AiEFinishMode finish_mode = 5;
  if (this->_internal_finish_mode() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_finish_mode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AiSimpleParallel::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    AiSimpleParallel::MergeImpl
};
const ::google::protobuf::Message::ClassData*AiSimpleParallel::GetClassData() const { return &_class_data_; }


void AiSimpleParallel::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AiSimpleParallel*>(&to_msg);
  auto& from = static_cast<const AiSimpleParallel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.AiSimpleParallel)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_decorators()->MergeFrom(
      from._internal_decorators());
  _this->_internal_mutable_services()->MergeFrom(
      from._internal_services());
  if (!from._internal_node_name().empty()) {
    _this->_internal_set_node_name(from._internal_node_name());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_main_task()->::cfg::AiTask::MergeFrom(
          from._internal_main_task());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_background_node()->::cfg::AiFlowNode::MergeFrom(
          from._internal_background_node());
    }
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_finish_mode() != 0) {
    _this->_internal_set_finish_mode(from._internal_finish_mode());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AiSimpleParallel::CopyFrom(const AiSimpleParallel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.AiSimpleParallel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AiSimpleParallel::IsInitialized() const {
  return true;
}

void AiSimpleParallel::InternalSwap(AiSimpleParallel* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.decorators_.InternalSwap(&other->_impl_.decorators_);
  _impl_.services_.InternalSwap(&other->_impl_.services_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.node_name_, lhs_arena,
                                       &other->_impl_.node_name_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AiSimpleParallel, _impl_.finish_mode_)
      + sizeof(AiSimpleParallel::_impl_.finish_mode_)
      - PROTOBUF_FIELD_OFFSET(AiSimpleParallel, _impl_.main_task_)>(
          reinterpret_cast<char*>(&_impl_.main_task_),
          reinterpret_cast<char*>(&other->_impl_.main_task_));
}

::google::protobuf::Metadata AiSimpleParallel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[32]);
}
// ===================================================================

class AiTask::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::cfg::AiTask, _impl_._oneof_case_);
  static const ::cfg::AiUeWait& uewait(const AiTask* msg);
  static const ::cfg::AiUeWaitBlackboardTime& uewaitblackboardtime(const AiTask* msg);
  static const ::cfg::AiMoveToTarget& movetotarget(const AiTask* msg);
  static const ::cfg::AiChooseSkill& chooseskill(const AiTask* msg);
  static const ::cfg::AiMoveToRandomLocation& movetorandomlocation(const AiTask* msg);
  static const ::cfg::AiMoveToLocation& movetolocation(const AiTask* msg);
  static const ::cfg::AiDebugPrint& debugprint(const AiTask* msg);
};

const ::cfg::AiUeWait& AiTask::_Internal::uewait(const AiTask* msg) {
  return *msg->_impl_.value_.uewait_;
}
const ::cfg::AiUeWaitBlackboardTime& AiTask::_Internal::uewaitblackboardtime(const AiTask* msg) {
  return *msg->_impl_.value_.uewaitblackboardtime_;
}
const ::cfg::AiMoveToTarget& AiTask::_Internal::movetotarget(const AiTask* msg) {
  return *msg->_impl_.value_.movetotarget_;
}
const ::cfg::AiChooseSkill& AiTask::_Internal::chooseskill(const AiTask* msg) {
  return *msg->_impl_.value_.chooseskill_;
}
const ::cfg::AiMoveToRandomLocation& AiTask::_Internal::movetorandomlocation(const AiTask* msg) {
  return *msg->_impl_.value_.movetorandomlocation_;
}
const ::cfg::AiMoveToLocation& AiTask::_Internal::movetolocation(const AiTask* msg) {
  return *msg->_impl_.value_.movetolocation_;
}
const ::cfg::AiDebugPrint& AiTask::_Internal::debugprint(const AiTask* msg) {
  return *msg->_impl_.value_.debugprint_;
}
void AiTask::set_allocated_uewait(::cfg::AiUeWait* uewait) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (uewait) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(uewait);
    if (message_arena != submessage_arena) {
      uewait = ::google::protobuf::internal::GetOwnedMessage(message_arena, uewait, submessage_arena);
    }
    set_has_uewait();
    _impl_.value_.uewait_ = uewait;
  }
  // @@protoc_insertion_point(field_set_allocated:cfg.AiTask.UeWait)
}
void AiTask::set_allocated_uewaitblackboardtime(::cfg::AiUeWaitBlackboardTime* uewaitblackboardtime) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (uewaitblackboardtime) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(uewaitblackboardtime);
    if (message_arena != submessage_arena) {
      uewaitblackboardtime = ::google::protobuf::internal::GetOwnedMessage(message_arena, uewaitblackboardtime, submessage_arena);
    }
    set_has_uewaitblackboardtime();
    _impl_.value_.uewaitblackboardtime_ = uewaitblackboardtime;
  }
  // @@protoc_insertion_point(field_set_allocated:cfg.AiTask.UeWaitBlackboardTime)
}
void AiTask::set_allocated_movetotarget(::cfg::AiMoveToTarget* movetotarget) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (movetotarget) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(movetotarget);
    if (message_arena != submessage_arena) {
      movetotarget = ::google::protobuf::internal::GetOwnedMessage(message_arena, movetotarget, submessage_arena);
    }
    set_has_movetotarget();
    _impl_.value_.movetotarget_ = movetotarget;
  }
  // @@protoc_insertion_point(field_set_allocated:cfg.AiTask.MoveToTarget)
}
void AiTask::set_allocated_chooseskill(::cfg::AiChooseSkill* chooseskill) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (chooseskill) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(chooseskill);
    if (message_arena != submessage_arena) {
      chooseskill = ::google::protobuf::internal::GetOwnedMessage(message_arena, chooseskill, submessage_arena);
    }
    set_has_chooseskill();
    _impl_.value_.chooseskill_ = chooseskill;
  }
  // @@protoc_insertion_point(field_set_allocated:cfg.AiTask.ChooseSkill)
}
void AiTask::set_allocated_movetorandomlocation(::cfg::AiMoveToRandomLocation* movetorandomlocation) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (movetorandomlocation) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(movetorandomlocation);
    if (message_arena != submessage_arena) {
      movetorandomlocation = ::google::protobuf::internal::GetOwnedMessage(message_arena, movetorandomlocation, submessage_arena);
    }
    set_has_movetorandomlocation();
    _impl_.value_.movetorandomlocation_ = movetorandomlocation;
  }
  // @@protoc_insertion_point(field_set_allocated:cfg.AiTask.MoveToRandomLocation)
}
void AiTask::set_allocated_movetolocation(::cfg::AiMoveToLocation* movetolocation) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (movetolocation) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(movetolocation);
    if (message_arena != submessage_arena) {
      movetolocation = ::google::protobuf::internal::GetOwnedMessage(message_arena, movetolocation, submessage_arena);
    }
    set_has_movetolocation();
    _impl_.value_.movetolocation_ = movetolocation;
  }
  // @@protoc_insertion_point(field_set_allocated:cfg.AiTask.MoveToLocation)
}
void AiTask::set_allocated_debugprint(::cfg::AiDebugPrint* debugprint) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (debugprint) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(debugprint);
    if (message_arena != submessage_arena) {
      debugprint = ::google::protobuf::internal::GetOwnedMessage(message_arena, debugprint, submessage_arena);
    }
    set_has_debugprint();
    _impl_.value_.debugprint_ = debugprint;
  }
  // @@protoc_insertion_point(field_set_allocated:cfg.AiTask.DebugPrint)
}
AiTask::AiTask(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.AiTask)
}
AiTask::AiTask(const AiTask& from) : ::google::protobuf::Message() {
  AiTask* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_._oneof_case_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kUeWait: {
      _this->_internal_mutable_uewait()->::cfg::AiUeWait::MergeFrom(
          from._internal_uewait());
      break;
    }
    case kUeWaitBlackboardTime: {
      _this->_internal_mutable_uewaitblackboardtime()->::cfg::AiUeWaitBlackboardTime::MergeFrom(
          from._internal_uewaitblackboardtime());
      break;
    }
    case kMoveToTarget: {
      _this->_internal_mutable_movetotarget()->::cfg::AiMoveToTarget::MergeFrom(
          from._internal_movetotarget());
      break;
    }
    case kChooseSkill: {
      _this->_internal_mutable_chooseskill()->::cfg::AiChooseSkill::MergeFrom(
          from._internal_chooseskill());
      break;
    }
    case kMoveToRandomLocation: {
      _this->_internal_mutable_movetorandomlocation()->::cfg::AiMoveToRandomLocation::MergeFrom(
          from._internal_movetorandomlocation());
      break;
    }
    case kMoveToLocation: {
      _this->_internal_mutable_movetolocation()->::cfg::AiMoveToLocation::MergeFrom(
          from._internal_movetolocation());
      break;
    }
    case kDebugPrint: {
      _this->_internal_mutable_debugprint()->::cfg::AiDebugPrint::MergeFrom(
          from._internal_debugprint());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }

  // @@protoc_insertion_point(copy_constructor:cfg.AiTask)
}
inline void AiTask::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_._oneof_case_)*/ {},
  };
  clear_has_value();
}
AiTask::~AiTask() {
  // @@protoc_insertion_point(destructor:cfg.AiTask)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AiTask::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_value()) {
    clear_value();
  }
}
void AiTask::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AiTask::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:cfg.AiTask)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  switch (value_case()) {
    case kUeWait: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.uewait_;
      }
      break;
    }
    case kUeWaitBlackboardTime: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.uewaitblackboardtime_;
      }
      break;
    }
    case kMoveToTarget: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.movetotarget_;
      }
      break;
    }
    case kChooseSkill: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.chooseskill_;
      }
      break;
    }
    case kMoveToRandomLocation: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.movetorandomlocation_;
      }
      break;
    }
    case kMoveToLocation: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.movetolocation_;
      }
      break;
    }
    case kDebugPrint: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.debugprint_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}


PROTOBUF_NOINLINE void AiTask::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.AiTask)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AiTask::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 7, 7, 0, 2> AiTask::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    23, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4286644223,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    7,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AiTask_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .cfg.AiUeWait UeWait = 17;
    {PROTOBUF_FIELD_OFFSET(AiTask, _impl_.value_.uewait_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cfg.AiUeWaitBlackboardTime UeWaitBlackboardTime = 18;
    {PROTOBUF_FIELD_OFFSET(AiTask, _impl_.value_.uewaitblackboardtime_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cfg.AiMoveToTarget MoveToTarget = 19;
    {PROTOBUF_FIELD_OFFSET(AiTask, _impl_.value_.movetotarget_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cfg.AiChooseSkill ChooseSkill = 20;
    {PROTOBUF_FIELD_OFFSET(AiTask, _impl_.value_.chooseskill_), _Internal::kOneofCaseOffset + 0, 3,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cfg.AiMoveToRandomLocation MoveToRandomLocation = 21;
    {PROTOBUF_FIELD_OFFSET(AiTask, _impl_.value_.movetorandomlocation_), _Internal::kOneofCaseOffset + 0, 4,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cfg.AiMoveToLocation MoveToLocation = 22;
    {PROTOBUF_FIELD_OFFSET(AiTask, _impl_.value_.movetolocation_), _Internal::kOneofCaseOffset + 0, 5,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cfg.AiDebugPrint DebugPrint = 23;
    {PROTOBUF_FIELD_OFFSET(AiTask, _impl_.value_.debugprint_), _Internal::kOneofCaseOffset + 0, 6,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::AiUeWait>()},
    {::_pbi::TcParser::GetTable<::cfg::AiUeWaitBlackboardTime>()},
    {::_pbi::TcParser::GetTable<::cfg::AiMoveToTarget>()},
    {::_pbi::TcParser::GetTable<::cfg::AiChooseSkill>()},
    {::_pbi::TcParser::GetTable<::cfg::AiMoveToRandomLocation>()},
    {::_pbi::TcParser::GetTable<::cfg::AiMoveToLocation>()},
    {::_pbi::TcParser::GetTable<::cfg::AiDebugPrint>()},
  }}, {{
  }},
};

::uint8_t* AiTask::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.AiTask)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  switch (value_case()) {
    case kUeWait: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(17, _Internal::uewait(this),
          _Internal::uewait(this).GetCachedSize(), target, stream);
      break;
    }
    case kUeWaitBlackboardTime: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(18, _Internal::uewaitblackboardtime(this),
          _Internal::uewaitblackboardtime(this).GetCachedSize(), target, stream);
      break;
    }
    case kMoveToTarget: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(19, _Internal::movetotarget(this),
          _Internal::movetotarget(this).GetCachedSize(), target, stream);
      break;
    }
    case kChooseSkill: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(20, _Internal::chooseskill(this),
          _Internal::chooseskill(this).GetCachedSize(), target, stream);
      break;
    }
    case kMoveToRandomLocation: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(21, _Internal::movetorandomlocation(this),
          _Internal::movetorandomlocation(this).GetCachedSize(), target, stream);
      break;
    }
    case kMoveToLocation: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(22, _Internal::movetolocation(this),
          _Internal::movetolocation(this).GetCachedSize(), target, stream);
      break;
    }
    case kDebugPrint: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(23, _Internal::debugprint(this),
          _Internal::debugprint(this).GetCachedSize(), target, stream);
      break;
    }
    default:
      break;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.AiTask)
  return target;
}

::size_t AiTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.AiTask)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_case()) {
    // .cfg.AiUeWait UeWait = 17;
    case kUeWait: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.value_.uewait_);
      break;
    }
    // .cfg.AiUeWaitBlackboardTime UeWaitBlackboardTime = 18;
    case kUeWaitBlackboardTime: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.value_.uewaitblackboardtime_);
      break;
    }
    // .cfg.AiMoveToTarget MoveToTarget = 19;
    case kMoveToTarget: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.value_.movetotarget_);
      break;
    }
    // .cfg.AiChooseSkill ChooseSkill = 20;
    case kChooseSkill: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.value_.chooseskill_);
      break;
    }
    // .cfg.AiMoveToRandomLocation MoveToRandomLocation = 21;
    case kMoveToRandomLocation: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.value_.movetorandomlocation_);
      break;
    }
    // .cfg.AiMoveToLocation MoveToLocation = 22;
    case kMoveToLocation: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.value_.movetolocation_);
      break;
    }
    // .cfg.AiDebugPrint DebugPrint = 23;
    case kDebugPrint: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.value_.debugprint_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AiTask::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    AiTask::MergeImpl
};
const ::google::protobuf::Message::ClassData*AiTask::GetClassData() const { return &_class_data_; }


void AiTask::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AiTask*>(&to_msg);
  auto& from = static_cast<const AiTask&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.AiTask)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kUeWait: {
      _this->_internal_mutable_uewait()->::cfg::AiUeWait::MergeFrom(
          from._internal_uewait());
      break;
    }
    case kUeWaitBlackboardTime: {
      _this->_internal_mutable_uewaitblackboardtime()->::cfg::AiUeWaitBlackboardTime::MergeFrom(
          from._internal_uewaitblackboardtime());
      break;
    }
    case kMoveToTarget: {
      _this->_internal_mutable_movetotarget()->::cfg::AiMoveToTarget::MergeFrom(
          from._internal_movetotarget());
      break;
    }
    case kChooseSkill: {
      _this->_internal_mutable_chooseskill()->::cfg::AiChooseSkill::MergeFrom(
          from._internal_chooseskill());
      break;
    }
    case kMoveToRandomLocation: {
      _this->_internal_mutable_movetorandomlocation()->::cfg::AiMoveToRandomLocation::MergeFrom(
          from._internal_movetorandomlocation());
      break;
    }
    case kMoveToLocation: {
      _this->_internal_mutable_movetolocation()->::cfg::AiMoveToLocation::MergeFrom(
          from._internal_movetolocation());
      break;
    }
    case kDebugPrint: {
      _this->_internal_mutable_debugprint()->::cfg::AiDebugPrint::MergeFrom(
          from._internal_debugprint());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AiTask::CopyFrom(const AiTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.AiTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AiTask::IsInitialized() const {
  return true;
}

void AiTask::InternalSwap(AiTask* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.value_, other->_impl_.value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata AiTask::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[33]);
}
// ===================================================================

class AiUeWait::_Internal {
 public:
};

AiUeWait::AiUeWait(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.AiUeWait)
}
AiUeWait::AiUeWait(const AiUeWait& from) : ::google::protobuf::Message() {
  AiUeWait* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.decorators_){from._impl_.decorators_},
      decltype(_impl_.services_){from._impl_.services_},
      decltype(_impl_.node_name_){},
      decltype(_impl_.id_){},
      decltype(_impl_.ignore_restart_self_){},
      decltype(_impl_.wait_time_){},
      decltype(_impl_.random_deviation_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.node_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.node_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_node_name().empty()) {
    _this->_impl_.node_name_.Set(from._internal_node_name(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.random_deviation_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.random_deviation_));

  // @@protoc_insertion_point(copy_constructor:cfg.AiUeWait)
}
inline void AiUeWait::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.decorators_){arena},
      decltype(_impl_.services_){arena},
      decltype(_impl_.node_name_){},
      decltype(_impl_.id_){0},
      decltype(_impl_.ignore_restart_self_){false},
      decltype(_impl_.wait_time_){0},
      decltype(_impl_.random_deviation_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.node_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.node_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
AiUeWait::~AiUeWait() {
  // @@protoc_insertion_point(destructor:cfg.AiUeWait)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AiUeWait::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.decorators_.~RepeatedPtrField();
  _impl_.services_.~RepeatedPtrField();
  _impl_.node_name_.Destroy();
}
void AiUeWait::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void AiUeWait::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.AiUeWait)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.decorators_.Clear();
  _impl_.services_.Clear();
  _impl_.node_name_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.random_deviation_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.random_deviation_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AiUeWait::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 2, 30, 2> AiUeWait::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AiUeWait_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AiUeWait, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(AiUeWait, _impl_.id_)}},
    // string node_name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(AiUeWait, _impl_.node_name_)}},
    // repeated .cfg.AiDecorator decorators = 3 [packed = false];
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(AiUeWait, _impl_.decorators_)}},
    // repeated .cfg.AiService services = 4 [packed = false];
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 1, PROTOBUF_FIELD_OFFSET(AiUeWait, _impl_.services_)}},
    // bool ignore_restart_self = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AiUeWait, _impl_.ignore_restart_self_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(AiUeWait, _impl_.ignore_restart_self_)}},
    // float wait_time = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 63, 0, PROTOBUF_FIELD_OFFSET(AiUeWait, _impl_.wait_time_)}},
    // float random_deviation = 7;
    {::_pbi::TcParser::FastF32S1,
     {61, 63, 0, PROTOBUF_FIELD_OFFSET(AiUeWait, _impl_.random_deviation_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(AiUeWait, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string node_name = 2;
    {PROTOBUF_FIELD_OFFSET(AiUeWait, _impl_.node_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .cfg.AiDecorator decorators = 3 [packed = false];
    {PROTOBUF_FIELD_OFFSET(AiUeWait, _impl_.decorators_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .cfg.AiService services = 4 [packed = false];
    {PROTOBUF_FIELD_OFFSET(AiUeWait, _impl_.services_), 0, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool ignore_restart_self = 5;
    {PROTOBUF_FIELD_OFFSET(AiUeWait, _impl_.ignore_restart_self_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // float wait_time = 6;
    {PROTOBUF_FIELD_OFFSET(AiUeWait, _impl_.wait_time_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float random_deviation = 7;
    {PROTOBUF_FIELD_OFFSET(AiUeWait, _impl_.random_deviation_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::AiDecorator>()},
    {::_pbi::TcParser::GetTable<::cfg::AiService>()},
  }}, {{
    "\14\0\11\0\0\0\0\0"
    "cfg.AiUeWait"
    "node_name"
  }},
};

::uint8_t* AiUeWait::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.AiUeWait)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // string node_name = 2;
  if (!this->_internal_node_name().empty()) {
    const std::string& _s = this->_internal_node_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.AiUeWait.node_name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // repeated .cfg.AiDecorator decorators = 3 [packed = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_decorators_size()); i < n; i++) {
    const auto& repfield = this->_internal_decorators().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cfg.AiService services = 4 [packed = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_services_size()); i < n; i++) {
    const auto& repfield = this->_internal_services().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool ignore_restart_self = 5;
  if (this->_internal_ignore_restart_self() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_ignore_restart_self(), target);
  }

  // float wait_time = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_wait_time = this->_internal_wait_time();
  ::uint32_t raw_wait_time;
  memcpy(&raw_wait_time, &tmp_wait_time, sizeof(tmp_wait_time));
  if (raw_wait_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        6, this->_internal_wait_time(), target);
  }

  // float random_deviation = 7;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_random_deviation = this->_internal_random_deviation();
  ::uint32_t raw_random_deviation;
  memcpy(&raw_random_deviation, &tmp_random_deviation, sizeof(tmp_random_deviation));
  if (raw_random_deviation != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        7, this->_internal_random_deviation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.AiUeWait)
  return target;
}

::size_t AiUeWait::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.AiUeWait)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cfg.AiDecorator decorators = 3 [packed = false];
  total_size += 1UL * this->_internal_decorators_size();
  for (const auto& msg : this->_internal_decorators()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .cfg.AiService services = 4 [packed = false];
  total_size += 1UL * this->_internal_services_size();
  for (const auto& msg : this->_internal_services()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string node_name = 2;
  if (!this->_internal_node_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_node_name());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  // bool ignore_restart_self = 5;
  if (this->_internal_ignore_restart_self() != 0) {
    total_size += 2;
  }

  // float wait_time = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_wait_time = this->_internal_wait_time();
  ::uint32_t raw_wait_time;
  memcpy(&raw_wait_time, &tmp_wait_time, sizeof(tmp_wait_time));
  if (raw_wait_time != 0) {
    total_size += 5;
  }

  // float random_deviation = 7;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_random_deviation = this->_internal_random_deviation();
  ::uint32_t raw_random_deviation;
  memcpy(&raw_random_deviation, &tmp_random_deviation, sizeof(tmp_random_deviation));
  if (raw_random_deviation != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AiUeWait::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    AiUeWait::MergeImpl
};
const ::google::protobuf::Message::ClassData*AiUeWait::GetClassData() const { return &_class_data_; }


void AiUeWait::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AiUeWait*>(&to_msg);
  auto& from = static_cast<const AiUeWait&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.AiUeWait)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_decorators()->MergeFrom(
      from._internal_decorators());
  _this->_internal_mutable_services()->MergeFrom(
      from._internal_services());
  if (!from._internal_node_name().empty()) {
    _this->_internal_set_node_name(from._internal_node_name());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_ignore_restart_self() != 0) {
    _this->_internal_set_ignore_restart_self(from._internal_ignore_restart_self());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_wait_time = from._internal_wait_time();
  ::uint32_t raw_wait_time;
  memcpy(&raw_wait_time, &tmp_wait_time, sizeof(tmp_wait_time));
  if (raw_wait_time != 0) {
    _this->_internal_set_wait_time(from._internal_wait_time());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_random_deviation = from._internal_random_deviation();
  ::uint32_t raw_random_deviation;
  memcpy(&raw_random_deviation, &tmp_random_deviation, sizeof(tmp_random_deviation));
  if (raw_random_deviation != 0) {
    _this->_internal_set_random_deviation(from._internal_random_deviation());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AiUeWait::CopyFrom(const AiUeWait& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.AiUeWait)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AiUeWait::IsInitialized() const {
  return true;
}

void AiUeWait::InternalSwap(AiUeWait* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.decorators_.InternalSwap(&other->_impl_.decorators_);
  _impl_.services_.InternalSwap(&other->_impl_.services_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.node_name_, lhs_arena,
                                       &other->_impl_.node_name_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AiUeWait, _impl_.random_deviation_)
      + sizeof(AiUeWait::_impl_.random_deviation_)
      - PROTOBUF_FIELD_OFFSET(AiUeWait, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::google::protobuf::Metadata AiUeWait::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[34]);
}
// ===================================================================

class AiUeWaitBlackboardTime::_Internal {
 public:
};

AiUeWaitBlackboardTime::AiUeWaitBlackboardTime(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.AiUeWaitBlackboardTime)
}
AiUeWaitBlackboardTime::AiUeWaitBlackboardTime(const AiUeWaitBlackboardTime& from) : ::google::protobuf::Message() {
  AiUeWaitBlackboardTime* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.decorators_){from._impl_.decorators_},
      decltype(_impl_.services_){from._impl_.services_},
      decltype(_impl_.node_name_){},
      decltype(_impl_.blackboard_key_){},
      decltype(_impl_.id_){},
      decltype(_impl_.ignore_restart_self_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.node_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.node_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_node_name().empty()) {
    _this->_impl_.node_name_.Set(from._internal_node_name(), _this->GetArenaForAllocation());
  }
  _impl_.blackboard_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.blackboard_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_blackboard_key().empty()) {
    _this->_impl_.blackboard_key_.Set(from._internal_blackboard_key(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.ignore_restart_self_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.ignore_restart_self_));

  // @@protoc_insertion_point(copy_constructor:cfg.AiUeWaitBlackboardTime)
}
inline void AiUeWaitBlackboardTime::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.decorators_){arena},
      decltype(_impl_.services_){arena},
      decltype(_impl_.node_name_){},
      decltype(_impl_.blackboard_key_){},
      decltype(_impl_.id_){0},
      decltype(_impl_.ignore_restart_self_){false},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.node_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.node_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.blackboard_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.blackboard_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
AiUeWaitBlackboardTime::~AiUeWaitBlackboardTime() {
  // @@protoc_insertion_point(destructor:cfg.AiUeWaitBlackboardTime)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AiUeWaitBlackboardTime::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.decorators_.~RepeatedPtrField();
  _impl_.services_.~RepeatedPtrField();
  _impl_.node_name_.Destroy();
  _impl_.blackboard_key_.Destroy();
}
void AiUeWaitBlackboardTime::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void AiUeWaitBlackboardTime::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.AiUeWaitBlackboardTime)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.decorators_.Clear();
  _impl_.services_.Clear();
  _impl_.node_name_.ClearToEmpty();
  _impl_.blackboard_key_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.ignore_restart_self_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.ignore_restart_self_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AiUeWaitBlackboardTime::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 2, 58, 2> AiUeWaitBlackboardTime::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AiUeWaitBlackboardTime_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AiUeWaitBlackboardTime, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(AiUeWaitBlackboardTime, _impl_.id_)}},
    // string node_name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(AiUeWaitBlackboardTime, _impl_.node_name_)}},
    // repeated .cfg.AiDecorator decorators = 3 [packed = false];
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(AiUeWaitBlackboardTime, _impl_.decorators_)}},
    // repeated .cfg.AiService services = 4 [packed = false];
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 1, PROTOBUF_FIELD_OFFSET(AiUeWaitBlackboardTime, _impl_.services_)}},
    // bool ignore_restart_self = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AiUeWaitBlackboardTime, _impl_.ignore_restart_self_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(AiUeWaitBlackboardTime, _impl_.ignore_restart_self_)}},
    // string blackboard_key = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(AiUeWaitBlackboardTime, _impl_.blackboard_key_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(AiUeWaitBlackboardTime, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string node_name = 2;
    {PROTOBUF_FIELD_OFFSET(AiUeWaitBlackboardTime, _impl_.node_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .cfg.AiDecorator decorators = 3 [packed = false];
    {PROTOBUF_FIELD_OFFSET(AiUeWaitBlackboardTime, _impl_.decorators_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .cfg.AiService services = 4 [packed = false];
    {PROTOBUF_FIELD_OFFSET(AiUeWaitBlackboardTime, _impl_.services_), 0, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool ignore_restart_self = 5;
    {PROTOBUF_FIELD_OFFSET(AiUeWaitBlackboardTime, _impl_.ignore_restart_self_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string blackboard_key = 6;
    {PROTOBUF_FIELD_OFFSET(AiUeWaitBlackboardTime, _impl_.blackboard_key_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::AiDecorator>()},
    {::_pbi::TcParser::GetTable<::cfg::AiService>()},
  }}, {{
    "\32\0\11\0\0\0\16\0"
    "cfg.AiUeWaitBlackboardTime"
    "node_name"
    "blackboard_key"
  }},
};

::uint8_t* AiUeWaitBlackboardTime::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.AiUeWaitBlackboardTime)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // string node_name = 2;
  if (!this->_internal_node_name().empty()) {
    const std::string& _s = this->_internal_node_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.AiUeWaitBlackboardTime.node_name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // repeated .cfg.AiDecorator decorators = 3 [packed = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_decorators_size()); i < n; i++) {
    const auto& repfield = this->_internal_decorators().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cfg.AiService services = 4 [packed = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_services_size()); i < n; i++) {
    const auto& repfield = this->_internal_services().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool ignore_restart_self = 5;
  if (this->_internal_ignore_restart_self() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_ignore_restart_self(), target);
  }

  // string blackboard_key = 6;
  if (!this->_internal_blackboard_key().empty()) {
    const std::string& _s = this->_internal_blackboard_key();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.AiUeWaitBlackboardTime.blackboard_key");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.AiUeWaitBlackboardTime)
  return target;
}

::size_t AiUeWaitBlackboardTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.AiUeWaitBlackboardTime)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cfg.AiDecorator decorators = 3 [packed = false];
  total_size += 1UL * this->_internal_decorators_size();
  for (const auto& msg : this->_internal_decorators()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .cfg.AiService services = 4 [packed = false];
  total_size += 1UL * this->_internal_services_size();
  for (const auto& msg : this->_internal_services()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string node_name = 2;
  if (!this->_internal_node_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_node_name());
  }

  // string blackboard_key = 6;
  if (!this->_internal_blackboard_key().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_blackboard_key());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  // bool ignore_restart_self = 5;
  if (this->_internal_ignore_restart_self() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AiUeWaitBlackboardTime::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    AiUeWaitBlackboardTime::MergeImpl
};
const ::google::protobuf::Message::ClassData*AiUeWaitBlackboardTime::GetClassData() const { return &_class_data_; }


void AiUeWaitBlackboardTime::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AiUeWaitBlackboardTime*>(&to_msg);
  auto& from = static_cast<const AiUeWaitBlackboardTime&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.AiUeWaitBlackboardTime)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_decorators()->MergeFrom(
      from._internal_decorators());
  _this->_internal_mutable_services()->MergeFrom(
      from._internal_services());
  if (!from._internal_node_name().empty()) {
    _this->_internal_set_node_name(from._internal_node_name());
  }
  if (!from._internal_blackboard_key().empty()) {
    _this->_internal_set_blackboard_key(from._internal_blackboard_key());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_ignore_restart_self() != 0) {
    _this->_internal_set_ignore_restart_self(from._internal_ignore_restart_self());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AiUeWaitBlackboardTime::CopyFrom(const AiUeWaitBlackboardTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.AiUeWaitBlackboardTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AiUeWaitBlackboardTime::IsInitialized() const {
  return true;
}

void AiUeWaitBlackboardTime::InternalSwap(AiUeWaitBlackboardTime* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.decorators_.InternalSwap(&other->_impl_.decorators_);
  _impl_.services_.InternalSwap(&other->_impl_.services_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.node_name_, lhs_arena,
                                       &other->_impl_.node_name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.blackboard_key_, lhs_arena,
                                       &other->_impl_.blackboard_key_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AiUeWaitBlackboardTime, _impl_.ignore_restart_self_)
      + sizeof(AiUeWaitBlackboardTime::_impl_.ignore_restart_self_)
      - PROTOBUF_FIELD_OFFSET(AiUeWaitBlackboardTime, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::google::protobuf::Metadata AiUeWaitBlackboardTime::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[35]);
}
// ===================================================================

class AiMoveToTarget::_Internal {
 public:
};

AiMoveToTarget::AiMoveToTarget(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.AiMoveToTarget)
}
AiMoveToTarget::AiMoveToTarget(const AiMoveToTarget& from) : ::google::protobuf::Message() {
  AiMoveToTarget* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.decorators_){from._impl_.decorators_},
      decltype(_impl_.services_){from._impl_.services_},
      decltype(_impl_.node_name_){},
      decltype(_impl_.target_actor_key_){},
      decltype(_impl_.id_){},
      decltype(_impl_.ignore_restart_self_){},
      decltype(_impl_.acceptable_radius_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.node_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.node_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_node_name().empty()) {
    _this->_impl_.node_name_.Set(from._internal_node_name(), _this->GetArenaForAllocation());
  }
  _impl_.target_actor_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.target_actor_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_target_actor_key().empty()) {
    _this->_impl_.target_actor_key_.Set(from._internal_target_actor_key(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.acceptable_radius_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.acceptable_radius_));

  // @@protoc_insertion_point(copy_constructor:cfg.AiMoveToTarget)
}
inline void AiMoveToTarget::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.decorators_){arena},
      decltype(_impl_.services_){arena},
      decltype(_impl_.node_name_){},
      decltype(_impl_.target_actor_key_){},
      decltype(_impl_.id_){0},
      decltype(_impl_.ignore_restart_self_){false},
      decltype(_impl_.acceptable_radius_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.node_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.node_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.target_actor_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.target_actor_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
AiMoveToTarget::~AiMoveToTarget() {
  // @@protoc_insertion_point(destructor:cfg.AiMoveToTarget)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AiMoveToTarget::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.decorators_.~RepeatedPtrField();
  _impl_.services_.~RepeatedPtrField();
  _impl_.node_name_.Destroy();
  _impl_.target_actor_key_.Destroy();
}
void AiMoveToTarget::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void AiMoveToTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.AiMoveToTarget)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.decorators_.Clear();
  _impl_.services_.Clear();
  _impl_.node_name_.ClearToEmpty();
  _impl_.target_actor_key_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.acceptable_radius_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.acceptable_radius_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AiMoveToTarget::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 2, 52, 2> AiMoveToTarget::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AiMoveToTarget_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AiMoveToTarget, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(AiMoveToTarget, _impl_.id_)}},
    // string node_name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(AiMoveToTarget, _impl_.node_name_)}},
    // repeated .cfg.AiDecorator decorators = 3 [packed = false];
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(AiMoveToTarget, _impl_.decorators_)}},
    // repeated .cfg.AiService services = 4 [packed = false];
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 1, PROTOBUF_FIELD_OFFSET(AiMoveToTarget, _impl_.services_)}},
    // bool ignore_restart_self = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AiMoveToTarget, _impl_.ignore_restart_self_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(AiMoveToTarget, _impl_.ignore_restart_self_)}},
    // string target_actor_key = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(AiMoveToTarget, _impl_.target_actor_key_)}},
    // float acceptable_radius = 7;
    {::_pbi::TcParser::FastF32S1,
     {61, 63, 0, PROTOBUF_FIELD_OFFSET(AiMoveToTarget, _impl_.acceptable_radius_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(AiMoveToTarget, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string node_name = 2;
    {PROTOBUF_FIELD_OFFSET(AiMoveToTarget, _impl_.node_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .cfg.AiDecorator decorators = 3 [packed = false];
    {PROTOBUF_FIELD_OFFSET(AiMoveToTarget, _impl_.decorators_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .cfg.AiService services = 4 [packed = false];
    {PROTOBUF_FIELD_OFFSET(AiMoveToTarget, _impl_.services_), 0, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool ignore_restart_self = 5;
    {PROTOBUF_FIELD_OFFSET(AiMoveToTarget, _impl_.ignore_restart_self_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string target_actor_key = 6;
    {PROTOBUF_FIELD_OFFSET(AiMoveToTarget, _impl_.target_actor_key_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // float acceptable_radius = 7;
    {PROTOBUF_FIELD_OFFSET(AiMoveToTarget, _impl_.acceptable_radius_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::AiDecorator>()},
    {::_pbi::TcParser::GetTable<::cfg::AiService>()},
  }}, {{
    "\22\0\11\0\0\0\20\0"
    "cfg.AiMoveToTarget"
    "node_name"
    "target_actor_key"
  }},
};

::uint8_t* AiMoveToTarget::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.AiMoveToTarget)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // string node_name = 2;
  if (!this->_internal_node_name().empty()) {
    const std::string& _s = this->_internal_node_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.AiMoveToTarget.node_name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // repeated .cfg.AiDecorator decorators = 3 [packed = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_decorators_size()); i < n; i++) {
    const auto& repfield = this->_internal_decorators().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cfg.AiService services = 4 [packed = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_services_size()); i < n; i++) {
    const auto& repfield = this->_internal_services().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool ignore_restart_self = 5;
  if (this->_internal_ignore_restart_self() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_ignore_restart_self(), target);
  }

  // string target_actor_key = 6;
  if (!this->_internal_target_actor_key().empty()) {
    const std::string& _s = this->_internal_target_actor_key();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.AiMoveToTarget.target_actor_key");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // float acceptable_radius = 7;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_acceptable_radius = this->_internal_acceptable_radius();
  ::uint32_t raw_acceptable_radius;
  memcpy(&raw_acceptable_radius, &tmp_acceptable_radius, sizeof(tmp_acceptable_radius));
  if (raw_acceptable_radius != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        7, this->_internal_acceptable_radius(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.AiMoveToTarget)
  return target;
}

::size_t AiMoveToTarget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.AiMoveToTarget)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cfg.AiDecorator decorators = 3 [packed = false];
  total_size += 1UL * this->_internal_decorators_size();
  for (const auto& msg : this->_internal_decorators()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .cfg.AiService services = 4 [packed = false];
  total_size += 1UL * this->_internal_services_size();
  for (const auto& msg : this->_internal_services()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string node_name = 2;
  if (!this->_internal_node_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_node_name());
  }

  // string target_actor_key = 6;
  if (!this->_internal_target_actor_key().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_target_actor_key());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  // bool ignore_restart_self = 5;
  if (this->_internal_ignore_restart_self() != 0) {
    total_size += 2;
  }

  // float acceptable_radius = 7;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_acceptable_radius = this->_internal_acceptable_radius();
  ::uint32_t raw_acceptable_radius;
  memcpy(&raw_acceptable_radius, &tmp_acceptable_radius, sizeof(tmp_acceptable_radius));
  if (raw_acceptable_radius != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AiMoveToTarget::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    AiMoveToTarget::MergeImpl
};
const ::google::protobuf::Message::ClassData*AiMoveToTarget::GetClassData() const { return &_class_data_; }


void AiMoveToTarget::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AiMoveToTarget*>(&to_msg);
  auto& from = static_cast<const AiMoveToTarget&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.AiMoveToTarget)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_decorators()->MergeFrom(
      from._internal_decorators());
  _this->_internal_mutable_services()->MergeFrom(
      from._internal_services());
  if (!from._internal_node_name().empty()) {
    _this->_internal_set_node_name(from._internal_node_name());
  }
  if (!from._internal_target_actor_key().empty()) {
    _this->_internal_set_target_actor_key(from._internal_target_actor_key());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_ignore_restart_self() != 0) {
    _this->_internal_set_ignore_restart_self(from._internal_ignore_restart_self());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_acceptable_radius = from._internal_acceptable_radius();
  ::uint32_t raw_acceptable_radius;
  memcpy(&raw_acceptable_radius, &tmp_acceptable_radius, sizeof(tmp_acceptable_radius));
  if (raw_acceptable_radius != 0) {
    _this->_internal_set_acceptable_radius(from._internal_acceptable_radius());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AiMoveToTarget::CopyFrom(const AiMoveToTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.AiMoveToTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AiMoveToTarget::IsInitialized() const {
  return true;
}

void AiMoveToTarget::InternalSwap(AiMoveToTarget* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.decorators_.InternalSwap(&other->_impl_.decorators_);
  _impl_.services_.InternalSwap(&other->_impl_.services_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.node_name_, lhs_arena,
                                       &other->_impl_.node_name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.target_actor_key_, lhs_arena,
                                       &other->_impl_.target_actor_key_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AiMoveToTarget, _impl_.acceptable_radius_)
      + sizeof(AiMoveToTarget::_impl_.acceptable_radius_)
      - PROTOBUF_FIELD_OFFSET(AiMoveToTarget, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::google::protobuf::Metadata AiMoveToTarget::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[36]);
}
// ===================================================================

class AiChooseSkill::_Internal {
 public:
};

AiChooseSkill::AiChooseSkill(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.AiChooseSkill)
}
AiChooseSkill::AiChooseSkill(const AiChooseSkill& from) : ::google::protobuf::Message() {
  AiChooseSkill* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.decorators_){from._impl_.decorators_},
      decltype(_impl_.services_){from._impl_.services_},
      decltype(_impl_.node_name_){},
      decltype(_impl_.target_actor_key_){},
      decltype(_impl_.result_skill_id_key_){},
      decltype(_impl_.id_){},
      decltype(_impl_.ignore_restart_self_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.node_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.node_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_node_name().empty()) {
    _this->_impl_.node_name_.Set(from._internal_node_name(), _this->GetArenaForAllocation());
  }
  _impl_.target_actor_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.target_actor_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_target_actor_key().empty()) {
    _this->_impl_.target_actor_key_.Set(from._internal_target_actor_key(), _this->GetArenaForAllocation());
  }
  _impl_.result_skill_id_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.result_skill_id_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_result_skill_id_key().empty()) {
    _this->_impl_.result_skill_id_key_.Set(from._internal_result_skill_id_key(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.ignore_restart_self_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.ignore_restart_self_));

  // @@protoc_insertion_point(copy_constructor:cfg.AiChooseSkill)
}
inline void AiChooseSkill::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.decorators_){arena},
      decltype(_impl_.services_){arena},
      decltype(_impl_.node_name_){},
      decltype(_impl_.target_actor_key_){},
      decltype(_impl_.result_skill_id_key_){},
      decltype(_impl_.id_){0},
      decltype(_impl_.ignore_restart_self_){false},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.node_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.node_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.target_actor_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.target_actor_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.result_skill_id_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.result_skill_id_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
AiChooseSkill::~AiChooseSkill() {
  // @@protoc_insertion_point(destructor:cfg.AiChooseSkill)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AiChooseSkill::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.decorators_.~RepeatedPtrField();
  _impl_.services_.~RepeatedPtrField();
  _impl_.node_name_.Destroy();
  _impl_.target_actor_key_.Destroy();
  _impl_.result_skill_id_key_.Destroy();
}
void AiChooseSkill::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void AiChooseSkill::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.AiChooseSkill)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.decorators_.Clear();
  _impl_.services_.Clear();
  _impl_.node_name_.ClearToEmpty();
  _impl_.target_actor_key_.ClearToEmpty();
  _impl_.result_skill_id_key_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.ignore_restart_self_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.ignore_restart_self_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AiChooseSkill::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 2, 70, 2> AiChooseSkill::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AiChooseSkill_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AiChooseSkill, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(AiChooseSkill, _impl_.id_)}},
    // string node_name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(AiChooseSkill, _impl_.node_name_)}},
    // repeated .cfg.AiDecorator decorators = 3 [packed = false];
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(AiChooseSkill, _impl_.decorators_)}},
    // repeated .cfg.AiService services = 4 [packed = false];
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 1, PROTOBUF_FIELD_OFFSET(AiChooseSkill, _impl_.services_)}},
    // bool ignore_restart_self = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AiChooseSkill, _impl_.ignore_restart_self_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(AiChooseSkill, _impl_.ignore_restart_self_)}},
    // string target_actor_key = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(AiChooseSkill, _impl_.target_actor_key_)}},
    // string result_skill_id_key = 7;
    {::_pbi::TcParser::FastUS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(AiChooseSkill, _impl_.result_skill_id_key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(AiChooseSkill, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string node_name = 2;
    {PROTOBUF_FIELD_OFFSET(AiChooseSkill, _impl_.node_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .cfg.AiDecorator decorators = 3 [packed = false];
    {PROTOBUF_FIELD_OFFSET(AiChooseSkill, _impl_.decorators_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .cfg.AiService services = 4 [packed = false];
    {PROTOBUF_FIELD_OFFSET(AiChooseSkill, _impl_.services_), 0, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool ignore_restart_self = 5;
    {PROTOBUF_FIELD_OFFSET(AiChooseSkill, _impl_.ignore_restart_self_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string target_actor_key = 6;
    {PROTOBUF_FIELD_OFFSET(AiChooseSkill, _impl_.target_actor_key_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string result_skill_id_key = 7;
    {PROTOBUF_FIELD_OFFSET(AiChooseSkill, _impl_.result_skill_id_key_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::AiDecorator>()},
    {::_pbi::TcParser::GetTable<::cfg::AiService>()},
  }}, {{
    "\21\0\11\0\0\0\20\23"
    "cfg.AiChooseSkill"
    "node_name"
    "target_actor_key"
    "result_skill_id_key"
  }},
};

::uint8_t* AiChooseSkill::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.AiChooseSkill)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // string node_name = 2;
  if (!this->_internal_node_name().empty()) {
    const std::string& _s = this->_internal_node_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.AiChooseSkill.node_name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // repeated .cfg.AiDecorator decorators = 3 [packed = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_decorators_size()); i < n; i++) {
    const auto& repfield = this->_internal_decorators().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cfg.AiService services = 4 [packed = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_services_size()); i < n; i++) {
    const auto& repfield = this->_internal_services().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool ignore_restart_self = 5;
  if (this->_internal_ignore_restart_self() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_ignore_restart_self(), target);
  }

  // string target_actor_key = 6;
  if (!this->_internal_target_actor_key().empty()) {
    const std::string& _s = this->_internal_target_actor_key();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.AiChooseSkill.target_actor_key");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // string result_skill_id_key = 7;
  if (!this->_internal_result_skill_id_key().empty()) {
    const std::string& _s = this->_internal_result_skill_id_key();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.AiChooseSkill.result_skill_id_key");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.AiChooseSkill)
  return target;
}

::size_t AiChooseSkill::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.AiChooseSkill)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cfg.AiDecorator decorators = 3 [packed = false];
  total_size += 1UL * this->_internal_decorators_size();
  for (const auto& msg : this->_internal_decorators()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .cfg.AiService services = 4 [packed = false];
  total_size += 1UL * this->_internal_services_size();
  for (const auto& msg : this->_internal_services()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string node_name = 2;
  if (!this->_internal_node_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_node_name());
  }

  // string target_actor_key = 6;
  if (!this->_internal_target_actor_key().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_target_actor_key());
  }

  // string result_skill_id_key = 7;
  if (!this->_internal_result_skill_id_key().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_result_skill_id_key());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  // bool ignore_restart_self = 5;
  if (this->_internal_ignore_restart_self() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AiChooseSkill::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    AiChooseSkill::MergeImpl
};
const ::google::protobuf::Message::ClassData*AiChooseSkill::GetClassData() const { return &_class_data_; }


void AiChooseSkill::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AiChooseSkill*>(&to_msg);
  auto& from = static_cast<const AiChooseSkill&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.AiChooseSkill)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_decorators()->MergeFrom(
      from._internal_decorators());
  _this->_internal_mutable_services()->MergeFrom(
      from._internal_services());
  if (!from._internal_node_name().empty()) {
    _this->_internal_set_node_name(from._internal_node_name());
  }
  if (!from._internal_target_actor_key().empty()) {
    _this->_internal_set_target_actor_key(from._internal_target_actor_key());
  }
  if (!from._internal_result_skill_id_key().empty()) {
    _this->_internal_set_result_skill_id_key(from._internal_result_skill_id_key());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_ignore_restart_self() != 0) {
    _this->_internal_set_ignore_restart_self(from._internal_ignore_restart_self());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AiChooseSkill::CopyFrom(const AiChooseSkill& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.AiChooseSkill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AiChooseSkill::IsInitialized() const {
  return true;
}

void AiChooseSkill::InternalSwap(AiChooseSkill* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.decorators_.InternalSwap(&other->_impl_.decorators_);
  _impl_.services_.InternalSwap(&other->_impl_.services_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.node_name_, lhs_arena,
                                       &other->_impl_.node_name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.target_actor_key_, lhs_arena,
                                       &other->_impl_.target_actor_key_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.result_skill_id_key_, lhs_arena,
                                       &other->_impl_.result_skill_id_key_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AiChooseSkill, _impl_.ignore_restart_self_)
      + sizeof(AiChooseSkill::_impl_.ignore_restart_self_)
      - PROTOBUF_FIELD_OFFSET(AiChooseSkill, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::google::protobuf::Metadata AiChooseSkill::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[37]);
}
// ===================================================================

class AiMoveToRandomLocation::_Internal {
 public:
};

AiMoveToRandomLocation::AiMoveToRandomLocation(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.AiMoveToRandomLocation)
}
AiMoveToRandomLocation::AiMoveToRandomLocation(const AiMoveToRandomLocation& from) : ::google::protobuf::Message() {
  AiMoveToRandomLocation* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.decorators_){from._impl_.decorators_},
      decltype(_impl_.services_){from._impl_.services_},
      decltype(_impl_.node_name_){},
      decltype(_impl_.origin_position_key_){},
      decltype(_impl_.id_){},
      decltype(_impl_.ignore_restart_self_){},
      decltype(_impl_.radius_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.node_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.node_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_node_name().empty()) {
    _this->_impl_.node_name_.Set(from._internal_node_name(), _this->GetArenaForAllocation());
  }
  _impl_.origin_position_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.origin_position_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_origin_position_key().empty()) {
    _this->_impl_.origin_position_key_.Set(from._internal_origin_position_key(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.radius_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.radius_));

  // @@protoc_insertion_point(copy_constructor:cfg.AiMoveToRandomLocation)
}
inline void AiMoveToRandomLocation::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.decorators_){arena},
      decltype(_impl_.services_){arena},
      decltype(_impl_.node_name_){},
      decltype(_impl_.origin_position_key_){},
      decltype(_impl_.id_){0},
      decltype(_impl_.ignore_restart_self_){false},
      decltype(_impl_.radius_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.node_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.node_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.origin_position_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.origin_position_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
AiMoveToRandomLocation::~AiMoveToRandomLocation() {
  // @@protoc_insertion_point(destructor:cfg.AiMoveToRandomLocation)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AiMoveToRandomLocation::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.decorators_.~RepeatedPtrField();
  _impl_.services_.~RepeatedPtrField();
  _impl_.node_name_.Destroy();
  _impl_.origin_position_key_.Destroy();
}
void AiMoveToRandomLocation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void AiMoveToRandomLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.AiMoveToRandomLocation)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.decorators_.Clear();
  _impl_.services_.Clear();
  _impl_.node_name_.ClearToEmpty();
  _impl_.origin_position_key_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.radius_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.radius_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AiMoveToRandomLocation::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 2, 63, 2> AiMoveToRandomLocation::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AiMoveToRandomLocation_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AiMoveToRandomLocation, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(AiMoveToRandomLocation, _impl_.id_)}},
    // string node_name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(AiMoveToRandomLocation, _impl_.node_name_)}},
    // repeated .cfg.AiDecorator decorators = 3 [packed = false];
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(AiMoveToRandomLocation, _impl_.decorators_)}},
    // repeated .cfg.AiService services = 4 [packed = false];
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 1, PROTOBUF_FIELD_OFFSET(AiMoveToRandomLocation, _impl_.services_)}},
    // bool ignore_restart_self = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AiMoveToRandomLocation, _impl_.ignore_restart_self_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(AiMoveToRandomLocation, _impl_.ignore_restart_self_)}},
    // string origin_position_key = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(AiMoveToRandomLocation, _impl_.origin_position_key_)}},
    // float radius = 7;
    {::_pbi::TcParser::FastF32S1,
     {61, 63, 0, PROTOBUF_FIELD_OFFSET(AiMoveToRandomLocation, _impl_.radius_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(AiMoveToRandomLocation, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string node_name = 2;
    {PROTOBUF_FIELD_OFFSET(AiMoveToRandomLocation, _impl_.node_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .cfg.AiDecorator decorators = 3 [packed = false];
    {PROTOBUF_FIELD_OFFSET(AiMoveToRandomLocation, _impl_.decorators_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .cfg.AiService services = 4 [packed = false];
    {PROTOBUF_FIELD_OFFSET(AiMoveToRandomLocation, _impl_.services_), 0, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool ignore_restart_self = 5;
    {PROTOBUF_FIELD_OFFSET(AiMoveToRandomLocation, _impl_.ignore_restart_self_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string origin_position_key = 6;
    {PROTOBUF_FIELD_OFFSET(AiMoveToRandomLocation, _impl_.origin_position_key_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // float radius = 7;
    {PROTOBUF_FIELD_OFFSET(AiMoveToRandomLocation, _impl_.radius_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::AiDecorator>()},
    {::_pbi::TcParser::GetTable<::cfg::AiService>()},
  }}, {{
    "\32\0\11\0\0\0\23\0"
    "cfg.AiMoveToRandomLocation"
    "node_name"
    "origin_position_key"
  }},
};

::uint8_t* AiMoveToRandomLocation::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.AiMoveToRandomLocation)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // string node_name = 2;
  if (!this->_internal_node_name().empty()) {
    const std::string& _s = this->_internal_node_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.AiMoveToRandomLocation.node_name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // repeated .cfg.AiDecorator decorators = 3 [packed = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_decorators_size()); i < n; i++) {
    const auto& repfield = this->_internal_decorators().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cfg.AiService services = 4 [packed = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_services_size()); i < n; i++) {
    const auto& repfield = this->_internal_services().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool ignore_restart_self = 5;
  if (this->_internal_ignore_restart_self() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_ignore_restart_self(), target);
  }

  // string origin_position_key = 6;
  if (!this->_internal_origin_position_key().empty()) {
    const std::string& _s = this->_internal_origin_position_key();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.AiMoveToRandomLocation.origin_position_key");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // float radius = 7;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_radius = this->_internal_radius();
  ::uint32_t raw_radius;
  memcpy(&raw_radius, &tmp_radius, sizeof(tmp_radius));
  if (raw_radius != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        7, this->_internal_radius(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.AiMoveToRandomLocation)
  return target;
}

::size_t AiMoveToRandomLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.AiMoveToRandomLocation)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cfg.AiDecorator decorators = 3 [packed = false];
  total_size += 1UL * this->_internal_decorators_size();
  for (const auto& msg : this->_internal_decorators()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .cfg.AiService services = 4 [packed = false];
  total_size += 1UL * this->_internal_services_size();
  for (const auto& msg : this->_internal_services()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string node_name = 2;
  if (!this->_internal_node_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_node_name());
  }

  // string origin_position_key = 6;
  if (!this->_internal_origin_position_key().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_origin_position_key());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  // bool ignore_restart_self = 5;
  if (this->_internal_ignore_restart_self() != 0) {
    total_size += 2;
  }

  // float radius = 7;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_radius = this->_internal_radius();
  ::uint32_t raw_radius;
  memcpy(&raw_radius, &tmp_radius, sizeof(tmp_radius));
  if (raw_radius != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AiMoveToRandomLocation::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    AiMoveToRandomLocation::MergeImpl
};
const ::google::protobuf::Message::ClassData*AiMoveToRandomLocation::GetClassData() const { return &_class_data_; }


void AiMoveToRandomLocation::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AiMoveToRandomLocation*>(&to_msg);
  auto& from = static_cast<const AiMoveToRandomLocation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.AiMoveToRandomLocation)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_decorators()->MergeFrom(
      from._internal_decorators());
  _this->_internal_mutable_services()->MergeFrom(
      from._internal_services());
  if (!from._internal_node_name().empty()) {
    _this->_internal_set_node_name(from._internal_node_name());
  }
  if (!from._internal_origin_position_key().empty()) {
    _this->_internal_set_origin_position_key(from._internal_origin_position_key());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_ignore_restart_self() != 0) {
    _this->_internal_set_ignore_restart_self(from._internal_ignore_restart_self());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_radius = from._internal_radius();
  ::uint32_t raw_radius;
  memcpy(&raw_radius, &tmp_radius, sizeof(tmp_radius));
  if (raw_radius != 0) {
    _this->_internal_set_radius(from._internal_radius());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AiMoveToRandomLocation::CopyFrom(const AiMoveToRandomLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.AiMoveToRandomLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AiMoveToRandomLocation::IsInitialized() const {
  return true;
}

void AiMoveToRandomLocation::InternalSwap(AiMoveToRandomLocation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.decorators_.InternalSwap(&other->_impl_.decorators_);
  _impl_.services_.InternalSwap(&other->_impl_.services_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.node_name_, lhs_arena,
                                       &other->_impl_.node_name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.origin_position_key_, lhs_arena,
                                       &other->_impl_.origin_position_key_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AiMoveToRandomLocation, _impl_.radius_)
      + sizeof(AiMoveToRandomLocation::_impl_.radius_)
      - PROTOBUF_FIELD_OFFSET(AiMoveToRandomLocation, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::google::protobuf::Metadata AiMoveToRandomLocation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[38]);
}
// ===================================================================

class AiMoveToLocation::_Internal {
 public:
};

AiMoveToLocation::AiMoveToLocation(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.AiMoveToLocation)
}
AiMoveToLocation::AiMoveToLocation(const AiMoveToLocation& from) : ::google::protobuf::Message() {
  AiMoveToLocation* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.decorators_){from._impl_.decorators_},
      decltype(_impl_.services_){from._impl_.services_},
      decltype(_impl_.node_name_){},
      decltype(_impl_.id_){},
      decltype(_impl_.ignore_restart_self_){},
      decltype(_impl_.acceptable_radius_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.node_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.node_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_node_name().empty()) {
    _this->_impl_.node_name_.Set(from._internal_node_name(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.acceptable_radius_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.acceptable_radius_));

  // @@protoc_insertion_point(copy_constructor:cfg.AiMoveToLocation)
}
inline void AiMoveToLocation::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.decorators_){arena},
      decltype(_impl_.services_){arena},
      decltype(_impl_.node_name_){},
      decltype(_impl_.id_){0},
      decltype(_impl_.ignore_restart_self_){false},
      decltype(_impl_.acceptable_radius_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.node_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.node_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
AiMoveToLocation::~AiMoveToLocation() {
  // @@protoc_insertion_point(destructor:cfg.AiMoveToLocation)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AiMoveToLocation::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.decorators_.~RepeatedPtrField();
  _impl_.services_.~RepeatedPtrField();
  _impl_.node_name_.Destroy();
}
void AiMoveToLocation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void AiMoveToLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.AiMoveToLocation)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.decorators_.Clear();
  _impl_.services_.Clear();
  _impl_.node_name_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.acceptable_radius_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.acceptable_radius_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AiMoveToLocation::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 2, 38, 2> AiMoveToLocation::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AiMoveToLocation_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AiMoveToLocation, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(AiMoveToLocation, _impl_.id_)}},
    // string node_name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(AiMoveToLocation, _impl_.node_name_)}},
    // repeated .cfg.AiDecorator decorators = 3 [packed = false];
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(AiMoveToLocation, _impl_.decorators_)}},
    // repeated .cfg.AiService services = 4 [packed = false];
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 1, PROTOBUF_FIELD_OFFSET(AiMoveToLocation, _impl_.services_)}},
    // bool ignore_restart_self = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AiMoveToLocation, _impl_.ignore_restart_self_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(AiMoveToLocation, _impl_.ignore_restart_self_)}},
    // float acceptable_radius = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 63, 0, PROTOBUF_FIELD_OFFSET(AiMoveToLocation, _impl_.acceptable_radius_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(AiMoveToLocation, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string node_name = 2;
    {PROTOBUF_FIELD_OFFSET(AiMoveToLocation, _impl_.node_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .cfg.AiDecorator decorators = 3 [packed = false];
    {PROTOBUF_FIELD_OFFSET(AiMoveToLocation, _impl_.decorators_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .cfg.AiService services = 4 [packed = false];
    {PROTOBUF_FIELD_OFFSET(AiMoveToLocation, _impl_.services_), 0, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool ignore_restart_self = 5;
    {PROTOBUF_FIELD_OFFSET(AiMoveToLocation, _impl_.ignore_restart_self_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // float acceptable_radius = 6;
    {PROTOBUF_FIELD_OFFSET(AiMoveToLocation, _impl_.acceptable_radius_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::AiDecorator>()},
    {::_pbi::TcParser::GetTable<::cfg::AiService>()},
  }}, {{
    "\24\0\11\0\0\0\0\0"
    "cfg.AiMoveToLocation"
    "node_name"
  }},
};

::uint8_t* AiMoveToLocation::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.AiMoveToLocation)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // string node_name = 2;
  if (!this->_internal_node_name().empty()) {
    const std::string& _s = this->_internal_node_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.AiMoveToLocation.node_name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // repeated .cfg.AiDecorator decorators = 3 [packed = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_decorators_size()); i < n; i++) {
    const auto& repfield = this->_internal_decorators().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cfg.AiService services = 4 [packed = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_services_size()); i < n; i++) {
    const auto& repfield = this->_internal_services().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool ignore_restart_self = 5;
  if (this->_internal_ignore_restart_self() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_ignore_restart_self(), target);
  }

  // float acceptable_radius = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_acceptable_radius = this->_internal_acceptable_radius();
  ::uint32_t raw_acceptable_radius;
  memcpy(&raw_acceptable_radius, &tmp_acceptable_radius, sizeof(tmp_acceptable_radius));
  if (raw_acceptable_radius != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        6, this->_internal_acceptable_radius(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.AiMoveToLocation)
  return target;
}

::size_t AiMoveToLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.AiMoveToLocation)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cfg.AiDecorator decorators = 3 [packed = false];
  total_size += 1UL * this->_internal_decorators_size();
  for (const auto& msg : this->_internal_decorators()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .cfg.AiService services = 4 [packed = false];
  total_size += 1UL * this->_internal_services_size();
  for (const auto& msg : this->_internal_services()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string node_name = 2;
  if (!this->_internal_node_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_node_name());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  // bool ignore_restart_self = 5;
  if (this->_internal_ignore_restart_self() != 0) {
    total_size += 2;
  }

  // float acceptable_radius = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_acceptable_radius = this->_internal_acceptable_radius();
  ::uint32_t raw_acceptable_radius;
  memcpy(&raw_acceptable_radius, &tmp_acceptable_radius, sizeof(tmp_acceptable_radius));
  if (raw_acceptable_radius != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AiMoveToLocation::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    AiMoveToLocation::MergeImpl
};
const ::google::protobuf::Message::ClassData*AiMoveToLocation::GetClassData() const { return &_class_data_; }


void AiMoveToLocation::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AiMoveToLocation*>(&to_msg);
  auto& from = static_cast<const AiMoveToLocation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.AiMoveToLocation)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_decorators()->MergeFrom(
      from._internal_decorators());
  _this->_internal_mutable_services()->MergeFrom(
      from._internal_services());
  if (!from._internal_node_name().empty()) {
    _this->_internal_set_node_name(from._internal_node_name());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_ignore_restart_self() != 0) {
    _this->_internal_set_ignore_restart_self(from._internal_ignore_restart_self());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_acceptable_radius = from._internal_acceptable_radius();
  ::uint32_t raw_acceptable_radius;
  memcpy(&raw_acceptable_radius, &tmp_acceptable_radius, sizeof(tmp_acceptable_radius));
  if (raw_acceptable_radius != 0) {
    _this->_internal_set_acceptable_radius(from._internal_acceptable_radius());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AiMoveToLocation::CopyFrom(const AiMoveToLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.AiMoveToLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AiMoveToLocation::IsInitialized() const {
  return true;
}

void AiMoveToLocation::InternalSwap(AiMoveToLocation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.decorators_.InternalSwap(&other->_impl_.decorators_);
  _impl_.services_.InternalSwap(&other->_impl_.services_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.node_name_, lhs_arena,
                                       &other->_impl_.node_name_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AiMoveToLocation, _impl_.acceptable_radius_)
      + sizeof(AiMoveToLocation::_impl_.acceptable_radius_)
      - PROTOBUF_FIELD_OFFSET(AiMoveToLocation, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::google::protobuf::Metadata AiMoveToLocation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[39]);
}
// ===================================================================

class AiDebugPrint::_Internal {
 public:
};

AiDebugPrint::AiDebugPrint(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.AiDebugPrint)
}
AiDebugPrint::AiDebugPrint(const AiDebugPrint& from) : ::google::protobuf::Message() {
  AiDebugPrint* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.decorators_){from._impl_.decorators_},
      decltype(_impl_.services_){from._impl_.services_},
      decltype(_impl_.node_name_){},
      decltype(_impl_.text_){},
      decltype(_impl_.id_){},
      decltype(_impl_.ignore_restart_self_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.node_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.node_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_node_name().empty()) {
    _this->_impl_.node_name_.Set(from._internal_node_name(), _this->GetArenaForAllocation());
  }
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.text_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    _this->_impl_.text_.Set(from._internal_text(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.ignore_restart_self_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.ignore_restart_self_));

  // @@protoc_insertion_point(copy_constructor:cfg.AiDebugPrint)
}
inline void AiDebugPrint::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.decorators_){arena},
      decltype(_impl_.services_){arena},
      decltype(_impl_.node_name_){},
      decltype(_impl_.text_){},
      decltype(_impl_.id_){0},
      decltype(_impl_.ignore_restart_self_){false},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.node_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.node_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.text_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
AiDebugPrint::~AiDebugPrint() {
  // @@protoc_insertion_point(destructor:cfg.AiDebugPrint)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AiDebugPrint::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.decorators_.~RepeatedPtrField();
  _impl_.services_.~RepeatedPtrField();
  _impl_.node_name_.Destroy();
  _impl_.text_.Destroy();
}
void AiDebugPrint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void AiDebugPrint::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.AiDebugPrint)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.decorators_.Clear();
  _impl_.services_.Clear();
  _impl_.node_name_.ClearToEmpty();
  _impl_.text_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.ignore_restart_self_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.ignore_restart_self_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AiDebugPrint::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 2, 38, 2> AiDebugPrint::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AiDebugPrint_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AiDebugPrint, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(AiDebugPrint, _impl_.id_)}},
    // string node_name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(AiDebugPrint, _impl_.node_name_)}},
    // repeated .cfg.AiDecorator decorators = 3 [packed = false];
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(AiDebugPrint, _impl_.decorators_)}},
    // repeated .cfg.AiService services = 4 [packed = false];
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 1, PROTOBUF_FIELD_OFFSET(AiDebugPrint, _impl_.services_)}},
    // bool ignore_restart_self = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AiDebugPrint, _impl_.ignore_restart_self_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(AiDebugPrint, _impl_.ignore_restart_self_)}},
    // string text = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(AiDebugPrint, _impl_.text_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(AiDebugPrint, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string node_name = 2;
    {PROTOBUF_FIELD_OFFSET(AiDebugPrint, _impl_.node_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .cfg.AiDecorator decorators = 3 [packed = false];
    {PROTOBUF_FIELD_OFFSET(AiDebugPrint, _impl_.decorators_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .cfg.AiService services = 4 [packed = false];
    {PROTOBUF_FIELD_OFFSET(AiDebugPrint, _impl_.services_), 0, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool ignore_restart_self = 5;
    {PROTOBUF_FIELD_OFFSET(AiDebugPrint, _impl_.ignore_restart_self_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string text = 6;
    {PROTOBUF_FIELD_OFFSET(AiDebugPrint, _impl_.text_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::AiDecorator>()},
    {::_pbi::TcParser::GetTable<::cfg::AiService>()},
  }}, {{
    "\20\0\11\0\0\0\4\0"
    "cfg.AiDebugPrint"
    "node_name"
    "text"
  }},
};

::uint8_t* AiDebugPrint::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.AiDebugPrint)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // string node_name = 2;
  if (!this->_internal_node_name().empty()) {
    const std::string& _s = this->_internal_node_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.AiDebugPrint.node_name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // repeated .cfg.AiDecorator decorators = 3 [packed = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_decorators_size()); i < n; i++) {
    const auto& repfield = this->_internal_decorators().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cfg.AiService services = 4 [packed = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_services_size()); i < n; i++) {
    const auto& repfield = this->_internal_services().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool ignore_restart_self = 5;
  if (this->_internal_ignore_restart_self() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_ignore_restart_self(), target);
  }

  // string text = 6;
  if (!this->_internal_text().empty()) {
    const std::string& _s = this->_internal_text();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.AiDebugPrint.text");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.AiDebugPrint)
  return target;
}

::size_t AiDebugPrint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.AiDebugPrint)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cfg.AiDecorator decorators = 3 [packed = false];
  total_size += 1UL * this->_internal_decorators_size();
  for (const auto& msg : this->_internal_decorators()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .cfg.AiService services = 4 [packed = false];
  total_size += 1UL * this->_internal_services_size();
  for (const auto& msg : this->_internal_services()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string node_name = 2;
  if (!this->_internal_node_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_node_name());
  }

  // string text = 6;
  if (!this->_internal_text().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_text());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  // bool ignore_restart_self = 5;
  if (this->_internal_ignore_restart_self() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AiDebugPrint::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    AiDebugPrint::MergeImpl
};
const ::google::protobuf::Message::ClassData*AiDebugPrint::GetClassData() const { return &_class_data_; }


void AiDebugPrint::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AiDebugPrint*>(&to_msg);
  auto& from = static_cast<const AiDebugPrint&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.AiDebugPrint)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_decorators()->MergeFrom(
      from._internal_decorators());
  _this->_internal_mutable_services()->MergeFrom(
      from._internal_services());
  if (!from._internal_node_name().empty()) {
    _this->_internal_set_node_name(from._internal_node_name());
  }
  if (!from._internal_text().empty()) {
    _this->_internal_set_text(from._internal_text());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_ignore_restart_self() != 0) {
    _this->_internal_set_ignore_restart_self(from._internal_ignore_restart_self());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AiDebugPrint::CopyFrom(const AiDebugPrint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.AiDebugPrint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AiDebugPrint::IsInitialized() const {
  return true;
}

void AiDebugPrint::InternalSwap(AiDebugPrint* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.decorators_.InternalSwap(&other->_impl_.decorators_);
  _impl_.services_.InternalSwap(&other->_impl_.services_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.node_name_, lhs_arena,
                                       &other->_impl_.node_name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.text_, lhs_arena,
                                       &other->_impl_.text_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AiDebugPrint, _impl_.ignore_restart_self_)
      + sizeof(AiDebugPrint::_impl_.ignore_restart_self_)
      - PROTOBUF_FIELD_OFFSET(AiDebugPrint, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::google::protobuf::Metadata AiDebugPrint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[40]);
}
// ===================================================================

class CommonGlobalConfig::_Internal {
 public:
};

CommonGlobalConfig::CommonGlobalConfig(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.CommonGlobalConfig)
}
CommonGlobalConfig::CommonGlobalConfig(const CommonGlobalConfig& from) : ::google::protobuf::Message() {
  CommonGlobalConfig* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x7_){from._impl_.x7_},
      /* _impl_._x7_cached_byte_size_ = */ {0},
      decltype(_impl_.x1_){},
      decltype(_impl_.x2_){},
      decltype(_impl_.x3_){},
      decltype(_impl_.x4_){},
      decltype(_impl_.x5_){},
      decltype(_impl_.x6_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  ::memcpy(&_impl_.x1_, &from._impl_.x1_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.x6_) -
    reinterpret_cast<char*>(&_impl_.x1_)) + sizeof(_impl_.x6_));

  // @@protoc_insertion_point(copy_constructor:cfg.CommonGlobalConfig)
}
inline void CommonGlobalConfig::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.x7_){arena},
      /* _impl_._x7_cached_byte_size_ = */ {0},
      decltype(_impl_.x1_){0},
      decltype(_impl_.x2_){0},
      decltype(_impl_.x3_){0},
      decltype(_impl_.x4_){0},
      decltype(_impl_.x5_){0},
      decltype(_impl_.x6_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
CommonGlobalConfig::~CommonGlobalConfig() {
  // @@protoc_insertion_point(destructor:cfg.CommonGlobalConfig)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CommonGlobalConfig::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.x7_.~RepeatedField();
}
void CommonGlobalConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CommonGlobalConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.CommonGlobalConfig)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.x7_.Clear();
  ::memset(&_impl_.x1_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.x6_) -
      reinterpret_cast<char*>(&_impl_.x1_)) + sizeof(_impl_.x6_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CommonGlobalConfig::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 0, 0, 2> CommonGlobalConfig::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CommonGlobalConfig_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 x1 = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CommonGlobalConfig, _impl_.x1_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(CommonGlobalConfig, _impl_.x1_)}},
    // int32 x2 = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CommonGlobalConfig, _impl_.x2_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(CommonGlobalConfig, _impl_.x2_)}},
    // int32 x3 = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CommonGlobalConfig, _impl_.x3_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(CommonGlobalConfig, _impl_.x3_)}},
    // int32 x4 = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CommonGlobalConfig, _impl_.x4_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(CommonGlobalConfig, _impl_.x4_)}},
    // int32 x5 = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CommonGlobalConfig, _impl_.x5_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(CommonGlobalConfig, _impl_.x5_)}},
    // int32 x6 = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CommonGlobalConfig, _impl_.x6_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(CommonGlobalConfig, _impl_.x6_)}},
    // repeated int32 x7 = 7 [packed = true];
    {::_pbi::TcParser::FastV32P1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(CommonGlobalConfig, _impl_.x7_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 x1 = 1;
    {PROTOBUF_FIELD_OFFSET(CommonGlobalConfig, _impl_.x1_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 x2 = 2;
    {PROTOBUF_FIELD_OFFSET(CommonGlobalConfig, _impl_.x2_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 x3 = 3;
    {PROTOBUF_FIELD_OFFSET(CommonGlobalConfig, _impl_.x3_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 x4 = 4;
    {PROTOBUF_FIELD_OFFSET(CommonGlobalConfig, _impl_.x4_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 x5 = 5;
    {PROTOBUF_FIELD_OFFSET(CommonGlobalConfig, _impl_.x5_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 x6 = 6;
    {PROTOBUF_FIELD_OFFSET(CommonGlobalConfig, _impl_.x6_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // repeated int32 x7 = 7 [packed = true];
    {PROTOBUF_FIELD_OFFSET(CommonGlobalConfig, _impl_.x7_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* CommonGlobalConfig::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.CommonGlobalConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 x1 = 1;
  if (this->_internal_x1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_x1(), target);
  }

  // int32 x2 = 2;
  if (this->_internal_x2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_x2(), target);
  }

  // int32 x3 = 3;
  if (this->_internal_x3() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_x3(), target);
  }

  // int32 x4 = 4;
  if (this->_internal_x4() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_x4(), target);
  }

  // int32 x5 = 5;
  if (this->_internal_x5() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<5>(
            stream, this->_internal_x5(), target);
  }

  // int32 x6 = 6;
  if (this->_internal_x6() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<6>(
            stream, this->_internal_x6(), target);
  }

  // repeated int32 x7 = 7 [packed = true];
  {
    int byte_size = _impl_._x7_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          7, _internal_x7(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.CommonGlobalConfig)
  return target;
}

::size_t CommonGlobalConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.CommonGlobalConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 x7 = 7 [packed = true];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_x7())
    ;
    _impl_._x7_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // int32 x1 = 1;
  if (this->_internal_x1() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_x1());
  }

  // int32 x2 = 2;
  if (this->_internal_x2() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_x2());
  }

  // int32 x3 = 3;
  if (this->_internal_x3() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_x3());
  }

  // int32 x4 = 4;
  if (this->_internal_x4() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_x4());
  }

  // int32 x5 = 5;
  if (this->_internal_x5() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_x5());
  }

  // int32 x6 = 6;
  if (this->_internal_x6() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_x6());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CommonGlobalConfig::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CommonGlobalConfig::MergeImpl
};
const ::google::protobuf::Message::ClassData*CommonGlobalConfig::GetClassData() const { return &_class_data_; }


void CommonGlobalConfig::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CommonGlobalConfig*>(&to_msg);
  auto& from = static_cast<const CommonGlobalConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.CommonGlobalConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_x7()->MergeFrom(from._internal_x7());
  if (from._internal_x1() != 0) {
    _this->_internal_set_x1(from._internal_x1());
  }
  if (from._internal_x2() != 0) {
    _this->_internal_set_x2(from._internal_x2());
  }
  if (from._internal_x3() != 0) {
    _this->_internal_set_x3(from._internal_x3());
  }
  if (from._internal_x4() != 0) {
    _this->_internal_set_x4(from._internal_x4());
  }
  if (from._internal_x5() != 0) {
    _this->_internal_set_x5(from._internal_x5());
  }
  if (from._internal_x6() != 0) {
    _this->_internal_set_x6(from._internal_x6());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CommonGlobalConfig::CopyFrom(const CommonGlobalConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.CommonGlobalConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CommonGlobalConfig::IsInitialized() const {
  return true;
}

void CommonGlobalConfig::InternalSwap(CommonGlobalConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.x7_.InternalSwap(&other->_impl_.x7_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommonGlobalConfig, _impl_.x6_)
      + sizeof(CommonGlobalConfig::_impl_.x6_)
      - PROTOBUF_FIELD_OFFSET(CommonGlobalConfig, _impl_.x1_)>(
          reinterpret_cast<char*>(&_impl_.x1_),
          reinterpret_cast<char*>(&other->_impl_.x1_));
}

::google::protobuf::Metadata CommonGlobalConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[41]);
}
// ===================================================================

class ItemItem::_Internal {
 public:
};

ItemItem::ItemItem(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.ItemItem)
}
ItemItem::ItemItem(const ItemItem& from) : ::google::protobuf::Message() {
  ItemItem* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){},
      decltype(_impl_.icon_backgroud_){},
      decltype(_impl_.icon_mask_){},
      decltype(_impl_.desc_){},
      decltype(_impl_.id_){},
      decltype(_impl_.minor_type_){},
      decltype(_impl_.quality_){},
      decltype(_impl_.show_order_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _impl_.icon_backgroud_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.icon_backgroud_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_icon_backgroud().empty()) {
    _this->_impl_.icon_backgroud_.Set(from._internal_icon_backgroud(), _this->GetArenaForAllocation());
  }
  _impl_.icon_mask_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.icon_mask_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_icon_mask().empty()) {
    _this->_impl_.icon_mask_.Set(from._internal_icon_mask(), _this->GetArenaForAllocation());
  }
  _impl_.desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.desc_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_desc().empty()) {
    _this->_impl_.desc_.Set(from._internal_desc(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.show_order_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.show_order_));

  // @@protoc_insertion_point(copy_constructor:cfg.ItemItem)
}
inline void ItemItem::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){},
      decltype(_impl_.icon_backgroud_){},
      decltype(_impl_.icon_mask_){},
      decltype(_impl_.desc_){},
      decltype(_impl_.id_){0},
      decltype(_impl_.minor_type_){0},
      decltype(_impl_.quality_){0},
      decltype(_impl_.show_order_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.icon_backgroud_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.icon_backgroud_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.icon_mask_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.icon_mask_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.desc_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
ItemItem::~ItemItem() {
  // @@protoc_insertion_point(destructor:cfg.ItemItem)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ItemItem::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.icon_backgroud_.Destroy();
  _impl_.icon_mask_.Destroy();
  _impl_.desc_.Destroy();
}
void ItemItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void ItemItem::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.ItemItem)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.icon_backgroud_.ClearToEmpty();
  _impl_.icon_mask_.ClearToEmpty();
  _impl_.desc_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.show_order_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.show_order_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ItemItem::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 8, 0, 60, 2> ItemItem::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    11, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294965332,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_ItemItem_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ItemItem, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(ItemItem, _impl_.id_)}},
    // string name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ItemItem, _impl_.name_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // .cfg.ItemEMinorType minor_type = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ItemItem, _impl_.minor_type_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(ItemItem, _impl_.minor_type_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // .cfg.ItemEItemQuality quality = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ItemItem, _impl_.quality_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(ItemItem, _impl_.quality_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // string icon_backgroud = 8;
    {::_pbi::TcParser::FastUS1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(ItemItem, _impl_.icon_backgroud_)}},
    // string icon_mask = 9;
    {::_pbi::TcParser::FastUS1,
     {74, 63, 0, PROTOBUF_FIELD_OFFSET(ItemItem, _impl_.icon_mask_)}},
    // string desc = 10;
    {::_pbi::TcParser::FastUS1,
     {82, 63, 0, PROTOBUF_FIELD_OFFSET(ItemItem, _impl_.desc_)}},
    // int32 show_order = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ItemItem, _impl_.show_order_), 63>(),
     {88, 63, 0, PROTOBUF_FIELD_OFFSET(ItemItem, _impl_.show_order_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(ItemItem, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string name = 2;
    {PROTOBUF_FIELD_OFFSET(ItemItem, _impl_.name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .cfg.ItemEMinorType minor_type = 4;
    {PROTOBUF_FIELD_OFFSET(ItemItem, _impl_.minor_type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .cfg.ItemEItemQuality quality = 6;
    {PROTOBUF_FIELD_OFFSET(ItemItem, _impl_.quality_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string icon_backgroud = 8;
    {PROTOBUF_FIELD_OFFSET(ItemItem, _impl_.icon_backgroud_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string icon_mask = 9;
    {PROTOBUF_FIELD_OFFSET(ItemItem, _impl_.icon_mask_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string desc = 10;
    {PROTOBUF_FIELD_OFFSET(ItemItem, _impl_.desc_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 show_order = 11;
    {PROTOBUF_FIELD_OFFSET(ItemItem, _impl_.show_order_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
    "\14\0\4\0\0\16\11\4\0\0\0\0\0\0\0\0"
    "cfg.ItemItem"
    "name"
    "icon_backgroud"
    "icon_mask"
    "desc"
  }},
};

::uint8_t* ItemItem::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.ItemItem)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.ItemItem.name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // .cfg.ItemEMinorType minor_type = 4;
  if (this->_internal_minor_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_minor_type(), target);
  }

  // .cfg.ItemEItemQuality quality = 6;
  if (this->_internal_quality() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        6, this->_internal_quality(), target);
  }

  // string icon_backgroud = 8;
  if (!this->_internal_icon_backgroud().empty()) {
    const std::string& _s = this->_internal_icon_backgroud();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.ItemItem.icon_backgroud");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  // string icon_mask = 9;
  if (!this->_internal_icon_mask().empty()) {
    const std::string& _s = this->_internal_icon_mask();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.ItemItem.icon_mask");
    target = stream->WriteStringMaybeAliased(9, _s, target);
  }

  // string desc = 10;
  if (!this->_internal_desc().empty()) {
    const std::string& _s = this->_internal_desc();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.ItemItem.desc");
    target = stream->WriteStringMaybeAliased(10, _s, target);
  }

  // int32 show_order = 11;
  if (this->_internal_show_order() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<11>(
            stream, this->_internal_show_order(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.ItemItem)
  return target;
}

::size_t ItemItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.ItemItem)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // string icon_backgroud = 8;
  if (!this->_internal_icon_backgroud().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_icon_backgroud());
  }

  // string icon_mask = 9;
  if (!this->_internal_icon_mask().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_icon_mask());
  }

  // string desc = 10;
  if (!this->_internal_desc().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_desc());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  // .cfg.ItemEMinorType minor_type = 4;
  if (this->_internal_minor_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_minor_type());
  }

  // .cfg.ItemEItemQuality quality = 6;
  if (this->_internal_quality() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_quality());
  }

  // int32 show_order = 11;
  if (this->_internal_show_order() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_show_order());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ItemItem::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    ItemItem::MergeImpl
};
const ::google::protobuf::Message::ClassData*ItemItem::GetClassData() const { return &_class_data_; }


void ItemItem::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ItemItem*>(&to_msg);
  auto& from = static_cast<const ItemItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.ItemItem)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_icon_backgroud().empty()) {
    _this->_internal_set_icon_backgroud(from._internal_icon_backgroud());
  }
  if (!from._internal_icon_mask().empty()) {
    _this->_internal_set_icon_mask(from._internal_icon_mask());
  }
  if (!from._internal_desc().empty()) {
    _this->_internal_set_desc(from._internal_desc());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_minor_type() != 0) {
    _this->_internal_set_minor_type(from._internal_minor_type());
  }
  if (from._internal_quality() != 0) {
    _this->_internal_set_quality(from._internal_quality());
  }
  if (from._internal_show_order() != 0) {
    _this->_internal_set_show_order(from._internal_show_order());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ItemItem::CopyFrom(const ItemItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.ItemItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ItemItem::IsInitialized() const {
  return true;
}

void ItemItem::InternalSwap(ItemItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.icon_backgroud_, lhs_arena,
                                       &other->_impl_.icon_backgroud_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.icon_mask_, lhs_arena,
                                       &other->_impl_.icon_mask_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.desc_, lhs_arena,
                                       &other->_impl_.desc_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ItemItem, _impl_.show_order_)
      + sizeof(ItemItem::_impl_.show_order_)
      - PROTOBUF_FIELD_OFFSET(ItemItem, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::google::protobuf::Metadata ItemItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[42]);
}
// ===================================================================

class L10nL10NDemo::_Internal {
 public:
};

L10nL10NDemo::L10nL10NDemo(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.L10nL10NDemo)
}
L10nL10NDemo::L10nL10NDemo(const L10nL10NDemo& from) : ::google::protobuf::Message() {
  L10nL10NDemo* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.text_){},
      decltype(_impl_.id_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.text_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    _this->_impl_.text_.Set(from._internal_text(), _this->GetArenaForAllocation());
  }
  _this->_impl_.id_ = from._impl_.id_;

  // @@protoc_insertion_point(copy_constructor:cfg.L10nL10NDemo)
}
inline void L10nL10NDemo::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.text_){},
      decltype(_impl_.id_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.text_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
L10nL10NDemo::~L10nL10NDemo() {
  // @@protoc_insertion_point(destructor:cfg.L10nL10NDemo)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void L10nL10NDemo::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.text_.Destroy();
}
void L10nL10NDemo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void L10nL10NDemo::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.L10nL10NDemo)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.text_.ClearToEmpty();
  _impl_.id_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* L10nL10NDemo::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 29, 2> L10nL10NDemo::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_L10nL10NDemo_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string text = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(L10nL10NDemo, _impl_.text_)}},
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(L10nL10NDemo, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(L10nL10NDemo, _impl_.id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(L10nL10NDemo, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string text = 2;
    {PROTOBUF_FIELD_OFFSET(L10nL10NDemo, _impl_.text_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\20\0\4\0\0\0\0\0"
    "cfg.L10nL10NDemo"
    "text"
  }},
};

::uint8_t* L10nL10NDemo::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.L10nL10NDemo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // string text = 2;
  if (!this->_internal_text().empty()) {
    const std::string& _s = this->_internal_text();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.L10nL10NDemo.text");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.L10nL10NDemo)
  return target;
}

::size_t L10nL10NDemo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.L10nL10NDemo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 2;
  if (!this->_internal_text().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_text());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData L10nL10NDemo::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    L10nL10NDemo::MergeImpl
};
const ::google::protobuf::Message::ClassData*L10nL10NDemo::GetClassData() const { return &_class_data_; }


void L10nL10NDemo::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<L10nL10NDemo*>(&to_msg);
  auto& from = static_cast<const L10nL10NDemo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.L10nL10NDemo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_text().empty()) {
    _this->_internal_set_text(from._internal_text());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void L10nL10NDemo::CopyFrom(const L10nL10NDemo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.L10nL10NDemo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool L10nL10NDemo::IsInitialized() const {
  return true;
}

void L10nL10NDemo::InternalSwap(L10nL10NDemo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.text_, lhs_arena,
                                       &other->_impl_.text_, rhs_arena);
        swap(_impl_.id_, other->_impl_.id_);
}

::google::protobuf::Metadata L10nL10NDemo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[43]);
}
// ===================================================================

class L10nPatchDemo::_Internal {
 public:
};

L10nPatchDemo::L10nPatchDemo(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.L10nPatchDemo)
}
L10nPatchDemo::L10nPatchDemo(const L10nPatchDemo& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cfg.L10nPatchDemo)
}
inline void L10nPatchDemo::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0},
      decltype(_impl_.value_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
L10nPatchDemo::~L10nPatchDemo() {
  // @@protoc_insertion_point(destructor:cfg.L10nPatchDemo)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void L10nPatchDemo::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void L10nPatchDemo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void L10nPatchDemo::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.L10nPatchDemo)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.value_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.value_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* L10nPatchDemo::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> L10nPatchDemo::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_L10nPatchDemo_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // int32 value = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(L10nPatchDemo, _impl_.value_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(L10nPatchDemo, _impl_.value_)}},
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(L10nPatchDemo, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(L10nPatchDemo, _impl_.id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(L10nPatchDemo, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 value = 2;
    {PROTOBUF_FIELD_OFFSET(L10nPatchDemo, _impl_.value_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* L10nPatchDemo::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.L10nPatchDemo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // int32 value = 2;
  if (this->_internal_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.L10nPatchDemo)
  return target;
}

::size_t L10nPatchDemo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.L10nPatchDemo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  // int32 value = 2;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData L10nPatchDemo::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    L10nPatchDemo::MergeImpl
};
const ::google::protobuf::Message::ClassData*L10nPatchDemo::GetClassData() const { return &_class_data_; }


void L10nPatchDemo::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<L10nPatchDemo*>(&to_msg);
  auto& from = static_cast<const L10nPatchDemo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.L10nPatchDemo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void L10nPatchDemo::CopyFrom(const L10nPatchDemo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.L10nPatchDemo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool L10nPatchDemo::IsInitialized() const {
  return true;
}

void L10nPatchDemo::InternalSwap(L10nPatchDemo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(L10nPatchDemo, _impl_.value_)
      + sizeof(L10nPatchDemo::_impl_.value_)
      - PROTOBUF_FIELD_OFFSET(L10nPatchDemo, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::google::protobuf::Metadata L10nPatchDemo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[44]);
}
// ===================================================================

class TagTestTag::_Internal {
 public:
};

TagTestTag::TagTestTag(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TagTestTag)
}
TagTestTag::TagTestTag(const TagTestTag& from) : ::google::protobuf::Message() {
  TagTestTag* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){},
      decltype(_impl_.id_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.value_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), _this->GetArenaForAllocation());
  }
  _this->_impl_.id_ = from._impl_.id_;

  // @@protoc_insertion_point(copy_constructor:cfg.TagTestTag)
}
inline void TagTestTag::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){},
      decltype(_impl_.id_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.value_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
TagTestTag::~TagTestTag() {
  // @@protoc_insertion_point(destructor:cfg.TagTestTag)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TagTestTag::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.Destroy();
}
void TagTestTag::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TagTestTag::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TagTestTag)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_.ClearToEmpty();
  _impl_.id_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TagTestTag::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 28, 2> TagTestTag::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_TagTestTag_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string value = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(TagTestTag, _impl_.value_)}},
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TagTestTag, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TagTestTag, _impl_.id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(TagTestTag, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string value = 2;
    {PROTOBUF_FIELD_OFFSET(TagTestTag, _impl_.value_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\16\0\5\0\0\0\0\0"
    "cfg.TagTestTag"
    "value"
  }},
};

::uint8_t* TagTestTag::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TagTestTag)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // string value = 2;
  if (!this->_internal_value().empty()) {
    const std::string& _s = this->_internal_value();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.TagTestTag.value");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TagTestTag)
  return target;
}

::size_t TagTestTag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TagTestTag)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 2;
  if (!this->_internal_value().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_value());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TagTestTag::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TagTestTag::MergeImpl
};
const ::google::protobuf::Message::ClassData*TagTestTag::GetClassData() const { return &_class_data_; }


void TagTestTag::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TagTestTag*>(&to_msg);
  auto& from = static_cast<const TagTestTag&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TagTestTag)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TagTestTag::CopyFrom(const TagTestTag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TagTestTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TagTestTag::IsInitialized() const {
  return true;
}

void TagTestTag::InternalSwap(TagTestTag* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.value_, lhs_arena,
                                       &other->_impl_.value_, rhs_arena);
        swap(_impl_.id_, other->_impl_.id_);
}

::google::protobuf::Metadata TagTestTag::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[45]);
}
// ===================================================================

TestDemoType2_K8Entry_DoNotUse::TestDemoType2_K8Entry_DoNotUse() {}
TestDemoType2_K8Entry_DoNotUse::TestDemoType2_K8Entry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void TestDemoType2_K8Entry_DoNotUse::MergeFrom(const TestDemoType2_K8Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata TestDemoType2_K8Entry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[46]);
}
// ===================================================================

class TestDemoType2::_Internal {
 public:
  using HasBits = decltype(std::declval<TestDemoType2>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TestDemoType2, _impl_._has_bits_);
  static const ::cfg::TestDemoType1& x12(const TestDemoType2* msg);
  static void set_has_x12(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::cfg::TestDemoDynamic& x14(const TestDemoType2* msg);
  static void set_has_x14(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::cfg::TestDemoType1& TestDemoType2::_Internal::x12(const TestDemoType2* msg) {
  return *msg->_impl_.x12_;
}
const ::cfg::TestDemoDynamic& TestDemoType2::_Internal::x14(const TestDemoType2* msg) {
  return *msg->_impl_.x14_;
}
TestDemoType2::TestDemoType2(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestDemoType2)
}
TestDemoType2::TestDemoType2(const TestDemoType2& from) : ::google::protobuf::Message() {
  TestDemoType2* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.k1_){from._impl_.k1_},
      /* _impl_._k1_cached_byte_size_ = */ {0},
      decltype(_impl_.k2_){from._impl_.k2_},
      /* _impl_._k2_cached_byte_size_ = */ {0},
      decltype(_impl_.k5_){from._impl_.k5_},
      /* _impl_._k5_cached_byte_size_ = */ {0},
      /* decltype(_impl_.k8_) */ {},
      decltype(_impl_.k9_){from._impl_.k9_},
      decltype(_impl_.k15_){from._impl_.k15_},
      decltype(_impl_.x10_){},
      decltype(_impl_.s1_){},
      decltype(_impl_.x12_){nullptr},
      decltype(_impl_.x14_){nullptr},
      decltype(_impl_.x4_){},
      decltype(_impl_.x1_){},
      decltype(_impl_.x2_){},
      decltype(_impl_.x3_){},
      decltype(_impl_.x5_){},
      decltype(_impl_.x7_){},
      decltype(_impl_.x6_){},
      decltype(_impl_.x8_0_){},
      decltype(_impl_.x9_){},
      decltype(_impl_.x8_){},
      decltype(_impl_.x13_){},
      decltype(_impl_.t1_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _this->_impl_.k8_.MergeFrom(from._impl_.k8_);
  _impl_.x10_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.x10_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_x10().empty()) {
    _this->_impl_.x10_.Set(from._internal_x10(), _this->GetArenaForAllocation());
  }
  _impl_.s1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.s1_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_s1().empty()) {
    _this->_impl_.s1_.Set(from._internal_s1(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.x12_ = new ::cfg::TestDemoType1(*from._impl_.x12_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.x14_ = new ::cfg::TestDemoDynamic(*from._impl_.x14_);
  }
  ::memcpy(&_impl_.x4_, &from._impl_.x4_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.t1_) -
    reinterpret_cast<char*>(&_impl_.x4_)) + sizeof(_impl_.t1_));

  // @@protoc_insertion_point(copy_constructor:cfg.TestDemoType2)
}
inline void TestDemoType2::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.k1_){arena},
      /* _impl_._k1_cached_byte_size_ = */ {0},
      decltype(_impl_.k2_){arena},
      /* _impl_._k2_cached_byte_size_ = */ {0},
      decltype(_impl_.k5_){arena},
      /* _impl_._k5_cached_byte_size_ = */ {0},
      /* decltype(_impl_.k8_) */ {::google::protobuf::internal::ArenaInitialized(), arena},
      decltype(_impl_.k9_){arena},
      decltype(_impl_.k15_){arena},
      decltype(_impl_.x10_){},
      decltype(_impl_.s1_){},
      decltype(_impl_.x12_){nullptr},
      decltype(_impl_.x14_){nullptr},
      decltype(_impl_.x4_){0},
      decltype(_impl_.x1_){false},
      decltype(_impl_.x2_){0},
      decltype(_impl_.x3_){0},
      decltype(_impl_.x5_){::int64_t{0}},
      decltype(_impl_.x7_){0},
      decltype(_impl_.x6_){0},
      decltype(_impl_.x8_0_){0},
      decltype(_impl_.x9_){::int64_t{0}},
      decltype(_impl_.x8_){0},
      decltype(_impl_.x13_){0},
      decltype(_impl_.t1_){::int64_t{0}},
  };
  _impl_.x10_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.x10_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.s1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.s1_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
TestDemoType2::~TestDemoType2() {
  // @@protoc_insertion_point(destructor:cfg.TestDemoType2)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestDemoType2::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.k1_.~RepeatedField();
  _impl_.k2_.~RepeatedField();
  _impl_.k5_.~RepeatedField();
  _impl_.k8_.~MapField();
  _impl_.k9_.~RepeatedPtrField();
  _impl_.k15_.~RepeatedPtrField();
  _impl_.x10_.Destroy();
  _impl_.s1_.Destroy();
  if (this != internal_default_instance()) delete _impl_.x12_;
  if (this != internal_default_instance()) delete _impl_.x14_;
}
void TestDemoType2::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestDemoType2::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestDemoType2)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.k1_.Clear();
  _impl_.k2_.Clear();
  _impl_.k5_.Clear();
  _impl_.k8_.Clear();
  _impl_.k9_.Clear();
  _impl_.k15_.Clear();
  _impl_.x10_.ClearToEmpty();
  _impl_.s1_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.x12_ != nullptr);
      _impl_.x12_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.x14_ != nullptr);
      _impl_.x14_->Clear();
    }
  }
  ::memset(&_impl_.x4_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.t1_) -
      reinterpret_cast<char*>(&_impl_.x4_)) + sizeof(_impl_.t1_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestDemoType2::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 22, 5, 47, 2> TestDemoType2::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TestDemoType2, _impl_._has_bits_),
    0, // no _extensions_
    22, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4290772992,  // skipmap
    offsetof(decltype(_table_), field_entries),
    22,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TestDemoType2_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 x4 = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestDemoType2, _impl_.x4_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TestDemoType2, _impl_.x4_)}},
    // bool x1 = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(TestDemoType2, _impl_.x1_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(TestDemoType2, _impl_.x1_)}},
    // int32 x2 = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestDemoType2, _impl_.x2_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(TestDemoType2, _impl_.x2_)}},
    // int32 x3 = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestDemoType2, _impl_.x3_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(TestDemoType2, _impl_.x3_)}},
    // int64 x5 = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(TestDemoType2, _impl_.x5_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(TestDemoType2, _impl_.x5_)}},
    // float x6 = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 63, 0, PROTOBUF_FIELD_OFFSET(TestDemoType2, _impl_.x6_)}},
    // double x7 = 7;
    {::_pbi::TcParser::FastF64S1,
     {57, 63, 0, PROTOBUF_FIELD_OFFSET(TestDemoType2, _impl_.x7_)}},
    // int32 x8_0 = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestDemoType2, _impl_.x8_0_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(TestDemoType2, _impl_.x8_0_)}},
    // int32 x8 = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestDemoType2, _impl_.x8_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(TestDemoType2, _impl_.x8_)}},
    // int64 x9 = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(TestDemoType2, _impl_.x9_), 63>(),
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(TestDemoType2, _impl_.x9_)}},
    // string x10 = 11;
    {::_pbi::TcParser::FastUS1,
     {90, 63, 0, PROTOBUF_FIELD_OFFSET(TestDemoType2, _impl_.x10_)}},
    // .cfg.TestDemoType1 x12 = 12;
    {::_pbi::TcParser::FastMtS1,
     {98, 0, 0, PROTOBUF_FIELD_OFFSET(TestDemoType2, _impl_.x12_)}},
    // .cfg.TestDemoEnum x13 = 13;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestDemoType2, _impl_.x13_), 63>(),
     {104, 63, 0, PROTOBUF_FIELD_OFFSET(TestDemoType2, _impl_.x13_)}},
    // .cfg.TestDemoDynamic x14 = 14;
    {::_pbi::TcParser::FastMtS1,
     {114, 1, 1, PROTOBUF_FIELD_OFFSET(TestDemoType2, _impl_.x14_)}},
    // string s1 = 15;
    {::_pbi::TcParser::FastUS1,
     {122, 63, 0, PROTOBUF_FIELD_OFFSET(TestDemoType2, _impl_.s1_)}},
    // int64 t1 = 16;
    {::_pbi::TcParser::FastV64S2,
     {384, 63, 0, PROTOBUF_FIELD_OFFSET(TestDemoType2, _impl_.t1_)}},
    // repeated int32 k1 = 17 [packed = true];
    {::_pbi::TcParser::FastV32P2,
     {394, 63, 0, PROTOBUF_FIELD_OFFSET(TestDemoType2, _impl_.k1_)}},
    // repeated int32 k2 = 18 [packed = true];
    {::_pbi::TcParser::FastV32P2,
     {402, 63, 0, PROTOBUF_FIELD_OFFSET(TestDemoType2, _impl_.k2_)}},
    // repeated int32 k5 = 19 [packed = true];
    {::_pbi::TcParser::FastV32P2,
     {410, 63, 0, PROTOBUF_FIELD_OFFSET(TestDemoType2, _impl_.k5_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .cfg.TestDemoE2 k9 = 21 [packed = false];
    {::_pbi::TcParser::FastMtR2,
     {426, 63, 3, PROTOBUF_FIELD_OFFSET(TestDemoType2, _impl_.k9_)}},
    // repeated .cfg.TestDemoDynamic k15 = 22 [packed = false];
    {::_pbi::TcParser::FastMtR2,
     {434, 63, 4, PROTOBUF_FIELD_OFFSET(TestDemoType2, _impl_.k15_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 x4 = 1;
    {PROTOBUF_FIELD_OFFSET(TestDemoType2, _impl_.x4_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool x1 = 2;
    {PROTOBUF_FIELD_OFFSET(TestDemoType2, _impl_.x1_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 x2 = 3;
    {PROTOBUF_FIELD_OFFSET(TestDemoType2, _impl_.x2_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 x3 = 4;
    {PROTOBUF_FIELD_OFFSET(TestDemoType2, _impl_.x3_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int64 x5 = 5;
    {PROTOBUF_FIELD_OFFSET(TestDemoType2, _impl_.x5_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // float x6 = 6;
    {PROTOBUF_FIELD_OFFSET(TestDemoType2, _impl_.x6_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // double x7 = 7;
    {PROTOBUF_FIELD_OFFSET(TestDemoType2, _impl_.x7_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // int32 x8_0 = 8;
    {PROTOBUF_FIELD_OFFSET(TestDemoType2, _impl_.x8_0_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 x8 = 9;
    {PROTOBUF_FIELD_OFFSET(TestDemoType2, _impl_.x8_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int64 x9 = 10;
    {PROTOBUF_FIELD_OFFSET(TestDemoType2, _impl_.x9_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // string x10 = 11;
    {PROTOBUF_FIELD_OFFSET(TestDemoType2, _impl_.x10_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .cfg.TestDemoType1 x12 = 12;
    {PROTOBUF_FIELD_OFFSET(TestDemoType2, _impl_.x12_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cfg.TestDemoEnum x13 = 13;
    {PROTOBUF_FIELD_OFFSET(TestDemoType2, _impl_.x13_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .cfg.TestDemoDynamic x14 = 14;
    {PROTOBUF_FIELD_OFFSET(TestDemoType2, _impl_.x14_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string s1 = 15;
    {PROTOBUF_FIELD_OFFSET(TestDemoType2, _impl_.s1_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int64 t1 = 16;
    {PROTOBUF_FIELD_OFFSET(TestDemoType2, _impl_.t1_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // repeated int32 k1 = 17 [packed = true];
    {PROTOBUF_FIELD_OFFSET(TestDemoType2, _impl_.k1_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
    // repeated int32 k2 = 18 [packed = true];
    {PROTOBUF_FIELD_OFFSET(TestDemoType2, _impl_.k2_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
    // repeated int32 k5 = 19 [packed = true];
    {PROTOBUF_FIELD_OFFSET(TestDemoType2, _impl_.k5_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
    // map<int32, int32> k8 = 20;
    {PROTOBUF_FIELD_OFFSET(TestDemoType2, _impl_.k8_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // repeated .cfg.TestDemoE2 k9 = 21 [packed = false];
    {PROTOBUF_FIELD_OFFSET(TestDemoType2, _impl_.k9_), -1, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .cfg.TestDemoDynamic k15 = 22 [packed = false];
    {PROTOBUF_FIELD_OFFSET(TestDemoType2, _impl_.k15_), -1, 4,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::TestDemoType1>()},
    {::_pbi::TcParser::GetTable<::cfg::TestDemoDynamic>()},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(TestDemoType2()._impl_.k8_)>(
        1, 0, 0, 5,
        5)},
    {::_pbi::TcParser::GetTable<::cfg::TestDemoE2>()},
    {::_pbi::TcParser::GetTable<::cfg::TestDemoDynamic>()},
  }}, {{
    "\21\0\0\0\0\0\0\0\0\0\0\3\0\0\0\2\0\0\0\0\0\0\0\0"
    "cfg.TestDemoType2"
    "x10"
    "s1"
  }},
};

::uint8_t* TestDemoType2::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestDemoType2)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 x4 = 1;
  if (this->_internal_x4() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_x4(), target);
  }

  // bool x1 = 2;
  if (this->_internal_x1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_x1(), target);
  }

  // int32 x2 = 3;
  if (this->_internal_x2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_x2(), target);
  }

  // int32 x3 = 4;
  if (this->_internal_x3() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_x3(), target);
  }

  // int64 x5 = 5;
  if (this->_internal_x5() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<5>(
            stream, this->_internal_x5(), target);
  }

  // float x6 = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_x6 = this->_internal_x6();
  ::uint32_t raw_x6;
  memcpy(&raw_x6, &tmp_x6, sizeof(tmp_x6));
  if (raw_x6 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        6, this->_internal_x6(), target);
  }

  // double x7 = 7;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_x7 = this->_internal_x7();
  ::uint64_t raw_x7;
  memcpy(&raw_x7, &tmp_x7, sizeof(tmp_x7));
  if (raw_x7 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        7, this->_internal_x7(), target);
  }

  // int32 x8_0 = 8;
  if (this->_internal_x8_0() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<8>(
            stream, this->_internal_x8_0(), target);
  }

  // int32 x8 = 9;
  if (this->_internal_x8() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<9>(
            stream, this->_internal_x8(), target);
  }

  // int64 x9 = 10;
  if (this->_internal_x9() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<10>(
            stream, this->_internal_x9(), target);
  }

  // string x10 = 11;
  if (!this->_internal_x10().empty()) {
    const std::string& _s = this->_internal_x10();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.TestDemoType2.x10");
    target = stream->WriteStringMaybeAliased(11, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cfg.TestDemoType1 x12 = 12;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::x12(this),
        _Internal::x12(this).GetCachedSize(), target, stream);
  }

  // .cfg.TestDemoEnum x13 = 13;
  if (this->_internal_x13() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        13, this->_internal_x13(), target);
  }

  // .cfg.TestDemoDynamic x14 = 14;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::x14(this),
        _Internal::x14(this).GetCachedSize(), target, stream);
  }

  // string s1 = 15;
  if (!this->_internal_s1().empty()) {
    const std::string& _s = this->_internal_s1();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.TestDemoType2.s1");
    target = stream->WriteStringMaybeAliased(15, _s, target);
  }

  // int64 t1 = 16;
  if (this->_internal_t1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        16, this->_internal_t1(), target);
  }

  // repeated int32 k1 = 17 [packed = true];
  {
    int byte_size = _impl_._k1_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          17, _internal_k1(), byte_size, target);
    }
  }

  // repeated int32 k2 = 18 [packed = true];
  {
    int byte_size = _impl_._k2_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          18, _internal_k2(), byte_size, target);
    }
  }

  // repeated int32 k5 = 19 [packed = true];
  {
    int byte_size = _impl_._k5_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          19, _internal_k5(), byte_size, target);
    }
  }

  // map<int32, int32> k8 = 20;
  if (!_internal_k8().empty()) {
    using MapType = ::google::protobuf::Map<::int32_t, ::int32_t>;
    using WireHelper = _pbi::MapEntryFuncs<::int32_t, ::int32_t,
                                   _pbi::WireFormatLite::TYPE_INT32,
                                   _pbi::WireFormatLite::TYPE_INT32>;
    const auto& field = _internal_k8();

    if (stream->IsSerializationDeterministic() && field.size() > 1) {
      for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
        target = WireHelper::InternalSerialize(
            20, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : field) {
        target = WireHelper::InternalSerialize(
            20, entry.first, entry.second, target, stream);
      }
    }
  }

  // repeated .cfg.TestDemoE2 k9 = 21 [packed = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_k9_size()); i < n; i++) {
    const auto& repfield = this->_internal_k9().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(21, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cfg.TestDemoDynamic k15 = 22 [packed = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_k15_size()); i < n; i++) {
    const auto& repfield = this->_internal_k15().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(22, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestDemoType2)
  return target;
}

::size_t TestDemoType2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestDemoType2)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 k1 = 17 [packed = true];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_k1())
    ;
    _impl_._k1_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 2 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated int32 k2 = 18 [packed = true];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_k2())
    ;
    _impl_._k2_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 2 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated int32 k5 = 19 [packed = true];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_k5())
    ;
    _impl_._k5_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 2 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // map<int32, int32> k8 = 20;
  total_size += 2 * ::google::protobuf::internal::FromIntSize(_internal_k8_size());
  for (const auto& entry : _internal_k8()) {
    total_size += _pbi::MapEntryFuncs<::int32_t, ::int32_t,
                                   _pbi::WireFormatLite::TYPE_INT32,
                                   _pbi::WireFormatLite::TYPE_INT32>::ByteSizeLong(entry.first, entry.second);
  }
  // repeated .cfg.TestDemoE2 k9 = 21 [packed = false];
  total_size += 2UL * this->_internal_k9_size();
  for (const auto& msg : this->_internal_k9()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .cfg.TestDemoDynamic k15 = 22 [packed = false];
  total_size += 2UL * this->_internal_k15_size();
  for (const auto& msg : this->_internal_k15()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string x10 = 11;
  if (!this->_internal_x10().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_x10());
  }

  // string s1 = 15;
  if (!this->_internal_s1().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_s1());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .cfg.TestDemoType1 x12 = 12;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.x12_);
    }

    // .cfg.TestDemoDynamic x14 = 14;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.x14_);
    }

  }
  // int32 x4 = 1;
  if (this->_internal_x4() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_x4());
  }

  // bool x1 = 2;
  if (this->_internal_x1() != 0) {
    total_size += 2;
  }

  // int32 x2 = 3;
  if (this->_internal_x2() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_x2());
  }

  // int32 x3 = 4;
  if (this->_internal_x3() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_x3());
  }

  // int64 x5 = 5;
  if (this->_internal_x5() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_x5());
  }

  // double x7 = 7;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_x7 = this->_internal_x7();
  ::uint64_t raw_x7;
  memcpy(&raw_x7, &tmp_x7, sizeof(tmp_x7));
  if (raw_x7 != 0) {
    total_size += 9;
  }

  // float x6 = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_x6 = this->_internal_x6();
  ::uint32_t raw_x6;
  memcpy(&raw_x6, &tmp_x6, sizeof(tmp_x6));
  if (raw_x6 != 0) {
    total_size += 5;
  }

  // int32 x8_0 = 8;
  if (this->_internal_x8_0() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_x8_0());
  }

  // int64 x9 = 10;
  if (this->_internal_x9() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_x9());
  }

  // int32 x8 = 9;
  if (this->_internal_x8() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_x8());
  }

  // .cfg.TestDemoEnum x13 = 13;
  if (this->_internal_x13() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_x13());
  }

  // int64 t1 = 16;
  if (this->_internal_t1() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int64Size(
                                    this->_internal_t1());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestDemoType2::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestDemoType2::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestDemoType2::GetClassData() const { return &_class_data_; }


void TestDemoType2::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestDemoType2*>(&to_msg);
  auto& from = static_cast<const TestDemoType2&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestDemoType2)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_k1()->MergeFrom(from._internal_k1());
  _this->_internal_mutable_k2()->MergeFrom(from._internal_k2());
  _this->_internal_mutable_k5()->MergeFrom(from._internal_k5());
  _this->_impl_.k8_.MergeFrom(from._impl_.k8_);
  _this->_internal_mutable_k9()->MergeFrom(
      from._internal_k9());
  _this->_internal_mutable_k15()->MergeFrom(
      from._internal_k15());
  if (!from._internal_x10().empty()) {
    _this->_internal_set_x10(from._internal_x10());
  }
  if (!from._internal_s1().empty()) {
    _this->_internal_set_s1(from._internal_s1());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_x12()->::cfg::TestDemoType1::MergeFrom(
          from._internal_x12());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_x14()->::cfg::TestDemoDynamic::MergeFrom(
          from._internal_x14());
    }
  }
  if (from._internal_x4() != 0) {
    _this->_internal_set_x4(from._internal_x4());
  }
  if (from._internal_x1() != 0) {
    _this->_internal_set_x1(from._internal_x1());
  }
  if (from._internal_x2() != 0) {
    _this->_internal_set_x2(from._internal_x2());
  }
  if (from._internal_x3() != 0) {
    _this->_internal_set_x3(from._internal_x3());
  }
  if (from._internal_x5() != 0) {
    _this->_internal_set_x5(from._internal_x5());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_x7 = from._internal_x7();
  ::uint64_t raw_x7;
  memcpy(&raw_x7, &tmp_x7, sizeof(tmp_x7));
  if (raw_x7 != 0) {
    _this->_internal_set_x7(from._internal_x7());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_x6 = from._internal_x6();
  ::uint32_t raw_x6;
  memcpy(&raw_x6, &tmp_x6, sizeof(tmp_x6));
  if (raw_x6 != 0) {
    _this->_internal_set_x6(from._internal_x6());
  }
  if (from._internal_x8_0() != 0) {
    _this->_internal_set_x8_0(from._internal_x8_0());
  }
  if (from._internal_x9() != 0) {
    _this->_internal_set_x9(from._internal_x9());
  }
  if (from._internal_x8() != 0) {
    _this->_internal_set_x8(from._internal_x8());
  }
  if (from._internal_x13() != 0) {
    _this->_internal_set_x13(from._internal_x13());
  }
  if (from._internal_t1() != 0) {
    _this->_internal_set_t1(from._internal_t1());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestDemoType2::CopyFrom(const TestDemoType2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestDemoType2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestDemoType2::IsInitialized() const {
  return true;
}

void TestDemoType2::InternalSwap(TestDemoType2* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.k1_.InternalSwap(&other->_impl_.k1_);
  _impl_.k2_.InternalSwap(&other->_impl_.k2_);
  _impl_.k5_.InternalSwap(&other->_impl_.k5_);
  _impl_.k8_.InternalSwap(&other->_impl_.k8_);
  _impl_.k9_.InternalSwap(&other->_impl_.k9_);
  _impl_.k15_.InternalSwap(&other->_impl_.k15_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.x10_, lhs_arena,
                                       &other->_impl_.x10_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.s1_, lhs_arena,
                                       &other->_impl_.s1_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestDemoType2, _impl_.t1_)
      + sizeof(TestDemoType2::_impl_.t1_)
      - PROTOBUF_FIELD_OFFSET(TestDemoType2, _impl_.x12_)>(
          reinterpret_cast<char*>(&_impl_.x12_),
          reinterpret_cast<char*>(&other->_impl_.x12_));
}

::google::protobuf::Metadata TestDemoType2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[47]);
}
// ===================================================================

class TestDemoType1::_Internal {
 public:
};

TestDemoType1::TestDemoType1(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestDemoType1)
}
TestDemoType1::TestDemoType1(const TestDemoType1& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cfg.TestDemoType1)
}
inline void TestDemoType1::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.x1_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
TestDemoType1::~TestDemoType1() {
  // @@protoc_insertion_point(destructor:cfg.TestDemoType1)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestDemoType1::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void TestDemoType1::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestDemoType1::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestDemoType1)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.x1_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestDemoType1::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> TestDemoType1::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_TestDemoType1_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // int32 x1 = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestDemoType1, _impl_.x1_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TestDemoType1, _impl_.x1_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 x1 = 1;
    {PROTOBUF_FIELD_OFFSET(TestDemoType1, _impl_.x1_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* TestDemoType1::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestDemoType1)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 x1 = 1;
  if (this->_internal_x1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_x1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestDemoType1)
  return target;
}

::size_t TestDemoType1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestDemoType1)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x1 = 1;
  if (this->_internal_x1() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_x1());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestDemoType1::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestDemoType1::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestDemoType1::GetClassData() const { return &_class_data_; }


void TestDemoType1::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestDemoType1*>(&to_msg);
  auto& from = static_cast<const TestDemoType1&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestDemoType1)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_x1() != 0) {
    _this->_internal_set_x1(from._internal_x1());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestDemoType1::CopyFrom(const TestDemoType1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestDemoType1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestDemoType1::IsInitialized() const {
  return true;
}

void TestDemoType1::InternalSwap(TestDemoType1* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.x1_, other->_impl_.x1_);
}

::google::protobuf::Metadata TestDemoType1::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[48]);
}
// ===================================================================

class TestDemoDynamic::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::cfg::TestDemoDynamic, _impl_._oneof_case_);
  static const ::cfg::TestDemoD2& demod2(const TestDemoDynamic* msg);
  static const ::cfg::TestDemoE1& demoe1(const TestDemoDynamic* msg);
  static const ::cfg::TestLoginRoleInfo& roleinfo(const TestDemoDynamic* msg);
  static const ::cfg::TestDemoD5& demod5(const TestDemoDynamic* msg);
};

const ::cfg::TestDemoD2& TestDemoDynamic::_Internal::demod2(const TestDemoDynamic* msg) {
  return *msg->_impl_.value_.demod2_;
}
const ::cfg::TestDemoE1& TestDemoDynamic::_Internal::demoe1(const TestDemoDynamic* msg) {
  return *msg->_impl_.value_.demoe1_;
}
const ::cfg::TestLoginRoleInfo& TestDemoDynamic::_Internal::roleinfo(const TestDemoDynamic* msg) {
  return *msg->_impl_.value_.roleinfo_;
}
const ::cfg::TestDemoD5& TestDemoDynamic::_Internal::demod5(const TestDemoDynamic* msg) {
  return *msg->_impl_.value_.demod5_;
}
void TestDemoDynamic::set_allocated_demod2(::cfg::TestDemoD2* demod2) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (demod2) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(demod2);
    if (message_arena != submessage_arena) {
      demod2 = ::google::protobuf::internal::GetOwnedMessage(message_arena, demod2, submessage_arena);
    }
    set_has_demod2();
    _impl_.value_.demod2_ = demod2;
  }
  // @@protoc_insertion_point(field_set_allocated:cfg.TestDemoDynamic.DemoD2)
}
void TestDemoDynamic::set_allocated_demoe1(::cfg::TestDemoE1* demoe1) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (demoe1) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(demoe1);
    if (message_arena != submessage_arena) {
      demoe1 = ::google::protobuf::internal::GetOwnedMessage(message_arena, demoe1, submessage_arena);
    }
    set_has_demoe1();
    _impl_.value_.demoe1_ = demoe1;
  }
  // @@protoc_insertion_point(field_set_allocated:cfg.TestDemoDynamic.DemoE1)
}
void TestDemoDynamic::set_allocated_roleinfo(::cfg::TestLoginRoleInfo* roleinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (roleinfo) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(roleinfo);
    if (message_arena != submessage_arena) {
      roleinfo = ::google::protobuf::internal::GetOwnedMessage(message_arena, roleinfo, submessage_arena);
    }
    set_has_roleinfo();
    _impl_.value_.roleinfo_ = roleinfo;
  }
  // @@protoc_insertion_point(field_set_allocated:cfg.TestDemoDynamic.RoleInfo)
}
void TestDemoDynamic::set_allocated_demod5(::cfg::TestDemoD5* demod5) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (demod5) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(demod5);
    if (message_arena != submessage_arena) {
      demod5 = ::google::protobuf::internal::GetOwnedMessage(message_arena, demod5, submessage_arena);
    }
    set_has_demod5();
    _impl_.value_.demod5_ = demod5;
  }
  // @@protoc_insertion_point(field_set_allocated:cfg.TestDemoDynamic.DemoD5)
}
TestDemoDynamic::TestDemoDynamic(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestDemoDynamic)
}
TestDemoDynamic::TestDemoDynamic(const TestDemoDynamic& from) : ::google::protobuf::Message() {
  TestDemoDynamic* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_._oneof_case_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kDemoD2: {
      _this->_internal_mutable_demod2()->::cfg::TestDemoD2::MergeFrom(
          from._internal_demod2());
      break;
    }
    case kDemoE1: {
      _this->_internal_mutable_demoe1()->::cfg::TestDemoE1::MergeFrom(
          from._internal_demoe1());
      break;
    }
    case kRoleInfo: {
      _this->_internal_mutable_roleinfo()->::cfg::TestLoginRoleInfo::MergeFrom(
          from._internal_roleinfo());
      break;
    }
    case kDemoD5: {
      _this->_internal_mutable_demod5()->::cfg::TestDemoD5::MergeFrom(
          from._internal_demod5());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }

  // @@protoc_insertion_point(copy_constructor:cfg.TestDemoDynamic)
}
inline void TestDemoDynamic::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_._oneof_case_)*/ {},
  };
  clear_has_value();
}
TestDemoDynamic::~TestDemoDynamic() {
  // @@protoc_insertion_point(destructor:cfg.TestDemoDynamic)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestDemoDynamic::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_value()) {
    clear_value();
  }
}
void TestDemoDynamic::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestDemoDynamic::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:cfg.TestDemoDynamic)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  switch (value_case()) {
    case kDemoD2: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.demod2_;
      }
      break;
    }
    case kDemoE1: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.demoe1_;
      }
      break;
    }
    case kRoleInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.roleinfo_;
      }
      break;
    }
    case kDemoD5: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.demod5_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}


PROTOBUF_NOINLINE void TestDemoDynamic::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestDemoDynamic)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestDemoDynamic::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 4, 4, 0, 2> TestDemoDynamic::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TestDemoDynamic_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .cfg.TestDemoD2 DemoD2 = 1;
    {PROTOBUF_FIELD_OFFSET(TestDemoDynamic, _impl_.value_.demod2_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cfg.TestDemoE1 DemoE1 = 2;
    {PROTOBUF_FIELD_OFFSET(TestDemoDynamic, _impl_.value_.demoe1_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cfg.TestLoginRoleInfo RoleInfo = 3;
    {PROTOBUF_FIELD_OFFSET(TestDemoDynamic, _impl_.value_.roleinfo_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cfg.TestDemoD5 DemoD5 = 4;
    {PROTOBUF_FIELD_OFFSET(TestDemoDynamic, _impl_.value_.demod5_), _Internal::kOneofCaseOffset + 0, 3,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::TestDemoD2>()},
    {::_pbi::TcParser::GetTable<::cfg::TestDemoE1>()},
    {::_pbi::TcParser::GetTable<::cfg::TestLoginRoleInfo>()},
    {::_pbi::TcParser::GetTable<::cfg::TestDemoD5>()},
  }}, {{
  }},
};

::uint8_t* TestDemoDynamic::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestDemoDynamic)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  switch (value_case()) {
    case kDemoD2: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::demod2(this),
          _Internal::demod2(this).GetCachedSize(), target, stream);
      break;
    }
    case kDemoE1: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::demoe1(this),
          _Internal::demoe1(this).GetCachedSize(), target, stream);
      break;
    }
    case kRoleInfo: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::roleinfo(this),
          _Internal::roleinfo(this).GetCachedSize(), target, stream);
      break;
    }
    case kDemoD5: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::demod5(this),
          _Internal::demod5(this).GetCachedSize(), target, stream);
      break;
    }
    default:
      break;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestDemoDynamic)
  return target;
}

::size_t TestDemoDynamic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestDemoDynamic)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_case()) {
    // .cfg.TestDemoD2 DemoD2 = 1;
    case kDemoD2: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.value_.demod2_);
      break;
    }
    // .cfg.TestDemoE1 DemoE1 = 2;
    case kDemoE1: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.value_.demoe1_);
      break;
    }
    // .cfg.TestLoginRoleInfo RoleInfo = 3;
    case kRoleInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.value_.roleinfo_);
      break;
    }
    // .cfg.TestDemoD5 DemoD5 = 4;
    case kDemoD5: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.value_.demod5_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestDemoDynamic::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestDemoDynamic::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestDemoDynamic::GetClassData() const { return &_class_data_; }


void TestDemoDynamic::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestDemoDynamic*>(&to_msg);
  auto& from = static_cast<const TestDemoDynamic&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestDemoDynamic)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kDemoD2: {
      _this->_internal_mutable_demod2()->::cfg::TestDemoD2::MergeFrom(
          from._internal_demod2());
      break;
    }
    case kDemoE1: {
      _this->_internal_mutable_demoe1()->::cfg::TestDemoE1::MergeFrom(
          from._internal_demoe1());
      break;
    }
    case kRoleInfo: {
      _this->_internal_mutable_roleinfo()->::cfg::TestLoginRoleInfo::MergeFrom(
          from._internal_roleinfo());
      break;
    }
    case kDemoD5: {
      _this->_internal_mutable_demod5()->::cfg::TestDemoD5::MergeFrom(
          from._internal_demod5());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestDemoDynamic::CopyFrom(const TestDemoDynamic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestDemoDynamic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestDemoDynamic::IsInitialized() const {
  return true;
}

void TestDemoDynamic::InternalSwap(TestDemoDynamic* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.value_, other->_impl_.value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata TestDemoDynamic::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[49]);
}
// ===================================================================

class TestDemoD2::_Internal {
 public:
};

TestDemoD2::TestDemoD2(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestDemoD2)
}
TestDemoD2::TestDemoD2(const TestDemoD2& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cfg.TestDemoD2)
}
inline void TestDemoD2::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.x1_){0},
      decltype(_impl_.x2_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
TestDemoD2::~TestDemoD2() {
  // @@protoc_insertion_point(destructor:cfg.TestDemoD2)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestDemoD2::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void TestDemoD2::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestDemoD2::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestDemoD2)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x1_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.x2_) -
      reinterpret_cast<char*>(&_impl_.x1_)) + sizeof(_impl_.x2_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestDemoD2::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> TestDemoD2::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_TestDemoD2_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // int32 x2 = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestDemoD2, _impl_.x2_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(TestDemoD2, _impl_.x2_)}},
    // int32 x1 = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestDemoD2, _impl_.x1_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TestDemoD2, _impl_.x1_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 x1 = 1;
    {PROTOBUF_FIELD_OFFSET(TestDemoD2, _impl_.x1_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 x2 = 2;
    {PROTOBUF_FIELD_OFFSET(TestDemoD2, _impl_.x2_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* TestDemoD2::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestDemoD2)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 x1 = 1;
  if (this->_internal_x1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_x1(), target);
  }

  // int32 x2 = 2;
  if (this->_internal_x2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_x2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestDemoD2)
  return target;
}

::size_t TestDemoD2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestDemoD2)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x1 = 1;
  if (this->_internal_x1() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_x1());
  }

  // int32 x2 = 2;
  if (this->_internal_x2() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_x2());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestDemoD2::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestDemoD2::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestDemoD2::GetClassData() const { return &_class_data_; }


void TestDemoD2::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestDemoD2*>(&to_msg);
  auto& from = static_cast<const TestDemoD2&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestDemoD2)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_x1() != 0) {
    _this->_internal_set_x1(from._internal_x1());
  }
  if (from._internal_x2() != 0) {
    _this->_internal_set_x2(from._internal_x2());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestDemoD2::CopyFrom(const TestDemoD2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestDemoD2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestDemoD2::IsInitialized() const {
  return true;
}

void TestDemoD2::InternalSwap(TestDemoD2* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestDemoD2, _impl_.x2_)
      + sizeof(TestDemoD2::_impl_.x2_)
      - PROTOBUF_FIELD_OFFSET(TestDemoD2, _impl_.x1_)>(
          reinterpret_cast<char*>(&_impl_.x1_),
          reinterpret_cast<char*>(&other->_impl_.x1_));
}

::google::protobuf::Metadata TestDemoD2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[50]);
}
// ===================================================================

class TestDemoD3::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::cfg::TestDemoD3, _impl_._oneof_case_);
  static const ::cfg::TestDemoE1& demoe1(const TestDemoD3* msg);
  static const ::cfg::TestLoginRoleInfo& roleinfo(const TestDemoD3* msg);
};

const ::cfg::TestDemoE1& TestDemoD3::_Internal::demoe1(const TestDemoD3* msg) {
  return *msg->_impl_.value_.demoe1_;
}
const ::cfg::TestLoginRoleInfo& TestDemoD3::_Internal::roleinfo(const TestDemoD3* msg) {
  return *msg->_impl_.value_.roleinfo_;
}
void TestDemoD3::set_allocated_demoe1(::cfg::TestDemoE1* demoe1) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (demoe1) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(demoe1);
    if (message_arena != submessage_arena) {
      demoe1 = ::google::protobuf::internal::GetOwnedMessage(message_arena, demoe1, submessage_arena);
    }
    set_has_demoe1();
    _impl_.value_.demoe1_ = demoe1;
  }
  // @@protoc_insertion_point(field_set_allocated:cfg.TestDemoD3.DemoE1)
}
void TestDemoD3::set_allocated_roleinfo(::cfg::TestLoginRoleInfo* roleinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (roleinfo) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(roleinfo);
    if (message_arena != submessage_arena) {
      roleinfo = ::google::protobuf::internal::GetOwnedMessage(message_arena, roleinfo, submessage_arena);
    }
    set_has_roleinfo();
    _impl_.value_.roleinfo_ = roleinfo;
  }
  // @@protoc_insertion_point(field_set_allocated:cfg.TestDemoD3.RoleInfo)
}
TestDemoD3::TestDemoD3(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestDemoD3)
}
TestDemoD3::TestDemoD3(const TestDemoD3& from) : ::google::protobuf::Message() {
  TestDemoD3* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_._oneof_case_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kDemoE1: {
      _this->_internal_mutable_demoe1()->::cfg::TestDemoE1::MergeFrom(
          from._internal_demoe1());
      break;
    }
    case kRoleInfo: {
      _this->_internal_mutable_roleinfo()->::cfg::TestLoginRoleInfo::MergeFrom(
          from._internal_roleinfo());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }

  // @@protoc_insertion_point(copy_constructor:cfg.TestDemoD3)
}
inline void TestDemoD3::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_._oneof_case_)*/ {},
  };
  clear_has_value();
}
TestDemoD3::~TestDemoD3() {
  // @@protoc_insertion_point(destructor:cfg.TestDemoD3)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestDemoD3::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_value()) {
    clear_value();
  }
}
void TestDemoD3::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestDemoD3::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:cfg.TestDemoD3)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  switch (value_case()) {
    case kDemoE1: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.demoe1_;
      }
      break;
    }
    case kRoleInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.roleinfo_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}


PROTOBUF_NOINLINE void TestDemoD3::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestDemoD3)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestDemoD3::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 2, 2, 0, 2> TestDemoD3::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967289,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TestDemoD3_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .cfg.TestDemoE1 DemoE1 = 2;
    {PROTOBUF_FIELD_OFFSET(TestDemoD3, _impl_.value_.demoe1_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cfg.TestLoginRoleInfo RoleInfo = 3;
    {PROTOBUF_FIELD_OFFSET(TestDemoD3, _impl_.value_.roleinfo_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::TestDemoE1>()},
    {::_pbi::TcParser::GetTable<::cfg::TestLoginRoleInfo>()},
  }}, {{
  }},
};

::uint8_t* TestDemoD3::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestDemoD3)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  switch (value_case()) {
    case kDemoE1: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::demoe1(this),
          _Internal::demoe1(this).GetCachedSize(), target, stream);
      break;
    }
    case kRoleInfo: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::roleinfo(this),
          _Internal::roleinfo(this).GetCachedSize(), target, stream);
      break;
    }
    default:
      break;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestDemoD3)
  return target;
}

::size_t TestDemoD3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestDemoD3)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_case()) {
    // .cfg.TestDemoE1 DemoE1 = 2;
    case kDemoE1: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.value_.demoe1_);
      break;
    }
    // .cfg.TestLoginRoleInfo RoleInfo = 3;
    case kRoleInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.value_.roleinfo_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestDemoD3::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestDemoD3::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestDemoD3::GetClassData() const { return &_class_data_; }


void TestDemoD3::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestDemoD3*>(&to_msg);
  auto& from = static_cast<const TestDemoD3&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestDemoD3)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kDemoE1: {
      _this->_internal_mutable_demoe1()->::cfg::TestDemoE1::MergeFrom(
          from._internal_demoe1());
      break;
    }
    case kRoleInfo: {
      _this->_internal_mutable_roleinfo()->::cfg::TestLoginRoleInfo::MergeFrom(
          from._internal_roleinfo());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestDemoD3::CopyFrom(const TestDemoD3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestDemoD3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestDemoD3::IsInitialized() const {
  return true;
}

void TestDemoD3::InternalSwap(TestDemoD3* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.value_, other->_impl_.value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata TestDemoD3::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[51]);
}
// ===================================================================

class TestDemoE1::_Internal {
 public:
};

TestDemoE1::TestDemoE1(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestDemoE1)
}
TestDemoE1::TestDemoE1(const TestDemoE1& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cfg.TestDemoE1)
}
inline void TestDemoE1::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.x1_){0},
      decltype(_impl_.x3_){0},
      decltype(_impl_.x4_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
TestDemoE1::~TestDemoE1() {
  // @@protoc_insertion_point(destructor:cfg.TestDemoE1)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestDemoE1::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void TestDemoE1::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestDemoE1::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestDemoE1)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x1_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.x4_) -
      reinterpret_cast<char*>(&_impl_.x1_)) + sizeof(_impl_.x4_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestDemoE1::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> TestDemoE1::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_TestDemoE1_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 x1 = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestDemoE1, _impl_.x1_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TestDemoE1, _impl_.x1_)}},
    // int32 x3 = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestDemoE1, _impl_.x3_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(TestDemoE1, _impl_.x3_)}},
    // int32 x4 = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestDemoE1, _impl_.x4_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(TestDemoE1, _impl_.x4_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 x1 = 1;
    {PROTOBUF_FIELD_OFFSET(TestDemoE1, _impl_.x1_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 x3 = 2;
    {PROTOBUF_FIELD_OFFSET(TestDemoE1, _impl_.x3_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 x4 = 3;
    {PROTOBUF_FIELD_OFFSET(TestDemoE1, _impl_.x4_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* TestDemoE1::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestDemoE1)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 x1 = 1;
  if (this->_internal_x1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_x1(), target);
  }

  // int32 x3 = 2;
  if (this->_internal_x3() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_x3(), target);
  }

  // int32 x4 = 3;
  if (this->_internal_x4() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_x4(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestDemoE1)
  return target;
}

::size_t TestDemoE1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestDemoE1)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x1 = 1;
  if (this->_internal_x1() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_x1());
  }

  // int32 x3 = 2;
  if (this->_internal_x3() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_x3());
  }

  // int32 x4 = 3;
  if (this->_internal_x4() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_x4());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestDemoE1::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestDemoE1::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestDemoE1::GetClassData() const { return &_class_data_; }


void TestDemoE1::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestDemoE1*>(&to_msg);
  auto& from = static_cast<const TestDemoE1&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestDemoE1)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_x1() != 0) {
    _this->_internal_set_x1(from._internal_x1());
  }
  if (from._internal_x3() != 0) {
    _this->_internal_set_x3(from._internal_x3());
  }
  if (from._internal_x4() != 0) {
    _this->_internal_set_x4(from._internal_x4());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestDemoE1::CopyFrom(const TestDemoE1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestDemoE1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestDemoE1::IsInitialized() const {
  return true;
}

void TestDemoE1::InternalSwap(TestDemoE1* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestDemoE1, _impl_.x4_)
      + sizeof(TestDemoE1::_impl_.x4_)
      - PROTOBUF_FIELD_OFFSET(TestDemoE1, _impl_.x1_)>(
          reinterpret_cast<char*>(&_impl_.x1_),
          reinterpret_cast<char*>(&other->_impl_.x1_));
}

::google::protobuf::Metadata TestDemoE1::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[52]);
}
// ===================================================================

class TestLoginRoleInfo::_Internal {
 public:
};

TestLoginRoleInfo::TestLoginRoleInfo(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestLoginRoleInfo)
}
TestLoginRoleInfo::TestLoginRoleInfo(const TestLoginRoleInfo& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cfg.TestLoginRoleInfo)
}
inline void TestLoginRoleInfo::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.x1_){0},
      decltype(_impl_.x3_){0},
      decltype(_impl_.role_id_){::int64_t{0}},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
TestLoginRoleInfo::~TestLoginRoleInfo() {
  // @@protoc_insertion_point(destructor:cfg.TestLoginRoleInfo)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestLoginRoleInfo::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void TestLoginRoleInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestLoginRoleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestLoginRoleInfo)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x1_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.role_id_) -
      reinterpret_cast<char*>(&_impl_.x1_)) + sizeof(_impl_.role_id_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestLoginRoleInfo::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> TestLoginRoleInfo::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_TestLoginRoleInfo_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 x1 = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestLoginRoleInfo, _impl_.x1_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TestLoginRoleInfo, _impl_.x1_)}},
    // int32 x3 = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestLoginRoleInfo, _impl_.x3_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(TestLoginRoleInfo, _impl_.x3_)}},
    // int64 role_id = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(TestLoginRoleInfo, _impl_.role_id_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(TestLoginRoleInfo, _impl_.role_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 x1 = 1;
    {PROTOBUF_FIELD_OFFSET(TestLoginRoleInfo, _impl_.x1_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 x3 = 2;
    {PROTOBUF_FIELD_OFFSET(TestLoginRoleInfo, _impl_.x3_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int64 role_id = 3;
    {PROTOBUF_FIELD_OFFSET(TestLoginRoleInfo, _impl_.role_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* TestLoginRoleInfo::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestLoginRoleInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 x1 = 1;
  if (this->_internal_x1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_x1(), target);
  }

  // int32 x3 = 2;
  if (this->_internal_x3() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_x3(), target);
  }

  // int64 role_id = 3;
  if (this->_internal_role_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<3>(
            stream, this->_internal_role_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestLoginRoleInfo)
  return target;
}

::size_t TestLoginRoleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestLoginRoleInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x1 = 1;
  if (this->_internal_x1() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_x1());
  }

  // int32 x3 = 2;
  if (this->_internal_x3() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_x3());
  }

  // int64 role_id = 3;
  if (this->_internal_role_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_role_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestLoginRoleInfo::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestLoginRoleInfo::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestLoginRoleInfo::GetClassData() const { return &_class_data_; }


void TestLoginRoleInfo::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestLoginRoleInfo*>(&to_msg);
  auto& from = static_cast<const TestLoginRoleInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestLoginRoleInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_x1() != 0) {
    _this->_internal_set_x1(from._internal_x1());
  }
  if (from._internal_x3() != 0) {
    _this->_internal_set_x3(from._internal_x3());
  }
  if (from._internal_role_id() != 0) {
    _this->_internal_set_role_id(from._internal_role_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestLoginRoleInfo::CopyFrom(const TestLoginRoleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestLoginRoleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestLoginRoleInfo::IsInitialized() const {
  return true;
}

void TestLoginRoleInfo::InternalSwap(TestLoginRoleInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestLoginRoleInfo, _impl_.role_id_)
      + sizeof(TestLoginRoleInfo::_impl_.role_id_)
      - PROTOBUF_FIELD_OFFSET(TestLoginRoleInfo, _impl_.x1_)>(
          reinterpret_cast<char*>(&_impl_.x1_),
          reinterpret_cast<char*>(&other->_impl_.x1_));
}

::google::protobuf::Metadata TestLoginRoleInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[53]);
}
// ===================================================================

class TestDemoD5::_Internal {
 public:
  using HasBits = decltype(std::declval<TestDemoD5>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TestDemoD5, _impl_._has_bits_);
  static const ::cfg::TestDateTimeRange& time(const TestDemoD5* msg);
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cfg::TestDateTimeRange& TestDemoD5::_Internal::time(const TestDemoD5* msg) {
  return *msg->_impl_.time_;
}
TestDemoD5::TestDemoD5(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestDemoD5)
}
TestDemoD5::TestDemoD5(const TestDemoD5& from) : ::google::protobuf::Message() {
  TestDemoD5* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.time_){nullptr},
      decltype(_impl_.x1_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.time_ = new ::cfg::TestDateTimeRange(*from._impl_.time_);
  }
  _this->_impl_.x1_ = from._impl_.x1_;

  // @@protoc_insertion_point(copy_constructor:cfg.TestDemoD5)
}
inline void TestDemoD5::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.time_){nullptr},
      decltype(_impl_.x1_){0},
  };
}
TestDemoD5::~TestDemoD5() {
  // @@protoc_insertion_point(destructor:cfg.TestDemoD5)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestDemoD5::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.time_;
}
void TestDemoD5::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestDemoD5::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestDemoD5)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.time_ != nullptr);
    _impl_.time_->Clear();
  }
  _impl_.x1_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestDemoD5::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> TestDemoD5::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TestDemoD5, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TestDemoD5_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .cfg.TestDateTimeRange time = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(TestDemoD5, _impl_.time_)}},
    // int32 x1 = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestDemoD5, _impl_.x1_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TestDemoD5, _impl_.x1_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 x1 = 1;
    {PROTOBUF_FIELD_OFFSET(TestDemoD5, _impl_.x1_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .cfg.TestDateTimeRange time = 2;
    {PROTOBUF_FIELD_OFFSET(TestDemoD5, _impl_.time_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::TestDateTimeRange>()},
  }}, {{
  }},
};

::uint8_t* TestDemoD5::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestDemoD5)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 x1 = 1;
  if (this->_internal_x1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_x1(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cfg.TestDateTimeRange time = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::time(this),
        _Internal::time(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestDemoD5)
  return target;
}

::size_t TestDemoD5::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestDemoD5)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cfg.TestDateTimeRange time = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.time_);
  }

  // int32 x1 = 1;
  if (this->_internal_x1() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_x1());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestDemoD5::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestDemoD5::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestDemoD5::GetClassData() const { return &_class_data_; }


void TestDemoD5::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestDemoD5*>(&to_msg);
  auto& from = static_cast<const TestDemoD5&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestDemoD5)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_time()->::cfg::TestDateTimeRange::MergeFrom(
        from._internal_time());
  }
  if (from._internal_x1() != 0) {
    _this->_internal_set_x1(from._internal_x1());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestDemoD5::CopyFrom(const TestDemoD5& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestDemoD5)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestDemoD5::IsInitialized() const {
  return true;
}

void TestDemoD5::InternalSwap(TestDemoD5* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestDemoD5, _impl_.x1_)
      + sizeof(TestDemoD5::_impl_.x1_)
      - PROTOBUF_FIELD_OFFSET(TestDemoD5, _impl_.time_)>(
          reinterpret_cast<char*>(&_impl_.time_),
          reinterpret_cast<char*>(&other->_impl_.time_));
}

::google::protobuf::Metadata TestDemoD5::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[54]);
}
// ===================================================================

class TestDateTimeRange::_Internal {
 public:
};

TestDateTimeRange::TestDateTimeRange(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestDateTimeRange)
}
TestDateTimeRange::TestDateTimeRange(const TestDateTimeRange& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cfg.TestDateTimeRange)
}
inline void TestDateTimeRange::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.start_time_){::int64_t{0}},
      decltype(_impl_.end_time_){::int64_t{0}},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
TestDateTimeRange::~TestDateTimeRange() {
  // @@protoc_insertion_point(destructor:cfg.TestDateTimeRange)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestDateTimeRange::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void TestDateTimeRange::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestDateTimeRange::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestDateTimeRange)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.start_time_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.end_time_) -
      reinterpret_cast<char*>(&_impl_.start_time_)) + sizeof(_impl_.end_time_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestDateTimeRange::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> TestDateTimeRange::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_TestDateTimeRange_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // int64 end_time = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(TestDateTimeRange, _impl_.end_time_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(TestDateTimeRange, _impl_.end_time_)}},
    // int64 start_time = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(TestDateTimeRange, _impl_.start_time_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TestDateTimeRange, _impl_.start_time_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int64 start_time = 1;
    {PROTOBUF_FIELD_OFFSET(TestDateTimeRange, _impl_.start_time_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int64 end_time = 2;
    {PROTOBUF_FIELD_OFFSET(TestDateTimeRange, _impl_.end_time_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* TestDateTimeRange::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestDateTimeRange)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int64 start_time = 1;
  if (this->_internal_start_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<1>(
            stream, this->_internal_start_time(), target);
  }

  // int64 end_time = 2;
  if (this->_internal_end_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<2>(
            stream, this->_internal_end_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestDateTimeRange)
  return target;
}

::size_t TestDateTimeRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestDateTimeRange)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 start_time = 1;
  if (this->_internal_start_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_start_time());
  }

  // int64 end_time = 2;
  if (this->_internal_end_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_end_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestDateTimeRange::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestDateTimeRange::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestDateTimeRange::GetClassData() const { return &_class_data_; }


void TestDateTimeRange::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestDateTimeRange*>(&to_msg);
  auto& from = static_cast<const TestDateTimeRange&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestDateTimeRange)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_start_time() != 0) {
    _this->_internal_set_start_time(from._internal_start_time());
  }
  if (from._internal_end_time() != 0) {
    _this->_internal_set_end_time(from._internal_end_time());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestDateTimeRange::CopyFrom(const TestDateTimeRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestDateTimeRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestDateTimeRange::IsInitialized() const {
  return true;
}

void TestDateTimeRange::InternalSwap(TestDateTimeRange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestDateTimeRange, _impl_.end_time_)
      + sizeof(TestDateTimeRange::_impl_.end_time_)
      - PROTOBUF_FIELD_OFFSET(TestDateTimeRange, _impl_.start_time_)>(
          reinterpret_cast<char*>(&_impl_.start_time_),
          reinterpret_cast<char*>(&other->_impl_.start_time_));
}

::google::protobuf::Metadata TestDateTimeRange::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[55]);
}
// ===================================================================

class TestDemoE2::_Internal {
 public:
  using HasBits = decltype(std::declval<TestDemoE2>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TestDemoE2, _impl_._has_bits_);
  static void set_has_y1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TestDemoE2::TestDemoE2(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestDemoE2)
}
TestDemoE2::TestDemoE2(const TestDemoE2& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cfg.TestDemoE2)
}
inline void TestDemoE2::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.y1_){0},
      decltype(_impl_.y2_){false},
  };
}
TestDemoE2::~TestDemoE2() {
  // @@protoc_insertion_point(destructor:cfg.TestDemoE2)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestDemoE2::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void TestDemoE2::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestDemoE2::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestDemoE2)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.y1_ = 0;
  _impl_.y2_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestDemoE2::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> TestDemoE2::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TestDemoE2, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_TestDemoE2_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // bool y2 = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(TestDemoE2, _impl_.y2_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(TestDemoE2, _impl_.y2_)}},
    // optional int32 y1 = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestDemoE2, _impl_.y1_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(TestDemoE2, _impl_.y1_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional int32 y1 = 1;
    {PROTOBUF_FIELD_OFFSET(TestDemoE2, _impl_.y1_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // bool y2 = 2;
    {PROTOBUF_FIELD_OFFSET(TestDemoE2, _impl_.y2_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* TestDemoE2::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestDemoE2)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 y1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_y1(), target);
  }

  // bool y2 = 2;
  if (this->_internal_y2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_y2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestDemoE2)
  return target;
}

::size_t TestDemoE2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestDemoE2)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 y1 = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_y1());
  }

  // bool y2 = 2;
  if (this->_internal_y2() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestDemoE2::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestDemoE2::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestDemoE2::GetClassData() const { return &_class_data_; }


void TestDemoE2::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestDemoE2*>(&to_msg);
  auto& from = static_cast<const TestDemoE2&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestDemoE2)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_y1(from._internal_y1());
  }
  if (from._internal_y2() != 0) {
    _this->_internal_set_y2(from._internal_y2());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestDemoE2::CopyFrom(const TestDemoE2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestDemoE2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestDemoE2::IsInitialized() const {
  return true;
}

void TestDemoE2::InternalSwap(TestDemoE2* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestDemoE2, _impl_.y2_)
      + sizeof(TestDemoE2::_impl_.y2_)
      - PROTOBUF_FIELD_OFFSET(TestDemoE2, _impl_.y1_)>(
          reinterpret_cast<char*>(&_impl_.y1_),
          reinterpret_cast<char*>(&other->_impl_.y1_));
}

::google::protobuf::Metadata TestDemoE2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[56]);
}
// ===================================================================

class TestDemoSingletonType::_Internal {
 public:
  using HasBits = decltype(std::declval<TestDemoSingletonType>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TestDemoSingletonType, _impl_._has_bits_);
  static const ::cfg::TestDemoDynamic& date(const TestDemoSingletonType* msg);
  static void set_has_date(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cfg::TestDemoDynamic& TestDemoSingletonType::_Internal::date(const TestDemoSingletonType* msg) {
  return *msg->_impl_.date_;
}
TestDemoSingletonType::TestDemoSingletonType(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestDemoSingletonType)
}
TestDemoSingletonType::TestDemoSingletonType(const TestDemoSingletonType& from) : ::google::protobuf::Message() {
  TestDemoSingletonType* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.name_){},
      decltype(_impl_.date_){nullptr},
      decltype(_impl_.id_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.date_ = new ::cfg::TestDemoDynamic(*from._impl_.date_);
  }
  _this->_impl_.id_ = from._impl_.id_;

  // @@protoc_insertion_point(copy_constructor:cfg.TestDemoSingletonType)
}
inline void TestDemoSingletonType::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.name_){},
      decltype(_impl_.date_){nullptr},
      decltype(_impl_.id_){0},
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
TestDemoSingletonType::~TestDemoSingletonType() {
  // @@protoc_insertion_point(destructor:cfg.TestDemoSingletonType)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestDemoSingletonType::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.date_;
}
void TestDemoSingletonType::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestDemoSingletonType::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestDemoSingletonType)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.date_ != nullptr);
    _impl_.date_->Clear();
  }
  _impl_.id_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestDemoSingletonType::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 38, 2> TestDemoSingletonType::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TestDemoSingletonType, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TestDemoSingletonType_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestDemoSingletonType, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TestDemoSingletonType, _impl_.id_)}},
    // string name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(TestDemoSingletonType, _impl_.name_)}},
    // .cfg.TestDemoDynamic date = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(TestDemoSingletonType, _impl_.date_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(TestDemoSingletonType, _impl_.id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string name = 2;
    {PROTOBUF_FIELD_OFFSET(TestDemoSingletonType, _impl_.name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .cfg.TestDemoDynamic date = 3;
    {PROTOBUF_FIELD_OFFSET(TestDemoSingletonType, _impl_.date_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::TestDemoDynamic>()},
  }}, {{
    "\31\0\4\0\0\0\0\0"
    "cfg.TestDemoSingletonType"
    "name"
  }},
};

::uint8_t* TestDemoSingletonType::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestDemoSingletonType)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.TestDemoSingletonType.name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cfg.TestDemoDynamic date = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::date(this),
        _Internal::date(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestDemoSingletonType)
  return target;
}

::size_t TestDemoSingletonType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestDemoSingletonType)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // .cfg.TestDemoDynamic date = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.date_);
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestDemoSingletonType::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestDemoSingletonType::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestDemoSingletonType::GetClassData() const { return &_class_data_; }


void TestDemoSingletonType::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestDemoSingletonType*>(&to_msg);
  auto& from = static_cast<const TestDemoSingletonType&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestDemoSingletonType)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_date()->::cfg::TestDemoDynamic::MergeFrom(
        from._internal_date());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestDemoSingletonType::CopyFrom(const TestDemoSingletonType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestDemoSingletonType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestDemoSingletonType::IsInitialized() const {
  return true;
}

void TestDemoSingletonType::InternalSwap(TestDemoSingletonType* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestDemoSingletonType, _impl_.id_)
      + sizeof(TestDemoSingletonType::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(TestDemoSingletonType, _impl_.date_)>(
          reinterpret_cast<char*>(&_impl_.date_),
          reinterpret_cast<char*>(&other->_impl_.date_));
}

::google::protobuf::Metadata TestDemoSingletonType::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[57]);
}
// ===================================================================

class TestNotIndexList::_Internal {
 public:
};

TestNotIndexList::TestNotIndexList(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestNotIndexList)
}
TestNotIndexList::TestNotIndexList(const TestNotIndexList& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cfg.TestNotIndexList)
}
inline void TestNotIndexList::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0},
      decltype(_impl_.y_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
TestNotIndexList::~TestNotIndexList() {
  // @@protoc_insertion_point(destructor:cfg.TestNotIndexList)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestNotIndexList::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void TestNotIndexList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestNotIndexList::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestNotIndexList)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestNotIndexList::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> TestNotIndexList::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_TestNotIndexList_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // int32 y = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestNotIndexList, _impl_.y_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(TestNotIndexList, _impl_.y_)}},
    // int32 x = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestNotIndexList, _impl_.x_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TestNotIndexList, _impl_.x_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 x = 1;
    {PROTOBUF_FIELD_OFFSET(TestNotIndexList, _impl_.x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 y = 2;
    {PROTOBUF_FIELD_OFFSET(TestNotIndexList, _impl_.y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* TestNotIndexList::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestNotIndexList)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_x(), target);
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestNotIndexList)
  return target;
}

::size_t TestNotIndexList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestNotIndexList)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_x());
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_y());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestNotIndexList::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestNotIndexList::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestNotIndexList::GetClassData() const { return &_class_data_; }


void TestNotIndexList::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestNotIndexList*>(&to_msg);
  auto& from = static_cast<const TestNotIndexList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestNotIndexList)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestNotIndexList::CopyFrom(const TestNotIndexList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestNotIndexList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestNotIndexList::IsInitialized() const {
  return true;
}

void TestNotIndexList::InternalSwap(TestNotIndexList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestNotIndexList, _impl_.y_)
      + sizeof(TestNotIndexList::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(TestNotIndexList, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::google::protobuf::Metadata TestNotIndexList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[58]);
}
// ===================================================================

class TestMultiUnionIndexList::_Internal {
 public:
};

TestMultiUnionIndexList::TestMultiUnionIndexList(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestMultiUnionIndexList)
}
TestMultiUnionIndexList::TestMultiUnionIndexList(const TestMultiUnionIndexList& from) : ::google::protobuf::Message() {
  TestMultiUnionIndexList* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id3_){},
      decltype(_impl_.desc_){},
      decltype(_impl_.id2_){},
      decltype(_impl_.id1_){},
      decltype(_impl_.num_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.id3_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id3_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id3().empty()) {
    _this->_impl_.id3_.Set(from._internal_id3(), _this->GetArenaForAllocation());
  }
  _impl_.desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.desc_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_desc().empty()) {
    _this->_impl_.desc_.Set(from._internal_desc(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id2_, &from._impl_.id2_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.num_) -
    reinterpret_cast<char*>(&_impl_.id2_)) + sizeof(_impl_.num_));

  // @@protoc_insertion_point(copy_constructor:cfg.TestMultiUnionIndexList)
}
inline void TestMultiUnionIndexList::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.id3_){},
      decltype(_impl_.desc_){},
      decltype(_impl_.id2_){::int64_t{0}},
      decltype(_impl_.id1_){0},
      decltype(_impl_.num_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.id3_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id3_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.desc_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
TestMultiUnionIndexList::~TestMultiUnionIndexList() {
  // @@protoc_insertion_point(destructor:cfg.TestMultiUnionIndexList)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestMultiUnionIndexList::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id3_.Destroy();
  _impl_.desc_.Destroy();
}
void TestMultiUnionIndexList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestMultiUnionIndexList::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestMultiUnionIndexList)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id3_.ClearToEmpty();
  _impl_.desc_.ClearToEmpty();
  ::memset(&_impl_.id2_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.num_) -
      reinterpret_cast<char*>(&_impl_.id2_)) + sizeof(_impl_.num_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestMultiUnionIndexList::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 43, 2> TestMultiUnionIndexList::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_TestMultiUnionIndexList_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 id1 = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestMultiUnionIndexList, _impl_.id1_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TestMultiUnionIndexList, _impl_.id1_)}},
    // int64 id2 = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(TestMultiUnionIndexList, _impl_.id2_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(TestMultiUnionIndexList, _impl_.id2_)}},
    // string id3 = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(TestMultiUnionIndexList, _impl_.id3_)}},
    // int32 num = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestMultiUnionIndexList, _impl_.num_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(TestMultiUnionIndexList, _impl_.num_)}},
    // string desc = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(TestMultiUnionIndexList, _impl_.desc_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id1 = 1;
    {PROTOBUF_FIELD_OFFSET(TestMultiUnionIndexList, _impl_.id1_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int64 id2 = 2;
    {PROTOBUF_FIELD_OFFSET(TestMultiUnionIndexList, _impl_.id2_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // string id3 = 3;
    {PROTOBUF_FIELD_OFFSET(TestMultiUnionIndexList, _impl_.id3_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 num = 4;
    {PROTOBUF_FIELD_OFFSET(TestMultiUnionIndexList, _impl_.num_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string desc = 5;
    {PROTOBUF_FIELD_OFFSET(TestMultiUnionIndexList, _impl_.desc_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\33\0\0\3\0\4\0\0"
    "cfg.TestMultiUnionIndexList"
    "id3"
    "desc"
  }},
};

::uint8_t* TestMultiUnionIndexList::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestMultiUnionIndexList)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 id1 = 1;
  if (this->_internal_id1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id1(), target);
  }

  // int64 id2 = 2;
  if (this->_internal_id2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<2>(
            stream, this->_internal_id2(), target);
  }

  // string id3 = 3;
  if (!this->_internal_id3().empty()) {
    const std::string& _s = this->_internal_id3();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.TestMultiUnionIndexList.id3");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // int32 num = 4;
  if (this->_internal_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_num(), target);
  }

  // string desc = 5;
  if (!this->_internal_desc().empty()) {
    const std::string& _s = this->_internal_desc();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.TestMultiUnionIndexList.desc");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestMultiUnionIndexList)
  return target;
}

::size_t TestMultiUnionIndexList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestMultiUnionIndexList)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id3 = 3;
  if (!this->_internal_id3().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_id3());
  }

  // string desc = 5;
  if (!this->_internal_desc().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_desc());
  }

  // int64 id2 = 2;
  if (this->_internal_id2() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_id2());
  }

  // int32 id1 = 1;
  if (this->_internal_id1() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id1());
  }

  // int32 num = 4;
  if (this->_internal_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestMultiUnionIndexList::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestMultiUnionIndexList::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestMultiUnionIndexList::GetClassData() const { return &_class_data_; }


void TestMultiUnionIndexList::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestMultiUnionIndexList*>(&to_msg);
  auto& from = static_cast<const TestMultiUnionIndexList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestMultiUnionIndexList)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id3().empty()) {
    _this->_internal_set_id3(from._internal_id3());
  }
  if (!from._internal_desc().empty()) {
    _this->_internal_set_desc(from._internal_desc());
  }
  if (from._internal_id2() != 0) {
    _this->_internal_set_id2(from._internal_id2());
  }
  if (from._internal_id1() != 0) {
    _this->_internal_set_id1(from._internal_id1());
  }
  if (from._internal_num() != 0) {
    _this->_internal_set_num(from._internal_num());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestMultiUnionIndexList::CopyFrom(const TestMultiUnionIndexList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestMultiUnionIndexList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestMultiUnionIndexList::IsInitialized() const {
  return true;
}

void TestMultiUnionIndexList::InternalSwap(TestMultiUnionIndexList* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id3_, lhs_arena,
                                       &other->_impl_.id3_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.desc_, lhs_arena,
                                       &other->_impl_.desc_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestMultiUnionIndexList, _impl_.num_)
      + sizeof(TestMultiUnionIndexList::_impl_.num_)
      - PROTOBUF_FIELD_OFFSET(TestMultiUnionIndexList, _impl_.id2_)>(
          reinterpret_cast<char*>(&_impl_.id2_),
          reinterpret_cast<char*>(&other->_impl_.id2_));
}

::google::protobuf::Metadata TestMultiUnionIndexList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[59]);
}
// ===================================================================

class TestMultiIndexList::_Internal {
 public:
};

TestMultiIndexList::TestMultiIndexList(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestMultiIndexList)
}
TestMultiIndexList::TestMultiIndexList(const TestMultiIndexList& from) : ::google::protobuf::Message() {
  TestMultiIndexList* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id3_){},
      decltype(_impl_.desc_){},
      decltype(_impl_.id2_){},
      decltype(_impl_.id1_){},
      decltype(_impl_.num_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.id3_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id3_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id3().empty()) {
    _this->_impl_.id3_.Set(from._internal_id3(), _this->GetArenaForAllocation());
  }
  _impl_.desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.desc_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_desc().empty()) {
    _this->_impl_.desc_.Set(from._internal_desc(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id2_, &from._impl_.id2_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.num_) -
    reinterpret_cast<char*>(&_impl_.id2_)) + sizeof(_impl_.num_));

  // @@protoc_insertion_point(copy_constructor:cfg.TestMultiIndexList)
}
inline void TestMultiIndexList::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.id3_){},
      decltype(_impl_.desc_){},
      decltype(_impl_.id2_){::int64_t{0}},
      decltype(_impl_.id1_){0},
      decltype(_impl_.num_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.id3_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id3_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.desc_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
TestMultiIndexList::~TestMultiIndexList() {
  // @@protoc_insertion_point(destructor:cfg.TestMultiIndexList)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestMultiIndexList::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id3_.Destroy();
  _impl_.desc_.Destroy();
}
void TestMultiIndexList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestMultiIndexList::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestMultiIndexList)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id3_.ClearToEmpty();
  _impl_.desc_.ClearToEmpty();
  ::memset(&_impl_.id2_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.num_) -
      reinterpret_cast<char*>(&_impl_.id2_)) + sizeof(_impl_.num_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestMultiIndexList::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 38, 2> TestMultiIndexList::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_TestMultiIndexList_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 id1 = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestMultiIndexList, _impl_.id1_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TestMultiIndexList, _impl_.id1_)}},
    // int64 id2 = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(TestMultiIndexList, _impl_.id2_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(TestMultiIndexList, _impl_.id2_)}},
    // string id3 = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(TestMultiIndexList, _impl_.id3_)}},
    // int32 num = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestMultiIndexList, _impl_.num_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(TestMultiIndexList, _impl_.num_)}},
    // string desc = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(TestMultiIndexList, _impl_.desc_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id1 = 1;
    {PROTOBUF_FIELD_OFFSET(TestMultiIndexList, _impl_.id1_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int64 id2 = 2;
    {PROTOBUF_FIELD_OFFSET(TestMultiIndexList, _impl_.id2_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // string id3 = 3;
    {PROTOBUF_FIELD_OFFSET(TestMultiIndexList, _impl_.id3_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 num = 4;
    {PROTOBUF_FIELD_OFFSET(TestMultiIndexList, _impl_.num_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string desc = 5;
    {PROTOBUF_FIELD_OFFSET(TestMultiIndexList, _impl_.desc_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\26\0\0\3\0\4\0\0"
    "cfg.TestMultiIndexList"
    "id3"
    "desc"
  }},
};

::uint8_t* TestMultiIndexList::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestMultiIndexList)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 id1 = 1;
  if (this->_internal_id1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id1(), target);
  }

  // int64 id2 = 2;
  if (this->_internal_id2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<2>(
            stream, this->_internal_id2(), target);
  }

  // string id3 = 3;
  if (!this->_internal_id3().empty()) {
    const std::string& _s = this->_internal_id3();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.TestMultiIndexList.id3");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // int32 num = 4;
  if (this->_internal_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_num(), target);
  }

  // string desc = 5;
  if (!this->_internal_desc().empty()) {
    const std::string& _s = this->_internal_desc();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.TestMultiIndexList.desc");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestMultiIndexList)
  return target;
}

::size_t TestMultiIndexList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestMultiIndexList)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id3 = 3;
  if (!this->_internal_id3().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_id3());
  }

  // string desc = 5;
  if (!this->_internal_desc().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_desc());
  }

  // int64 id2 = 2;
  if (this->_internal_id2() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_id2());
  }

  // int32 id1 = 1;
  if (this->_internal_id1() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id1());
  }

  // int32 num = 4;
  if (this->_internal_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestMultiIndexList::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestMultiIndexList::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestMultiIndexList::GetClassData() const { return &_class_data_; }


void TestMultiIndexList::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestMultiIndexList*>(&to_msg);
  auto& from = static_cast<const TestMultiIndexList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestMultiIndexList)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id3().empty()) {
    _this->_internal_set_id3(from._internal_id3());
  }
  if (!from._internal_desc().empty()) {
    _this->_internal_set_desc(from._internal_desc());
  }
  if (from._internal_id2() != 0) {
    _this->_internal_set_id2(from._internal_id2());
  }
  if (from._internal_id1() != 0) {
    _this->_internal_set_id1(from._internal_id1());
  }
  if (from._internal_num() != 0) {
    _this->_internal_set_num(from._internal_num());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestMultiIndexList::CopyFrom(const TestMultiIndexList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestMultiIndexList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestMultiIndexList::IsInitialized() const {
  return true;
}

void TestMultiIndexList::InternalSwap(TestMultiIndexList* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id3_, lhs_arena,
                                       &other->_impl_.id3_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.desc_, lhs_arena,
                                       &other->_impl_.desc_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestMultiIndexList, _impl_.num_)
      + sizeof(TestMultiIndexList::_impl_.num_)
      - PROTOBUF_FIELD_OFFSET(TestMultiIndexList, _impl_.id2_)>(
          reinterpret_cast<char*>(&_impl_.id2_),
          reinterpret_cast<char*>(&other->_impl_.id2_));
}

::google::protobuf::Metadata TestMultiIndexList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[60]);
}
// ===================================================================

TestMultiRowRecord_MultiRows4Entry_DoNotUse::TestMultiRowRecord_MultiRows4Entry_DoNotUse() {}
TestMultiRowRecord_MultiRows4Entry_DoNotUse::TestMultiRowRecord_MultiRows4Entry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void TestMultiRowRecord_MultiRows4Entry_DoNotUse::MergeFrom(const TestMultiRowRecord_MultiRows4Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata TestMultiRowRecord_MultiRows4Entry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[61]);
}
// ===================================================================

TestMultiRowRecord_MultiRows6Entry_DoNotUse::TestMultiRowRecord_MultiRows6Entry_DoNotUse() {}
TestMultiRowRecord_MultiRows6Entry_DoNotUse::TestMultiRowRecord_MultiRows6Entry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void TestMultiRowRecord_MultiRows6Entry_DoNotUse::MergeFrom(const TestMultiRowRecord_MultiRows6Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata TestMultiRowRecord_MultiRows6Entry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[62]);
}
// ===================================================================

TestMultiRowRecord_MultiRows7Entry_DoNotUse::TestMultiRowRecord_MultiRows7Entry_DoNotUse() {}
TestMultiRowRecord_MultiRows7Entry_DoNotUse::TestMultiRowRecord_MultiRows7Entry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void TestMultiRowRecord_MultiRows7Entry_DoNotUse::MergeFrom(const TestMultiRowRecord_MultiRows7Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata TestMultiRowRecord_MultiRows7Entry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[63]);
}
// ===================================================================

class TestMultiRowRecord::_Internal {
 public:
};

TestMultiRowRecord::TestMultiRowRecord(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestMultiRowRecord)
}
TestMultiRowRecord::TestMultiRowRecord(const TestMultiRowRecord& from) : ::google::protobuf::Message() {
  TestMultiRowRecord* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.one_rows_){from._impl_.one_rows_},
      decltype(_impl_.multi_rows1_){from._impl_.multi_rows1_},
      decltype(_impl_.multi_rows2_){from._impl_.multi_rows2_},
      /* decltype(_impl_.multi_rows4_) */ {},
      decltype(_impl_.multi_rows5_){from._impl_.multi_rows5_},
      /* decltype(_impl_.multi_rows6_) */ {},
      /* decltype(_impl_.multi_rows7_) */ {},
      decltype(_impl_.name_){},
      decltype(_impl_.id_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _this->_impl_.multi_rows4_.MergeFrom(from._impl_.multi_rows4_);
  _this->_impl_.multi_rows6_.MergeFrom(from._impl_.multi_rows6_);
  _this->_impl_.multi_rows7_.MergeFrom(from._impl_.multi_rows7_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _this->_impl_.id_ = from._impl_.id_;

  // @@protoc_insertion_point(copy_constructor:cfg.TestMultiRowRecord)
}
inline void TestMultiRowRecord::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.one_rows_){arena},
      decltype(_impl_.multi_rows1_){arena},
      decltype(_impl_.multi_rows2_){arena},
      /* decltype(_impl_.multi_rows4_) */ {::google::protobuf::internal::ArenaInitialized(), arena},
      decltype(_impl_.multi_rows5_){arena},
      /* decltype(_impl_.multi_rows6_) */ {::google::protobuf::internal::ArenaInitialized(), arena},
      /* decltype(_impl_.multi_rows7_) */ {::google::protobuf::internal::ArenaInitialized(), arena},
      decltype(_impl_.name_){},
      decltype(_impl_.id_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
TestMultiRowRecord::~TestMultiRowRecord() {
  // @@protoc_insertion_point(destructor:cfg.TestMultiRowRecord)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestMultiRowRecord::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.one_rows_.~RepeatedPtrField();
  _impl_.multi_rows1_.~RepeatedPtrField();
  _impl_.multi_rows2_.~RepeatedPtrField();
  _impl_.multi_rows4_.~MapField();
  _impl_.multi_rows5_.~RepeatedPtrField();
  _impl_.multi_rows6_.~MapField();
  _impl_.multi_rows7_.~MapField();
  _impl_.name_.Destroy();
}
void TestMultiRowRecord::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestMultiRowRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestMultiRowRecord)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.one_rows_.Clear();
  _impl_.multi_rows1_.Clear();
  _impl_.multi_rows2_.Clear();
  _impl_.multi_rows4_.Clear();
  _impl_.multi_rows5_.Clear();
  _impl_.multi_rows6_.Clear();
  _impl_.multi_rows7_.Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.id_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestMultiRowRecord::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 9, 9, 43, 2> TestMultiRowRecord::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    9, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966784,  // skipmap
    offsetof(decltype(_table_), field_entries),
    9,  // num_field_entries
    9,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TestMultiRowRecord_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestMultiRowRecord, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TestMultiRowRecord, _impl_.id_)}},
    // string name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(TestMultiRowRecord, _impl_.name_)}},
    // repeated .cfg.TestMultiRowType1 one_rows = 3 [packed = false];
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(TestMultiRowRecord, _impl_.one_rows_)}},
    // repeated .cfg.TestMultiRowType1 multi_rows1 = 4 [packed = false];
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 1, PROTOBUF_FIELD_OFFSET(TestMultiRowRecord, _impl_.multi_rows1_)}},
    // repeated .cfg.TestMultiRowType1 multi_rows2 = 5 [packed = false];
    {::_pbi::TcParser::FastMtR1,
     {42, 63, 2, PROTOBUF_FIELD_OFFSET(TestMultiRowRecord, _impl_.multi_rows2_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .cfg.TestMultiRowType3 multi_rows5 = 7 [packed = false];
    {::_pbi::TcParser::FastMtR1,
     {58, 63, 5, PROTOBUF_FIELD_OFFSET(TestMultiRowRecord, _impl_.multi_rows5_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(TestMultiRowRecord, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string name = 2;
    {PROTOBUF_FIELD_OFFSET(TestMultiRowRecord, _impl_.name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .cfg.TestMultiRowType1 one_rows = 3 [packed = false];
    {PROTOBUF_FIELD_OFFSET(TestMultiRowRecord, _impl_.one_rows_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .cfg.TestMultiRowType1 multi_rows1 = 4 [packed = false];
    {PROTOBUF_FIELD_OFFSET(TestMultiRowRecord, _impl_.multi_rows1_), 0, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .cfg.TestMultiRowType1 multi_rows2 = 5 [packed = false];
    {PROTOBUF_FIELD_OFFSET(TestMultiRowRecord, _impl_.multi_rows2_), 0, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // map<int32, .cfg.TestMultiRowType2> multi_rows4 = 6;
    {PROTOBUF_FIELD_OFFSET(TestMultiRowRecord, _impl_.multi_rows4_), 0, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // repeated .cfg.TestMultiRowType3 multi_rows5 = 7 [packed = false];
    {PROTOBUF_FIELD_OFFSET(TestMultiRowRecord, _impl_.multi_rows5_), 0, 5,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // map<int32, .cfg.TestMultiRowType2> multi_rows6 = 8;
    {PROTOBUF_FIELD_OFFSET(TestMultiRowRecord, _impl_.multi_rows6_), 0, 6,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // map<int32, int32> multi_rows7 = 9;
    {PROTOBUF_FIELD_OFFSET(TestMultiRowRecord, _impl_.multi_rows7_), 0, 8,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::TestMultiRowType1>()},
    {::_pbi::TcParser::GetTable<::cfg::TestMultiRowType1>()},
    {::_pbi::TcParser::GetTable<::cfg::TestMultiRowType1>()},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(TestMultiRowRecord()._impl_.multi_rows4_)>(
        1, 0, 0, 5,
        11)},
    {::_pbi::TcParser::CreateInArenaStorageCb<::cfg::TestMultiRowType2>},
    {::_pbi::TcParser::GetTable<::cfg::TestMultiRowType3>()},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(TestMultiRowRecord()._impl_.multi_rows6_)>(
        1, 0, 0, 5,
        11)},
    {::_pbi::TcParser::CreateInArenaStorageCb<::cfg::TestMultiRowType2>},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(TestMultiRowRecord()._impl_.multi_rows7_)>(
        1, 0, 0, 5,
        5)},
  }}, {{
    "\26\0\4\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "cfg.TestMultiRowRecord"
    "name"
  }},
};

::uint8_t* TestMultiRowRecord::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestMultiRowRecord)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.TestMultiRowRecord.name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // repeated .cfg.TestMultiRowType1 one_rows = 3 [packed = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_one_rows_size()); i < n; i++) {
    const auto& repfield = this->_internal_one_rows().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cfg.TestMultiRowType1 multi_rows1 = 4 [packed = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_multi_rows1_size()); i < n; i++) {
    const auto& repfield = this->_internal_multi_rows1().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cfg.TestMultiRowType1 multi_rows2 = 5 [packed = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_multi_rows2_size()); i < n; i++) {
    const auto& repfield = this->_internal_multi_rows2().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // map<int32, .cfg.TestMultiRowType2> multi_rows4 = 6;
  if (!_internal_multi_rows4().empty()) {
    using MapType = ::google::protobuf::Map<::int32_t, ::cfg::TestMultiRowType2>;
    using WireHelper = _pbi::MapEntryFuncs<::int32_t, ::cfg::TestMultiRowType2,
                                   _pbi::WireFormatLite::TYPE_INT32,
                                   _pbi::WireFormatLite::TYPE_MESSAGE>;
    const auto& field = _internal_multi_rows4();

    if (stream->IsSerializationDeterministic() && field.size() > 1) {
      for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
        target = WireHelper::InternalSerialize(
            6, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : field) {
        target = WireHelper::InternalSerialize(
            6, entry.first, entry.second, target, stream);
      }
    }
  }

  // repeated .cfg.TestMultiRowType3 multi_rows5 = 7 [packed = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_multi_rows5_size()); i < n; i++) {
    const auto& repfield = this->_internal_multi_rows5().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // map<int32, .cfg.TestMultiRowType2> multi_rows6 = 8;
  if (!_internal_multi_rows6().empty()) {
    using MapType = ::google::protobuf::Map<::int32_t, ::cfg::TestMultiRowType2>;
    using WireHelper = _pbi::MapEntryFuncs<::int32_t, ::cfg::TestMultiRowType2,
                                   _pbi::WireFormatLite::TYPE_INT32,
                                   _pbi::WireFormatLite::TYPE_MESSAGE>;
    const auto& field = _internal_multi_rows6();

    if (stream->IsSerializationDeterministic() && field.size() > 1) {
      for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
        target = WireHelper::InternalSerialize(
            8, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : field) {
        target = WireHelper::InternalSerialize(
            8, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<int32, int32> multi_rows7 = 9;
  if (!_internal_multi_rows7().empty()) {
    using MapType = ::google::protobuf::Map<::int32_t, ::int32_t>;
    using WireHelper = _pbi::MapEntryFuncs<::int32_t, ::int32_t,
                                   _pbi::WireFormatLite::TYPE_INT32,
                                   _pbi::WireFormatLite::TYPE_INT32>;
    const auto& field = _internal_multi_rows7();

    if (stream->IsSerializationDeterministic() && field.size() > 1) {
      for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
        target = WireHelper::InternalSerialize(
            9, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : field) {
        target = WireHelper::InternalSerialize(
            9, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestMultiRowRecord)
  return target;
}

::size_t TestMultiRowRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestMultiRowRecord)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cfg.TestMultiRowType1 one_rows = 3 [packed = false];
  total_size += 1UL * this->_internal_one_rows_size();
  for (const auto& msg : this->_internal_one_rows()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .cfg.TestMultiRowType1 multi_rows1 = 4 [packed = false];
  total_size += 1UL * this->_internal_multi_rows1_size();
  for (const auto& msg : this->_internal_multi_rows1()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .cfg.TestMultiRowType1 multi_rows2 = 5 [packed = false];
  total_size += 1UL * this->_internal_multi_rows2_size();
  for (const auto& msg : this->_internal_multi_rows2()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // map<int32, .cfg.TestMultiRowType2> multi_rows4 = 6;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_multi_rows4_size());
  for (const auto& entry : _internal_multi_rows4()) {
    total_size += _pbi::MapEntryFuncs<::int32_t, ::cfg::TestMultiRowType2,
                                   _pbi::WireFormatLite::TYPE_INT32,
                                   _pbi::WireFormatLite::TYPE_MESSAGE>::ByteSizeLong(entry.first, entry.second);
  }
  // repeated .cfg.TestMultiRowType3 multi_rows5 = 7 [packed = false];
  total_size += 1UL * this->_internal_multi_rows5_size();
  for (const auto& msg : this->_internal_multi_rows5()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // map<int32, .cfg.TestMultiRowType2> multi_rows6 = 8;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_multi_rows6_size());
  for (const auto& entry : _internal_multi_rows6()) {
    total_size += _pbi::MapEntryFuncs<::int32_t, ::cfg::TestMultiRowType2,
                                   _pbi::WireFormatLite::TYPE_INT32,
                                   _pbi::WireFormatLite::TYPE_MESSAGE>::ByteSizeLong(entry.first, entry.second);
  }
  // map<int32, int32> multi_rows7 = 9;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_multi_rows7_size());
  for (const auto& entry : _internal_multi_rows7()) {
    total_size += _pbi::MapEntryFuncs<::int32_t, ::int32_t,
                                   _pbi::WireFormatLite::TYPE_INT32,
                                   _pbi::WireFormatLite::TYPE_INT32>::ByteSizeLong(entry.first, entry.second);
  }
  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestMultiRowRecord::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestMultiRowRecord::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestMultiRowRecord::GetClassData() const { return &_class_data_; }


void TestMultiRowRecord::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestMultiRowRecord*>(&to_msg);
  auto& from = static_cast<const TestMultiRowRecord&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestMultiRowRecord)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_one_rows()->MergeFrom(
      from._internal_one_rows());
  _this->_internal_mutable_multi_rows1()->MergeFrom(
      from._internal_multi_rows1());
  _this->_internal_mutable_multi_rows2()->MergeFrom(
      from._internal_multi_rows2());
  _this->_impl_.multi_rows4_.MergeFrom(from._impl_.multi_rows4_);
  _this->_internal_mutable_multi_rows5()->MergeFrom(
      from._internal_multi_rows5());
  _this->_impl_.multi_rows6_.MergeFrom(from._impl_.multi_rows6_);
  _this->_impl_.multi_rows7_.MergeFrom(from._impl_.multi_rows7_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestMultiRowRecord::CopyFrom(const TestMultiRowRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestMultiRowRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestMultiRowRecord::IsInitialized() const {
  return true;
}

void TestMultiRowRecord::InternalSwap(TestMultiRowRecord* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.one_rows_.InternalSwap(&other->_impl_.one_rows_);
  _impl_.multi_rows1_.InternalSwap(&other->_impl_.multi_rows1_);
  _impl_.multi_rows2_.InternalSwap(&other->_impl_.multi_rows2_);
  _impl_.multi_rows4_.InternalSwap(&other->_impl_.multi_rows4_);
  _impl_.multi_rows5_.InternalSwap(&other->_impl_.multi_rows5_);
  _impl_.multi_rows6_.InternalSwap(&other->_impl_.multi_rows6_);
  _impl_.multi_rows7_.InternalSwap(&other->_impl_.multi_rows7_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
        swap(_impl_.id_, other->_impl_.id_);
}

::google::protobuf::Metadata TestMultiRowRecord::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[64]);
}
// ===================================================================

class TestMultiRowType1::_Internal {
 public:
};

TestMultiRowType1::TestMultiRowType1(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestMultiRowType1)
}
TestMultiRowType1::TestMultiRowType1(const TestMultiRowType1& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cfg.TestMultiRowType1)
}
inline void TestMultiRowType1::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0},
      decltype(_impl_.x_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
TestMultiRowType1::~TestMultiRowType1() {
  // @@protoc_insertion_point(destructor:cfg.TestMultiRowType1)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestMultiRowType1::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void TestMultiRowType1::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestMultiRowType1::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestMultiRowType1)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.x_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.x_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestMultiRowType1::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> TestMultiRowType1::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_TestMultiRowType1_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // int32 x = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestMultiRowType1, _impl_.x_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(TestMultiRowType1, _impl_.x_)}},
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestMultiRowType1, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TestMultiRowType1, _impl_.id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(TestMultiRowType1, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 x = 2;
    {PROTOBUF_FIELD_OFFSET(TestMultiRowType1, _impl_.x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* TestMultiRowType1::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestMultiRowType1)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // int32 x = 2;
  if (this->_internal_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_x(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestMultiRowType1)
  return target;
}

::size_t TestMultiRowType1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestMultiRowType1)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  // int32 x = 2;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_x());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestMultiRowType1::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestMultiRowType1::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestMultiRowType1::GetClassData() const { return &_class_data_; }


void TestMultiRowType1::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestMultiRowType1*>(&to_msg);
  auto& from = static_cast<const TestMultiRowType1&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestMultiRowType1)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestMultiRowType1::CopyFrom(const TestMultiRowType1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestMultiRowType1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestMultiRowType1::IsInitialized() const {
  return true;
}

void TestMultiRowType1::InternalSwap(TestMultiRowType1* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestMultiRowType1, _impl_.x_)
      + sizeof(TestMultiRowType1::_impl_.x_)
      - PROTOBUF_FIELD_OFFSET(TestMultiRowType1, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::google::protobuf::Metadata TestMultiRowType1::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[65]);
}
// ===================================================================

class TestMultiRowType2::_Internal {
 public:
};

TestMultiRowType2::TestMultiRowType2(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestMultiRowType2)
}
TestMultiRowType2::TestMultiRowType2(const TestMultiRowType2& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cfg.TestMultiRowType2)
}
inline void TestMultiRowType2::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0},
      decltype(_impl_.x_){0},
      decltype(_impl_.y_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
TestMultiRowType2::~TestMultiRowType2() {
  // @@protoc_insertion_point(destructor:cfg.TestMultiRowType2)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestMultiRowType2::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void TestMultiRowType2::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestMultiRowType2::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestMultiRowType2)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestMultiRowType2::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> TestMultiRowType2::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_TestMultiRowType2_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestMultiRowType2, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TestMultiRowType2, _impl_.id_)}},
    // int32 x = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestMultiRowType2, _impl_.x_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(TestMultiRowType2, _impl_.x_)}},
    // float y = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(TestMultiRowType2, _impl_.y_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(TestMultiRowType2, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 x = 2;
    {PROTOBUF_FIELD_OFFSET(TestMultiRowType2, _impl_.x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // float y = 3;
    {PROTOBUF_FIELD_OFFSET(TestMultiRowType2, _impl_.y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* TestMultiRowType2::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestMultiRowType2)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // int32 x = 2;
  if (this->_internal_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_x(), target);
  }

  // float y = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  ::uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestMultiRowType2)
  return target;
}

::size_t TestMultiRowType2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestMultiRowType2)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  // int32 x = 2;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_x());
  }

  // float y = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  ::uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestMultiRowType2::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestMultiRowType2::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestMultiRowType2::GetClassData() const { return &_class_data_; }


void TestMultiRowType2::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestMultiRowType2*>(&to_msg);
  auto& from = static_cast<const TestMultiRowType2&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestMultiRowType2)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  ::uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestMultiRowType2::CopyFrom(const TestMultiRowType2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestMultiRowType2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestMultiRowType2::IsInitialized() const {
  return true;
}

void TestMultiRowType2::InternalSwap(TestMultiRowType2* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestMultiRowType2, _impl_.y_)
      + sizeof(TestMultiRowType2::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(TestMultiRowType2, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::google::protobuf::Metadata TestMultiRowType2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[66]);
}
// ===================================================================

class TestMultiRowType3::_Internal {
 public:
};

TestMultiRowType3::TestMultiRowType3(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestMultiRowType3)
}
TestMultiRowType3::TestMultiRowType3(const TestMultiRowType3& from) : ::google::protobuf::Message() {
  TestMultiRowType3* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_},
      decltype(_impl_.id_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _this->_impl_.id_ = from._impl_.id_;

  // @@protoc_insertion_point(copy_constructor:cfg.TestMultiRowType3)
}
inline void TestMultiRowType3::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena},
      decltype(_impl_.id_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
TestMultiRowType3::~TestMultiRowType3() {
  // @@protoc_insertion_point(destructor:cfg.TestMultiRowType3)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestMultiRowType3::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}
void TestMultiRowType3::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestMultiRowType3::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestMultiRowType3)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _impl_.id_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestMultiRowType3::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> TestMultiRowType3::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TestMultiRowType3_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .cfg.TestMultiRowType1 items = 2 [packed = false];
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(TestMultiRowType3, _impl_.items_)}},
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestMultiRowType3, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TestMultiRowType3, _impl_.id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(TestMultiRowType3, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // repeated .cfg.TestMultiRowType1 items = 2 [packed = false];
    {PROTOBUF_FIELD_OFFSET(TestMultiRowType3, _impl_.items_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::TestMultiRowType1>()},
  }}, {{
  }},
};

::uint8_t* TestMultiRowType3::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestMultiRowType3)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // repeated .cfg.TestMultiRowType1 items = 2 [packed = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestMultiRowType3)
  return target;
}

::size_t TestMultiRowType3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestMultiRowType3)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cfg.TestMultiRowType1 items = 2 [packed = false];
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_internal_items()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestMultiRowType3::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestMultiRowType3::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestMultiRowType3::GetClassData() const { return &_class_data_; }


void TestMultiRowType3::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestMultiRowType3*>(&to_msg);
  auto& from = static_cast<const TestMultiRowType3&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestMultiRowType3)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_items()->MergeFrom(
      from._internal_items());
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestMultiRowType3::CopyFrom(const TestMultiRowType3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestMultiRowType3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestMultiRowType3::IsInitialized() const {
  return true;
}

void TestMultiRowType3::InternalSwap(TestMultiRowType3* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
        swap(_impl_.id_, other->_impl_.id_);
}

::google::protobuf::Metadata TestMultiRowType3::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[67]);
}
// ===================================================================

class TestTestMultiColumn::_Internal {
 public:
  using HasBits = decltype(std::declval<TestTestMultiColumn>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TestTestMultiColumn, _impl_._has_bits_);
  static const ::cfg::TestFoo& a(const TestTestMultiColumn* msg);
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::cfg::TestFoo& b(const TestTestMultiColumn* msg);
  static void set_has_b(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::cfg::TestFoo& c(const TestTestMultiColumn* msg);
  static void set_has_c(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::cfg::TestFoo& TestTestMultiColumn::_Internal::a(const TestTestMultiColumn* msg) {
  return *msg->_impl_.a_;
}
const ::cfg::TestFoo& TestTestMultiColumn::_Internal::b(const TestTestMultiColumn* msg) {
  return *msg->_impl_.b_;
}
const ::cfg::TestFoo& TestTestMultiColumn::_Internal::c(const TestTestMultiColumn* msg) {
  return *msg->_impl_.c_;
}
TestTestMultiColumn::TestTestMultiColumn(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestTestMultiColumn)
}
TestTestMultiColumn::TestTestMultiColumn(const TestTestMultiColumn& from) : ::google::protobuf::Message() {
  TestTestMultiColumn* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.a_){nullptr},
      decltype(_impl_.b_){nullptr},
      decltype(_impl_.c_){nullptr},
      decltype(_impl_.id_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.a_ = new ::cfg::TestFoo(*from._impl_.a_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.b_ = new ::cfg::TestFoo(*from._impl_.b_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.c_ = new ::cfg::TestFoo(*from._impl_.c_);
  }
  _this->_impl_.id_ = from._impl_.id_;

  // @@protoc_insertion_point(copy_constructor:cfg.TestTestMultiColumn)
}
inline void TestTestMultiColumn::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.a_){nullptr},
      decltype(_impl_.b_){nullptr},
      decltype(_impl_.c_){nullptr},
      decltype(_impl_.id_){0},
  };
}
TestTestMultiColumn::~TestTestMultiColumn() {
  // @@protoc_insertion_point(destructor:cfg.TestTestMultiColumn)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestTestMultiColumn::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.a_;
  if (this != internal_default_instance()) delete _impl_.b_;
  if (this != internal_default_instance()) delete _impl_.c_;
}
void TestTestMultiColumn::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestTestMultiColumn::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestTestMultiColumn)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.a_ != nullptr);
      _impl_.a_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.b_ != nullptr);
      _impl_.b_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.c_ != nullptr);
      _impl_.c_->Clear();
    }
  }
  _impl_.id_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestTestMultiColumn::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 3, 0, 2> TestTestMultiColumn::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TestTestMultiColumn, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TestTestMultiColumn_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .cfg.TestFoo c = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 2, 2, PROTOBUF_FIELD_OFFSET(TestTestMultiColumn, _impl_.c_)}},
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestTestMultiColumn, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TestTestMultiColumn, _impl_.id_)}},
    // .cfg.TestFoo a = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(TestTestMultiColumn, _impl_.a_)}},
    // .cfg.TestFoo b = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 1, PROTOBUF_FIELD_OFFSET(TestTestMultiColumn, _impl_.b_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(TestTestMultiColumn, _impl_.id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .cfg.TestFoo a = 2;
    {PROTOBUF_FIELD_OFFSET(TestTestMultiColumn, _impl_.a_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cfg.TestFoo b = 3;
    {PROTOBUF_FIELD_OFFSET(TestTestMultiColumn, _impl_.b_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cfg.TestFoo c = 4;
    {PROTOBUF_FIELD_OFFSET(TestTestMultiColumn, _impl_.c_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::TestFoo>()},
    {::_pbi::TcParser::GetTable<::cfg::TestFoo>()},
    {::_pbi::TcParser::GetTable<::cfg::TestFoo>()},
  }}, {{
  }},
};

::uint8_t* TestTestMultiColumn::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestTestMultiColumn)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cfg.TestFoo a = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::a(this),
        _Internal::a(this).GetCachedSize(), target, stream);
  }

  // .cfg.TestFoo b = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::b(this),
        _Internal::b(this).GetCachedSize(), target, stream);
  }

  // .cfg.TestFoo c = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::c(this),
        _Internal::c(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestTestMultiColumn)
  return target;
}

::size_t TestTestMultiColumn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestTestMultiColumn)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .cfg.TestFoo a = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.a_);
    }

    // .cfg.TestFoo b = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.b_);
    }

    // .cfg.TestFoo c = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.c_);
    }

  }
  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestTestMultiColumn::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestTestMultiColumn::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestTestMultiColumn::GetClassData() const { return &_class_data_; }


void TestTestMultiColumn::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestTestMultiColumn*>(&to_msg);
  auto& from = static_cast<const TestTestMultiColumn&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestTestMultiColumn)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_a()->::cfg::TestFoo::MergeFrom(
          from._internal_a());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_b()->::cfg::TestFoo::MergeFrom(
          from._internal_b());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_c()->::cfg::TestFoo::MergeFrom(
          from._internal_c());
    }
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestTestMultiColumn::CopyFrom(const TestTestMultiColumn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestTestMultiColumn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestTestMultiColumn::IsInitialized() const {
  return true;
}

void TestTestMultiColumn::InternalSwap(TestTestMultiColumn* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestTestMultiColumn, _impl_.id_)
      + sizeof(TestTestMultiColumn::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(TestTestMultiColumn, _impl_.a_)>(
          reinterpret_cast<char*>(&_impl_.a_),
          reinterpret_cast<char*>(&other->_impl_.a_));
}

::google::protobuf::Metadata TestTestMultiColumn::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[68]);
}
// ===================================================================

class TestFoo::_Internal {
 public:
};

TestFoo::TestFoo(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestFoo)
}
TestFoo::TestFoo(const TestFoo& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cfg.TestFoo)
}
inline void TestFoo::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.y1_){0},
      decltype(_impl_.y2_){0},
      decltype(_impl_.y3_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
TestFoo::~TestFoo() {
  // @@protoc_insertion_point(destructor:cfg.TestFoo)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestFoo::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void TestFoo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestFoo::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestFoo)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.y1_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.y3_) -
      reinterpret_cast<char*>(&_impl_.y1_)) + sizeof(_impl_.y3_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestFoo::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> TestFoo::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_TestFoo_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 y1 = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestFoo, _impl_.y1_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TestFoo, _impl_.y1_)}},
    // int32 y2 = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestFoo, _impl_.y2_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(TestFoo, _impl_.y2_)}},
    // int32 y3 = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestFoo, _impl_.y3_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(TestFoo, _impl_.y3_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 y1 = 1;
    {PROTOBUF_FIELD_OFFSET(TestFoo, _impl_.y1_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 y2 = 2;
    {PROTOBUF_FIELD_OFFSET(TestFoo, _impl_.y2_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 y3 = 3;
    {PROTOBUF_FIELD_OFFSET(TestFoo, _impl_.y3_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* TestFoo::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestFoo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 y1 = 1;
  if (this->_internal_y1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_y1(), target);
  }

  // int32 y2 = 2;
  if (this->_internal_y2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_y2(), target);
  }

  // int32 y3 = 3;
  if (this->_internal_y3() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_y3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestFoo)
  return target;
}

::size_t TestFoo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestFoo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 y1 = 1;
  if (this->_internal_y1() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_y1());
  }

  // int32 y2 = 2;
  if (this->_internal_y2() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_y2());
  }

  // int32 y3 = 3;
  if (this->_internal_y3() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_y3());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestFoo::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestFoo::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestFoo::GetClassData() const { return &_class_data_; }


void TestFoo::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestFoo*>(&to_msg);
  auto& from = static_cast<const TestFoo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestFoo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_y1() != 0) {
    _this->_internal_set_y1(from._internal_y1());
  }
  if (from._internal_y2() != 0) {
    _this->_internal_set_y2(from._internal_y2());
  }
  if (from._internal_y3() != 0) {
    _this->_internal_set_y3(from._internal_y3());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestFoo::CopyFrom(const TestFoo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestFoo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestFoo::IsInitialized() const {
  return true;
}

void TestFoo::InternalSwap(TestFoo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestFoo, _impl_.y3_)
      + sizeof(TestFoo::_impl_.y3_)
      - PROTOBUF_FIELD_OFFSET(TestFoo, _impl_.y1_)>(
          reinterpret_cast<char*>(&_impl_.y1_),
          reinterpret_cast<char*>(&other->_impl_.y1_));
}

::google::protobuf::Metadata TestFoo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[69]);
}
// ===================================================================

class TestMultiRowTitle::_Internal {
 public:
  using HasBits = decltype(std::declval<TestMultiRowTitle>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TestMultiRowTitle, _impl_._has_bits_);
  static const ::cfg::TestH1& x1(const TestMultiRowTitle* msg);
  static void set_has_x1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::cfg::TestH2& x2_0(const TestMultiRowTitle* msg);
  static void set_has_x2_0(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::cfg::TestH1& TestMultiRowTitle::_Internal::x1(const TestMultiRowTitle* msg) {
  return *msg->_impl_.x1_;
}
const ::cfg::TestH2& TestMultiRowTitle::_Internal::x2_0(const TestMultiRowTitle* msg) {
  return *msg->_impl_.x2_0_;
}
TestMultiRowTitle::TestMultiRowTitle(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestMultiRowTitle)
}
TestMultiRowTitle::TestMultiRowTitle(const TestMultiRowTitle& from) : ::google::protobuf::Message() {
  TestMultiRowTitle* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.x2_){from._impl_.x2_},
      decltype(_impl_.x3_){from._impl_.x3_},
      decltype(_impl_.x4_){from._impl_.x4_},
      decltype(_impl_.name_){},
      decltype(_impl_.x1_){nullptr},
      decltype(_impl_.x2_0_){nullptr},
      decltype(_impl_.id_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.x1_ = new ::cfg::TestH1(*from._impl_.x1_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.x2_0_ = new ::cfg::TestH2(*from._impl_.x2_0_);
  }
  _this->_impl_.id_ = from._impl_.id_;

  // @@protoc_insertion_point(copy_constructor:cfg.TestMultiRowTitle)
}
inline void TestMultiRowTitle::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.x2_){arena},
      decltype(_impl_.x3_){arena},
      decltype(_impl_.x4_){arena},
      decltype(_impl_.name_){},
      decltype(_impl_.x1_){nullptr},
      decltype(_impl_.x2_0_){nullptr},
      decltype(_impl_.id_){0},
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
TestMultiRowTitle::~TestMultiRowTitle() {
  // @@protoc_insertion_point(destructor:cfg.TestMultiRowTitle)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestMultiRowTitle::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.x2_.~RepeatedPtrField();
  _impl_.x3_.~RepeatedPtrField();
  _impl_.x4_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.x1_;
  if (this != internal_default_instance()) delete _impl_.x2_0_;
}
void TestMultiRowTitle::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestMultiRowTitle::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestMultiRowTitle)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.x2_.Clear();
  _impl_.x3_.Clear();
  _impl_.x4_.Clear();
  _impl_.name_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.x1_ != nullptr);
      _impl_.x1_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.x2_0_ != nullptr);
      _impl_.x2_0_->Clear();
    }
  }
  _impl_.id_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestMultiRowTitle::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 5, 34, 2> TestMultiRowTitle::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TestMultiRowTitle, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TestMultiRowTitle_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestMultiRowTitle, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TestMultiRowTitle, _impl_.id_)}},
    // string name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(TestMultiRowTitle, _impl_.name_)}},
    // .cfg.TestH1 x1 = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(TestMultiRowTitle, _impl_.x1_)}},
    // optional .cfg.TestH2 x2_0 = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 1, 1, PROTOBUF_FIELD_OFFSET(TestMultiRowTitle, _impl_.x2_0_)}},
    // repeated .cfg.TestH2 x2 = 5 [packed = false];
    {::_pbi::TcParser::FastMtR1,
     {42, 63, 2, PROTOBUF_FIELD_OFFSET(TestMultiRowTitle, _impl_.x2_)}},
    // repeated .cfg.TestH2 x3 = 6 [packed = false];
    {::_pbi::TcParser::FastMtR1,
     {50, 63, 3, PROTOBUF_FIELD_OFFSET(TestMultiRowTitle, _impl_.x3_)}},
    // repeated .cfg.TestH2 x4 = 7 [packed = false];
    {::_pbi::TcParser::FastMtR1,
     {58, 63, 4, PROTOBUF_FIELD_OFFSET(TestMultiRowTitle, _impl_.x4_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(TestMultiRowTitle, _impl_.id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string name = 2;
    {PROTOBUF_FIELD_OFFSET(TestMultiRowTitle, _impl_.name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .cfg.TestH1 x1 = 3;
    {PROTOBUF_FIELD_OFFSET(TestMultiRowTitle, _impl_.x1_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .cfg.TestH2 x2_0 = 4;
    {PROTOBUF_FIELD_OFFSET(TestMultiRowTitle, _impl_.x2_0_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .cfg.TestH2 x2 = 5 [packed = false];
    {PROTOBUF_FIELD_OFFSET(TestMultiRowTitle, _impl_.x2_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .cfg.TestH2 x3 = 6 [packed = false];
    {PROTOBUF_FIELD_OFFSET(TestMultiRowTitle, _impl_.x3_), -1, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .cfg.TestH2 x4 = 7 [packed = false];
    {PROTOBUF_FIELD_OFFSET(TestMultiRowTitle, _impl_.x4_), -1, 4,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::TestH1>()},
    {::_pbi::TcParser::GetTable<::cfg::TestH2>()},
    {::_pbi::TcParser::GetTable<::cfg::TestH2>()},
    {::_pbi::TcParser::GetTable<::cfg::TestH2>()},
    {::_pbi::TcParser::GetTable<::cfg::TestH2>()},
  }}, {{
    "\25\0\4\0\0\0\0\0"
    "cfg.TestMultiRowTitle"
    "name"
  }},
};

::uint8_t* TestMultiRowTitle::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestMultiRowTitle)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.TestMultiRowTitle.name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cfg.TestH1 x1 = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::x1(this),
        _Internal::x1(this).GetCachedSize(), target, stream);
  }

  // optional .cfg.TestH2 x2_0 = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::x2_0(this),
        _Internal::x2_0(this).GetCachedSize(), target, stream);
  }

  // repeated .cfg.TestH2 x2 = 5 [packed = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_x2_size()); i < n; i++) {
    const auto& repfield = this->_internal_x2().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cfg.TestH2 x3 = 6 [packed = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_x3_size()); i < n; i++) {
    const auto& repfield = this->_internal_x3().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cfg.TestH2 x4 = 7 [packed = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_x4_size()); i < n; i++) {
    const auto& repfield = this->_internal_x4().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestMultiRowTitle)
  return target;
}

::size_t TestMultiRowTitle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestMultiRowTitle)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cfg.TestH2 x2 = 5 [packed = false];
  total_size += 1UL * this->_internal_x2_size();
  for (const auto& msg : this->_internal_x2()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .cfg.TestH2 x3 = 6 [packed = false];
  total_size += 1UL * this->_internal_x3_size();
  for (const auto& msg : this->_internal_x3()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .cfg.TestH2 x4 = 7 [packed = false];
  total_size += 1UL * this->_internal_x4_size();
  for (const auto& msg : this->_internal_x4()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .cfg.TestH1 x1 = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.x1_);
    }

    // optional .cfg.TestH2 x2_0 = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.x2_0_);
    }

  }
  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestMultiRowTitle::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestMultiRowTitle::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestMultiRowTitle::GetClassData() const { return &_class_data_; }


void TestMultiRowTitle::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestMultiRowTitle*>(&to_msg);
  auto& from = static_cast<const TestMultiRowTitle&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestMultiRowTitle)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_x2()->MergeFrom(
      from._internal_x2());
  _this->_internal_mutable_x3()->MergeFrom(
      from._internal_x3());
  _this->_internal_mutable_x4()->MergeFrom(
      from._internal_x4());
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_x1()->::cfg::TestH1::MergeFrom(
          from._internal_x1());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_x2_0()->::cfg::TestH2::MergeFrom(
          from._internal_x2_0());
    }
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestMultiRowTitle::CopyFrom(const TestMultiRowTitle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestMultiRowTitle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestMultiRowTitle::IsInitialized() const {
  return true;
}

void TestMultiRowTitle::InternalSwap(TestMultiRowTitle* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.x2_.InternalSwap(&other->_impl_.x2_);
  _impl_.x3_.InternalSwap(&other->_impl_.x3_);
  _impl_.x4_.InternalSwap(&other->_impl_.x4_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestMultiRowTitle, _impl_.id_)
      + sizeof(TestMultiRowTitle::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(TestMultiRowTitle, _impl_.x1_)>(
          reinterpret_cast<char*>(&_impl_.x1_),
          reinterpret_cast<char*>(&other->_impl_.x1_));
}

::google::protobuf::Metadata TestMultiRowTitle::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[70]);
}
// ===================================================================

class TestH1::_Internal {
 public:
  using HasBits = decltype(std::declval<TestH1>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TestH1, _impl_._has_bits_);
  static const ::cfg::TestH2& y2(const TestH1* msg);
  static void set_has_y2(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cfg::TestH2& TestH1::_Internal::y2(const TestH1* msg) {
  return *msg->_impl_.y2_;
}
TestH1::TestH1(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestH1)
}
TestH1::TestH1(const TestH1& from) : ::google::protobuf::Message() {
  TestH1* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.y2_){nullptr},
      decltype(_impl_.y3_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.y2_ = new ::cfg::TestH2(*from._impl_.y2_);
  }
  _this->_impl_.y3_ = from._impl_.y3_;

  // @@protoc_insertion_point(copy_constructor:cfg.TestH1)
}
inline void TestH1::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.y2_){nullptr},
      decltype(_impl_.y3_){0},
  };
}
TestH1::~TestH1() {
  // @@protoc_insertion_point(destructor:cfg.TestH1)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestH1::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.y2_;
}
void TestH1::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestH1::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestH1)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.y2_ != nullptr);
    _impl_.y2_->Clear();
  }
  _impl_.y3_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestH1::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> TestH1::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TestH1, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TestH1_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // int32 y3 = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestH1, _impl_.y3_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(TestH1, _impl_.y3_)}},
    // .cfg.TestH2 y2 = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(TestH1, _impl_.y2_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .cfg.TestH2 y2 = 1;
    {PROTOBUF_FIELD_OFFSET(TestH1, _impl_.y2_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 y3 = 2;
    {PROTOBUF_FIELD_OFFSET(TestH1, _impl_.y3_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::TestH2>()},
  }}, {{
  }},
};

::uint8_t* TestH1::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestH1)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cfg.TestH2 y2 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::y2(this),
        _Internal::y2(this).GetCachedSize(), target, stream);
  }

  // int32 y3 = 2;
  if (this->_internal_y3() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_y3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestH1)
  return target;
}

::size_t TestH1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestH1)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cfg.TestH2 y2 = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.y2_);
  }

  // int32 y3 = 2;
  if (this->_internal_y3() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_y3());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestH1::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestH1::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestH1::GetClassData() const { return &_class_data_; }


void TestH1::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestH1*>(&to_msg);
  auto& from = static_cast<const TestH1&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestH1)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_y2()->::cfg::TestH2::MergeFrom(
        from._internal_y2());
  }
  if (from._internal_y3() != 0) {
    _this->_internal_set_y3(from._internal_y3());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestH1::CopyFrom(const TestH1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestH1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestH1::IsInitialized() const {
  return true;
}

void TestH1::InternalSwap(TestH1* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestH1, _impl_.y3_)
      + sizeof(TestH1::_impl_.y3_)
      - PROTOBUF_FIELD_OFFSET(TestH1, _impl_.y2_)>(
          reinterpret_cast<char*>(&_impl_.y2_),
          reinterpret_cast<char*>(&other->_impl_.y2_));
}

::google::protobuf::Metadata TestH1::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[71]);
}
// ===================================================================

class TestH2::_Internal {
 public:
};

TestH2::TestH2(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestH2)
}
TestH2::TestH2(const TestH2& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cfg.TestH2)
}
inline void TestH2::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.z2_){0},
      decltype(_impl_.z3_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
TestH2::~TestH2() {
  // @@protoc_insertion_point(destructor:cfg.TestH2)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestH2::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void TestH2::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestH2::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestH2)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.z2_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.z3_) -
      reinterpret_cast<char*>(&_impl_.z2_)) + sizeof(_impl_.z3_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestH2::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> TestH2::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_TestH2_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // int32 z3 = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestH2, _impl_.z3_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(TestH2, _impl_.z3_)}},
    // int32 z2 = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestH2, _impl_.z2_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TestH2, _impl_.z2_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 z2 = 1;
    {PROTOBUF_FIELD_OFFSET(TestH2, _impl_.z2_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 z3 = 2;
    {PROTOBUF_FIELD_OFFSET(TestH2, _impl_.z3_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* TestH2::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestH2)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 z2 = 1;
  if (this->_internal_z2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_z2(), target);
  }

  // int32 z3 = 2;
  if (this->_internal_z3() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_z3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestH2)
  return target;
}

::size_t TestH2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestH2)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 z2 = 1;
  if (this->_internal_z2() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_z2());
  }

  // int32 z3 = 2;
  if (this->_internal_z3() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_z3());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestH2::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestH2::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestH2::GetClassData() const { return &_class_data_; }


void TestH2::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestH2*>(&to_msg);
  auto& from = static_cast<const TestH2&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestH2)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_z2() != 0) {
    _this->_internal_set_z2(from._internal_z2());
  }
  if (from._internal_z3() != 0) {
    _this->_internal_set_z3(from._internal_z3());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestH2::CopyFrom(const TestH2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestH2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestH2::IsInitialized() const {
  return true;
}

void TestH2::InternalSwap(TestH2* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestH2, _impl_.z3_)
      + sizeof(TestH2::_impl_.z3_)
      - PROTOBUF_FIELD_OFFSET(TestH2, _impl_.z2_)>(
          reinterpret_cast<char*>(&_impl_.z2_),
          reinterpret_cast<char*>(&other->_impl_.z2_));
}

::google::protobuf::Metadata TestH2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[72]);
}
// ===================================================================

class TestTestNull::_Internal {
 public:
  using HasBits = decltype(std::declval<TestTestNull>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TestTestNull, _impl_._has_bits_);
  static void set_has_x1(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_x2(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::cfg::TestDemoType1& x3(const TestTestNull* msg);
  static void set_has_x3(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::cfg::TestDemoDynamic& x4(const TestTestNull* msg);
  static void set_has_x4(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_s1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_s2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::cfg::TestDemoType1& TestTestNull::_Internal::x3(const TestTestNull* msg) {
  return *msg->_impl_.x3_;
}
const ::cfg::TestDemoDynamic& TestTestNull::_Internal::x4(const TestTestNull* msg) {
  return *msg->_impl_.x4_;
}
TestTestNull::TestTestNull(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestTestNull)
}
TestTestNull::TestTestNull(const TestTestNull& from) : ::google::protobuf::Message() {
  TestTestNull* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.s1_){},
      decltype(_impl_.s2_){},
      decltype(_impl_.x3_){nullptr},
      decltype(_impl_.x4_){nullptr},
      decltype(_impl_.id_){},
      decltype(_impl_.x1_){},
      decltype(_impl_.x2_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.s1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.s1_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.s1_.Set(from._internal_s1(), _this->GetArenaForAllocation());
  }
  _impl_.s2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.s2_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.s2_.Set(from._internal_s2(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.x3_ = new ::cfg::TestDemoType1(*from._impl_.x3_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.x4_ = new ::cfg::TestDemoDynamic(*from._impl_.x4_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.x2_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.x2_));

  // @@protoc_insertion_point(copy_constructor:cfg.TestTestNull)
}
inline void TestTestNull::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.s1_){},
      decltype(_impl_.s2_){},
      decltype(_impl_.x3_){nullptr},
      decltype(_impl_.x4_){nullptr},
      decltype(_impl_.id_){0},
      decltype(_impl_.x1_){0},
      decltype(_impl_.x2_){0},
  };
  _impl_.s1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.s1_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.s2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.s2_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
TestTestNull::~TestTestNull() {
  // @@protoc_insertion_point(destructor:cfg.TestTestNull)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestTestNull::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.s1_.Destroy();
  _impl_.s2_.Destroy();
  if (this != internal_default_instance()) delete _impl_.x3_;
  if (this != internal_default_instance()) delete _impl_.x4_;
}
void TestTestNull::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestTestNull::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestTestNull)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.s1_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.s2_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.x3_ != nullptr);
      _impl_.x3_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.x4_ != nullptr);
      _impl_.x4_->Clear();
    }
  }
  _impl_.id_ = 0;
  if (cached_has_bits & 0x00000030u) {
    ::memset(&_impl_.x1_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.x2_) -
        reinterpret_cast<char*>(&_impl_.x1_)) + sizeof(_impl_.x2_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestTestNull::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 2, 29, 2> TestTestNull::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TestTestNull, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TestTestNull_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestTestNull, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TestTestNull, _impl_.id_)}},
    // optional int32 x1 = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestTestNull, _impl_.x1_), 4>(),
     {16, 4, 0, PROTOBUF_FIELD_OFFSET(TestTestNull, _impl_.x1_)}},
    // optional .cfg.TestDemoEnum x2 = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestTestNull, _impl_.x2_), 5>(),
     {24, 5, 0, PROTOBUF_FIELD_OFFSET(TestTestNull, _impl_.x2_)}},
    // optional .cfg.TestDemoType1 x3 = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 2, 0, PROTOBUF_FIELD_OFFSET(TestTestNull, _impl_.x3_)}},
    // optional .cfg.TestDemoDynamic x4 = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 3, 1, PROTOBUF_FIELD_OFFSET(TestTestNull, _impl_.x4_)}},
    // optional string s1 = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 0, 0, PROTOBUF_FIELD_OFFSET(TestTestNull, _impl_.s1_)}},
    // optional string s2 = 7;
    {::_pbi::TcParser::FastUS1,
     {58, 1, 0, PROTOBUF_FIELD_OFFSET(TestTestNull, _impl_.s2_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(TestTestNull, _impl_.id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // optional int32 x1 = 2;
    {PROTOBUF_FIELD_OFFSET(TestTestNull, _impl_.x1_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional .cfg.TestDemoEnum x2 = 3;
    {PROTOBUF_FIELD_OFFSET(TestTestNull, _impl_.x2_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // optional .cfg.TestDemoType1 x3 = 4;
    {PROTOBUF_FIELD_OFFSET(TestTestNull, _impl_.x3_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .cfg.TestDemoDynamic x4 = 5;
    {PROTOBUF_FIELD_OFFSET(TestTestNull, _impl_.x4_), _Internal::kHasBitsOffset + 3, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional string s1 = 6;
    {PROTOBUF_FIELD_OFFSET(TestTestNull, _impl_.s1_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string s2 = 7;
    {PROTOBUF_FIELD_OFFSET(TestTestNull, _impl_.s2_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::TestDemoType1>()},
    {::_pbi::TcParser::GetTable<::cfg::TestDemoDynamic>()},
  }}, {{
    "\20\0\0\0\0\0\2\2"
    "cfg.TestTestNull"
    "s1"
    "s2"
  }},
};

::uint8_t* TestTestNull::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestTestNull)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 x1 = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_x1(), target);
  }

  // optional .cfg.TestDemoEnum x2 = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_x2(), target);
  }

  // optional .cfg.TestDemoType1 x3 = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::x3(this),
        _Internal::x3(this).GetCachedSize(), target, stream);
  }

  // optional .cfg.TestDemoDynamic x4 = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::x4(this),
        _Internal::x4(this).GetCachedSize(), target, stream);
  }

  // optional string s1 = 6;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_s1();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.TestTestNull.s1");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // optional string s2 = 7;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_s2();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.TestTestNull.s2");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestTestNull)
  return target;
}

::size_t TestTestNull::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestTestNull)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string s1 = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_s1());
    }

    // optional string s2 = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_s2());
    }

    // optional .cfg.TestDemoType1 x3 = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.x3_);
    }

    // optional .cfg.TestDemoDynamic x4 = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.x4_);
    }

  }
  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  if (cached_has_bits & 0x00000030u) {
    // optional int32 x1 = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_x1());
    }

    // optional .cfg.TestDemoEnum x2 = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_x2());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestTestNull::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestTestNull::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestTestNull::GetClassData() const { return &_class_data_; }


void TestTestNull::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestTestNull*>(&to_msg);
  auto& from = static_cast<const TestTestNull&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestTestNull)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_s1(from._internal_s1());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_s2(from._internal_s2());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_x3()->::cfg::TestDemoType1::MergeFrom(
          from._internal_x3());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_x4()->::cfg::TestDemoDynamic::MergeFrom(
          from._internal_x4());
    }
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (cached_has_bits & 0x00000030u) {
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.x1_ = from._impl_.x1_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.x2_ = from._impl_.x2_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestTestNull::CopyFrom(const TestTestNull& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestTestNull)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestTestNull::IsInitialized() const {
  return true;
}

void TestTestNull::InternalSwap(TestTestNull* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.s1_, lhs_arena,
                                       &other->_impl_.s1_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.s2_, lhs_arena,
                                       &other->_impl_.s2_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestTestNull, _impl_.x2_)
      + sizeof(TestTestNull::_impl_.x2_)
      - PROTOBUF_FIELD_OFFSET(TestTestNull, _impl_.x3_)>(
          reinterpret_cast<char*>(&_impl_.x3_),
          reinterpret_cast<char*>(&other->_impl_.x3_));
}

::google::protobuf::Metadata TestTestNull::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[73]);
}
// ===================================================================

class TestDemoPrimitiveTypesTable::_Internal {
 public:
  using HasBits = decltype(std::declval<TestDemoPrimitiveTypesTable>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TestDemoPrimitiveTypesTable, _impl_._has_bits_);
  static const ::cfg::vec2& v2(const TestDemoPrimitiveTypesTable* msg);
  static void set_has_v2(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::cfg::vec3& v3(const TestDemoPrimitiveTypesTable* msg);
  static void set_has_v3(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::cfg::vec4& v4(const TestDemoPrimitiveTypesTable* msg);
  static void set_has_v4(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::cfg::vec2& TestDemoPrimitiveTypesTable::_Internal::v2(const TestDemoPrimitiveTypesTable* msg) {
  return *msg->_impl_.v2_;
}
const ::cfg::vec3& TestDemoPrimitiveTypesTable::_Internal::v3(const TestDemoPrimitiveTypesTable* msg) {
  return *msg->_impl_.v3_;
}
const ::cfg::vec4& TestDemoPrimitiveTypesTable::_Internal::v4(const TestDemoPrimitiveTypesTable* msg) {
  return *msg->_impl_.v4_;
}
TestDemoPrimitiveTypesTable::TestDemoPrimitiveTypesTable(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestDemoPrimitiveTypesTable)
}
TestDemoPrimitiveTypesTable::TestDemoPrimitiveTypesTable(const TestDemoPrimitiveTypesTable& from) : ::google::protobuf::Message() {
  TestDemoPrimitiveTypesTable* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.s1_){},
      decltype(_impl_.s2_){},
      decltype(_impl_.v2_){nullptr},
      decltype(_impl_.v3_){nullptr},
      decltype(_impl_.v4_){nullptr},
      decltype(_impl_.x1_){},
      decltype(_impl_.x2_){},
      decltype(_impl_.x3_){},
      decltype(_impl_.x4_){},
      decltype(_impl_.x5_){},
      decltype(_impl_.x7_){},
      decltype(_impl_.t1_){},
      decltype(_impl_.x6_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.s1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.s1_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_s1().empty()) {
    _this->_impl_.s1_.Set(from._internal_s1(), _this->GetArenaForAllocation());
  }
  _impl_.s2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.s2_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_s2().empty()) {
    _this->_impl_.s2_.Set(from._internal_s2(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.v2_ = new ::cfg::vec2(*from._impl_.v2_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.v3_ = new ::cfg::vec3(*from._impl_.v3_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.v4_ = new ::cfg::vec4(*from._impl_.v4_);
  }
  ::memcpy(&_impl_.x1_, &from._impl_.x1_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.x6_) -
    reinterpret_cast<char*>(&_impl_.x1_)) + sizeof(_impl_.x6_));

  // @@protoc_insertion_point(copy_constructor:cfg.TestDemoPrimitiveTypesTable)
}
inline void TestDemoPrimitiveTypesTable::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.s1_){},
      decltype(_impl_.s2_){},
      decltype(_impl_.v2_){nullptr},
      decltype(_impl_.v3_){nullptr},
      decltype(_impl_.v4_){nullptr},
      decltype(_impl_.x1_){false},
      decltype(_impl_.x2_){0},
      decltype(_impl_.x3_){0},
      decltype(_impl_.x4_){0},
      decltype(_impl_.x5_){::int64_t{0}},
      decltype(_impl_.x7_){0},
      decltype(_impl_.t1_){::int64_t{0}},
      decltype(_impl_.x6_){0},
  };
  _impl_.s1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.s1_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.s2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.s2_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
TestDemoPrimitiveTypesTable::~TestDemoPrimitiveTypesTable() {
  // @@protoc_insertion_point(destructor:cfg.TestDemoPrimitiveTypesTable)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestDemoPrimitiveTypesTable::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.s1_.Destroy();
  _impl_.s2_.Destroy();
  if (this != internal_default_instance()) delete _impl_.v2_;
  if (this != internal_default_instance()) delete _impl_.v3_;
  if (this != internal_default_instance()) delete _impl_.v4_;
}
void TestDemoPrimitiveTypesTable::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestDemoPrimitiveTypesTable::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestDemoPrimitiveTypesTable)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.s1_.ClearToEmpty();
  _impl_.s2_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.v2_ != nullptr);
      _impl_.v2_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.v3_ != nullptr);
      _impl_.v3_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.v4_ != nullptr);
      _impl_.v4_->Clear();
    }
  }
  ::memset(&_impl_.x1_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.x6_) -
      reinterpret_cast<char*>(&_impl_.x1_)) + sizeof(_impl_.x6_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestDemoPrimitiveTypesTable::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 13, 3, 52, 2> TestDemoPrimitiveTypesTable::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TestDemoPrimitiveTypesTable, _impl_._has_bits_),
    0, // no _extensions_
    13, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294959104,  // skipmap
    offsetof(decltype(_table_), field_entries),
    13,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TestDemoPrimitiveTypesTable_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // bool x1 = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(TestDemoPrimitiveTypesTable, _impl_.x1_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TestDemoPrimitiveTypesTable, _impl_.x1_)}},
    // int32 x2 = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestDemoPrimitiveTypesTable, _impl_.x2_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(TestDemoPrimitiveTypesTable, _impl_.x2_)}},
    // int32 x3 = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestDemoPrimitiveTypesTable, _impl_.x3_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(TestDemoPrimitiveTypesTable, _impl_.x3_)}},
    // int32 x4 = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestDemoPrimitiveTypesTable, _impl_.x4_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(TestDemoPrimitiveTypesTable, _impl_.x4_)}},
    // int64 x5 = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(TestDemoPrimitiveTypesTable, _impl_.x5_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(TestDemoPrimitiveTypesTable, _impl_.x5_)}},
    // float x6 = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 63, 0, PROTOBUF_FIELD_OFFSET(TestDemoPrimitiveTypesTable, _impl_.x6_)}},
    // double x7 = 7;
    {::_pbi::TcParser::FastF64S1,
     {57, 63, 0, PROTOBUF_FIELD_OFFSET(TestDemoPrimitiveTypesTable, _impl_.x7_)}},
    // string s1 = 8;
    {::_pbi::TcParser::FastUS1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(TestDemoPrimitiveTypesTable, _impl_.s1_)}},
    // string s2 = 9;
    {::_pbi::TcParser::FastUS1,
     {74, 63, 0, PROTOBUF_FIELD_OFFSET(TestDemoPrimitiveTypesTable, _impl_.s2_)}},
    // .cfg.vec2 v2 = 10;
    {::_pbi::TcParser::FastMtS1,
     {82, 0, 0, PROTOBUF_FIELD_OFFSET(TestDemoPrimitiveTypesTable, _impl_.v2_)}},
    // .cfg.vec3 v3 = 11;
    {::_pbi::TcParser::FastMtS1,
     {90, 1, 1, PROTOBUF_FIELD_OFFSET(TestDemoPrimitiveTypesTable, _impl_.v3_)}},
    // .cfg.vec4 v4 = 12;
    {::_pbi::TcParser::FastMtS1,
     {98, 2, 2, PROTOBUF_FIELD_OFFSET(TestDemoPrimitiveTypesTable, _impl_.v4_)}},
    // int64 t1 = 13;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(TestDemoPrimitiveTypesTable, _impl_.t1_), 63>(),
     {104, 63, 0, PROTOBUF_FIELD_OFFSET(TestDemoPrimitiveTypesTable, _impl_.t1_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // bool x1 = 1;
    {PROTOBUF_FIELD_OFFSET(TestDemoPrimitiveTypesTable, _impl_.x1_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 x2 = 2;
    {PROTOBUF_FIELD_OFFSET(TestDemoPrimitiveTypesTable, _impl_.x2_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 x3 = 3;
    {PROTOBUF_FIELD_OFFSET(TestDemoPrimitiveTypesTable, _impl_.x3_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 x4 = 4;
    {PROTOBUF_FIELD_OFFSET(TestDemoPrimitiveTypesTable, _impl_.x4_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int64 x5 = 5;
    {PROTOBUF_FIELD_OFFSET(TestDemoPrimitiveTypesTable, _impl_.x5_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // float x6 = 6;
    {PROTOBUF_FIELD_OFFSET(TestDemoPrimitiveTypesTable, _impl_.x6_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // double x7 = 7;
    {PROTOBUF_FIELD_OFFSET(TestDemoPrimitiveTypesTable, _impl_.x7_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // string s1 = 8;
    {PROTOBUF_FIELD_OFFSET(TestDemoPrimitiveTypesTable, _impl_.s1_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string s2 = 9;
    {PROTOBUF_FIELD_OFFSET(TestDemoPrimitiveTypesTable, _impl_.s2_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .cfg.vec2 v2 = 10;
    {PROTOBUF_FIELD_OFFSET(TestDemoPrimitiveTypesTable, _impl_.v2_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cfg.vec3 v3 = 11;
    {PROTOBUF_FIELD_OFFSET(TestDemoPrimitiveTypesTable, _impl_.v3_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cfg.vec4 v4 = 12;
    {PROTOBUF_FIELD_OFFSET(TestDemoPrimitiveTypesTable, _impl_.v4_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int64 t1 = 13;
    {PROTOBUF_FIELD_OFFSET(TestDemoPrimitiveTypesTable, _impl_.t1_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::vec2>()},
    {::_pbi::TcParser::GetTable<::cfg::vec3>()},
    {::_pbi::TcParser::GetTable<::cfg::vec4>()},
  }}, {{
    "\37\0\0\0\0\0\0\0\2\2\0\0\0\0\0\0"
    "cfg.TestDemoPrimitiveTypesTable"
    "s1"
    "s2"
  }},
};

::uint8_t* TestDemoPrimitiveTypesTable::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestDemoPrimitiveTypesTable)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bool x1 = 1;
  if (this->_internal_x1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_x1(), target);
  }

  // int32 x2 = 2;
  if (this->_internal_x2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_x2(), target);
  }

  // int32 x3 = 3;
  if (this->_internal_x3() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_x3(), target);
  }

  // int32 x4 = 4;
  if (this->_internal_x4() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_x4(), target);
  }

  // int64 x5 = 5;
  if (this->_internal_x5() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<5>(
            stream, this->_internal_x5(), target);
  }

  // float x6 = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_x6 = this->_internal_x6();
  ::uint32_t raw_x6;
  memcpy(&raw_x6, &tmp_x6, sizeof(tmp_x6));
  if (raw_x6 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        6, this->_internal_x6(), target);
  }

  // double x7 = 7;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_x7 = this->_internal_x7();
  ::uint64_t raw_x7;
  memcpy(&raw_x7, &tmp_x7, sizeof(tmp_x7));
  if (raw_x7 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        7, this->_internal_x7(), target);
  }

  // string s1 = 8;
  if (!this->_internal_s1().empty()) {
    const std::string& _s = this->_internal_s1();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.TestDemoPrimitiveTypesTable.s1");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  // string s2 = 9;
  if (!this->_internal_s2().empty()) {
    const std::string& _s = this->_internal_s2();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.TestDemoPrimitiveTypesTable.s2");
    target = stream->WriteStringMaybeAliased(9, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cfg.vec2 v2 = 10;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::v2(this),
        _Internal::v2(this).GetCachedSize(), target, stream);
  }

  // .cfg.vec3 v3 = 11;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::v3(this),
        _Internal::v3(this).GetCachedSize(), target, stream);
  }

  // .cfg.vec4 v4 = 12;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::v4(this),
        _Internal::v4(this).GetCachedSize(), target, stream);
  }

  // int64 t1 = 13;
  if (this->_internal_t1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<13>(
            stream, this->_internal_t1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestDemoPrimitiveTypesTable)
  return target;
}

::size_t TestDemoPrimitiveTypesTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestDemoPrimitiveTypesTable)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string s1 = 8;
  if (!this->_internal_s1().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_s1());
  }

  // string s2 = 9;
  if (!this->_internal_s2().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_s2());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .cfg.vec2 v2 = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.v2_);
    }

    // .cfg.vec3 v3 = 11;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.v3_);
    }

    // .cfg.vec4 v4 = 12;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.v4_);
    }

  }
  // bool x1 = 1;
  if (this->_internal_x1() != 0) {
    total_size += 2;
  }

  // int32 x2 = 2;
  if (this->_internal_x2() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_x2());
  }

  // int32 x3 = 3;
  if (this->_internal_x3() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_x3());
  }

  // int32 x4 = 4;
  if (this->_internal_x4() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_x4());
  }

  // int64 x5 = 5;
  if (this->_internal_x5() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_x5());
  }

  // double x7 = 7;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_x7 = this->_internal_x7();
  ::uint64_t raw_x7;
  memcpy(&raw_x7, &tmp_x7, sizeof(tmp_x7));
  if (raw_x7 != 0) {
    total_size += 9;
  }

  // int64 t1 = 13;
  if (this->_internal_t1() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_t1());
  }

  // float x6 = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_x6 = this->_internal_x6();
  ::uint32_t raw_x6;
  memcpy(&raw_x6, &tmp_x6, sizeof(tmp_x6));
  if (raw_x6 != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestDemoPrimitiveTypesTable::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestDemoPrimitiveTypesTable::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestDemoPrimitiveTypesTable::GetClassData() const { return &_class_data_; }


void TestDemoPrimitiveTypesTable::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestDemoPrimitiveTypesTable*>(&to_msg);
  auto& from = static_cast<const TestDemoPrimitiveTypesTable&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestDemoPrimitiveTypesTable)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_s1().empty()) {
    _this->_internal_set_s1(from._internal_s1());
  }
  if (!from._internal_s2().empty()) {
    _this->_internal_set_s2(from._internal_s2());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_v2()->::cfg::vec2::MergeFrom(
          from._internal_v2());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_v3()->::cfg::vec3::MergeFrom(
          from._internal_v3());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_v4()->::cfg::vec4::MergeFrom(
          from._internal_v4());
    }
  }
  if (from._internal_x1() != 0) {
    _this->_internal_set_x1(from._internal_x1());
  }
  if (from._internal_x2() != 0) {
    _this->_internal_set_x2(from._internal_x2());
  }
  if (from._internal_x3() != 0) {
    _this->_internal_set_x3(from._internal_x3());
  }
  if (from._internal_x4() != 0) {
    _this->_internal_set_x4(from._internal_x4());
  }
  if (from._internal_x5() != 0) {
    _this->_internal_set_x5(from._internal_x5());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_x7 = from._internal_x7();
  ::uint64_t raw_x7;
  memcpy(&raw_x7, &tmp_x7, sizeof(tmp_x7));
  if (raw_x7 != 0) {
    _this->_internal_set_x7(from._internal_x7());
  }
  if (from._internal_t1() != 0) {
    _this->_internal_set_t1(from._internal_t1());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_x6 = from._internal_x6();
  ::uint32_t raw_x6;
  memcpy(&raw_x6, &tmp_x6, sizeof(tmp_x6));
  if (raw_x6 != 0) {
    _this->_internal_set_x6(from._internal_x6());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestDemoPrimitiveTypesTable::CopyFrom(const TestDemoPrimitiveTypesTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestDemoPrimitiveTypesTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestDemoPrimitiveTypesTable::IsInitialized() const {
  return true;
}

void TestDemoPrimitiveTypesTable::InternalSwap(TestDemoPrimitiveTypesTable* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.s1_, lhs_arena,
                                       &other->_impl_.s1_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.s2_, lhs_arena,
                                       &other->_impl_.s2_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestDemoPrimitiveTypesTable, _impl_.x6_)
      + sizeof(TestDemoPrimitiveTypesTable::_impl_.x6_)
      - PROTOBUF_FIELD_OFFSET(TestDemoPrimitiveTypesTable, _impl_.v2_)>(
          reinterpret_cast<char*>(&_impl_.v2_),
          reinterpret_cast<char*>(&other->_impl_.v2_));
}

::google::protobuf::Metadata TestDemoPrimitiveTypesTable::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[74]);
}
// ===================================================================

class vec2::_Internal {
 public:
};

vec2::vec2(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.vec2)
}
vec2::vec2(const vec2& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cfg.vec2)
}
inline void vec2::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0},
      decltype(_impl_.y_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
vec2::~vec2() {
  // @@protoc_insertion_point(destructor:cfg.vec2)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void vec2::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void vec2::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void vec2::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.vec2)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* vec2::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> vec2::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_vec2_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // float y = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(vec2, _impl_.y_)}},
    // float x = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(vec2, _impl_.x_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float x = 1;
    {PROTOBUF_FIELD_OFFSET(vec2, _impl_.x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float y = 2;
    {PROTOBUF_FIELD_OFFSET(vec2, _impl_.y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* vec2::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.vec2)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float x = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  ::uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_x(), target);
  }

  // float y = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  ::uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.vec2)
  return target;
}

::size_t vec2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.vec2)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  ::uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 5;
  }

  // float y = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  ::uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData vec2::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    vec2::MergeImpl
};
const ::google::protobuf::Message::ClassData*vec2::GetClassData() const { return &_class_data_; }


void vec2::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<vec2*>(&to_msg);
  auto& from = static_cast<const vec2&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.vec2)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  ::uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  ::uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void vec2::CopyFrom(const vec2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.vec2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool vec2::IsInitialized() const {
  return true;
}

void vec2::InternalSwap(vec2* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(vec2, _impl_.y_)
      + sizeof(vec2::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(vec2, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::google::protobuf::Metadata vec2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[75]);
}
// ===================================================================

class vec3::_Internal {
 public:
};

vec3::vec3(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.vec3)
}
vec3::vec3(const vec3& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cfg.vec3)
}
inline void vec3::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0},
      decltype(_impl_.y_){0},
      decltype(_impl_.z_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
vec3::~vec3() {
  // @@protoc_insertion_point(destructor:cfg.vec3)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void vec3::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void vec3::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void vec3::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.vec3)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.z_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* vec3::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> vec3::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_vec3_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // float x = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(vec3, _impl_.x_)}},
    // float y = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(vec3, _impl_.y_)}},
    // float z = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(vec3, _impl_.z_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float x = 1;
    {PROTOBUF_FIELD_OFFSET(vec3, _impl_.x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float y = 2;
    {PROTOBUF_FIELD_OFFSET(vec3, _impl_.y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float z = 3;
    {PROTOBUF_FIELD_OFFSET(vec3, _impl_.z_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* vec3::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.vec3)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float x = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  ::uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_x(), target);
  }

  // float y = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  ::uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_y(), target);
  }

  // float z = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  ::uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.vec3)
  return target;
}

::size_t vec3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.vec3)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  ::uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 5;
  }

  // float y = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  ::uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 5;
  }

  // float z = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  ::uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData vec3::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    vec3::MergeImpl
};
const ::google::protobuf::Message::ClassData*vec3::GetClassData() const { return &_class_data_; }


void vec3::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<vec3*>(&to_msg);
  auto& from = static_cast<const vec3&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.vec3)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  ::uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  ::uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  ::uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void vec3::CopyFrom(const vec3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.vec3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool vec3::IsInitialized() const {
  return true;
}

void vec3::InternalSwap(vec3* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(vec3, _impl_.z_)
      + sizeof(vec3::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(vec3, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::google::protobuf::Metadata vec3::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[76]);
}
// ===================================================================

class vec4::_Internal {
 public:
};

vec4::vec4(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.vec4)
}
vec4::vec4(const vec4& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cfg.vec4)
}
inline void vec4::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0},
      decltype(_impl_.y_){0},
      decltype(_impl_.z_){0},
      decltype(_impl_.w_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
vec4::~vec4() {
  // @@protoc_insertion_point(destructor:cfg.vec4)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void vec4::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void vec4::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void vec4::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.vec4)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.w_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.w_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* vec4::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 0, 2> vec4::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_vec4_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // float w = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(vec4, _impl_.w_)}},
    // float x = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(vec4, _impl_.x_)}},
    // float y = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(vec4, _impl_.y_)}},
    // float z = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(vec4, _impl_.z_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float x = 1;
    {PROTOBUF_FIELD_OFFSET(vec4, _impl_.x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float y = 2;
    {PROTOBUF_FIELD_OFFSET(vec4, _impl_.y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float z = 3;
    {PROTOBUF_FIELD_OFFSET(vec4, _impl_.z_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float w = 4;
    {PROTOBUF_FIELD_OFFSET(vec4, _impl_.w_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* vec4::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.vec4)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float x = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  ::uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_x(), target);
  }

  // float y = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  ::uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_y(), target);
  }

  // float z = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  ::uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_z(), target);
  }

  // float w = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_w = this->_internal_w();
  ::uint32_t raw_w;
  memcpy(&raw_w, &tmp_w, sizeof(tmp_w));
  if (raw_w != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_w(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.vec4)
  return target;
}

::size_t vec4::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.vec4)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  ::uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 5;
  }

  // float y = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  ::uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 5;
  }

  // float z = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  ::uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 5;
  }

  // float w = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_w = this->_internal_w();
  ::uint32_t raw_w;
  memcpy(&raw_w, &tmp_w, sizeof(tmp_w));
  if (raw_w != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData vec4::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    vec4::MergeImpl
};
const ::google::protobuf::Message::ClassData*vec4::GetClassData() const { return &_class_data_; }


void vec4::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<vec4*>(&to_msg);
  auto& from = static_cast<const vec4&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.vec4)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  ::uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  ::uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  ::uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_w = from._internal_w();
  ::uint32_t raw_w;
  memcpy(&raw_w, &tmp_w, sizeof(tmp_w));
  if (raw_w != 0) {
    _this->_internal_set_w(from._internal_w());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void vec4::CopyFrom(const vec4& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.vec4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool vec4::IsInitialized() const {
  return true;
}

void vec4::InternalSwap(vec4* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(vec4, _impl_.w_)
      + sizeof(vec4::_impl_.w_)
      - PROTOBUF_FIELD_OFFSET(vec4, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::google::protobuf::Metadata vec4::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[77]);
}
// ===================================================================

class TestTestString::_Internal {
 public:
  using HasBits = decltype(std::declval<TestTestString>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TestTestString, _impl_._has_bits_);
  static const ::cfg::TestCompactString& cs1(const TestTestString* msg);
  static void set_has_cs1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::cfg::TestCompactString& cs2(const TestTestString* msg);
  static void set_has_cs2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::cfg::TestCompactString& TestTestString::_Internal::cs1(const TestTestString* msg) {
  return *msg->_impl_.cs1_;
}
const ::cfg::TestCompactString& TestTestString::_Internal::cs2(const TestTestString* msg) {
  return *msg->_impl_.cs2_;
}
TestTestString::TestTestString(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestTestString)
}
TestTestString::TestTestString(const TestTestString& from) : ::google::protobuf::Message() {
  TestTestString* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.id_){},
      decltype(_impl_.s1_){},
      decltype(_impl_.s2_){},
      decltype(_impl_.cs1_){nullptr},
      decltype(_impl_.cs2_){nullptr},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), _this->GetArenaForAllocation());
  }
  _impl_.s1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.s1_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_s1().empty()) {
    _this->_impl_.s1_.Set(from._internal_s1(), _this->GetArenaForAllocation());
  }
  _impl_.s2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.s2_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_s2().empty()) {
    _this->_impl_.s2_.Set(from._internal_s2(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.cs1_ = new ::cfg::TestCompactString(*from._impl_.cs1_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.cs2_ = new ::cfg::TestCompactString(*from._impl_.cs2_);
  }

  // @@protoc_insertion_point(copy_constructor:cfg.TestTestString)
}
inline void TestTestString::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.id_){},
      decltype(_impl_.s1_){},
      decltype(_impl_.s2_){},
      decltype(_impl_.cs1_){nullptr},
      decltype(_impl_.cs2_){nullptr},
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.s1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.s1_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.s2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.s2_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
TestTestString::~TestTestString() {
  // @@protoc_insertion_point(destructor:cfg.TestTestString)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestTestString::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.s1_.Destroy();
  _impl_.s2_.Destroy();
  if (this != internal_default_instance()) delete _impl_.cs1_;
  if (this != internal_default_instance()) delete _impl_.cs2_;
}
void TestTestString::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestTestString::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestTestString)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.s1_.ClearToEmpty();
  _impl_.s2_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.cs1_ != nullptr);
      _impl_.cs1_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.cs2_ != nullptr);
      _impl_.cs2_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestTestString::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 2, 33, 2> TestTestString::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TestTestString, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TestTestString_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TestTestString, _impl_.id_)}},
    // string s1 = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(TestTestString, _impl_.s1_)}},
    // string s2 = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(TestTestString, _impl_.s2_)}},
    // .cfg.TestCompactString cs1 = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 0, 0, PROTOBUF_FIELD_OFFSET(TestTestString, _impl_.cs1_)}},
    // .cfg.TestCompactString cs2 = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 1, 1, PROTOBUF_FIELD_OFFSET(TestTestString, _impl_.cs2_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string id = 1;
    {PROTOBUF_FIELD_OFFSET(TestTestString, _impl_.id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string s1 = 2;
    {PROTOBUF_FIELD_OFFSET(TestTestString, _impl_.s1_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string s2 = 3;
    {PROTOBUF_FIELD_OFFSET(TestTestString, _impl_.s2_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .cfg.TestCompactString cs1 = 4;
    {PROTOBUF_FIELD_OFFSET(TestTestString, _impl_.cs1_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cfg.TestCompactString cs2 = 5;
    {PROTOBUF_FIELD_OFFSET(TestTestString, _impl_.cs2_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::TestCompactString>()},
    {::_pbi::TcParser::GetTable<::cfg::TestCompactString>()},
  }}, {{
    "\22\2\2\2\0\0\0\0"
    "cfg.TestTestString"
    "id"
    "s1"
    "s2"
  }},
};

::uint8_t* TestTestString::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestTestString)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    const std::string& _s = this->_internal_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.TestTestString.id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string s1 = 2;
  if (!this->_internal_s1().empty()) {
    const std::string& _s = this->_internal_s1();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.TestTestString.s1");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string s2 = 3;
  if (!this->_internal_s2().empty()) {
    const std::string& _s = this->_internal_s2();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.TestTestString.s2");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cfg.TestCompactString cs1 = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::cs1(this),
        _Internal::cs1(this).GetCachedSize(), target, stream);
  }

  // .cfg.TestCompactString cs2 = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::cs2(this),
        _Internal::cs2(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestTestString)
  return target;
}

::size_t TestTestString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestTestString)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_id());
  }

  // string s1 = 2;
  if (!this->_internal_s1().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_s1());
  }

  // string s2 = 3;
  if (!this->_internal_s2().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_s2());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .cfg.TestCompactString cs1 = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.cs1_);
    }

    // .cfg.TestCompactString cs2 = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.cs2_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestTestString::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestTestString::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestTestString::GetClassData() const { return &_class_data_; }


void TestTestString::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestTestString*>(&to_msg);
  auto& from = static_cast<const TestTestString&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestTestString)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_s1().empty()) {
    _this->_internal_set_s1(from._internal_s1());
  }
  if (!from._internal_s2().empty()) {
    _this->_internal_set_s2(from._internal_s2());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_cs1()->::cfg::TestCompactString::MergeFrom(
          from._internal_cs1());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_cs2()->::cfg::TestCompactString::MergeFrom(
          from._internal_cs2());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestTestString::CopyFrom(const TestTestString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestTestString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestTestString::IsInitialized() const {
  return true;
}

void TestTestString::InternalSwap(TestTestString* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, lhs_arena,
                                       &other->_impl_.id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.s1_, lhs_arena,
                                       &other->_impl_.s1_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.s2_, lhs_arena,
                                       &other->_impl_.s2_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestTestString, _impl_.cs2_)
      + sizeof(TestTestString::_impl_.cs2_)
      - PROTOBUF_FIELD_OFFSET(TestTestString, _impl_.cs1_)>(
          reinterpret_cast<char*>(&_impl_.cs1_),
          reinterpret_cast<char*>(&other->_impl_.cs1_));
}

::google::protobuf::Metadata TestTestString::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[78]);
}
// ===================================================================

class TestCompactString::_Internal {
 public:
};

TestCompactString::TestCompactString(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestCompactString)
}
TestCompactString::TestCompactString(const TestCompactString& from) : ::google::protobuf::Message() {
  TestCompactString* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.s2_){},
      decltype(_impl_.s3_){},
      decltype(_impl_.id_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.s2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.s2_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_s2().empty()) {
    _this->_impl_.s2_.Set(from._internal_s2(), _this->GetArenaForAllocation());
  }
  _impl_.s3_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.s3_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_s3().empty()) {
    _this->_impl_.s3_.Set(from._internal_s3(), _this->GetArenaForAllocation());
  }
  _this->_impl_.id_ = from._impl_.id_;

  // @@protoc_insertion_point(copy_constructor:cfg.TestCompactString)
}
inline void TestCompactString::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.s2_){},
      decltype(_impl_.s3_){},
      decltype(_impl_.id_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.s2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.s2_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.s3_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.s3_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
TestCompactString::~TestCompactString() {
  // @@protoc_insertion_point(destructor:cfg.TestCompactString)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestCompactString::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.s2_.Destroy();
  _impl_.s3_.Destroy();
}
void TestCompactString::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestCompactString::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestCompactString)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.s2_.ClearToEmpty();
  _impl_.s3_.ClearToEmpty();
  _impl_.id_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestCompactString::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 34, 2> TestCompactString::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_TestCompactString_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestCompactString, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TestCompactString, _impl_.id_)}},
    // string s2 = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(TestCompactString, _impl_.s2_)}},
    // string s3 = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(TestCompactString, _impl_.s3_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(TestCompactString, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string s2 = 2;
    {PROTOBUF_FIELD_OFFSET(TestCompactString, _impl_.s2_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string s3 = 3;
    {PROTOBUF_FIELD_OFFSET(TestCompactString, _impl_.s3_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\25\0\2\2\0\0\0\0"
    "cfg.TestCompactString"
    "s2"
    "s3"
  }},
};

::uint8_t* TestCompactString::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestCompactString)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // string s2 = 2;
  if (!this->_internal_s2().empty()) {
    const std::string& _s = this->_internal_s2();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.TestCompactString.s2");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string s3 = 3;
  if (!this->_internal_s3().empty()) {
    const std::string& _s = this->_internal_s3();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.TestCompactString.s3");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestCompactString)
  return target;
}

::size_t TestCompactString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestCompactString)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string s2 = 2;
  if (!this->_internal_s2().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_s2());
  }

  // string s3 = 3;
  if (!this->_internal_s3().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_s3());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestCompactString::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestCompactString::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestCompactString::GetClassData() const { return &_class_data_; }


void TestCompactString::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestCompactString*>(&to_msg);
  auto& from = static_cast<const TestCompactString&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestCompactString)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_s2().empty()) {
    _this->_internal_set_s2(from._internal_s2());
  }
  if (!from._internal_s3().empty()) {
    _this->_internal_set_s3(from._internal_s3());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestCompactString::CopyFrom(const TestCompactString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestCompactString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestCompactString::IsInitialized() const {
  return true;
}

void TestCompactString::InternalSwap(TestCompactString* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.s2_, lhs_arena,
                                       &other->_impl_.s2_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.s3_, lhs_arena,
                                       &other->_impl_.s3_, rhs_arena);
        swap(_impl_.id_, other->_impl_.id_);
}

::google::protobuf::Metadata TestCompactString::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[79]);
}
// ===================================================================

class TestDemoGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<TestDemoGroup>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TestDemoGroup, _impl_._has_bits_);
  static const ::cfg::TestInnerGroup& x5(const TestDemoGroup* msg);
  static void set_has_x5(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cfg::TestInnerGroup& TestDemoGroup::_Internal::x5(const TestDemoGroup* msg) {
  return *msg->_impl_.x5_;
}
TestDemoGroup::TestDemoGroup(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestDemoGroup)
}
TestDemoGroup::TestDemoGroup(const TestDemoGroup& from) : ::google::protobuf::Message() {
  TestDemoGroup* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.x5_){nullptr},
      decltype(_impl_.id_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.x5_ = new ::cfg::TestInnerGroup(*from._impl_.x5_);
  }
  _this->_impl_.id_ = from._impl_.id_;

  // @@protoc_insertion_point(copy_constructor:cfg.TestDemoGroup)
}
inline void TestDemoGroup::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.x5_){nullptr},
      decltype(_impl_.id_){0},
  };
}
TestDemoGroup::~TestDemoGroup() {
  // @@protoc_insertion_point(destructor:cfg.TestDemoGroup)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestDemoGroup::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.x5_;
}
void TestDemoGroup::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestDemoGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestDemoGroup)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.x5_ != nullptr);
    _impl_.x5_->Clear();
  }
  _impl_.id_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestDemoGroup::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> TestDemoGroup::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TestDemoGroup, _impl_._has_bits_),
    0, // no _extensions_
    6, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967262,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TestDemoGroup_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .cfg.TestInnerGroup x5 = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 0, 0, PROTOBUF_FIELD_OFFSET(TestDemoGroup, _impl_.x5_)}},
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestDemoGroup, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TestDemoGroup, _impl_.id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(TestDemoGroup, _impl_.id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .cfg.TestInnerGroup x5 = 6;
    {PROTOBUF_FIELD_OFFSET(TestDemoGroup, _impl_.x5_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::TestInnerGroup>()},
  }}, {{
  }},
};

::uint8_t* TestDemoGroup::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestDemoGroup)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cfg.TestInnerGroup x5 = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::x5(this),
        _Internal::x5(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestDemoGroup)
  return target;
}

::size_t TestDemoGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestDemoGroup)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cfg.TestInnerGroup x5 = 6;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.x5_);
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestDemoGroup::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestDemoGroup::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestDemoGroup::GetClassData() const { return &_class_data_; }


void TestDemoGroup::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestDemoGroup*>(&to_msg);
  auto& from = static_cast<const TestDemoGroup&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestDemoGroup)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_x5()->::cfg::TestInnerGroup::MergeFrom(
        from._internal_x5());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestDemoGroup::CopyFrom(const TestDemoGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestDemoGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestDemoGroup::IsInitialized() const {
  return true;
}

void TestDemoGroup::InternalSwap(TestDemoGroup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestDemoGroup, _impl_.id_)
      + sizeof(TestDemoGroup::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(TestDemoGroup, _impl_.x5_)>(
          reinterpret_cast<char*>(&_impl_.x5_),
          reinterpret_cast<char*>(&other->_impl_.x5_));
}

::google::protobuf::Metadata TestDemoGroup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[80]);
}
// ===================================================================

class TestInnerGroup::_Internal {
 public:
};

TestInnerGroup::TestInnerGroup(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestInnerGroup)
}
TestInnerGroup::TestInnerGroup(const TestInnerGroup& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cfg.TestInnerGroup)
}
inline void TestInnerGroup::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.y1_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
TestInnerGroup::~TestInnerGroup() {
  // @@protoc_insertion_point(destructor:cfg.TestInnerGroup)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestInnerGroup::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void TestInnerGroup::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestInnerGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestInnerGroup)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.y1_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestInnerGroup::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> TestInnerGroup::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_TestInnerGroup_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // int32 y1 = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestInnerGroup, _impl_.y1_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TestInnerGroup, _impl_.y1_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 y1 = 1;
    {PROTOBUF_FIELD_OFFSET(TestInnerGroup, _impl_.y1_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* TestInnerGroup::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestInnerGroup)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 y1 = 1;
  if (this->_internal_y1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_y1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestInnerGroup)
  return target;
}

::size_t TestInnerGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestInnerGroup)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 y1 = 1;
  if (this->_internal_y1() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_y1());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestInnerGroup::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestInnerGroup::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestInnerGroup::GetClassData() const { return &_class_data_; }


void TestInnerGroup::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestInnerGroup*>(&to_msg);
  auto& from = static_cast<const TestInnerGroup&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestInnerGroup)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_y1() != 0) {
    _this->_internal_set_y1(from._internal_y1());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestInnerGroup::CopyFrom(const TestInnerGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestInnerGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestInnerGroup::IsInitialized() const {
  return true;
}

void TestInnerGroup::InternalSwap(TestInnerGroup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.y1_, other->_impl_.y1_);
}

::google::protobuf::Metadata TestInnerGroup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[81]);
}
// ===================================================================

class TestTestGlobal::_Internal {
 public:
};

TestTestGlobal::TestTestGlobal(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestTestGlobal)
}
TestTestGlobal::TestTestGlobal(const TestTestGlobal& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cfg.TestTestGlobal)
}
inline void TestTestGlobal::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.unlock_equip_){0},
      decltype(_impl_.unlock_hero_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
TestTestGlobal::~TestTestGlobal() {
  // @@protoc_insertion_point(destructor:cfg.TestTestGlobal)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestTestGlobal::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void TestTestGlobal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestTestGlobal::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestTestGlobal)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.unlock_equip_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.unlock_hero_) -
      reinterpret_cast<char*>(&_impl_.unlock_equip_)) + sizeof(_impl_.unlock_hero_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestTestGlobal::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> TestTestGlobal::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_TestTestGlobal_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // int32 unlock_hero = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestTestGlobal, _impl_.unlock_hero_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(TestTestGlobal, _impl_.unlock_hero_)}},
    // int32 unlock_equip = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestTestGlobal, _impl_.unlock_equip_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TestTestGlobal, _impl_.unlock_equip_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 unlock_equip = 1;
    {PROTOBUF_FIELD_OFFSET(TestTestGlobal, _impl_.unlock_equip_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 unlock_hero = 2;
    {PROTOBUF_FIELD_OFFSET(TestTestGlobal, _impl_.unlock_hero_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* TestTestGlobal::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestTestGlobal)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 unlock_equip = 1;
  if (this->_internal_unlock_equip() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_unlock_equip(), target);
  }

  // int32 unlock_hero = 2;
  if (this->_internal_unlock_hero() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_unlock_hero(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestTestGlobal)
  return target;
}

::size_t TestTestGlobal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestTestGlobal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 unlock_equip = 1;
  if (this->_internal_unlock_equip() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_unlock_equip());
  }

  // int32 unlock_hero = 2;
  if (this->_internal_unlock_hero() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_unlock_hero());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestTestGlobal::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestTestGlobal::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestTestGlobal::GetClassData() const { return &_class_data_; }


void TestTestGlobal::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestTestGlobal*>(&to_msg);
  auto& from = static_cast<const TestTestGlobal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestTestGlobal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_unlock_equip() != 0) {
    _this->_internal_set_unlock_equip(from._internal_unlock_equip());
  }
  if (from._internal_unlock_hero() != 0) {
    _this->_internal_set_unlock_hero(from._internal_unlock_hero());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestTestGlobal::CopyFrom(const TestTestGlobal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestTestGlobal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestTestGlobal::IsInitialized() const {
  return true;
}

void TestTestGlobal::InternalSwap(TestTestGlobal* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestTestGlobal, _impl_.unlock_hero_)
      + sizeof(TestTestGlobal::_impl_.unlock_hero_)
      - PROTOBUF_FIELD_OFFSET(TestTestGlobal, _impl_.unlock_equip_)>(
          reinterpret_cast<char*>(&_impl_.unlock_equip_),
          reinterpret_cast<char*>(&other->_impl_.unlock_equip_));
}

::google::protobuf::Metadata TestTestGlobal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[82]);
}
// ===================================================================

class TestTestBeRef::_Internal {
 public:
};

TestTestBeRef::TestTestBeRef(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestTestBeRef)
}
TestTestBeRef::TestTestBeRef(const TestTestBeRef& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cfg.TestTestBeRef)
}
inline void TestTestBeRef::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0},
      decltype(_impl_.count_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
TestTestBeRef::~TestTestBeRef() {
  // @@protoc_insertion_point(destructor:cfg.TestTestBeRef)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestTestBeRef::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void TestTestBeRef::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestTestBeRef::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestTestBeRef)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.count_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.count_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestTestBeRef::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> TestTestBeRef::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_TestTestBeRef_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // int32 count = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestTestBeRef, _impl_.count_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(TestTestBeRef, _impl_.count_)}},
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestTestBeRef, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TestTestBeRef, _impl_.id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(TestTestBeRef, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 count = 2;
    {PROTOBUF_FIELD_OFFSET(TestTestBeRef, _impl_.count_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* TestTestBeRef::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestTestBeRef)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // int32 count = 2;
  if (this->_internal_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestTestBeRef)
  return target;
}

::size_t TestTestBeRef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestTestBeRef)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  // int32 count = 2;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestTestBeRef::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestTestBeRef::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestTestBeRef::GetClassData() const { return &_class_data_; }


void TestTestBeRef::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestTestBeRef*>(&to_msg);
  auto& from = static_cast<const TestTestBeRef&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestTestBeRef)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestTestBeRef::CopyFrom(const TestTestBeRef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestTestBeRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestTestBeRef::IsInitialized() const {
  return true;
}

void TestTestBeRef::InternalSwap(TestTestBeRef* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestTestBeRef, _impl_.count_)
      + sizeof(TestTestBeRef::_impl_.count_)
      - PROTOBUF_FIELD_OFFSET(TestTestBeRef, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::google::protobuf::Metadata TestTestBeRef::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[83]);
}
// ===================================================================

TestTestRef_D1Entry_DoNotUse::TestTestRef_D1Entry_DoNotUse() {}
TestTestRef_D1Entry_DoNotUse::TestTestRef_D1Entry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void TestTestRef_D1Entry_DoNotUse::MergeFrom(const TestTestRef_D1Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata TestTestRef_D1Entry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[84]);
}
// ===================================================================

TestTestRef_D2Entry_DoNotUse::TestTestRef_D2Entry_DoNotUse() {}
TestTestRef_D2Entry_DoNotUse::TestTestRef_D2Entry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void TestTestRef_D2Entry_DoNotUse::MergeFrom(const TestTestRef_D2Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata TestTestRef_D2Entry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[85]);
}
// ===================================================================

class TestTestRef::_Internal {
 public:
  using HasBits = decltype(std::declval<TestTestRef>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TestTestRef, _impl_._has_bits_);
  static const ::cfg::TestRefDynamicBase& s1(const TestTestRef* msg);
  static void set_has_s1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cfg::TestRefDynamicBase& TestTestRef::_Internal::s1(const TestTestRef* msg) {
  return *msg->_impl_.s1_;
}
TestTestRef::TestTestRef(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestTestRef)
}
TestTestRef::TestTestRef(const TestTestRef& from) : ::google::protobuf::Message() {
  TestTestRef* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.a1_){from._impl_.a1_},
      /* _impl_._a1_cached_byte_size_ = */ {0},
      decltype(_impl_.a2_){from._impl_.a2_},
      /* _impl_._a2_cached_byte_size_ = */ {0},
      decltype(_impl_.b1_){from._impl_.b1_},
      /* _impl_._b1_cached_byte_size_ = */ {0},
      decltype(_impl_.b2_){from._impl_.b2_},
      /* _impl_._b2_cached_byte_size_ = */ {0},
      decltype(_impl_.c1_){from._impl_.c1_},
      /* _impl_._c1_cached_byte_size_ = */ {0},
      decltype(_impl_.c2_){from._impl_.c2_},
      /* _impl_._c2_cached_byte_size_ = */ {0},
      /* decltype(_impl_.d1_) */ {},
      /* decltype(_impl_.d2_) */ {},
      decltype(_impl_.e3_){},
      decltype(_impl_.f3_){},
      decltype(_impl_.s1_){nullptr},
      decltype(_impl_.id_){},
      decltype(_impl_.x1_){},
      decltype(_impl_.x1_2_){},
      decltype(_impl_.x2_){},
      decltype(_impl_.x3_){},
      decltype(_impl_.x4_){},
      decltype(_impl_.e2_){},
      decltype(_impl_.e1_){},
      decltype(_impl_.f1_){},
      decltype(_impl_.f2_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _this->_impl_.d1_.MergeFrom(from._impl_.d1_);
  _this->_impl_.d2_.MergeFrom(from._impl_.d2_);
  _impl_.e3_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.e3_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_e3().empty()) {
    _this->_impl_.e3_.Set(from._internal_e3(), _this->GetArenaForAllocation());
  }
  _impl_.f3_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.f3_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_f3().empty()) {
    _this->_impl_.f3_.Set(from._internal_f3(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.s1_ = new ::cfg::TestRefDynamicBase(*from._impl_.s1_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.f2_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.f2_));

  // @@protoc_insertion_point(copy_constructor:cfg.TestTestRef)
}
inline void TestTestRef::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.a1_){arena},
      /* _impl_._a1_cached_byte_size_ = */ {0},
      decltype(_impl_.a2_){arena},
      /* _impl_._a2_cached_byte_size_ = */ {0},
      decltype(_impl_.b1_){arena},
      /* _impl_._b1_cached_byte_size_ = */ {0},
      decltype(_impl_.b2_){arena},
      /* _impl_._b2_cached_byte_size_ = */ {0},
      decltype(_impl_.c1_){arena},
      /* _impl_._c1_cached_byte_size_ = */ {0},
      decltype(_impl_.c2_){arena},
      /* _impl_._c2_cached_byte_size_ = */ {0},
      /* decltype(_impl_.d1_) */ {::google::protobuf::internal::ArenaInitialized(), arena},
      /* decltype(_impl_.d2_) */ {::google::protobuf::internal::ArenaInitialized(), arena},
      decltype(_impl_.e3_){},
      decltype(_impl_.f3_){},
      decltype(_impl_.s1_){nullptr},
      decltype(_impl_.id_){0},
      decltype(_impl_.x1_){0},
      decltype(_impl_.x1_2_){0},
      decltype(_impl_.x2_){0},
      decltype(_impl_.x3_){0},
      decltype(_impl_.x4_){0},
      decltype(_impl_.e2_){::int64_t{0}},
      decltype(_impl_.e1_){0},
      decltype(_impl_.f1_){0},
      decltype(_impl_.f2_){::int64_t{0}},
  };
  _impl_.e3_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.e3_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f3_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.f3_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
TestTestRef::~TestTestRef() {
  // @@protoc_insertion_point(destructor:cfg.TestTestRef)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestTestRef::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.a1_.~RepeatedField();
  _impl_.a2_.~RepeatedField();
  _impl_.b1_.~RepeatedField();
  _impl_.b2_.~RepeatedField();
  _impl_.c1_.~RepeatedField();
  _impl_.c2_.~RepeatedField();
  _impl_.d1_.~MapField();
  _impl_.d2_.~MapField();
  _impl_.e3_.Destroy();
  _impl_.f3_.Destroy();
  if (this != internal_default_instance()) delete _impl_.s1_;
}
void TestTestRef::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestTestRef::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestTestRef)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.a1_.Clear();
  _impl_.a2_.Clear();
  _impl_.b1_.Clear();
  _impl_.b2_.Clear();
  _impl_.c1_.Clear();
  _impl_.c2_.Clear();
  _impl_.d1_.Clear();
  _impl_.d2_.Clear();
  _impl_.e3_.ClearToEmpty();
  _impl_.f3_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.s1_ != nullptr);
    _impl_.s1_->Clear();
  }
  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.f2_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.f2_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestTestRef::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 21, 3, 44, 2> TestTestRef::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TestTestRef, _impl_._has_bits_),
    0, // no _extensions_
    21, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4292870144,  // skipmap
    offsetof(decltype(_table_), field_entries),
    21,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TestTestRef_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestTestRef, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TestTestRef, _impl_.id_)}},
    // int32 x1 = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestTestRef, _impl_.x1_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(TestTestRef, _impl_.x1_)}},
    // int32 x1_2 = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestTestRef, _impl_.x1_2_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(TestTestRef, _impl_.x1_2_)}},
    // int32 x2 = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestTestRef, _impl_.x2_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(TestTestRef, _impl_.x2_)}},
    // int32 x3 = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestTestRef, _impl_.x3_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(TestTestRef, _impl_.x3_)}},
    // int32 x4 = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestTestRef, _impl_.x4_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(TestTestRef, _impl_.x4_)}},
    // repeated int32 a1 = 7 [packed = true];
    {::_pbi::TcParser::FastV32P1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(TestTestRef, _impl_.a1_)}},
    // repeated int32 a2 = 8 [packed = true];
    {::_pbi::TcParser::FastV32P1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(TestTestRef, _impl_.a2_)}},
    // repeated int32 b1 = 9 [packed = true];
    {::_pbi::TcParser::FastV32P1,
     {74, 63, 0, PROTOBUF_FIELD_OFFSET(TestTestRef, _impl_.b1_)}},
    // repeated int32 b2 = 10 [packed = true];
    {::_pbi::TcParser::FastV32P1,
     {82, 63, 0, PROTOBUF_FIELD_OFFSET(TestTestRef, _impl_.b2_)}},
    // repeated int32 c1 = 11 [packed = true];
    {::_pbi::TcParser::FastV32P1,
     {90, 63, 0, PROTOBUF_FIELD_OFFSET(TestTestRef, _impl_.c1_)}},
    // repeated int32 c2 = 12 [packed = true];
    {::_pbi::TcParser::FastV32P1,
     {98, 63, 0, PROTOBUF_FIELD_OFFSET(TestTestRef, _impl_.c2_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // int32 e1 = 15;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestTestRef, _impl_.e1_), 63>(),
     {120, 63, 0, PROTOBUF_FIELD_OFFSET(TestTestRef, _impl_.e1_)}},
    // int64 e2 = 16;
    {::_pbi::TcParser::FastV64S2,
     {384, 63, 0, PROTOBUF_FIELD_OFFSET(TestTestRef, _impl_.e2_)}},
    // string e3 = 17;
    {::_pbi::TcParser::FastUS2,
     {394, 63, 0, PROTOBUF_FIELD_OFFSET(TestTestRef, _impl_.e3_)}},
    // int32 f1 = 18;
    {::_pbi::TcParser::FastV32S2,
     {400, 63, 0, PROTOBUF_FIELD_OFFSET(TestTestRef, _impl_.f1_)}},
    // int64 f2 = 19;
    {::_pbi::TcParser::FastV64S2,
     {408, 63, 0, PROTOBUF_FIELD_OFFSET(TestTestRef, _impl_.f2_)}},
    // string f3 = 20;
    {::_pbi::TcParser::FastUS2,
     {418, 63, 0, PROTOBUF_FIELD_OFFSET(TestTestRef, _impl_.f3_)}},
    // .cfg.TestRefDynamicBase s1 = 21;
    {::_pbi::TcParser::FastMtS2,
     {426, 0, 2, PROTOBUF_FIELD_OFFSET(TestTestRef, _impl_.s1_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(TestTestRef, _impl_.id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 x1 = 2;
    {PROTOBUF_FIELD_OFFSET(TestTestRef, _impl_.x1_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 x1_2 = 3;
    {PROTOBUF_FIELD_OFFSET(TestTestRef, _impl_.x1_2_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 x2 = 4;
    {PROTOBUF_FIELD_OFFSET(TestTestRef, _impl_.x2_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 x3 = 5;
    {PROTOBUF_FIELD_OFFSET(TestTestRef, _impl_.x3_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 x4 = 6;
    {PROTOBUF_FIELD_OFFSET(TestTestRef, _impl_.x4_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // repeated int32 a1 = 7 [packed = true];
    {PROTOBUF_FIELD_OFFSET(TestTestRef, _impl_.a1_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
    // repeated int32 a2 = 8 [packed = true];
    {PROTOBUF_FIELD_OFFSET(TestTestRef, _impl_.a2_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
    // repeated int32 b1 = 9 [packed = true];
    {PROTOBUF_FIELD_OFFSET(TestTestRef, _impl_.b1_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
    // repeated int32 b2 = 10 [packed = true];
    {PROTOBUF_FIELD_OFFSET(TestTestRef, _impl_.b2_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
    // repeated int32 c1 = 11 [packed = true];
    {PROTOBUF_FIELD_OFFSET(TestTestRef, _impl_.c1_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
    // repeated int32 c2 = 12 [packed = true];
    {PROTOBUF_FIELD_OFFSET(TestTestRef, _impl_.c2_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
    // map<int32, int32> d1 = 13;
    {PROTOBUF_FIELD_OFFSET(TestTestRef, _impl_.d1_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // map<int32, int32> d2 = 14;
    {PROTOBUF_FIELD_OFFSET(TestTestRef, _impl_.d2_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // int32 e1 = 15;
    {PROTOBUF_FIELD_OFFSET(TestTestRef, _impl_.e1_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int64 e2 = 16;
    {PROTOBUF_FIELD_OFFSET(TestTestRef, _impl_.e2_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // string e3 = 17;
    {PROTOBUF_FIELD_OFFSET(TestTestRef, _impl_.e3_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 f1 = 18;
    {PROTOBUF_FIELD_OFFSET(TestTestRef, _impl_.f1_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int64 f2 = 19;
    {PROTOBUF_FIELD_OFFSET(TestTestRef, _impl_.f2_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // string f3 = 20;
    {PROTOBUF_FIELD_OFFSET(TestTestRef, _impl_.f3_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .cfg.TestRefDynamicBase s1 = 21;
    {PROTOBUF_FIELD_OFFSET(TestTestRef, _impl_.s1_), _Internal::kHasBitsOffset + 0, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(TestTestRef()._impl_.d1_)>(
        1, 0, 0, 5,
        5)},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(TestTestRef()._impl_.d2_)>(
        1, 0, 0, 5,
        5)},
    {::_pbi::TcParser::GetTable<::cfg::TestRefDynamicBase>()},
  }}, {{
    "\17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\2\0\0\2\0\0\0"
    "cfg.TestTestRef"
    "e3"
    "f3"
  }},
};

::uint8_t* TestTestRef::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestTestRef)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // int32 x1 = 2;
  if (this->_internal_x1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_x1(), target);
  }

  // int32 x1_2 = 3;
  if (this->_internal_x1_2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_x1_2(), target);
  }

  // int32 x2 = 4;
  if (this->_internal_x2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_x2(), target);
  }

  // int32 x3 = 5;
  if (this->_internal_x3() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<5>(
            stream, this->_internal_x3(), target);
  }

  // int32 x4 = 6;
  if (this->_internal_x4() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<6>(
            stream, this->_internal_x4(), target);
  }

  // repeated int32 a1 = 7 [packed = true];
  {
    int byte_size = _impl_._a1_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          7, _internal_a1(), byte_size, target);
    }
  }

  // repeated int32 a2 = 8 [packed = true];
  {
    int byte_size = _impl_._a2_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          8, _internal_a2(), byte_size, target);
    }
  }

  // repeated int32 b1 = 9 [packed = true];
  {
    int byte_size = _impl_._b1_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          9, _internal_b1(), byte_size, target);
    }
  }

  // repeated int32 b2 = 10 [packed = true];
  {
    int byte_size = _impl_._b2_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          10, _internal_b2(), byte_size, target);
    }
  }

  // repeated int32 c1 = 11 [packed = true];
  {
    int byte_size = _impl_._c1_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          11, _internal_c1(), byte_size, target);
    }
  }

  // repeated int32 c2 = 12 [packed = true];
  {
    int byte_size = _impl_._c2_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          12, _internal_c2(), byte_size, target);
    }
  }

  // map<int32, int32> d1 = 13;
  if (!_internal_d1().empty()) {
    using MapType = ::google::protobuf::Map<::int32_t, ::int32_t>;
    using WireHelper = _pbi::MapEntryFuncs<::int32_t, ::int32_t,
                                   _pbi::WireFormatLite::TYPE_INT32,
                                   _pbi::WireFormatLite::TYPE_INT32>;
    const auto& field = _internal_d1();

    if (stream->IsSerializationDeterministic() && field.size() > 1) {
      for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
        target = WireHelper::InternalSerialize(
            13, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : field) {
        target = WireHelper::InternalSerialize(
            13, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<int32, int32> d2 = 14;
  if (!_internal_d2().empty()) {
    using MapType = ::google::protobuf::Map<::int32_t, ::int32_t>;
    using WireHelper = _pbi::MapEntryFuncs<::int32_t, ::int32_t,
                                   _pbi::WireFormatLite::TYPE_INT32,
                                   _pbi::WireFormatLite::TYPE_INT32>;
    const auto& field = _internal_d2();

    if (stream->IsSerializationDeterministic() && field.size() > 1) {
      for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
        target = WireHelper::InternalSerialize(
            14, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : field) {
        target = WireHelper::InternalSerialize(
            14, entry.first, entry.second, target, stream);
      }
    }
  }

  // int32 e1 = 15;
  if (this->_internal_e1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<15>(
            stream, this->_internal_e1(), target);
  }

  // int64 e2 = 16;
  if (this->_internal_e2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        16, this->_internal_e2(), target);
  }

  // string e3 = 17;
  if (!this->_internal_e3().empty()) {
    const std::string& _s = this->_internal_e3();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.TestTestRef.e3");
    target = stream->WriteStringMaybeAliased(17, _s, target);
  }

  // int32 f1 = 18;
  if (this->_internal_f1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        18, this->_internal_f1(), target);
  }

  // int64 f2 = 19;
  if (this->_internal_f2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        19, this->_internal_f2(), target);
  }

  // string f3 = 20;
  if (!this->_internal_f3().empty()) {
    const std::string& _s = this->_internal_f3();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.TestTestRef.f3");
    target = stream->WriteStringMaybeAliased(20, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cfg.TestRefDynamicBase s1 = 21;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::s1(this),
        _Internal::s1(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestTestRef)
  return target;
}

::size_t TestTestRef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestTestRef)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 a1 = 7 [packed = true];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_a1())
    ;
    _impl_._a1_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated int32 a2 = 8 [packed = true];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_a2())
    ;
    _impl_._a2_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated int32 b1 = 9 [packed = true];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_b1())
    ;
    _impl_._b1_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated int32 b2 = 10 [packed = true];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_b2())
    ;
    _impl_._b2_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated int32 c1 = 11 [packed = true];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_c1())
    ;
    _impl_._c1_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated int32 c2 = 12 [packed = true];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_c2())
    ;
    _impl_._c2_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // map<int32, int32> d1 = 13;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_d1_size());
  for (const auto& entry : _internal_d1()) {
    total_size += _pbi::MapEntryFuncs<::int32_t, ::int32_t,
                                   _pbi::WireFormatLite::TYPE_INT32,
                                   _pbi::WireFormatLite::TYPE_INT32>::ByteSizeLong(entry.first, entry.second);
  }
  // map<int32, int32> d2 = 14;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_d2_size());
  for (const auto& entry : _internal_d2()) {
    total_size += _pbi::MapEntryFuncs<::int32_t, ::int32_t,
                                   _pbi::WireFormatLite::TYPE_INT32,
                                   _pbi::WireFormatLite::TYPE_INT32>::ByteSizeLong(entry.first, entry.second);
  }
  // string e3 = 17;
  if (!this->_internal_e3().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_e3());
  }

  // string f3 = 20;
  if (!this->_internal_f3().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_f3());
  }

  // .cfg.TestRefDynamicBase s1 = 21;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.s1_);
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  // int32 x1 = 2;
  if (this->_internal_x1() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_x1());
  }

  // int32 x1_2 = 3;
  if (this->_internal_x1_2() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_x1_2());
  }

  // int32 x2 = 4;
  if (this->_internal_x2() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_x2());
  }

  // int32 x3 = 5;
  if (this->_internal_x3() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_x3());
  }

  // int32 x4 = 6;
  if (this->_internal_x4() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_x4());
  }

  // int64 e2 = 16;
  if (this->_internal_e2() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int64Size(
                                    this->_internal_e2());
  }

  // int32 e1 = 15;
  if (this->_internal_e1() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_e1());
  }

  // int32 f1 = 18;
  if (this->_internal_f1() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                    this->_internal_f1());
  }

  // int64 f2 = 19;
  if (this->_internal_f2() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int64Size(
                                    this->_internal_f2());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestTestRef::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestTestRef::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestTestRef::GetClassData() const { return &_class_data_; }


void TestTestRef::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestTestRef*>(&to_msg);
  auto& from = static_cast<const TestTestRef&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestTestRef)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_a1()->MergeFrom(from._internal_a1());
  _this->_internal_mutable_a2()->MergeFrom(from._internal_a2());
  _this->_internal_mutable_b1()->MergeFrom(from._internal_b1());
  _this->_internal_mutable_b2()->MergeFrom(from._internal_b2());
  _this->_internal_mutable_c1()->MergeFrom(from._internal_c1());
  _this->_internal_mutable_c2()->MergeFrom(from._internal_c2());
  _this->_impl_.d1_.MergeFrom(from._impl_.d1_);
  _this->_impl_.d2_.MergeFrom(from._impl_.d2_);
  if (!from._internal_e3().empty()) {
    _this->_internal_set_e3(from._internal_e3());
  }
  if (!from._internal_f3().empty()) {
    _this->_internal_set_f3(from._internal_f3());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_s1()->::cfg::TestRefDynamicBase::MergeFrom(
        from._internal_s1());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_x1() != 0) {
    _this->_internal_set_x1(from._internal_x1());
  }
  if (from._internal_x1_2() != 0) {
    _this->_internal_set_x1_2(from._internal_x1_2());
  }
  if (from._internal_x2() != 0) {
    _this->_internal_set_x2(from._internal_x2());
  }
  if (from._internal_x3() != 0) {
    _this->_internal_set_x3(from._internal_x3());
  }
  if (from._internal_x4() != 0) {
    _this->_internal_set_x4(from._internal_x4());
  }
  if (from._internal_e2() != 0) {
    _this->_internal_set_e2(from._internal_e2());
  }
  if (from._internal_e1() != 0) {
    _this->_internal_set_e1(from._internal_e1());
  }
  if (from._internal_f1() != 0) {
    _this->_internal_set_f1(from._internal_f1());
  }
  if (from._internal_f2() != 0) {
    _this->_internal_set_f2(from._internal_f2());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestTestRef::CopyFrom(const TestTestRef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestTestRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestTestRef::IsInitialized() const {
  return true;
}

void TestTestRef::InternalSwap(TestTestRef* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.a1_.InternalSwap(&other->_impl_.a1_);
  _impl_.a2_.InternalSwap(&other->_impl_.a2_);
  _impl_.b1_.InternalSwap(&other->_impl_.b1_);
  _impl_.b2_.InternalSwap(&other->_impl_.b2_);
  _impl_.c1_.InternalSwap(&other->_impl_.c1_);
  _impl_.c2_.InternalSwap(&other->_impl_.c2_);
  _impl_.d1_.InternalSwap(&other->_impl_.d1_);
  _impl_.d2_.InternalSwap(&other->_impl_.d2_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.e3_, lhs_arena,
                                       &other->_impl_.e3_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.f3_, lhs_arena,
                                       &other->_impl_.f3_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestTestRef, _impl_.f2_)
      + sizeof(TestTestRef::_impl_.f2_)
      - PROTOBUF_FIELD_OFFSET(TestTestRef, _impl_.s1_)>(
          reinterpret_cast<char*>(&_impl_.s1_),
          reinterpret_cast<char*>(&other->_impl_.s1_));
}

::google::protobuf::Metadata TestTestRef::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[86]);
}
// ===================================================================

class TestRefDynamicBase::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::cfg::TestRefDynamicBase, _impl_._oneof_case_);
  static const ::cfg::TestRefBean& refbean(const TestRefDynamicBase* msg);
};

const ::cfg::TestRefBean& TestRefDynamicBase::_Internal::refbean(const TestRefDynamicBase* msg) {
  return *msg->_impl_.value_.refbean_;
}
void TestRefDynamicBase::set_allocated_refbean(::cfg::TestRefBean* refbean) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (refbean) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(refbean);
    if (message_arena != submessage_arena) {
      refbean = ::google::protobuf::internal::GetOwnedMessage(message_arena, refbean, submessage_arena);
    }
    set_has_refbean();
    _impl_.value_.refbean_ = refbean;
  }
  // @@protoc_insertion_point(field_set_allocated:cfg.TestRefDynamicBase.RefBean)
}
TestRefDynamicBase::TestRefDynamicBase(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestRefDynamicBase)
}
TestRefDynamicBase::TestRefDynamicBase(const TestRefDynamicBase& from) : ::google::protobuf::Message() {
  TestRefDynamicBase* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_._oneof_case_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kRefBean: {
      _this->_internal_mutable_refbean()->::cfg::TestRefBean::MergeFrom(
          from._internal_refbean());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }

  // @@protoc_insertion_point(copy_constructor:cfg.TestRefDynamicBase)
}
inline void TestRefDynamicBase::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_._oneof_case_)*/ {},
  };
  clear_has_value();
}
TestRefDynamicBase::~TestRefDynamicBase() {
  // @@protoc_insertion_point(destructor:cfg.TestRefDynamicBase)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestRefDynamicBase::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_value()) {
    clear_value();
  }
}
void TestRefDynamicBase::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestRefDynamicBase::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:cfg.TestRefDynamicBase)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  switch (value_case()) {
    case kRefBean: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.refbean_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}


PROTOBUF_NOINLINE void TestRefDynamicBase::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestRefDynamicBase)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestRefDynamicBase::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> TestRefDynamicBase::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TestRefDynamicBase_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .cfg.TestRefBean RefBean = 1;
    {PROTOBUF_FIELD_OFFSET(TestRefDynamicBase, _impl_.value_.refbean_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::TestRefBean>()},
  }}, {{
  }},
};

::uint8_t* TestRefDynamicBase::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestRefDynamicBase)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .cfg.TestRefBean RefBean = 1;
  if (value_case() == kRefBean) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::refbean(this),
        _Internal::refbean(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestRefDynamicBase)
  return target;
}

::size_t TestRefDynamicBase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestRefDynamicBase)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_case()) {
    // .cfg.TestRefBean RefBean = 1;
    case kRefBean: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.value_.refbean_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestRefDynamicBase::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestRefDynamicBase::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestRefDynamicBase::GetClassData() const { return &_class_data_; }


void TestRefDynamicBase::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestRefDynamicBase*>(&to_msg);
  auto& from = static_cast<const TestRefDynamicBase&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestRefDynamicBase)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kRefBean: {
      _this->_internal_mutable_refbean()->::cfg::TestRefBean::MergeFrom(
          from._internal_refbean());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestRefDynamicBase::CopyFrom(const TestRefDynamicBase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestRefDynamicBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestRefDynamicBase::IsInitialized() const {
  return true;
}

void TestRefDynamicBase::InternalSwap(TestRefDynamicBase* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.value_, other->_impl_.value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata TestRefDynamicBase::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[87]);
}
// ===================================================================

class TestRefBean::_Internal {
 public:
};

TestRefBean::TestRefBean(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestRefBean)
}
TestRefBean::TestRefBean(const TestRefBean& from) : ::google::protobuf::Message() {
  TestRefBean* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.arr_){from._impl_.arr_},
      /* _impl_._arr_cached_byte_size_ = */ {0},
      decltype(_impl_.x_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _this->_impl_.x_ = from._impl_.x_;

  // @@protoc_insertion_point(copy_constructor:cfg.TestRefBean)
}
inline void TestRefBean::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.arr_){arena},
      /* _impl_._arr_cached_byte_size_ = */ {0},
      decltype(_impl_.x_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
TestRefBean::~TestRefBean() {
  // @@protoc_insertion_point(destructor:cfg.TestRefBean)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestRefBean::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.arr_.~RepeatedField();
}
void TestRefBean::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestRefBean::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestRefBean)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.arr_.Clear();
  _impl_.x_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestRefBean::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> TestRefBean::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_TestRefBean_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated int32 arr = 2 [packed = true];
    {::_pbi::TcParser::FastV32P1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(TestRefBean, _impl_.arr_)}},
    // int32 x = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestRefBean, _impl_.x_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TestRefBean, _impl_.x_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 x = 1;
    {PROTOBUF_FIELD_OFFSET(TestRefBean, _impl_.x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // repeated int32 arr = 2 [packed = true];
    {PROTOBUF_FIELD_OFFSET(TestRefBean, _impl_.arr_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* TestRefBean::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestRefBean)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_x(), target);
  }

  // repeated int32 arr = 2 [packed = true];
  {
    int byte_size = _impl_._arr_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_arr(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestRefBean)
  return target;
}

::size_t TestRefBean::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestRefBean)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 arr = 2 [packed = true];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_arr())
    ;
    _impl_._arr_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // int32 x = 1;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_x());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestRefBean::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestRefBean::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestRefBean::GetClassData() const { return &_class_data_; }


void TestRefBean::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestRefBean*>(&to_msg);
  auto& from = static_cast<const TestRefBean&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestRefBean)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_arr()->MergeFrom(from._internal_arr());
  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestRefBean::CopyFrom(const TestRefBean& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestRefBean)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestRefBean::IsInitialized() const {
  return true;
}

void TestRefBean::InternalSwap(TestRefBean* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.arr_.InternalSwap(&other->_impl_.arr_);
        swap(_impl_.x_, other->_impl_.x_);
}

::google::protobuf::Metadata TestRefBean::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[88]);
}
// ===================================================================

TestTestSize_X4Entry_DoNotUse::TestTestSize_X4Entry_DoNotUse() {}
TestTestSize_X4Entry_DoNotUse::TestTestSize_X4Entry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void TestTestSize_X4Entry_DoNotUse::MergeFrom(const TestTestSize_X4Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata TestTestSize_X4Entry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[89]);
}
// ===================================================================

class TestTestSize::_Internal {
 public:
};

TestTestSize::TestTestSize(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestTestSize)
}
TestTestSize::TestTestSize(const TestTestSize& from) : ::google::protobuf::Message() {
  TestTestSize* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x1_){from._impl_.x1_},
      /* _impl_._x1_cached_byte_size_ = */ {0},
      decltype(_impl_.x2_){from._impl_.x2_},
      /* _impl_._x2_cached_byte_size_ = */ {0},
      decltype(_impl_.x3_){from._impl_.x3_},
      /* _impl_._x3_cached_byte_size_ = */ {0},
      /* decltype(_impl_.x4_) */ {},
      decltype(_impl_.id_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _this->_impl_.x4_.MergeFrom(from._impl_.x4_);
  _this->_impl_.id_ = from._impl_.id_;

  // @@protoc_insertion_point(copy_constructor:cfg.TestTestSize)
}
inline void TestTestSize::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.x1_){arena},
      /* _impl_._x1_cached_byte_size_ = */ {0},
      decltype(_impl_.x2_){arena},
      /* _impl_._x2_cached_byte_size_ = */ {0},
      decltype(_impl_.x3_){arena},
      /* _impl_._x3_cached_byte_size_ = */ {0},
      /* decltype(_impl_.x4_) */ {::google::protobuf::internal::ArenaInitialized(), arena},
      decltype(_impl_.id_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
TestTestSize::~TestTestSize() {
  // @@protoc_insertion_point(destructor:cfg.TestTestSize)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestTestSize::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.x1_.~RepeatedField();
  _impl_.x2_.~RepeatedField();
  _impl_.x3_.~RepeatedField();
  _impl_.x4_.~MapField();
}
void TestTestSize::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestTestSize::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestTestSize)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.x1_.Clear();
  _impl_.x2_.Clear();
  _impl_.x3_.Clear();
  _impl_.x4_.Clear();
  _impl_.id_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestTestSize::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 5, 1, 0, 2> TestTestSize::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TestTestSize_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated int32 x3 = 4 [packed = true];
    {::_pbi::TcParser::FastV32P1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(TestTestSize, _impl_.x3_)}},
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestTestSize, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TestTestSize, _impl_.id_)}},
    // repeated int32 x1 = 2 [packed = true];
    {::_pbi::TcParser::FastV32P1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(TestTestSize, _impl_.x1_)}},
    // repeated int32 x2 = 3 [packed = true];
    {::_pbi::TcParser::FastV32P1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(TestTestSize, _impl_.x2_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(TestTestSize, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // repeated int32 x1 = 2 [packed = true];
    {PROTOBUF_FIELD_OFFSET(TestTestSize, _impl_.x1_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
    // repeated int32 x2 = 3 [packed = true];
    {PROTOBUF_FIELD_OFFSET(TestTestSize, _impl_.x2_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
    // repeated int32 x3 = 4 [packed = true];
    {PROTOBUF_FIELD_OFFSET(TestTestSize, _impl_.x3_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
    // map<int32, int32> x4 = 5;
    {PROTOBUF_FIELD_OFFSET(TestTestSize, _impl_.x4_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
  }}, {{
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(TestTestSize()._impl_.x4_)>(
        1, 0, 0, 5,
        5)},
  }}, {{
  }},
};

::uint8_t* TestTestSize::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestTestSize)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // repeated int32 x1 = 2 [packed = true];
  {
    int byte_size = _impl_._x1_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_x1(), byte_size, target);
    }
  }

  // repeated int32 x2 = 3 [packed = true];
  {
    int byte_size = _impl_._x2_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_x2(), byte_size, target);
    }
  }

  // repeated int32 x3 = 4 [packed = true];
  {
    int byte_size = _impl_._x3_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_x3(), byte_size, target);
    }
  }

  // map<int32, int32> x4 = 5;
  if (!_internal_x4().empty()) {
    using MapType = ::google::protobuf::Map<::int32_t, ::int32_t>;
    using WireHelper = _pbi::MapEntryFuncs<::int32_t, ::int32_t,
                                   _pbi::WireFormatLite::TYPE_INT32,
                                   _pbi::WireFormatLite::TYPE_INT32>;
    const auto& field = _internal_x4();

    if (stream->IsSerializationDeterministic() && field.size() > 1) {
      for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
        target = WireHelper::InternalSerialize(
            5, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : field) {
        target = WireHelper::InternalSerialize(
            5, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestTestSize)
  return target;
}

::size_t TestTestSize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestTestSize)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 x1 = 2 [packed = true];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_x1())
    ;
    _impl_._x1_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated int32 x2 = 3 [packed = true];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_x2())
    ;
    _impl_._x2_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated int32 x3 = 4 [packed = true];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_x3())
    ;
    _impl_._x3_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // map<int32, int32> x4 = 5;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_x4_size());
  for (const auto& entry : _internal_x4()) {
    total_size += _pbi::MapEntryFuncs<::int32_t, ::int32_t,
                                   _pbi::WireFormatLite::TYPE_INT32,
                                   _pbi::WireFormatLite::TYPE_INT32>::ByteSizeLong(entry.first, entry.second);
  }
  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestTestSize::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestTestSize::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestTestSize::GetClassData() const { return &_class_data_; }


void TestTestSize::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestTestSize*>(&to_msg);
  auto& from = static_cast<const TestTestSize&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestTestSize)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_x1()->MergeFrom(from._internal_x1());
  _this->_internal_mutable_x2()->MergeFrom(from._internal_x2());
  _this->_internal_mutable_x3()->MergeFrom(from._internal_x3());
  _this->_impl_.x4_.MergeFrom(from._impl_.x4_);
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestTestSize::CopyFrom(const TestTestSize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestTestSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestTestSize::IsInitialized() const {
  return true;
}

void TestTestSize::InternalSwap(TestTestSize* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.x1_.InternalSwap(&other->_impl_.x1_);
  _impl_.x2_.InternalSwap(&other->_impl_.x2_);
  _impl_.x3_.InternalSwap(&other->_impl_.x3_);
  _impl_.x4_.InternalSwap(&other->_impl_.x4_);
        swap(_impl_.id_, other->_impl_.id_);
}

::google::protobuf::Metadata TestTestSize::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[90]);
}
// ===================================================================

class TestTestSet::_Internal {
 public:
};

TestTestSet::TestTestSet(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestTestSet)
}
TestTestSet::TestTestSet(const TestTestSet& from) : ::google::protobuf::Message() {
  TestTestSet* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x1_){from._impl_.x1_},
      /* _impl_._x1_cached_byte_size_ = */ {0},
      decltype(_impl_.x2_){from._impl_.x2_},
      /* _impl_._x2_cached_byte_size_ = */ {0},
      decltype(_impl_.x3_){from._impl_.x3_},
      decltype(_impl_.x4_){from._internal_x4()},
      decltype(_impl_.x0_){},
      decltype(_impl_.id_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.x0_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.x0_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_x0().empty()) {
    _this->_impl_.x0_.Set(from._internal_x0(), _this->GetArenaForAllocation());
  }
  _this->_impl_.id_ = from._impl_.id_;

  // @@protoc_insertion_point(copy_constructor:cfg.TestTestSet)
}
inline void TestTestSet::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.x1_){arena},
      /* _impl_._x1_cached_byte_size_ = */ {0},
      decltype(_impl_.x2_){arena},
      /* _impl_._x2_cached_byte_size_ = */ {0},
      decltype(_impl_.x3_){arena},
      decltype(_impl_.x4_){arena},
      decltype(_impl_.x0_){},
      decltype(_impl_.id_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.x0_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.x0_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
TestTestSet::~TestTestSet() {
  // @@protoc_insertion_point(destructor:cfg.TestTestSet)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestTestSet::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.x1_.~RepeatedField();
  _impl_.x2_.~RepeatedField();
  _internal_mutable_x3()->~RepeatedPtrField();
  _internal_mutable_x4()->~RepeatedField();
  _impl_.x0_.Destroy();
}
void TestTestSet::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestTestSet::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestTestSet)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.x1_.Clear();
  _impl_.x2_.Clear();
  _impl_.x3_.Clear();
  _impl_.x4_.Clear();
  _impl_.x0_.ClearToEmpty();
  _impl_.id_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestTestSet::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 0, 28, 2> TestTestSet::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_TestTestSet_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestTestSet, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TestTestSet, _impl_.id_)}},
    // string x0 = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(TestTestSet, _impl_.x0_)}},
    // repeated int32 x1 = 3 [packed = true];
    {::_pbi::TcParser::FastV32P1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(TestTestSet, _impl_.x1_)}},
    // repeated int64 x2 = 4 [packed = true];
    {::_pbi::TcParser::FastV64P1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(TestTestSet, _impl_.x2_)}},
    // repeated string x3 = 5 [packed = false];
    {::_pbi::TcParser::FastUR1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(TestTestSet, _impl_.x3_)}},
    // repeated .cfg.TestDemoEnum x4 = 6 [packed = false];
    {::_pbi::TcParser::FastV32R1,
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(TestTestSet, _impl_.x4_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(TestTestSet, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string x0 = 2;
    {PROTOBUF_FIELD_OFFSET(TestTestSet, _impl_.x0_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated int32 x1 = 3 [packed = true];
    {PROTOBUF_FIELD_OFFSET(TestTestSet, _impl_.x1_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
    // repeated int64 x2 = 4 [packed = true];
    {PROTOBUF_FIELD_OFFSET(TestTestSet, _impl_.x2_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt64)},
    // repeated string x3 = 5 [packed = false];
    {PROTOBUF_FIELD_OFFSET(TestTestSet, _impl_.x3_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // repeated .cfg.TestDemoEnum x4 = 6 [packed = false];
    {PROTOBUF_FIELD_OFFSET(TestTestSet, _impl_.x4_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
    "\17\0\2\0\0\2\0\0"
    "cfg.TestTestSet"
    "x0"
    "x3"
  }},
};

::uint8_t* TestTestSet::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestTestSet)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // string x0 = 2;
  if (!this->_internal_x0().empty()) {
    const std::string& _s = this->_internal_x0();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.TestTestSet.x0");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // repeated int32 x1 = 3 [packed = true];
  {
    int byte_size = _impl_._x1_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_x1(), byte_size, target);
    }
  }

  // repeated int64 x2 = 4 [packed = true];
  {
    int byte_size = _impl_._x2_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          4, _internal_x2(), byte_size, target);
    }
  }

  // repeated string x3 = 5 [packed = false];
  for (int i = 0, n = this->_internal_x3_size(); i < n; ++i) {
    const auto& s = this->_internal_x3().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.TestTestSet.x3");
    target = stream->WriteString(5, s, target);
  }

  // repeated .cfg.TestDemoEnum x4 = 6 [packed = false];
  for (int i = 0, n = this->_internal_x4_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        6, static_cast<::cfg::TestDemoEnum>(this->_internal_x4().Get(i)),
        target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestTestSet)
  return target;
}

::size_t TestTestSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestTestSet)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 x1 = 3 [packed = true];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_x1())
    ;
    _impl_._x1_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated int64 x2 = 4 [packed = true];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int64Size(
        this->_internal_x2())
    ;
    _impl_._x2_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated string x3 = 5 [packed = false];
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_x3().size());
  for (int i = 0, n = _internal_x3().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_x3().Get(i));
  }
  // repeated .cfg.TestDemoEnum x4 = 6 [packed = false];
  {
    std::size_t data_size = 0;
    auto count = static_cast<std::size_t>(this->_internal_x4_size());

    for (std::size_t i = 0; i < count; ++i) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
          this->_internal_x4().Get(static_cast<int>(i)));
    }
    total_size += data_size;
    total_size += std::size_t{1} * count;
  }
  // string x0 = 2;
  if (!this->_internal_x0().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_x0());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestTestSet::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestTestSet::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestTestSet::GetClassData() const { return &_class_data_; }


void TestTestSet::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestTestSet*>(&to_msg);
  auto& from = static_cast<const TestTestSet&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestTestSet)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_x1()->MergeFrom(from._internal_x1());
  _this->_internal_mutable_x2()->MergeFrom(from._internal_x2());
  _this->_internal_mutable_x3()->MergeFrom(from._internal_x3());
  _this->_internal_mutable_x4()->MergeFrom(from._internal_x4());
  if (!from._internal_x0().empty()) {
    _this->_internal_set_x0(from._internal_x0());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestTestSet::CopyFrom(const TestTestSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestTestSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestTestSet::IsInitialized() const {
  return true;
}

void TestTestSet::InternalSwap(TestTestSet* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.x1_.InternalSwap(&other->_impl_.x1_);
  _impl_.x2_.InternalSwap(&other->_impl_.x2_);
  _impl_.x3_.InternalSwap(&other->_impl_.x3_);
  _impl_.x4_.InternalSwap(&other->_impl_.x4_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.x0_, lhs_arena,
                                       &other->_impl_.x0_, rhs_arena);
        swap(_impl_.id_, other->_impl_.id_);
}

::google::protobuf::Metadata TestTestSet::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[91]);
}
// ===================================================================

class TestDetectEncoding::_Internal {
 public:
};

TestDetectEncoding::TestDetectEncoding(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestDetectEncoding)
}
TestDetectEncoding::TestDetectEncoding(const TestDetectEncoding& from) : ::google::protobuf::Message() {
  TestDetectEncoding* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){},
      decltype(_impl_.id_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _this->_impl_.id_ = from._impl_.id_;

  // @@protoc_insertion_point(copy_constructor:cfg.TestDetectEncoding)
}
inline void TestDetectEncoding::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){},
      decltype(_impl_.id_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
TestDetectEncoding::~TestDetectEncoding() {
  // @@protoc_insertion_point(destructor:cfg.TestDetectEncoding)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestDetectEncoding::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}
void TestDetectEncoding::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestDetectEncoding::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestDetectEncoding)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.id_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestDetectEncoding::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 35, 2> TestDetectEncoding::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_TestDetectEncoding_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(TestDetectEncoding, _impl_.name_)}},
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestDetectEncoding, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TestDetectEncoding, _impl_.id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(TestDetectEncoding, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string name = 2;
    {PROTOBUF_FIELD_OFFSET(TestDetectEncoding, _impl_.name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\26\0\4\0\0\0\0\0"
    "cfg.TestDetectEncoding"
    "name"
  }},
};

::uint8_t* TestDetectEncoding::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestDetectEncoding)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.TestDetectEncoding.name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestDetectEncoding)
  return target;
}

::size_t TestDetectEncoding::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestDetectEncoding)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestDetectEncoding::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestDetectEncoding::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestDetectEncoding::GetClassData() const { return &_class_data_; }


void TestDetectEncoding::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestDetectEncoding*>(&to_msg);
  auto& from = static_cast<const TestDetectEncoding&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestDetectEncoding)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestDetectEncoding::CopyFrom(const TestDetectEncoding& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestDetectEncoding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestDetectEncoding::IsInitialized() const {
  return true;
}

void TestDetectEncoding::InternalSwap(TestDetectEncoding* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
        swap(_impl_.id_, other->_impl_.id_);
}

::google::protobuf::Metadata TestDetectEncoding::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[92]);
}
// ===================================================================

class TestItemBase::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::cfg::TestItemBase, _impl_._oneof_case_);
  static const ::cfg::TestItem& item(const TestItemBase* msg);
  static const ::cfg::TestEquipment& equipment(const TestItemBase* msg);
  static const ::cfg::TestDecorator& decorator(const TestItemBase* msg);
};

const ::cfg::TestItem& TestItemBase::_Internal::item(const TestItemBase* msg) {
  return *msg->_impl_.value_.item_;
}
const ::cfg::TestEquipment& TestItemBase::_Internal::equipment(const TestItemBase* msg) {
  return *msg->_impl_.value_.equipment_;
}
const ::cfg::TestDecorator& TestItemBase::_Internal::decorator(const TestItemBase* msg) {
  return *msg->_impl_.value_.decorator_;
}
void TestItemBase::set_allocated_item(::cfg::TestItem* item) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (item) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(item);
    if (message_arena != submessage_arena) {
      item = ::google::protobuf::internal::GetOwnedMessage(message_arena, item, submessage_arena);
    }
    set_has_item();
    _impl_.value_.item_ = item;
  }
  // @@protoc_insertion_point(field_set_allocated:cfg.TestItemBase.Item)
}
void TestItemBase::set_allocated_equipment(::cfg::TestEquipment* equipment) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (equipment) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(equipment);
    if (message_arena != submessage_arena) {
      equipment = ::google::protobuf::internal::GetOwnedMessage(message_arena, equipment, submessage_arena);
    }
    set_has_equipment();
    _impl_.value_.equipment_ = equipment;
  }
  // @@protoc_insertion_point(field_set_allocated:cfg.TestItemBase.Equipment)
}
void TestItemBase::set_allocated_decorator(::cfg::TestDecorator* decorator) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (decorator) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(decorator);
    if (message_arena != submessage_arena) {
      decorator = ::google::protobuf::internal::GetOwnedMessage(message_arena, decorator, submessage_arena);
    }
    set_has_decorator();
    _impl_.value_.decorator_ = decorator;
  }
  // @@protoc_insertion_point(field_set_allocated:cfg.TestItemBase.Decorator)
}
TestItemBase::TestItemBase(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestItemBase)
}
TestItemBase::TestItemBase(const TestItemBase& from) : ::google::protobuf::Message() {
  TestItemBase* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_._oneof_case_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kItem: {
      _this->_internal_mutable_item()->::cfg::TestItem::MergeFrom(
          from._internal_item());
      break;
    }
    case kEquipment: {
      _this->_internal_mutable_equipment()->::cfg::TestEquipment::MergeFrom(
          from._internal_equipment());
      break;
    }
    case kDecorator: {
      _this->_internal_mutable_decorator()->::cfg::TestDecorator::MergeFrom(
          from._internal_decorator());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }

  // @@protoc_insertion_point(copy_constructor:cfg.TestItemBase)
}
inline void TestItemBase::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_._oneof_case_)*/ {},
  };
  clear_has_value();
}
TestItemBase::~TestItemBase() {
  // @@protoc_insertion_point(destructor:cfg.TestItemBase)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestItemBase::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_value()) {
    clear_value();
  }
}
void TestItemBase::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestItemBase::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:cfg.TestItemBase)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  switch (value_case()) {
    case kItem: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.item_;
      }
      break;
    }
    case kEquipment: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.equipment_;
      }
      break;
    }
    case kDecorator: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.decorator_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}


PROTOBUF_NOINLINE void TestItemBase::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestItemBase)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestItemBase::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 3, 3, 0, 2> TestItemBase::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TestItemBase_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .cfg.TestItem Item = 1;
    {PROTOBUF_FIELD_OFFSET(TestItemBase, _impl_.value_.item_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cfg.TestEquipment Equipment = 2;
    {PROTOBUF_FIELD_OFFSET(TestItemBase, _impl_.value_.equipment_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cfg.TestDecorator Decorator = 3;
    {PROTOBUF_FIELD_OFFSET(TestItemBase, _impl_.value_.decorator_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::TestItem>()},
    {::_pbi::TcParser::GetTable<::cfg::TestEquipment>()},
    {::_pbi::TcParser::GetTable<::cfg::TestDecorator>()},
  }}, {{
  }},
};

::uint8_t* TestItemBase::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestItemBase)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  switch (value_case()) {
    case kItem: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::item(this),
          _Internal::item(this).GetCachedSize(), target, stream);
      break;
    }
    case kEquipment: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::equipment(this),
          _Internal::equipment(this).GetCachedSize(), target, stream);
      break;
    }
    case kDecorator: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::decorator(this),
          _Internal::decorator(this).GetCachedSize(), target, stream);
      break;
    }
    default:
      break;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestItemBase)
  return target;
}

::size_t TestItemBase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestItemBase)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_case()) {
    // .cfg.TestItem Item = 1;
    case kItem: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.value_.item_);
      break;
    }
    // .cfg.TestEquipment Equipment = 2;
    case kEquipment: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.value_.equipment_);
      break;
    }
    // .cfg.TestDecorator Decorator = 3;
    case kDecorator: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.value_.decorator_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestItemBase::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestItemBase::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestItemBase::GetClassData() const { return &_class_data_; }


void TestItemBase::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestItemBase*>(&to_msg);
  auto& from = static_cast<const TestItemBase&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestItemBase)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kItem: {
      _this->_internal_mutable_item()->::cfg::TestItem::MergeFrom(
          from._internal_item());
      break;
    }
    case kEquipment: {
      _this->_internal_mutable_equipment()->::cfg::TestEquipment::MergeFrom(
          from._internal_equipment());
      break;
    }
    case kDecorator: {
      _this->_internal_mutable_decorator()->::cfg::TestDecorator::MergeFrom(
          from._internal_decorator());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestItemBase::CopyFrom(const TestItemBase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestItemBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestItemBase::IsInitialized() const {
  return true;
}

void TestItemBase::InternalSwap(TestItemBase* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.value_, other->_impl_.value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata TestItemBase::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[93]);
}
// ===================================================================

class TestItem::_Internal {
 public:
};

TestItem::TestItem(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestItem)
}
TestItem::TestItem(const TestItem& from) : ::google::protobuf::Message() {
  TestItem* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){},
      decltype(_impl_.desc_){},
      decltype(_impl_.id_){},
      decltype(_impl_.num_){},
      decltype(_impl_.price_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _impl_.desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.desc_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_desc().empty()) {
    _this->_impl_.desc_.Set(from._internal_desc(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.price_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.price_));

  // @@protoc_insertion_point(copy_constructor:cfg.TestItem)
}
inline void TestItem::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){},
      decltype(_impl_.desc_){},
      decltype(_impl_.id_){0},
      decltype(_impl_.num_){0},
      decltype(_impl_.price_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.desc_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
TestItem::~TestItem() {
  // @@protoc_insertion_point(destructor:cfg.TestItem)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestItem::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.desc_.Destroy();
}
void TestItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestItem::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestItem)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.desc_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.price_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.price_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestItem::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 29, 2> TestItem::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_TestItem_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestItem, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TestItem, _impl_.id_)}},
    // string name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(TestItem, _impl_.name_)}},
    // string desc = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(TestItem, _impl_.desc_)}},
    // int32 num = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestItem, _impl_.num_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(TestItem, _impl_.num_)}},
    // int32 price = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestItem, _impl_.price_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(TestItem, _impl_.price_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(TestItem, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string name = 2;
    {PROTOBUF_FIELD_OFFSET(TestItem, _impl_.name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string desc = 3;
    {PROTOBUF_FIELD_OFFSET(TestItem, _impl_.desc_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 num = 4;
    {PROTOBUF_FIELD_OFFSET(TestItem, _impl_.num_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 price = 5;
    {PROTOBUF_FIELD_OFFSET(TestItem, _impl_.price_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
    "\14\0\4\4\0\0\0\0"
    "cfg.TestItem"
    "name"
    "desc"
  }},
};

::uint8_t* TestItem::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestItem)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.TestItem.name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string desc = 3;
  if (!this->_internal_desc().empty()) {
    const std::string& _s = this->_internal_desc();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.TestItem.desc");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // int32 num = 4;
  if (this->_internal_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_num(), target);
  }

  // int32 price = 5;
  if (this->_internal_price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<5>(
            stream, this->_internal_price(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestItem)
  return target;
}

::size_t TestItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestItem)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // string desc = 3;
  if (!this->_internal_desc().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_desc());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  // int32 num = 4;
  if (this->_internal_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_num());
  }

  // int32 price = 5;
  if (this->_internal_price() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_price());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestItem::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestItem::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestItem::GetClassData() const { return &_class_data_; }


void TestItem::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestItem*>(&to_msg);
  auto& from = static_cast<const TestItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestItem)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_desc().empty()) {
    _this->_internal_set_desc(from._internal_desc());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_num() != 0) {
    _this->_internal_set_num(from._internal_num());
  }
  if (from._internal_price() != 0) {
    _this->_internal_set_price(from._internal_price());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestItem::CopyFrom(const TestItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestItem::IsInitialized() const {
  return true;
}

void TestItem::InternalSwap(TestItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.desc_, lhs_arena,
                                       &other->_impl_.desc_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestItem, _impl_.price_)
      + sizeof(TestItem::_impl_.price_)
      - PROTOBUF_FIELD_OFFSET(TestItem, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::google::protobuf::Metadata TestItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[94]);
}
// ===================================================================

class TestEquipment::_Internal {
 public:
};

TestEquipment::TestEquipment(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestEquipment)
}
TestEquipment::TestEquipment(const TestEquipment& from) : ::google::protobuf::Message() {
  TestEquipment* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){},
      decltype(_impl_.desc_){},
      decltype(_impl_.id_){},
      decltype(_impl_.attr_){},
      decltype(_impl_.value_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _impl_.desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.desc_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_desc().empty()) {
    _this->_impl_.desc_.Set(from._internal_desc(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.value_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.value_));

  // @@protoc_insertion_point(copy_constructor:cfg.TestEquipment)
}
inline void TestEquipment::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){},
      decltype(_impl_.desc_){},
      decltype(_impl_.id_){0},
      decltype(_impl_.attr_){0},
      decltype(_impl_.value_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.desc_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
TestEquipment::~TestEquipment() {
  // @@protoc_insertion_point(destructor:cfg.TestEquipment)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestEquipment::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.desc_.Destroy();
}
void TestEquipment::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestEquipment::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestEquipment)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.desc_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.value_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.value_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestEquipment::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 34, 2> TestEquipment::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_TestEquipment_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestEquipment, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TestEquipment, _impl_.id_)}},
    // string name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(TestEquipment, _impl_.name_)}},
    // string desc = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(TestEquipment, _impl_.desc_)}},
    // .cfg.TestDemoEnum attr = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestEquipment, _impl_.attr_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(TestEquipment, _impl_.attr_)}},
    // int32 value = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestEquipment, _impl_.value_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(TestEquipment, _impl_.value_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(TestEquipment, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string name = 2;
    {PROTOBUF_FIELD_OFFSET(TestEquipment, _impl_.name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string desc = 3;
    {PROTOBUF_FIELD_OFFSET(TestEquipment, _impl_.desc_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .cfg.TestDemoEnum attr = 4;
    {PROTOBUF_FIELD_OFFSET(TestEquipment, _impl_.attr_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // int32 value = 5;
    {PROTOBUF_FIELD_OFFSET(TestEquipment, _impl_.value_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
    "\21\0\4\4\0\0\0\0"
    "cfg.TestEquipment"
    "name"
    "desc"
  }},
};

::uint8_t* TestEquipment::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestEquipment)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.TestEquipment.name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string desc = 3;
  if (!this->_internal_desc().empty()) {
    const std::string& _s = this->_internal_desc();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.TestEquipment.desc");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // .cfg.TestDemoEnum attr = 4;
  if (this->_internal_attr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_attr(), target);
  }

  // int32 value = 5;
  if (this->_internal_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<5>(
            stream, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestEquipment)
  return target;
}

::size_t TestEquipment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestEquipment)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // string desc = 3;
  if (!this->_internal_desc().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_desc());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  // .cfg.TestDemoEnum attr = 4;
  if (this->_internal_attr() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_attr());
  }

  // int32 value = 5;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestEquipment::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestEquipment::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestEquipment::GetClassData() const { return &_class_data_; }


void TestEquipment::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestEquipment*>(&to_msg);
  auto& from = static_cast<const TestEquipment&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestEquipment)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_desc().empty()) {
    _this->_internal_set_desc(from._internal_desc());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_attr() != 0) {
    _this->_internal_set_attr(from._internal_attr());
  }
  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestEquipment::CopyFrom(const TestEquipment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestEquipment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestEquipment::IsInitialized() const {
  return true;
}

void TestEquipment::InternalSwap(TestEquipment* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.desc_, lhs_arena,
                                       &other->_impl_.desc_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestEquipment, _impl_.value_)
      + sizeof(TestEquipment::_impl_.value_)
      - PROTOBUF_FIELD_OFFSET(TestEquipment, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::google::protobuf::Metadata TestEquipment::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[95]);
}
// ===================================================================

class TestDecorator::_Internal {
 public:
};

TestDecorator::TestDecorator(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestDecorator)
}
TestDecorator::TestDecorator(const TestDecorator& from) : ::google::protobuf::Message() {
  TestDecorator* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){},
      decltype(_impl_.desc_){},
      decltype(_impl_.id_){},
      decltype(_impl_.duration_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _impl_.desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.desc_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_desc().empty()) {
    _this->_impl_.desc_.Set(from._internal_desc(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.duration_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.duration_));

  // @@protoc_insertion_point(copy_constructor:cfg.TestDecorator)
}
inline void TestDecorator::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){},
      decltype(_impl_.desc_){},
      decltype(_impl_.id_){0},
      decltype(_impl_.duration_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.desc_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
TestDecorator::~TestDecorator() {
  // @@protoc_insertion_point(destructor:cfg.TestDecorator)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestDecorator::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.desc_.Destroy();
}
void TestDecorator::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestDecorator::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestDecorator)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.desc_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.duration_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.duration_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestDecorator::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 34, 2> TestDecorator::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_TestDecorator_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // int32 duration = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestDecorator, _impl_.duration_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(TestDecorator, _impl_.duration_)}},
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestDecorator, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TestDecorator, _impl_.id_)}},
    // string name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(TestDecorator, _impl_.name_)}},
    // string desc = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(TestDecorator, _impl_.desc_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(TestDecorator, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string name = 2;
    {PROTOBUF_FIELD_OFFSET(TestDecorator, _impl_.name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string desc = 3;
    {PROTOBUF_FIELD_OFFSET(TestDecorator, _impl_.desc_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 duration = 4;
    {PROTOBUF_FIELD_OFFSET(TestDecorator, _impl_.duration_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
    "\21\0\4\4\0\0\0\0"
    "cfg.TestDecorator"
    "name"
    "desc"
  }},
};

::uint8_t* TestDecorator::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestDecorator)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.TestDecorator.name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string desc = 3;
  if (!this->_internal_desc().empty()) {
    const std::string& _s = this->_internal_desc();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.TestDecorator.desc");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // int32 duration = 4;
  if (this->_internal_duration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestDecorator)
  return target;
}

::size_t TestDecorator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestDecorator)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // string desc = 3;
  if (!this->_internal_desc().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_desc());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  // int32 duration = 4;
  if (this->_internal_duration() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_duration());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestDecorator::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestDecorator::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestDecorator::GetClassData() const { return &_class_data_; }


void TestDecorator::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestDecorator*>(&to_msg);
  auto& from = static_cast<const TestDecorator&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestDecorator)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_desc().empty()) {
    _this->_internal_set_desc(from._internal_desc());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_duration() != 0) {
    _this->_internal_set_duration(from._internal_duration());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestDecorator::CopyFrom(const TestDecorator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestDecorator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestDecorator::IsInitialized() const {
  return true;
}

void TestDecorator::InternalSwap(TestDecorator* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.desc_, lhs_arena,
                                       &other->_impl_.desc_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestDecorator, _impl_.duration_)
      + sizeof(TestDecorator::_impl_.duration_)
      - PROTOBUF_FIELD_OFFSET(TestDecorator, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::google::protobuf::Metadata TestDecorator::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[96]);
}
// ===================================================================

class TestTestIndex::_Internal {
 public:
};

TestTestIndex::TestTestIndex(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestTestIndex)
}
TestTestIndex::TestTestIndex(const TestTestIndex& from) : ::google::protobuf::Message() {
  TestTestIndex* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.eles_){from._impl_.eles_},
      decltype(_impl_.id_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _this->_impl_.id_ = from._impl_.id_;

  // @@protoc_insertion_point(copy_constructor:cfg.TestTestIndex)
}
inline void TestTestIndex::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.eles_){arena},
      decltype(_impl_.id_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
TestTestIndex::~TestTestIndex() {
  // @@protoc_insertion_point(destructor:cfg.TestTestIndex)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestTestIndex::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.eles_.~RepeatedPtrField();
}
void TestTestIndex::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestTestIndex::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestTestIndex)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.eles_.Clear();
  _impl_.id_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestTestIndex::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> TestTestIndex::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TestTestIndex_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .cfg.TestDemoType1 eles = 2 [packed = false];
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(TestTestIndex, _impl_.eles_)}},
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestTestIndex, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TestTestIndex, _impl_.id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(TestTestIndex, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // repeated .cfg.TestDemoType1 eles = 2 [packed = false];
    {PROTOBUF_FIELD_OFFSET(TestTestIndex, _impl_.eles_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::TestDemoType1>()},
  }}, {{
  }},
};

::uint8_t* TestTestIndex::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestTestIndex)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // repeated .cfg.TestDemoType1 eles = 2 [packed = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_eles_size()); i < n; i++) {
    const auto& repfield = this->_internal_eles().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestTestIndex)
  return target;
}

::size_t TestTestIndex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestTestIndex)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cfg.TestDemoType1 eles = 2 [packed = false];
  total_size += 1UL * this->_internal_eles_size();
  for (const auto& msg : this->_internal_eles()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestTestIndex::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestTestIndex::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestTestIndex::GetClassData() const { return &_class_data_; }


void TestTestIndex::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestTestIndex*>(&to_msg);
  auto& from = static_cast<const TestTestIndex&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestTestIndex)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_eles()->MergeFrom(
      from._internal_eles());
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestTestIndex::CopyFrom(const TestTestIndex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestTestIndex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestTestIndex::IsInitialized() const {
  return true;
}

void TestTestIndex::InternalSwap(TestTestIndex* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.eles_.InternalSwap(&other->_impl_.eles_);
        swap(_impl_.id_, other->_impl_.id_);
}

::google::protobuf::Metadata TestTestIndex::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[97]);
}
// ===================================================================

TestTestMap_X1Entry_DoNotUse::TestTestMap_X1Entry_DoNotUse() {}
TestTestMap_X1Entry_DoNotUse::TestTestMap_X1Entry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void TestTestMap_X1Entry_DoNotUse::MergeFrom(const TestTestMap_X1Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata TestTestMap_X1Entry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[98]);
}
// ===================================================================

TestTestMap_X2Entry_DoNotUse::TestTestMap_X2Entry_DoNotUse() {}
TestTestMap_X2Entry_DoNotUse::TestTestMap_X2Entry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void TestTestMap_X2Entry_DoNotUse::MergeFrom(const TestTestMap_X2Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata TestTestMap_X2Entry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[99]);
}
// ===================================================================

TestTestMap_X3Entry_DoNotUse::TestTestMap_X3Entry_DoNotUse() {}
TestTestMap_X3Entry_DoNotUse::TestTestMap_X3Entry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void TestTestMap_X3Entry_DoNotUse::MergeFrom(const TestTestMap_X3Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata TestTestMap_X3Entry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[100]);
}
// ===================================================================

TestTestMap_X4Entry_DoNotUse::TestTestMap_X4Entry_DoNotUse() {}
TestTestMap_X4Entry_DoNotUse::TestTestMap_X4Entry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void TestTestMap_X4Entry_DoNotUse::MergeFrom(const TestTestMap_X4Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata TestTestMap_X4Entry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[101]);
}
// ===================================================================

class TestTestMap::_Internal {
 public:
};

TestTestMap::TestTestMap(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestTestMap)
}
TestTestMap::TestTestMap(const TestTestMap& from) : ::google::protobuf::Message() {
  TestTestMap* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      /* decltype(_impl_.x1_) */ {},
      /* decltype(_impl_.x2_) */ {},
      /* decltype(_impl_.x3_) */ {},
      /* decltype(_impl_.x4_) */ {},
      decltype(_impl_.id_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _this->_impl_.x1_.MergeFrom(from._impl_.x1_);
  _this->_impl_.x2_.MergeFrom(from._impl_.x2_);
  _this->_impl_.x3_.MergeFrom(from._impl_.x3_);
  _this->_impl_.x4_.MergeFrom(from._impl_.x4_);
  _this->_impl_.id_ = from._impl_.id_;

  // @@protoc_insertion_point(copy_constructor:cfg.TestTestMap)
}
inline void TestTestMap::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      /* decltype(_impl_.x1_) */ {::google::protobuf::internal::ArenaInitialized(), arena},
      /* decltype(_impl_.x2_) */ {::google::protobuf::internal::ArenaInitialized(), arena},
      /* decltype(_impl_.x3_) */ {::google::protobuf::internal::ArenaInitialized(), arena},
      /* decltype(_impl_.x4_) */ {::google::protobuf::internal::ArenaInitialized(), arena},
      decltype(_impl_.id_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
TestTestMap::~TestTestMap() {
  // @@protoc_insertion_point(destructor:cfg.TestTestMap)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestTestMap::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.x1_.~MapField();
  _impl_.x2_.~MapField();
  _impl_.x3_.~MapField();
  _impl_.x4_.~MapField();
}
void TestTestMap::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestTestMap::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestTestMap)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.x1_.Clear();
  _impl_.x2_.Clear();
  _impl_.x3_.Clear();
  _impl_.x4_.Clear();
  _impl_.id_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestTestMap::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 5, 4, 26, 2> TestTestMap::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TestTestMap_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestTestMap, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TestTestMap, _impl_.id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(TestTestMap, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // map<int32, int32> x1 = 2;
    {PROTOBUF_FIELD_OFFSET(TestTestMap, _impl_.x1_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // map<int64, int32> x2 = 3;
    {PROTOBUF_FIELD_OFFSET(TestTestMap, _impl_.x2_), 0, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // map<string, int32> x3 = 4;
    {PROTOBUF_FIELD_OFFSET(TestTestMap, _impl_.x3_), 0, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // map<int32, int32> x4 = 5;
    {PROTOBUF_FIELD_OFFSET(TestTestMap, _impl_.x4_), 0, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
  }}, {{
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(TestTestMap()._impl_.x1_)>(
        1, 0, 0, 5,
        5)},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(TestTestMap()._impl_.x2_)>(
        1, 0, 0, 3,
        5)},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(TestTestMap()._impl_.x3_)>(
        1, 0, 0, 9,
        5)},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(TestTestMap()._impl_.x4_)>(
        1, 0, 0, 5,
        5)},
  }}, {{
    "\17\0\0\0\2\0\0\0"
    "cfg.TestTestMap"
    "x3"
  }},
};

::uint8_t* TestTestMap::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestTestMap)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // map<int32, int32> x1 = 2;
  if (!_internal_x1().empty()) {
    using MapType = ::google::protobuf::Map<::int32_t, ::int32_t>;
    using WireHelper = _pbi::MapEntryFuncs<::int32_t, ::int32_t,
                                   _pbi::WireFormatLite::TYPE_INT32,
                                   _pbi::WireFormatLite::TYPE_INT32>;
    const auto& field = _internal_x1();

    if (stream->IsSerializationDeterministic() && field.size() > 1) {
      for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
        target = WireHelper::InternalSerialize(
            2, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : field) {
        target = WireHelper::InternalSerialize(
            2, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<int64, int32> x2 = 3;
  if (!_internal_x2().empty()) {
    using MapType = ::google::protobuf::Map<::int64_t, ::int32_t>;
    using WireHelper = _pbi::MapEntryFuncs<::int64_t, ::int32_t,
                                   _pbi::WireFormatLite::TYPE_INT64,
                                   _pbi::WireFormatLite::TYPE_INT32>;
    const auto& field = _internal_x2();

    if (stream->IsSerializationDeterministic() && field.size() > 1) {
      for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
        target = WireHelper::InternalSerialize(
            3, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : field) {
        target = WireHelper::InternalSerialize(
            3, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<string, int32> x3 = 4;
  if (!_internal_x3().empty()) {
    using MapType = ::google::protobuf::Map<std::string, ::int32_t>;
    using WireHelper = _pbi::MapEntryFuncs<std::string, ::int32_t,
                                   _pbi::WireFormatLite::TYPE_STRING,
                                   _pbi::WireFormatLite::TYPE_INT32>;
    const auto& field = _internal_x3();

    if (stream->IsSerializationDeterministic() && field.size() > 1) {
      for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
        target = WireHelper::InternalSerialize(
            4, entry.first, entry.second, target, stream);
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.TestTestMap.x3");
      }
    } else {
      for (const auto& entry : field) {
        target = WireHelper::InternalSerialize(
            4, entry.first, entry.second, target, stream);
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.TestTestMap.x3");
      }
    }
  }

  // map<int32, int32> x4 = 5;
  if (!_internal_x4().empty()) {
    using MapType = ::google::protobuf::Map<::int32_t, ::int32_t>;
    using WireHelper = _pbi::MapEntryFuncs<::int32_t, ::int32_t,
                                   _pbi::WireFormatLite::TYPE_INT32,
                                   _pbi::WireFormatLite::TYPE_INT32>;
    const auto& field = _internal_x4();

    if (stream->IsSerializationDeterministic() && field.size() > 1) {
      for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
        target = WireHelper::InternalSerialize(
            5, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : field) {
        target = WireHelper::InternalSerialize(
            5, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestTestMap)
  return target;
}

::size_t TestTestMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestTestMap)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, int32> x1 = 2;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_x1_size());
  for (const auto& entry : _internal_x1()) {
    total_size += _pbi::MapEntryFuncs<::int32_t, ::int32_t,
                                   _pbi::WireFormatLite::TYPE_INT32,
                                   _pbi::WireFormatLite::TYPE_INT32>::ByteSizeLong(entry.first, entry.second);
  }
  // map<int64, int32> x2 = 3;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_x2_size());
  for (const auto& entry : _internal_x2()) {
    total_size += _pbi::MapEntryFuncs<::int64_t, ::int32_t,
                                   _pbi::WireFormatLite::TYPE_INT64,
                                   _pbi::WireFormatLite::TYPE_INT32>::ByteSizeLong(entry.first, entry.second);
  }
  // map<string, int32> x3 = 4;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_x3_size());
  for (const auto& entry : _internal_x3()) {
    total_size += _pbi::MapEntryFuncs<std::string, ::int32_t,
                                   _pbi::WireFormatLite::TYPE_STRING,
                                   _pbi::WireFormatLite::TYPE_INT32>::ByteSizeLong(entry.first, entry.second);
  }
  // map<int32, int32> x4 = 5;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_x4_size());
  for (const auto& entry : _internal_x4()) {
    total_size += _pbi::MapEntryFuncs<::int32_t, ::int32_t,
                                   _pbi::WireFormatLite::TYPE_INT32,
                                   _pbi::WireFormatLite::TYPE_INT32>::ByteSizeLong(entry.first, entry.second);
  }
  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestTestMap::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestTestMap::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestTestMap::GetClassData() const { return &_class_data_; }


void TestTestMap::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestTestMap*>(&to_msg);
  auto& from = static_cast<const TestTestMap&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestTestMap)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.x1_.MergeFrom(from._impl_.x1_);
  _this->_impl_.x2_.MergeFrom(from._impl_.x2_);
  _this->_impl_.x3_.MergeFrom(from._impl_.x3_);
  _this->_impl_.x4_.MergeFrom(from._impl_.x4_);
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestTestMap::CopyFrom(const TestTestMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestTestMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestTestMap::IsInitialized() const {
  return true;
}

void TestTestMap::InternalSwap(TestTestMap* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.x1_.InternalSwap(&other->_impl_.x1_);
  _impl_.x2_.InternalSwap(&other->_impl_.x2_);
  _impl_.x3_.InternalSwap(&other->_impl_.x3_);
  _impl_.x4_.InternalSwap(&other->_impl_.x4_);
        swap(_impl_.id_, other->_impl_.id_);
}

::google::protobuf::Metadata TestTestMap::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[102]);
}
// ===================================================================

TestExcelFromJson_K8Entry_DoNotUse::TestExcelFromJson_K8Entry_DoNotUse() {}
TestExcelFromJson_K8Entry_DoNotUse::TestExcelFromJson_K8Entry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void TestExcelFromJson_K8Entry_DoNotUse::MergeFrom(const TestExcelFromJson_K8Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata TestExcelFromJson_K8Entry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[103]);
}
// ===================================================================

class TestExcelFromJson::_Internal {
 public:
  using HasBits = decltype(std::declval<TestExcelFromJson>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TestExcelFromJson, _impl_._has_bits_);
  static const ::cfg::TestDemoType1& x12(const TestExcelFromJson* msg);
  static void set_has_x12(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::cfg::TestDemoDynamic& x14(const TestExcelFromJson* msg);
  static void set_has_x14(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::cfg::TestDemoType1& TestExcelFromJson::_Internal::x12(const TestExcelFromJson* msg) {
  return *msg->_impl_.x12_;
}
const ::cfg::TestDemoDynamic& TestExcelFromJson::_Internal::x14(const TestExcelFromJson* msg) {
  return *msg->_impl_.x14_;
}
TestExcelFromJson::TestExcelFromJson(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestExcelFromJson)
}
TestExcelFromJson::TestExcelFromJson(const TestExcelFromJson& from) : ::google::protobuf::Message() {
  TestExcelFromJson* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.k1_){from._impl_.k1_},
      /* _impl_._k1_cached_byte_size_ = */ {0},
      /* decltype(_impl_.k8_) */ {},
      decltype(_impl_.k9_){from._impl_.k9_},
      decltype(_impl_.k15_){from._impl_.k15_},
      decltype(_impl_.s1_){},
      decltype(_impl_.s2_){},
      decltype(_impl_.x12_){nullptr},
      decltype(_impl_.x14_){nullptr},
      decltype(_impl_.x4_){},
      decltype(_impl_.x1_){},
      decltype(_impl_.x5_){},
      decltype(_impl_.x6_){},
      decltype(_impl_.x13_){},
      decltype(_impl_.t1_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _this->_impl_.k8_.MergeFrom(from._impl_.k8_);
  _impl_.s1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.s1_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_s1().empty()) {
    _this->_impl_.s1_.Set(from._internal_s1(), _this->GetArenaForAllocation());
  }
  _impl_.s2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.s2_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_s2().empty()) {
    _this->_impl_.s2_.Set(from._internal_s2(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.x12_ = new ::cfg::TestDemoType1(*from._impl_.x12_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.x14_ = new ::cfg::TestDemoDynamic(*from._impl_.x14_);
  }
  ::memcpy(&_impl_.x4_, &from._impl_.x4_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.t1_) -
    reinterpret_cast<char*>(&_impl_.x4_)) + sizeof(_impl_.t1_));

  // @@protoc_insertion_point(copy_constructor:cfg.TestExcelFromJson)
}
inline void TestExcelFromJson::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.k1_){arena},
      /* _impl_._k1_cached_byte_size_ = */ {0},
      /* decltype(_impl_.k8_) */ {::google::protobuf::internal::ArenaInitialized(), arena},
      decltype(_impl_.k9_){arena},
      decltype(_impl_.k15_){arena},
      decltype(_impl_.s1_){},
      decltype(_impl_.s2_){},
      decltype(_impl_.x12_){nullptr},
      decltype(_impl_.x14_){nullptr},
      decltype(_impl_.x4_){0},
      decltype(_impl_.x1_){false},
      decltype(_impl_.x5_){::int64_t{0}},
      decltype(_impl_.x6_){0},
      decltype(_impl_.x13_){0},
      decltype(_impl_.t1_){::int64_t{0}},
  };
  _impl_.s1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.s1_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.s2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.s2_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
TestExcelFromJson::~TestExcelFromJson() {
  // @@protoc_insertion_point(destructor:cfg.TestExcelFromJson)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestExcelFromJson::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.k1_.~RepeatedField();
  _impl_.k8_.~MapField();
  _impl_.k9_.~RepeatedPtrField();
  _impl_.k15_.~RepeatedPtrField();
  _impl_.s1_.Destroy();
  _impl_.s2_.Destroy();
  if (this != internal_default_instance()) delete _impl_.x12_;
  if (this != internal_default_instance()) delete _impl_.x14_;
}
void TestExcelFromJson::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestExcelFromJson::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestExcelFromJson)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.k1_.Clear();
  _impl_.k8_.Clear();
  _impl_.k9_.Clear();
  _impl_.k15_.Clear();
  _impl_.s1_.ClearToEmpty();
  _impl_.s2_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.x12_ != nullptr);
      _impl_.x12_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.x14_ != nullptr);
      _impl_.x14_->Clear();
    }
  }
  ::memset(&_impl_.x4_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.t1_) -
      reinterpret_cast<char*>(&_impl_.x4_)) + sizeof(_impl_.t1_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestExcelFromJson::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 14, 5, 42, 2> TestExcelFromJson::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TestExcelFromJson, _impl_._has_bits_),
    0, // no _extensions_
    14, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294950912,  // skipmap
    offsetof(decltype(_table_), field_entries),
    14,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TestExcelFromJson_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 x4 = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestExcelFromJson, _impl_.x4_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TestExcelFromJson, _impl_.x4_)}},
    // bool x1 = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(TestExcelFromJson, _impl_.x1_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(TestExcelFromJson, _impl_.x1_)}},
    // int64 x5 = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(TestExcelFromJson, _impl_.x5_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(TestExcelFromJson, _impl_.x5_)}},
    // float x6 = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(TestExcelFromJson, _impl_.x6_)}},
    // string s1 = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(TestExcelFromJson, _impl_.s1_)}},
    // string s2 = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(TestExcelFromJson, _impl_.s2_)}},
    // int64 t1 = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(TestExcelFromJson, _impl_.t1_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(TestExcelFromJson, _impl_.t1_)}},
    // .cfg.TestDemoType1 x12 = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 0, 0, PROTOBUF_FIELD_OFFSET(TestExcelFromJson, _impl_.x12_)}},
    // .cfg.TestDemoEnum x13 = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestExcelFromJson, _impl_.x13_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(TestExcelFromJson, _impl_.x13_)}},
    // .cfg.TestDemoDynamic x14 = 10;
    {::_pbi::TcParser::FastMtS1,
     {82, 1, 1, PROTOBUF_FIELD_OFFSET(TestExcelFromJson, _impl_.x14_)}},
    // repeated int32 k1 = 11 [packed = true];
    {::_pbi::TcParser::FastV32P1,
     {90, 63, 0, PROTOBUF_FIELD_OFFSET(TestExcelFromJson, _impl_.k1_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .cfg.TestDemoE2 k9 = 13 [packed = false];
    {::_pbi::TcParser::FastMtR1,
     {106, 63, 3, PROTOBUF_FIELD_OFFSET(TestExcelFromJson, _impl_.k9_)}},
    // repeated .cfg.TestDemoDynamic k15 = 14 [packed = false];
    {::_pbi::TcParser::FastMtR1,
     {114, 63, 4, PROTOBUF_FIELD_OFFSET(TestExcelFromJson, _impl_.k15_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 x4 = 1;
    {PROTOBUF_FIELD_OFFSET(TestExcelFromJson, _impl_.x4_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool x1 = 2;
    {PROTOBUF_FIELD_OFFSET(TestExcelFromJson, _impl_.x1_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int64 x5 = 3;
    {PROTOBUF_FIELD_OFFSET(TestExcelFromJson, _impl_.x5_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // float x6 = 4;
    {PROTOBUF_FIELD_OFFSET(TestExcelFromJson, _impl_.x6_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // string s1 = 5;
    {PROTOBUF_FIELD_OFFSET(TestExcelFromJson, _impl_.s1_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string s2 = 6;
    {PROTOBUF_FIELD_OFFSET(TestExcelFromJson, _impl_.s2_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int64 t1 = 7;
    {PROTOBUF_FIELD_OFFSET(TestExcelFromJson, _impl_.t1_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // .cfg.TestDemoType1 x12 = 8;
    {PROTOBUF_FIELD_OFFSET(TestExcelFromJson, _impl_.x12_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cfg.TestDemoEnum x13 = 9;
    {PROTOBUF_FIELD_OFFSET(TestExcelFromJson, _impl_.x13_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .cfg.TestDemoDynamic x14 = 10;
    {PROTOBUF_FIELD_OFFSET(TestExcelFromJson, _impl_.x14_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated int32 k1 = 11 [packed = true];
    {PROTOBUF_FIELD_OFFSET(TestExcelFromJson, _impl_.k1_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
    // map<int32, int32> k8 = 12;
    {PROTOBUF_FIELD_OFFSET(TestExcelFromJson, _impl_.k8_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // repeated .cfg.TestDemoE2 k9 = 13 [packed = false];
    {PROTOBUF_FIELD_OFFSET(TestExcelFromJson, _impl_.k9_), -1, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .cfg.TestDemoDynamic k15 = 14 [packed = false];
    {PROTOBUF_FIELD_OFFSET(TestExcelFromJson, _impl_.k15_), -1, 4,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::TestDemoType1>()},
    {::_pbi::TcParser::GetTable<::cfg::TestDemoDynamic>()},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(TestExcelFromJson()._impl_.k8_)>(
        1, 0, 0, 5,
        5)},
    {::_pbi::TcParser::GetTable<::cfg::TestDemoE2>()},
    {::_pbi::TcParser::GetTable<::cfg::TestDemoDynamic>()},
  }}, {{
    "\25\0\0\0\0\2\2\0\0\0\0\0\0\0\0\0"
    "cfg.TestExcelFromJson"
    "s1"
    "s2"
  }},
};

::uint8_t* TestExcelFromJson::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestExcelFromJson)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 x4 = 1;
  if (this->_internal_x4() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_x4(), target);
  }

  // bool x1 = 2;
  if (this->_internal_x1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_x1(), target);
  }

  // int64 x5 = 3;
  if (this->_internal_x5() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<3>(
            stream, this->_internal_x5(), target);
  }

  // float x6 = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_x6 = this->_internal_x6();
  ::uint32_t raw_x6;
  memcpy(&raw_x6, &tmp_x6, sizeof(tmp_x6));
  if (raw_x6 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_x6(), target);
  }

  // string s1 = 5;
  if (!this->_internal_s1().empty()) {
    const std::string& _s = this->_internal_s1();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.TestExcelFromJson.s1");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // string s2 = 6;
  if (!this->_internal_s2().empty()) {
    const std::string& _s = this->_internal_s2();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.TestExcelFromJson.s2");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // int64 t1 = 7;
  if (this->_internal_t1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<7>(
            stream, this->_internal_t1(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cfg.TestDemoType1 x12 = 8;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::x12(this),
        _Internal::x12(this).GetCachedSize(), target, stream);
  }

  // .cfg.TestDemoEnum x13 = 9;
  if (this->_internal_x13() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        9, this->_internal_x13(), target);
  }

  // .cfg.TestDemoDynamic x14 = 10;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::x14(this),
        _Internal::x14(this).GetCachedSize(), target, stream);
  }

  // repeated int32 k1 = 11 [packed = true];
  {
    int byte_size = _impl_._k1_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          11, _internal_k1(), byte_size, target);
    }
  }

  // map<int32, int32> k8 = 12;
  if (!_internal_k8().empty()) {
    using MapType = ::google::protobuf::Map<::int32_t, ::int32_t>;
    using WireHelper = _pbi::MapEntryFuncs<::int32_t, ::int32_t,
                                   _pbi::WireFormatLite::TYPE_INT32,
                                   _pbi::WireFormatLite::TYPE_INT32>;
    const auto& field = _internal_k8();

    if (stream->IsSerializationDeterministic() && field.size() > 1) {
      for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
        target = WireHelper::InternalSerialize(
            12, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : field) {
        target = WireHelper::InternalSerialize(
            12, entry.first, entry.second, target, stream);
      }
    }
  }

  // repeated .cfg.TestDemoE2 k9 = 13 [packed = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_k9_size()); i < n; i++) {
    const auto& repfield = this->_internal_k9().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cfg.TestDemoDynamic k15 = 14 [packed = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_k15_size()); i < n; i++) {
    const auto& repfield = this->_internal_k15().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(14, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestExcelFromJson)
  return target;
}

::size_t TestExcelFromJson::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestExcelFromJson)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 k1 = 11 [packed = true];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_k1())
    ;
    _impl_._k1_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // map<int32, int32> k8 = 12;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_k8_size());
  for (const auto& entry : _internal_k8()) {
    total_size += _pbi::MapEntryFuncs<::int32_t, ::int32_t,
                                   _pbi::WireFormatLite::TYPE_INT32,
                                   _pbi::WireFormatLite::TYPE_INT32>::ByteSizeLong(entry.first, entry.second);
  }
  // repeated .cfg.TestDemoE2 k9 = 13 [packed = false];
  total_size += 1UL * this->_internal_k9_size();
  for (const auto& msg : this->_internal_k9()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .cfg.TestDemoDynamic k15 = 14 [packed = false];
  total_size += 1UL * this->_internal_k15_size();
  for (const auto& msg : this->_internal_k15()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string s1 = 5;
  if (!this->_internal_s1().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_s1());
  }

  // string s2 = 6;
  if (!this->_internal_s2().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_s2());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .cfg.TestDemoType1 x12 = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.x12_);
    }

    // .cfg.TestDemoDynamic x14 = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.x14_);
    }

  }
  // int32 x4 = 1;
  if (this->_internal_x4() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_x4());
  }

  // bool x1 = 2;
  if (this->_internal_x1() != 0) {
    total_size += 2;
  }

  // int64 x5 = 3;
  if (this->_internal_x5() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_x5());
  }

  // float x6 = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_x6 = this->_internal_x6();
  ::uint32_t raw_x6;
  memcpy(&raw_x6, &tmp_x6, sizeof(tmp_x6));
  if (raw_x6 != 0) {
    total_size += 5;
  }

  // .cfg.TestDemoEnum x13 = 9;
  if (this->_internal_x13() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_x13());
  }

  // int64 t1 = 7;
  if (this->_internal_t1() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_t1());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestExcelFromJson::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestExcelFromJson::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestExcelFromJson::GetClassData() const { return &_class_data_; }


void TestExcelFromJson::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestExcelFromJson*>(&to_msg);
  auto& from = static_cast<const TestExcelFromJson&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestExcelFromJson)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_k1()->MergeFrom(from._internal_k1());
  _this->_impl_.k8_.MergeFrom(from._impl_.k8_);
  _this->_internal_mutable_k9()->MergeFrom(
      from._internal_k9());
  _this->_internal_mutable_k15()->MergeFrom(
      from._internal_k15());
  if (!from._internal_s1().empty()) {
    _this->_internal_set_s1(from._internal_s1());
  }
  if (!from._internal_s2().empty()) {
    _this->_internal_set_s2(from._internal_s2());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_x12()->::cfg::TestDemoType1::MergeFrom(
          from._internal_x12());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_x14()->::cfg::TestDemoDynamic::MergeFrom(
          from._internal_x14());
    }
  }
  if (from._internal_x4() != 0) {
    _this->_internal_set_x4(from._internal_x4());
  }
  if (from._internal_x1() != 0) {
    _this->_internal_set_x1(from._internal_x1());
  }
  if (from._internal_x5() != 0) {
    _this->_internal_set_x5(from._internal_x5());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_x6 = from._internal_x6();
  ::uint32_t raw_x6;
  memcpy(&raw_x6, &tmp_x6, sizeof(tmp_x6));
  if (raw_x6 != 0) {
    _this->_internal_set_x6(from._internal_x6());
  }
  if (from._internal_x13() != 0) {
    _this->_internal_set_x13(from._internal_x13());
  }
  if (from._internal_t1() != 0) {
    _this->_internal_set_t1(from._internal_t1());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestExcelFromJson::CopyFrom(const TestExcelFromJson& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestExcelFromJson)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestExcelFromJson::IsInitialized() const {
  return true;
}

void TestExcelFromJson::InternalSwap(TestExcelFromJson* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.k1_.InternalSwap(&other->_impl_.k1_);
  _impl_.k8_.InternalSwap(&other->_impl_.k8_);
  _impl_.k9_.InternalSwap(&other->_impl_.k9_);
  _impl_.k15_.InternalSwap(&other->_impl_.k15_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.s1_, lhs_arena,
                                       &other->_impl_.s1_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.s2_, lhs_arena,
                                       &other->_impl_.s2_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestExcelFromJson, _impl_.t1_)
      + sizeof(TestExcelFromJson::_impl_.t1_)
      - PROTOBUF_FIELD_OFFSET(TestExcelFromJson, _impl_.x12_)>(
          reinterpret_cast<char*>(&_impl_.x12_),
          reinterpret_cast<char*>(&other->_impl_.x12_));
}

::google::protobuf::Metadata TestExcelFromJson::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[104]);
}
// ===================================================================

class TestCompositeJsonTable1::_Internal {
 public:
};

TestCompositeJsonTable1::TestCompositeJsonTable1(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestCompositeJsonTable1)
}
TestCompositeJsonTable1::TestCompositeJsonTable1(const TestCompositeJsonTable1& from) : ::google::protobuf::Message() {
  TestCompositeJsonTable1* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){},
      decltype(_impl_.id_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.x_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.x_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_x().empty()) {
    _this->_impl_.x_.Set(from._internal_x(), _this->GetArenaForAllocation());
  }
  _this->_impl_.id_ = from._impl_.id_;

  // @@protoc_insertion_point(copy_constructor:cfg.TestCompositeJsonTable1)
}
inline void TestCompositeJsonTable1::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){},
      decltype(_impl_.id_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.x_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.x_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
TestCompositeJsonTable1::~TestCompositeJsonTable1() {
  // @@protoc_insertion_point(destructor:cfg.TestCompositeJsonTable1)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestCompositeJsonTable1::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.x_.Destroy();
}
void TestCompositeJsonTable1::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestCompositeJsonTable1::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestCompositeJsonTable1)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.x_.ClearToEmpty();
  _impl_.id_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestCompositeJsonTable1::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 37, 2> TestCompositeJsonTable1::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_TestCompositeJsonTable1_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string x = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(TestCompositeJsonTable1, _impl_.x_)}},
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestCompositeJsonTable1, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TestCompositeJsonTable1, _impl_.id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(TestCompositeJsonTable1, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string x = 2;
    {PROTOBUF_FIELD_OFFSET(TestCompositeJsonTable1, _impl_.x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\33\0\1\0\0\0\0\0"
    "cfg.TestCompositeJsonTable1"
    "x"
  }},
};

::uint8_t* TestCompositeJsonTable1::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestCompositeJsonTable1)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // string x = 2;
  if (!this->_internal_x().empty()) {
    const std::string& _s = this->_internal_x();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.TestCompositeJsonTable1.x");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestCompositeJsonTable1)
  return target;
}

::size_t TestCompositeJsonTable1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestCompositeJsonTable1)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string x = 2;
  if (!this->_internal_x().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_x());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestCompositeJsonTable1::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestCompositeJsonTable1::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestCompositeJsonTable1::GetClassData() const { return &_class_data_; }


void TestCompositeJsonTable1::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestCompositeJsonTable1*>(&to_msg);
  auto& from = static_cast<const TestCompositeJsonTable1&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestCompositeJsonTable1)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_x().empty()) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestCompositeJsonTable1::CopyFrom(const TestCompositeJsonTable1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestCompositeJsonTable1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestCompositeJsonTable1::IsInitialized() const {
  return true;
}

void TestCompositeJsonTable1::InternalSwap(TestCompositeJsonTable1* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.x_, lhs_arena,
                                       &other->_impl_.x_, rhs_arena);
        swap(_impl_.id_, other->_impl_.id_);
}

::google::protobuf::Metadata TestCompositeJsonTable1::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[105]);
}
// ===================================================================

class TestCompositeJsonTable2::_Internal {
 public:
};

TestCompositeJsonTable2::TestCompositeJsonTable2(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestCompositeJsonTable2)
}
TestCompositeJsonTable2::TestCompositeJsonTable2(const TestCompositeJsonTable2& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cfg.TestCompositeJsonTable2)
}
inline void TestCompositeJsonTable2::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0},
      decltype(_impl_.y_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
TestCompositeJsonTable2::~TestCompositeJsonTable2() {
  // @@protoc_insertion_point(destructor:cfg.TestCompositeJsonTable2)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestCompositeJsonTable2::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void TestCompositeJsonTable2::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestCompositeJsonTable2::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestCompositeJsonTable2)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestCompositeJsonTable2::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> TestCompositeJsonTable2::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_TestCompositeJsonTable2_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // int32 y = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestCompositeJsonTable2, _impl_.y_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(TestCompositeJsonTable2, _impl_.y_)}},
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestCompositeJsonTable2, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TestCompositeJsonTable2, _impl_.id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(TestCompositeJsonTable2, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 y = 2;
    {PROTOBUF_FIELD_OFFSET(TestCompositeJsonTable2, _impl_.y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* TestCompositeJsonTable2::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestCompositeJsonTable2)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestCompositeJsonTable2)
  return target;
}

::size_t TestCompositeJsonTable2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestCompositeJsonTable2)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_y());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestCompositeJsonTable2::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestCompositeJsonTable2::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestCompositeJsonTable2::GetClassData() const { return &_class_data_; }


void TestCompositeJsonTable2::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestCompositeJsonTable2*>(&to_msg);
  auto& from = static_cast<const TestCompositeJsonTable2&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestCompositeJsonTable2)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestCompositeJsonTable2::CopyFrom(const TestCompositeJsonTable2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestCompositeJsonTable2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestCompositeJsonTable2::IsInitialized() const {
  return true;
}

void TestCompositeJsonTable2::InternalSwap(TestCompositeJsonTable2* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestCompositeJsonTable2, _impl_.y_)
      + sizeof(TestCompositeJsonTable2::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(TestCompositeJsonTable2, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::google::protobuf::Metadata TestCompositeJsonTable2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[106]);
}
// ===================================================================

class TestCompositeJsonTable3::_Internal {
 public:
};

TestCompositeJsonTable3::TestCompositeJsonTable3(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestCompositeJsonTable3)
}
TestCompositeJsonTable3::TestCompositeJsonTable3(const TestCompositeJsonTable3& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cfg.TestCompositeJsonTable3)
}
inline void TestCompositeJsonTable3::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.a_){0},
      decltype(_impl_.b_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
TestCompositeJsonTable3::~TestCompositeJsonTable3() {
  // @@protoc_insertion_point(destructor:cfg.TestCompositeJsonTable3)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestCompositeJsonTable3::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void TestCompositeJsonTable3::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestCompositeJsonTable3::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestCompositeJsonTable3)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.a_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.b_) -
      reinterpret_cast<char*>(&_impl_.a_)) + sizeof(_impl_.b_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestCompositeJsonTable3::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> TestCompositeJsonTable3::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_TestCompositeJsonTable3_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // int32 b = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestCompositeJsonTable3, _impl_.b_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(TestCompositeJsonTable3, _impl_.b_)}},
    // int32 a = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestCompositeJsonTable3, _impl_.a_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TestCompositeJsonTable3, _impl_.a_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 a = 1;
    {PROTOBUF_FIELD_OFFSET(TestCompositeJsonTable3, _impl_.a_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 b = 2;
    {PROTOBUF_FIELD_OFFSET(TestCompositeJsonTable3, _impl_.b_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* TestCompositeJsonTable3::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestCompositeJsonTable3)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 a = 1;
  if (this->_internal_a() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_a(), target);
  }

  // int32 b = 2;
  if (this->_internal_b() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_b(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestCompositeJsonTable3)
  return target;
}

::size_t TestCompositeJsonTable3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestCompositeJsonTable3)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 a = 1;
  if (this->_internal_a() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_a());
  }

  // int32 b = 2;
  if (this->_internal_b() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_b());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestCompositeJsonTable3::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestCompositeJsonTable3::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestCompositeJsonTable3::GetClassData() const { return &_class_data_; }


void TestCompositeJsonTable3::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestCompositeJsonTable3*>(&to_msg);
  auto& from = static_cast<const TestCompositeJsonTable3&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestCompositeJsonTable3)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_a() != 0) {
    _this->_internal_set_a(from._internal_a());
  }
  if (from._internal_b() != 0) {
    _this->_internal_set_b(from._internal_b());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestCompositeJsonTable3::CopyFrom(const TestCompositeJsonTable3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestCompositeJsonTable3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestCompositeJsonTable3::IsInitialized() const {
  return true;
}

void TestCompositeJsonTable3::InternalSwap(TestCompositeJsonTable3* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestCompositeJsonTable3, _impl_.b_)
      + sizeof(TestCompositeJsonTable3::_impl_.b_)
      - PROTOBUF_FIELD_OFFSET(TestCompositeJsonTable3, _impl_.a_)>(
          reinterpret_cast<char*>(&_impl_.a_),
          reinterpret_cast<char*>(&other->_impl_.a_));
}

::google::protobuf::Metadata TestCompositeJsonTable3::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[107]);
}
// ===================================================================

class TestExcelFromJsonMultiRow::_Internal {
 public:
};

TestExcelFromJsonMultiRow::TestExcelFromJsonMultiRow(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestExcelFromJsonMultiRow)
}
TestExcelFromJsonMultiRow::TestExcelFromJsonMultiRow(const TestExcelFromJsonMultiRow& from) : ::google::protobuf::Message() {
  TestExcelFromJsonMultiRow* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_},
      decltype(_impl_.id_){},
      decltype(_impl_.x_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.x_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.x_));

  // @@protoc_insertion_point(copy_constructor:cfg.TestExcelFromJsonMultiRow)
}
inline void TestExcelFromJsonMultiRow::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena},
      decltype(_impl_.id_){0},
      decltype(_impl_.x_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
TestExcelFromJsonMultiRow::~TestExcelFromJsonMultiRow() {
  // @@protoc_insertion_point(destructor:cfg.TestExcelFromJsonMultiRow)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestExcelFromJsonMultiRow::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}
void TestExcelFromJsonMultiRow::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestExcelFromJsonMultiRow::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestExcelFromJsonMultiRow)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.x_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.x_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestExcelFromJsonMultiRow::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 0, 2> TestExcelFromJsonMultiRow::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TestExcelFromJsonMultiRow_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestExcelFromJsonMultiRow, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TestExcelFromJsonMultiRow, _impl_.id_)}},
    // int32 x = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestExcelFromJsonMultiRow, _impl_.x_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(TestExcelFromJsonMultiRow, _impl_.x_)}},
    // repeated .cfg.TestTestRow items = 3 [packed = false];
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(TestExcelFromJsonMultiRow, _impl_.items_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(TestExcelFromJsonMultiRow, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 x = 2;
    {PROTOBUF_FIELD_OFFSET(TestExcelFromJsonMultiRow, _impl_.x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // repeated .cfg.TestTestRow items = 3 [packed = false];
    {PROTOBUF_FIELD_OFFSET(TestExcelFromJsonMultiRow, _impl_.items_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::TestTestRow>()},
  }}, {{
  }},
};

::uint8_t* TestExcelFromJsonMultiRow::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestExcelFromJsonMultiRow)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // int32 x = 2;
  if (this->_internal_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_x(), target);
  }

  // repeated .cfg.TestTestRow items = 3 [packed = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestExcelFromJsonMultiRow)
  return target;
}

::size_t TestExcelFromJsonMultiRow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestExcelFromJsonMultiRow)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cfg.TestTestRow items = 3 [packed = false];
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_internal_items()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  // int32 x = 2;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_x());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestExcelFromJsonMultiRow::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestExcelFromJsonMultiRow::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestExcelFromJsonMultiRow::GetClassData() const { return &_class_data_; }


void TestExcelFromJsonMultiRow::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestExcelFromJsonMultiRow*>(&to_msg);
  auto& from = static_cast<const TestExcelFromJsonMultiRow&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestExcelFromJsonMultiRow)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_items()->MergeFrom(
      from._internal_items());
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestExcelFromJsonMultiRow::CopyFrom(const TestExcelFromJsonMultiRow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestExcelFromJsonMultiRow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestExcelFromJsonMultiRow::IsInitialized() const {
  return true;
}

void TestExcelFromJsonMultiRow::InternalSwap(TestExcelFromJsonMultiRow* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestExcelFromJsonMultiRow, _impl_.x_)
      + sizeof(TestExcelFromJsonMultiRow::_impl_.x_)
      - PROTOBUF_FIELD_OFFSET(TestExcelFromJsonMultiRow, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::google::protobuf::Metadata TestExcelFromJsonMultiRow::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[108]);
}
// ===================================================================

class TestTestRow::_Internal {
 public:
  using HasBits = decltype(std::declval<TestTestRow>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TestTestRow, _impl_._has_bits_);
  static const ::cfg::TestTest3& a(const TestTestRow* msg);
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cfg::TestTest3& TestTestRow::_Internal::a(const TestTestRow* msg) {
  return *msg->_impl_.a_;
}
TestTestRow::TestTestRow(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestTestRow)
}
TestTestRow::TestTestRow(const TestTestRow& from) : ::google::protobuf::Message() {
  TestTestRow* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.b_){from._impl_.b_},
      /* _impl_._b_cached_byte_size_ = */ {0},
      decltype(_impl_.z_){},
      decltype(_impl_.a_){nullptr},
      decltype(_impl_.x_){},
      decltype(_impl_.y_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.z_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.z_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_z().empty()) {
    _this->_impl_.z_.Set(from._internal_z(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.a_ = new ::cfg::TestTest3(*from._impl_.a_);
  }
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));

  // @@protoc_insertion_point(copy_constructor:cfg.TestTestRow)
}
inline void TestTestRow::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.b_){arena},
      /* _impl_._b_cached_byte_size_ = */ {0},
      decltype(_impl_.z_){},
      decltype(_impl_.a_){nullptr},
      decltype(_impl_.x_){0},
      decltype(_impl_.y_){false},
  };
  _impl_.z_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.z_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
TestTestRow::~TestTestRow() {
  // @@protoc_insertion_point(destructor:cfg.TestTestRow)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestTestRow::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.b_.~RepeatedField();
  _impl_.z_.Destroy();
  if (this != internal_default_instance()) delete _impl_.a_;
}
void TestTestRow::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestTestRow::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestTestRow)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.b_.Clear();
  _impl_.z_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.a_ != nullptr);
    _impl_.a_->Clear();
  }
  ::memset(&_impl_.x_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestTestRow::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 1, 25, 2> TestTestRow::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TestTestRow, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TestTestRow_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 x = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestTestRow, _impl_.x_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TestTestRow, _impl_.x_)}},
    // bool y = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(TestTestRow, _impl_.y_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(TestTestRow, _impl_.y_)}},
    // string z = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(TestTestRow, _impl_.z_)}},
    // .cfg.TestTest3 a = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 0, 0, PROTOBUF_FIELD_OFFSET(TestTestRow, _impl_.a_)}},
    // repeated int32 b = 5 [packed = true];
    {::_pbi::TcParser::FastV32P1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(TestTestRow, _impl_.b_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 x = 1;
    {PROTOBUF_FIELD_OFFSET(TestTestRow, _impl_.x_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool y = 2;
    {PROTOBUF_FIELD_OFFSET(TestTestRow, _impl_.y_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string z = 3;
    {PROTOBUF_FIELD_OFFSET(TestTestRow, _impl_.z_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .cfg.TestTest3 a = 4;
    {PROTOBUF_FIELD_OFFSET(TestTestRow, _impl_.a_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated int32 b = 5 [packed = true];
    {PROTOBUF_FIELD_OFFSET(TestTestRow, _impl_.b_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::TestTest3>()},
  }}, {{
    "\17\0\0\1\0\0\0\0"
    "cfg.TestTestRow"
    "z"
  }},
};

::uint8_t* TestTestRow::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestTestRow)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_x(), target);
  }

  // bool y = 2;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_y(), target);
  }

  // string z = 3;
  if (!this->_internal_z().empty()) {
    const std::string& _s = this->_internal_z();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.TestTestRow.z");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cfg.TestTest3 a = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::a(this),
        _Internal::a(this).GetCachedSize(), target, stream);
  }

  // repeated int32 b = 5 [packed = true];
  {
    int byte_size = _impl_._b_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_b(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestTestRow)
  return target;
}

::size_t TestTestRow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestTestRow)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 b = 5 [packed = true];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_b())
    ;
    _impl_._b_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // string z = 3;
  if (!this->_internal_z().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_z());
  }

  // .cfg.TestTest3 a = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.a_);
  }

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_x());
  }

  // bool y = 2;
  if (this->_internal_y() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestTestRow::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestTestRow::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestTestRow::GetClassData() const { return &_class_data_; }


void TestTestRow::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestTestRow*>(&to_msg);
  auto& from = static_cast<const TestTestRow&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestTestRow)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_b()->MergeFrom(from._internal_b());
  if (!from._internal_z().empty()) {
    _this->_internal_set_z(from._internal_z());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_a()->::cfg::TestTest3::MergeFrom(
        from._internal_a());
  }
  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestTestRow::CopyFrom(const TestTestRow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestTestRow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestTestRow::IsInitialized() const {
  return true;
}

void TestTestRow::InternalSwap(TestTestRow* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.b_.InternalSwap(&other->_impl_.b_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.z_, lhs_arena,
                                       &other->_impl_.z_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestTestRow, _impl_.y_)
      + sizeof(TestTestRow::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(TestTestRow, _impl_.a_)>(
          reinterpret_cast<char*>(&_impl_.a_),
          reinterpret_cast<char*>(&other->_impl_.a_));
}

::google::protobuf::Metadata TestTestRow::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[109]);
}
// ===================================================================

class TestTest3::_Internal {
 public:
};

TestTest3::TestTest3(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestTest3)
}
TestTest3::TestTest3(const TestTest3& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cfg.TestTest3)
}
inline void TestTest3::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0},
      decltype(_impl_.y_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
TestTest3::~TestTest3() {
  // @@protoc_insertion_point(destructor:cfg.TestTest3)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestTest3::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void TestTest3::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestTest3::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestTest3)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestTest3::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> TestTest3::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_TestTest3_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // int32 y = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestTest3, _impl_.y_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(TestTest3, _impl_.y_)}},
    // int32 x = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestTest3, _impl_.x_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TestTest3, _impl_.x_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 x = 1;
    {PROTOBUF_FIELD_OFFSET(TestTest3, _impl_.x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 y = 2;
    {PROTOBUF_FIELD_OFFSET(TestTest3, _impl_.y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* TestTest3::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestTest3)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_x(), target);
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestTest3)
  return target;
}

::size_t TestTest3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestTest3)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_x());
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_y());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestTest3::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestTest3::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestTest3::GetClassData() const { return &_class_data_; }


void TestTest3::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestTest3*>(&to_msg);
  auto& from = static_cast<const TestTest3&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestTest3)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestTest3::CopyFrom(const TestTest3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestTest3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestTest3::IsInitialized() const {
  return true;
}

void TestTest3::InternalSwap(TestTest3* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestTest3, _impl_.y_)
      + sizeof(TestTest3::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(TestTest3, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::google::protobuf::Metadata TestTest3::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[110]);
}
// ===================================================================

class TestTestScriptableObject::_Internal {
 public:
  using HasBits = decltype(std::declval<TestTestScriptableObject>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TestTestScriptableObject, _impl_._has_bits_);
  static const ::cfg::vec2& v2(const TestTestScriptableObject* msg);
  static void set_has_v2(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::cfg::vec3& v3(const TestTestScriptableObject* msg);
  static void set_has_v3(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::cfg::vec4& v4(const TestTestScriptableObject* msg);
  static void set_has_v4(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::cfg::vec2& TestTestScriptableObject::_Internal::v2(const TestTestScriptableObject* msg) {
  return *msg->_impl_.v2_;
}
const ::cfg::vec3& TestTestScriptableObject::_Internal::v3(const TestTestScriptableObject* msg) {
  return *msg->_impl_.v3_;
}
const ::cfg::vec4& TestTestScriptableObject::_Internal::v4(const TestTestScriptableObject* msg) {
  return *msg->_impl_.v4_;
}
TestTestScriptableObject::TestTestScriptableObject(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestTestScriptableObject)
}
TestTestScriptableObject::TestTestScriptableObject(const TestTestScriptableObject& from) : ::google::protobuf::Message() {
  TestTestScriptableObject* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.desc_){},
      decltype(_impl_.v2_){nullptr},
      decltype(_impl_.v3_){nullptr},
      decltype(_impl_.v4_){nullptr},
      decltype(_impl_.id_){},
      decltype(_impl_.rate_){},
      decltype(_impl_.num_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.desc_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_desc().empty()) {
    _this->_impl_.desc_.Set(from._internal_desc(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.v2_ = new ::cfg::vec2(*from._impl_.v2_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.v3_ = new ::cfg::vec3(*from._impl_.v3_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.v4_ = new ::cfg::vec4(*from._impl_.v4_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.num_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.num_));

  // @@protoc_insertion_point(copy_constructor:cfg.TestTestScriptableObject)
}
inline void TestTestScriptableObject::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.desc_){},
      decltype(_impl_.v2_){nullptr},
      decltype(_impl_.v3_){nullptr},
      decltype(_impl_.v4_){nullptr},
      decltype(_impl_.id_){0},
      decltype(_impl_.rate_){0},
      decltype(_impl_.num_){0},
  };
  _impl_.desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.desc_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
TestTestScriptableObject::~TestTestScriptableObject() {
  // @@protoc_insertion_point(destructor:cfg.TestTestScriptableObject)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestTestScriptableObject::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.desc_.Destroy();
  if (this != internal_default_instance()) delete _impl_.v2_;
  if (this != internal_default_instance()) delete _impl_.v3_;
  if (this != internal_default_instance()) delete _impl_.v4_;
}
void TestTestScriptableObject::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestTestScriptableObject::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestTestScriptableObject)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.desc_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.v2_ != nullptr);
      _impl_.v2_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.v3_ != nullptr);
      _impl_.v3_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.v4_ != nullptr);
      _impl_.v4_->Clear();
    }
  }
  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.num_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.num_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestTestScriptableObject::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 3, 41, 2> TestTestScriptableObject::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TestTestScriptableObject, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TestTestScriptableObject_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestTestScriptableObject, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TestTestScriptableObject, _impl_.id_)}},
    // string desc = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(TestTestScriptableObject, _impl_.desc_)}},
    // float rate = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(TestTestScriptableObject, _impl_.rate_)}},
    // int32 num = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestTestScriptableObject, _impl_.num_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(TestTestScriptableObject, _impl_.num_)}},
    // .cfg.vec2 v2 = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 0, 0, PROTOBUF_FIELD_OFFSET(TestTestScriptableObject, _impl_.v2_)}},
    // .cfg.vec3 v3 = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 1, 1, PROTOBUF_FIELD_OFFSET(TestTestScriptableObject, _impl_.v3_)}},
    // .cfg.vec4 v4 = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 2, 2, PROTOBUF_FIELD_OFFSET(TestTestScriptableObject, _impl_.v4_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(TestTestScriptableObject, _impl_.id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string desc = 2;
    {PROTOBUF_FIELD_OFFSET(TestTestScriptableObject, _impl_.desc_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // float rate = 3;
    {PROTOBUF_FIELD_OFFSET(TestTestScriptableObject, _impl_.rate_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // int32 num = 4;
    {PROTOBUF_FIELD_OFFSET(TestTestScriptableObject, _impl_.num_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .cfg.vec2 v2 = 5;
    {PROTOBUF_FIELD_OFFSET(TestTestScriptableObject, _impl_.v2_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cfg.vec3 v3 = 6;
    {PROTOBUF_FIELD_OFFSET(TestTestScriptableObject, _impl_.v3_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cfg.vec4 v4 = 7;
    {PROTOBUF_FIELD_OFFSET(TestTestScriptableObject, _impl_.v4_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::vec2>()},
    {::_pbi::TcParser::GetTable<::cfg::vec3>()},
    {::_pbi::TcParser::GetTable<::cfg::vec4>()},
  }}, {{
    "\34\0\4\0\0\0\0\0"
    "cfg.TestTestScriptableObject"
    "desc"
  }},
};

::uint8_t* TestTestScriptableObject::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestTestScriptableObject)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // string desc = 2;
  if (!this->_internal_desc().empty()) {
    const std::string& _s = this->_internal_desc();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.TestTestScriptableObject.desc");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // float rate = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_rate = this->_internal_rate();
  ::uint32_t raw_rate;
  memcpy(&raw_rate, &tmp_rate, sizeof(tmp_rate));
  if (raw_rate != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_rate(), target);
  }

  // int32 num = 4;
  if (this->_internal_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_num(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cfg.vec2 v2 = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::v2(this),
        _Internal::v2(this).GetCachedSize(), target, stream);
  }

  // .cfg.vec3 v3 = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::v3(this),
        _Internal::v3(this).GetCachedSize(), target, stream);
  }

  // .cfg.vec4 v4 = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::v4(this),
        _Internal::v4(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestTestScriptableObject)
  return target;
}

::size_t TestTestScriptableObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestTestScriptableObject)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string desc = 2;
  if (!this->_internal_desc().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_desc());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .cfg.vec2 v2 = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.v2_);
    }

    // .cfg.vec3 v3 = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.v3_);
    }

    // .cfg.vec4 v4 = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.v4_);
    }

  }
  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  // float rate = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_rate = this->_internal_rate();
  ::uint32_t raw_rate;
  memcpy(&raw_rate, &tmp_rate, sizeof(tmp_rate));
  if (raw_rate != 0) {
    total_size += 5;
  }

  // int32 num = 4;
  if (this->_internal_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestTestScriptableObject::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestTestScriptableObject::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestTestScriptableObject::GetClassData() const { return &_class_data_; }


void TestTestScriptableObject::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestTestScriptableObject*>(&to_msg);
  auto& from = static_cast<const TestTestScriptableObject&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestTestScriptableObject)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_desc().empty()) {
    _this->_internal_set_desc(from._internal_desc());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_v2()->::cfg::vec2::MergeFrom(
          from._internal_v2());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_v3()->::cfg::vec3::MergeFrom(
          from._internal_v3());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_v4()->::cfg::vec4::MergeFrom(
          from._internal_v4());
    }
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_rate = from._internal_rate();
  ::uint32_t raw_rate;
  memcpy(&raw_rate, &tmp_rate, sizeof(tmp_rate));
  if (raw_rate != 0) {
    _this->_internal_set_rate(from._internal_rate());
  }
  if (from._internal_num() != 0) {
    _this->_internal_set_num(from._internal_num());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestTestScriptableObject::CopyFrom(const TestTestScriptableObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestTestScriptableObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestTestScriptableObject::IsInitialized() const {
  return true;
}

void TestTestScriptableObject::InternalSwap(TestTestScriptableObject* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.desc_, lhs_arena,
                                       &other->_impl_.desc_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestTestScriptableObject, _impl_.num_)
      + sizeof(TestTestScriptableObject::_impl_.num_)
      - PROTOBUF_FIELD_OFFSET(TestTestScriptableObject, _impl_.v2_)>(
          reinterpret_cast<char*>(&_impl_.v2_),
          reinterpret_cast<char*>(&other->_impl_.v2_));
}

::google::protobuf::Metadata TestTestScriptableObject::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[111]);
}
// ===================================================================

class TestTestMapper::_Internal {
 public:
  using HasBits = decltype(std::declval<TestTestMapper>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TestTestMapper, _impl_._has_bits_);
  static const ::cfg::vec2& v2(const TestTestMapper* msg);
  static void set_has_v2(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cfg::vec2& TestTestMapper::_Internal::v2(const TestTestMapper* msg) {
  return *msg->_impl_.v2_;
}
TestTestMapper::TestTestMapper(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestTestMapper)
}
TestTestMapper::TestTestMapper(const TestTestMapper& from) : ::google::protobuf::Message() {
  TestTestMapper* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.v2_){nullptr},
      decltype(_impl_.id_){},
      decltype(_impl_.audio_type_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.v2_ = new ::cfg::vec2(*from._impl_.v2_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.audio_type_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.audio_type_));

  // @@protoc_insertion_point(copy_constructor:cfg.TestTestMapper)
}
inline void TestTestMapper::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.v2_){nullptr},
      decltype(_impl_.id_){0},
      decltype(_impl_.audio_type_){0},
  };
}
TestTestMapper::~TestTestMapper() {
  // @@protoc_insertion_point(destructor:cfg.TestTestMapper)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestTestMapper::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.v2_;
}
void TestTestMapper::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestTestMapper::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestTestMapper)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.v2_ != nullptr);
    _impl_.v2_->Clear();
  }
  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.audio_type_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.audio_type_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestTestMapper::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 0, 2> TestTestMapper::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TestTestMapper, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TestTestMapper_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestTestMapper, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TestTestMapper, _impl_.id_)}},
    // .cfg.AudioType audio_type = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestTestMapper, _impl_.audio_type_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(TestTestMapper, _impl_.audio_type_)}},
    // .cfg.vec2 v2 = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(TestTestMapper, _impl_.v2_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(TestTestMapper, _impl_.id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .cfg.AudioType audio_type = 2;
    {PROTOBUF_FIELD_OFFSET(TestTestMapper, _impl_.audio_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .cfg.vec2 v2 = 3;
    {PROTOBUF_FIELD_OFFSET(TestTestMapper, _impl_.v2_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::vec2>()},
  }}, {{
  }},
};

::uint8_t* TestTestMapper::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestTestMapper)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // .cfg.AudioType audio_type = 2;
  if (this->_internal_audio_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_audio_type(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cfg.vec2 v2 = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::v2(this),
        _Internal::v2(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestTestMapper)
  return target;
}

::size_t TestTestMapper::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestTestMapper)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cfg.vec2 v2 = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.v2_);
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  // .cfg.AudioType audio_type = 2;
  if (this->_internal_audio_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_audio_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestTestMapper::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestTestMapper::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestTestMapper::GetClassData() const { return &_class_data_; }


void TestTestMapper::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestTestMapper*>(&to_msg);
  auto& from = static_cast<const TestTestMapper&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestTestMapper)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_v2()->::cfg::vec2::MergeFrom(
        from._internal_v2());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_audio_type() != 0) {
    _this->_internal_set_audio_type(from._internal_audio_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestTestMapper::CopyFrom(const TestTestMapper& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestTestMapper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestTestMapper::IsInitialized() const {
  return true;
}

void TestTestMapper::InternalSwap(TestTestMapper* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestTestMapper, _impl_.audio_type_)
      + sizeof(TestTestMapper::_impl_.audio_type_)
      - PROTOBUF_FIELD_OFFSET(TestTestMapper, _impl_.v2_)>(
          reinterpret_cast<char*>(&_impl_.v2_),
          reinterpret_cast<char*>(&other->_impl_.v2_));
}

::google::protobuf::Metadata TestTestMapper::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[112]);
}
// ===================================================================

DefineFromExcel2_K8Entry_DoNotUse::DefineFromExcel2_K8Entry_DoNotUse() {}
DefineFromExcel2_K8Entry_DoNotUse::DefineFromExcel2_K8Entry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void DefineFromExcel2_K8Entry_DoNotUse::MergeFrom(const DefineFromExcel2_K8Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata DefineFromExcel2_K8Entry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[113]);
}
// ===================================================================

class DefineFromExcel2::_Internal {
 public:
  using HasBits = decltype(std::declval<DefineFromExcel2>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DefineFromExcel2, _impl_._has_bits_);
  static const ::cfg::TestDemoDynamic& x14(const DefineFromExcel2* msg);
  static void set_has_x14(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::cfg::TestShape& x15(const DefineFromExcel2* msg);
  static void set_has_x15(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::cfg::vec2& v2(const DefineFromExcel2* msg);
  static void set_has_v2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::cfg::TestDemoDynamic& DefineFromExcel2::_Internal::x14(const DefineFromExcel2* msg) {
  return *msg->_impl_.x14_;
}
const ::cfg::TestShape& DefineFromExcel2::_Internal::x15(const DefineFromExcel2* msg) {
  return *msg->_impl_.x15_;
}
const ::cfg::vec2& DefineFromExcel2::_Internal::v2(const DefineFromExcel2* msg) {
  return *msg->_impl_.v2_;
}
DefineFromExcel2::DefineFromExcel2(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.DefineFromExcel2)
}
DefineFromExcel2::DefineFromExcel2(const DefineFromExcel2& from) : ::google::protobuf::Message() {
  DefineFromExcel2* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.k1_){from._impl_.k1_},
      /* _impl_._k1_cached_byte_size_ = */ {0},
      decltype(_impl_.k2_){from._impl_.k2_},
      /* _impl_._k2_cached_byte_size_ = */ {0},
      /* decltype(_impl_.k8_) */ {},
      decltype(_impl_.k9_){from._impl_.k9_},
      decltype(_impl_.k10_){from._impl_.k10_},
      decltype(_impl_.k11_){from._impl_.k11_},
      decltype(_impl_.x10_){},
      decltype(_impl_.x14_){nullptr},
      decltype(_impl_.x15_){nullptr},
      decltype(_impl_.v2_){nullptr},
      decltype(_impl_.id_){},
      decltype(_impl_.x1_){},
      decltype(_impl_.x5_){},
      decltype(_impl_.x6_){},
      decltype(_impl_.x8_){},
      decltype(_impl_.x13_){},
      decltype(_impl_.x13_2_){},
      decltype(_impl_.t1_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _this->_impl_.k8_.MergeFrom(from._impl_.k8_);
  _impl_.x10_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.x10_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_x10().empty()) {
    _this->_impl_.x10_.Set(from._internal_x10(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.x14_ = new ::cfg::TestDemoDynamic(*from._impl_.x14_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.x15_ = new ::cfg::TestShape(*from._impl_.x15_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.v2_ = new ::cfg::vec2(*from._impl_.v2_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.t1_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.t1_));

  // @@protoc_insertion_point(copy_constructor:cfg.DefineFromExcel2)
}
inline void DefineFromExcel2::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.k1_){arena},
      /* _impl_._k1_cached_byte_size_ = */ {0},
      decltype(_impl_.k2_){arena},
      /* _impl_._k2_cached_byte_size_ = */ {0},
      /* decltype(_impl_.k8_) */ {::google::protobuf::internal::ArenaInitialized(), arena},
      decltype(_impl_.k9_){arena},
      decltype(_impl_.k10_){arena},
      decltype(_impl_.k11_){arena},
      decltype(_impl_.x10_){},
      decltype(_impl_.x14_){nullptr},
      decltype(_impl_.x15_){nullptr},
      decltype(_impl_.v2_){nullptr},
      decltype(_impl_.id_){0},
      decltype(_impl_.x1_){false},
      decltype(_impl_.x5_){::int64_t{0}},
      decltype(_impl_.x6_){0},
      decltype(_impl_.x8_){0},
      decltype(_impl_.x13_){0},
      decltype(_impl_.x13_2_){0},
      decltype(_impl_.t1_){::int64_t{0}},
  };
  _impl_.x10_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.x10_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
DefineFromExcel2::~DefineFromExcel2() {
  // @@protoc_insertion_point(destructor:cfg.DefineFromExcel2)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void DefineFromExcel2::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.k1_.~RepeatedField();
  _impl_.k2_.~RepeatedField();
  _impl_.k8_.~MapField();
  _impl_.k9_.~RepeatedPtrField();
  _impl_.k10_.~RepeatedPtrField();
  _impl_.k11_.~RepeatedPtrField();
  _impl_.x10_.Destroy();
  if (this != internal_default_instance()) delete _impl_.x14_;
  if (this != internal_default_instance()) delete _impl_.x15_;
  if (this != internal_default_instance()) delete _impl_.v2_;
}
void DefineFromExcel2::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void DefineFromExcel2::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.DefineFromExcel2)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.k1_.Clear();
  _impl_.k2_.Clear();
  _impl_.k8_.Clear();
  _impl_.k9_.Clear();
  _impl_.k10_.Clear();
  _impl_.k11_.Clear();
  _impl_.x10_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.x14_ != nullptr);
      _impl_.x14_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.x15_ != nullptr);
      _impl_.x15_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.v2_ != nullptr);
      _impl_.v2_->Clear();
    }
  }
  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.t1_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.t1_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* DefineFromExcel2::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 18, 7, 48, 2> DefineFromExcel2::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(DefineFromExcel2, _impl_._has_bits_),
    0, // no _extensions_
    18, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294705152,  // skipmap
    offsetof(decltype(_table_), field_entries),
    18,  // num_field_entries
    7,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_DefineFromExcel2_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(DefineFromExcel2, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(DefineFromExcel2, _impl_.id_)}},
    // bool x1 = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(DefineFromExcel2, _impl_.x1_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(DefineFromExcel2, _impl_.x1_)}},
    // int64 x5 = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(DefineFromExcel2, _impl_.x5_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(DefineFromExcel2, _impl_.x5_)}},
    // float x6 = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(DefineFromExcel2, _impl_.x6_)}},
    // int32 x8 = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(DefineFromExcel2, _impl_.x8_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(DefineFromExcel2, _impl_.x8_)}},
    // string x10 = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(DefineFromExcel2, _impl_.x10_)}},
    // .cfg.TestDemoEnum x13 = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(DefineFromExcel2, _impl_.x13_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(DefineFromExcel2, _impl_.x13_)}},
    // .cfg.TestDemoFlag x13_2 = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(DefineFromExcel2, _impl_.x13_2_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(DefineFromExcel2, _impl_.x13_2_)}},
    // .cfg.TestDemoDynamic x14 = 9;
    {::_pbi::TcParser::FastMtS1,
     {74, 0, 0, PROTOBUF_FIELD_OFFSET(DefineFromExcel2, _impl_.x14_)}},
    // .cfg.TestShape x15 = 10;
    {::_pbi::TcParser::FastMtS1,
     {82, 1, 1, PROTOBUF_FIELD_OFFSET(DefineFromExcel2, _impl_.x15_)}},
    // .cfg.vec2 v2 = 11;
    {::_pbi::TcParser::FastMtS1,
     {90, 2, 2, PROTOBUF_FIELD_OFFSET(DefineFromExcel2, _impl_.v2_)}},
    // int64 t1 = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(DefineFromExcel2, _impl_.t1_), 63>(),
     {96, 63, 0, PROTOBUF_FIELD_OFFSET(DefineFromExcel2, _impl_.t1_)}},
    // repeated int32 k1 = 13 [packed = true];
    {::_pbi::TcParser::FastV32P1,
     {106, 63, 0, PROTOBUF_FIELD_OFFSET(DefineFromExcel2, _impl_.k1_)}},
    // repeated int32 k2 = 14 [packed = true];
    {::_pbi::TcParser::FastV32P1,
     {114, 63, 0, PROTOBUF_FIELD_OFFSET(DefineFromExcel2, _impl_.k2_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .cfg.TestDemoE2 k9 = 16 [packed = false];
    {::_pbi::TcParser::FastMtR2,
     {386, 63, 4, PROTOBUF_FIELD_OFFSET(DefineFromExcel2, _impl_.k9_)}},
    // repeated .cfg.vec3 k10 = 17 [packed = false];
    {::_pbi::TcParser::FastMtR2,
     {394, 63, 5, PROTOBUF_FIELD_OFFSET(DefineFromExcel2, _impl_.k10_)}},
    // repeated .cfg.vec4 k11 = 18 [packed = false];
    {::_pbi::TcParser::FastMtR2,
     {402, 63, 6, PROTOBUF_FIELD_OFFSET(DefineFromExcel2, _impl_.k11_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(DefineFromExcel2, _impl_.id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool x1 = 2;
    {PROTOBUF_FIELD_OFFSET(DefineFromExcel2, _impl_.x1_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int64 x5 = 3;
    {PROTOBUF_FIELD_OFFSET(DefineFromExcel2, _impl_.x5_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // float x6 = 4;
    {PROTOBUF_FIELD_OFFSET(DefineFromExcel2, _impl_.x6_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // int32 x8 = 5;
    {PROTOBUF_FIELD_OFFSET(DefineFromExcel2, _impl_.x8_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string x10 = 6;
    {PROTOBUF_FIELD_OFFSET(DefineFromExcel2, _impl_.x10_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .cfg.TestDemoEnum x13 = 7;
    {PROTOBUF_FIELD_OFFSET(DefineFromExcel2, _impl_.x13_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .cfg.TestDemoFlag x13_2 = 8;
    {PROTOBUF_FIELD_OFFSET(DefineFromExcel2, _impl_.x13_2_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .cfg.TestDemoDynamic x14 = 9;
    {PROTOBUF_FIELD_OFFSET(DefineFromExcel2, _impl_.x14_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cfg.TestShape x15 = 10;
    {PROTOBUF_FIELD_OFFSET(DefineFromExcel2, _impl_.x15_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cfg.vec2 v2 = 11;
    {PROTOBUF_FIELD_OFFSET(DefineFromExcel2, _impl_.v2_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int64 t1 = 12;
    {PROTOBUF_FIELD_OFFSET(DefineFromExcel2, _impl_.t1_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // repeated int32 k1 = 13 [packed = true];
    {PROTOBUF_FIELD_OFFSET(DefineFromExcel2, _impl_.k1_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
    // repeated int32 k2 = 14 [packed = true];
    {PROTOBUF_FIELD_OFFSET(DefineFromExcel2, _impl_.k2_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
    // map<int32, int32> k8 = 15;
    {PROTOBUF_FIELD_OFFSET(DefineFromExcel2, _impl_.k8_), -1, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // repeated .cfg.TestDemoE2 k9 = 16 [packed = false];
    {PROTOBUF_FIELD_OFFSET(DefineFromExcel2, _impl_.k9_), -1, 4,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .cfg.vec3 k10 = 17 [packed = false];
    {PROTOBUF_FIELD_OFFSET(DefineFromExcel2, _impl_.k10_), -1, 5,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .cfg.vec4 k11 = 18 [packed = false];
    {PROTOBUF_FIELD_OFFSET(DefineFromExcel2, _impl_.k11_), -1, 6,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::TestDemoDynamic>()},
    {::_pbi::TcParser::GetTable<::cfg::TestShape>()},
    {::_pbi::TcParser::GetTable<::cfg::vec2>()},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(DefineFromExcel2()._impl_.k8_)>(
        1, 0, 0, 5,
        5)},
    {::_pbi::TcParser::GetTable<::cfg::TestDemoE2>()},
    {::_pbi::TcParser::GetTable<::cfg::vec3>()},
    {::_pbi::TcParser::GetTable<::cfg::vec4>()},
  }}, {{
    "\24\0\0\0\0\0\3\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "cfg.DefineFromExcel2"
    "x10"
  }},
};

::uint8_t* DefineFromExcel2::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.DefineFromExcel2)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // bool x1 = 2;
  if (this->_internal_x1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_x1(), target);
  }

  // int64 x5 = 3;
  if (this->_internal_x5() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<3>(
            stream, this->_internal_x5(), target);
  }

  // float x6 = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_x6 = this->_internal_x6();
  ::uint32_t raw_x6;
  memcpy(&raw_x6, &tmp_x6, sizeof(tmp_x6));
  if (raw_x6 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_x6(), target);
  }

  // int32 x8 = 5;
  if (this->_internal_x8() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<5>(
            stream, this->_internal_x8(), target);
  }

  // string x10 = 6;
  if (!this->_internal_x10().empty()) {
    const std::string& _s = this->_internal_x10();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cfg.DefineFromExcel2.x10");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // .cfg.TestDemoEnum x13 = 7;
  if (this->_internal_x13() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        7, this->_internal_x13(), target);
  }

  // .cfg.TestDemoFlag x13_2 = 8;
  if (this->_internal_x13_2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        8, this->_internal_x13_2(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cfg.TestDemoDynamic x14 = 9;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::x14(this),
        _Internal::x14(this).GetCachedSize(), target, stream);
  }

  // .cfg.TestShape x15 = 10;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::x15(this),
        _Internal::x15(this).GetCachedSize(), target, stream);
  }

  // .cfg.vec2 v2 = 11;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::v2(this),
        _Internal::v2(this).GetCachedSize(), target, stream);
  }

  // int64 t1 = 12;
  if (this->_internal_t1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<12>(
            stream, this->_internal_t1(), target);
  }

  // repeated int32 k1 = 13 [packed = true];
  {
    int byte_size = _impl_._k1_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          13, _internal_k1(), byte_size, target);
    }
  }

  // repeated int32 k2 = 14 [packed = true];
  {
    int byte_size = _impl_._k2_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          14, _internal_k2(), byte_size, target);
    }
  }

  // map<int32, int32> k8 = 15;
  if (!_internal_k8().empty()) {
    using MapType = ::google::protobuf::Map<::int32_t, ::int32_t>;
    using WireHelper = _pbi::MapEntryFuncs<::int32_t, ::int32_t,
                                   _pbi::WireFormatLite::TYPE_INT32,
                                   _pbi::WireFormatLite::TYPE_INT32>;
    const auto& field = _internal_k8();

    if (stream->IsSerializationDeterministic() && field.size() > 1) {
      for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
        target = WireHelper::InternalSerialize(
            15, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : field) {
        target = WireHelper::InternalSerialize(
            15, entry.first, entry.second, target, stream);
      }
    }
  }

  // repeated .cfg.TestDemoE2 k9 = 16 [packed = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_k9_size()); i < n; i++) {
    const auto& repfield = this->_internal_k9().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(16, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cfg.vec3 k10 = 17 [packed = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_k10_size()); i < n; i++) {
    const auto& repfield = this->_internal_k10().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(17, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cfg.vec4 k11 = 18 [packed = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_k11_size()); i < n; i++) {
    const auto& repfield = this->_internal_k11().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(18, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.DefineFromExcel2)
  return target;
}

::size_t DefineFromExcel2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.DefineFromExcel2)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 k1 = 13 [packed = true];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_k1())
    ;
    _impl_._k1_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated int32 k2 = 14 [packed = true];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_k2())
    ;
    _impl_._k2_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // map<int32, int32> k8 = 15;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_k8_size());
  for (const auto& entry : _internal_k8()) {
    total_size += _pbi::MapEntryFuncs<::int32_t, ::int32_t,
                                   _pbi::WireFormatLite::TYPE_INT32,
                                   _pbi::WireFormatLite::TYPE_INT32>::ByteSizeLong(entry.first, entry.second);
  }
  // repeated .cfg.TestDemoE2 k9 = 16 [packed = false];
  total_size += 2UL * this->_internal_k9_size();
  for (const auto& msg : this->_internal_k9()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .cfg.vec3 k10 = 17 [packed = false];
  total_size += 2UL * this->_internal_k10_size();
  for (const auto& msg : this->_internal_k10()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .cfg.vec4 k11 = 18 [packed = false];
  total_size += 2UL * this->_internal_k11_size();
  for (const auto& msg : this->_internal_k11()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string x10 = 6;
  if (!this->_internal_x10().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_x10());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .cfg.TestDemoDynamic x14 = 9;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.x14_);
    }

    // .cfg.TestShape x15 = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.x15_);
    }

    // .cfg.vec2 v2 = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.v2_);
    }

  }
  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  // bool x1 = 2;
  if (this->_internal_x1() != 0) {
    total_size += 2;
  }

  // int64 x5 = 3;
  if (this->_internal_x5() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_x5());
  }

  // float x6 = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_x6 = this->_internal_x6();
  ::uint32_t raw_x6;
  memcpy(&raw_x6, &tmp_x6, sizeof(tmp_x6));
  if (raw_x6 != 0) {
    total_size += 5;
  }

  // int32 x8 = 5;
  if (this->_internal_x8() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_x8());
  }

  // .cfg.TestDemoEnum x13 = 7;
  if (this->_internal_x13() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_x13());
  }

  // .cfg.TestDemoFlag x13_2 = 8;
  if (this->_internal_x13_2() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_x13_2());
  }

  // int64 t1 = 12;
  if (this->_internal_t1() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_t1());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData DefineFromExcel2::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    DefineFromExcel2::MergeImpl
};
const ::google::protobuf::Message::ClassData*DefineFromExcel2::GetClassData() const { return &_class_data_; }


void DefineFromExcel2::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<DefineFromExcel2*>(&to_msg);
  auto& from = static_cast<const DefineFromExcel2&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.DefineFromExcel2)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_k1()->MergeFrom(from._internal_k1());
  _this->_internal_mutable_k2()->MergeFrom(from._internal_k2());
  _this->_impl_.k8_.MergeFrom(from._impl_.k8_);
  _this->_internal_mutable_k9()->MergeFrom(
      from._internal_k9());
  _this->_internal_mutable_k10()->MergeFrom(
      from._internal_k10());
  _this->_internal_mutable_k11()->MergeFrom(
      from._internal_k11());
  if (!from._internal_x10().empty()) {
    _this->_internal_set_x10(from._internal_x10());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_x14()->::cfg::TestDemoDynamic::MergeFrom(
          from._internal_x14());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_x15()->::cfg::TestShape::MergeFrom(
          from._internal_x15());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_v2()->::cfg::vec2::MergeFrom(
          from._internal_v2());
    }
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_x1() != 0) {
    _this->_internal_set_x1(from._internal_x1());
  }
  if (from._internal_x5() != 0) {
    _this->_internal_set_x5(from._internal_x5());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_x6 = from._internal_x6();
  ::uint32_t raw_x6;
  memcpy(&raw_x6, &tmp_x6, sizeof(tmp_x6));
  if (raw_x6 != 0) {
    _this->_internal_set_x6(from._internal_x6());
  }
  if (from._internal_x8() != 0) {
    _this->_internal_set_x8(from._internal_x8());
  }
  if (from._internal_x13() != 0) {
    _this->_internal_set_x13(from._internal_x13());
  }
  if (from._internal_x13_2() != 0) {
    _this->_internal_set_x13_2(from._internal_x13_2());
  }
  if (from._internal_t1() != 0) {
    _this->_internal_set_t1(from._internal_t1());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DefineFromExcel2::CopyFrom(const DefineFromExcel2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.DefineFromExcel2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool DefineFromExcel2::IsInitialized() const {
  return true;
}

void DefineFromExcel2::InternalSwap(DefineFromExcel2* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.k1_.InternalSwap(&other->_impl_.k1_);
  _impl_.k2_.InternalSwap(&other->_impl_.k2_);
  _impl_.k8_.InternalSwap(&other->_impl_.k8_);
  _impl_.k9_.InternalSwap(&other->_impl_.k9_);
  _impl_.k10_.InternalSwap(&other->_impl_.k10_);
  _impl_.k11_.InternalSwap(&other->_impl_.k11_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.x10_, lhs_arena,
                                       &other->_impl_.x10_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DefineFromExcel2, _impl_.t1_)
      + sizeof(DefineFromExcel2::_impl_.t1_)
      - PROTOBUF_FIELD_OFFSET(DefineFromExcel2, _impl_.x14_)>(
          reinterpret_cast<char*>(&_impl_.x14_),
          reinterpret_cast<char*>(&other->_impl_.x14_));
}

::google::protobuf::Metadata DefineFromExcel2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[114]);
}
// ===================================================================

class TestShape::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::cfg::TestShape, _impl_._oneof_case_);
  static const ::cfg::TestCircle& circle(const TestShape* msg);
  static const ::cfg::Test2Rectangle& rectangle(const TestShape* msg);
};

const ::cfg::TestCircle& TestShape::_Internal::circle(const TestShape* msg) {
  return *msg->_impl_.value_.circle_;
}
const ::cfg::Test2Rectangle& TestShape::_Internal::rectangle(const TestShape* msg) {
  return *msg->_impl_.value_.rectangle_;
}
void TestShape::set_allocated_circle(::cfg::TestCircle* circle) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (circle) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(circle);
    if (message_arena != submessage_arena) {
      circle = ::google::protobuf::internal::GetOwnedMessage(message_arena, circle, submessage_arena);
    }
    set_has_circle();
    _impl_.value_.circle_ = circle;
  }
  // @@protoc_insertion_point(field_set_allocated:cfg.TestShape.Circle)
}
void TestShape::set_allocated_rectangle(::cfg::Test2Rectangle* rectangle) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (rectangle) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(rectangle);
    if (message_arena != submessage_arena) {
      rectangle = ::google::protobuf::internal::GetOwnedMessage(message_arena, rectangle, submessage_arena);
    }
    set_has_rectangle();
    _impl_.value_.rectangle_ = rectangle;
  }
  // @@protoc_insertion_point(field_set_allocated:cfg.TestShape.Rectangle)
}
TestShape::TestShape(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestShape)
}
TestShape::TestShape(const TestShape& from) : ::google::protobuf::Message() {
  TestShape* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_._oneof_case_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kCircle: {
      _this->_internal_mutable_circle()->::cfg::TestCircle::MergeFrom(
          from._internal_circle());
      break;
    }
    case kRectangle: {
      _this->_internal_mutable_rectangle()->::cfg::Test2Rectangle::MergeFrom(
          from._internal_rectangle());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }

  // @@protoc_insertion_point(copy_constructor:cfg.TestShape)
}
inline void TestShape::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_._oneof_case_)*/ {},
  };
  clear_has_value();
}
TestShape::~TestShape() {
  // @@protoc_insertion_point(destructor:cfg.TestShape)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestShape::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_value()) {
    clear_value();
  }
}
void TestShape::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestShape::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:cfg.TestShape)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  switch (value_case()) {
    case kCircle: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.circle_;
      }
      break;
    }
    case kRectangle: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.rectangle_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}


PROTOBUF_NOINLINE void TestShape::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestShape)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestShape::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 2, 2, 0, 2> TestShape::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TestShape_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .cfg.TestCircle Circle = 1;
    {PROTOBUF_FIELD_OFFSET(TestShape, _impl_.value_.circle_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cfg.Test2Rectangle Rectangle = 2;
    {PROTOBUF_FIELD_OFFSET(TestShape, _impl_.value_.rectangle_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::TestCircle>()},
    {::_pbi::TcParser::GetTable<::cfg::Test2Rectangle>()},
  }}, {{
  }},
};

::uint8_t* TestShape::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestShape)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  switch (value_case()) {
    case kCircle: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::circle(this),
          _Internal::circle(this).GetCachedSize(), target, stream);
      break;
    }
    case kRectangle: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::rectangle(this),
          _Internal::rectangle(this).GetCachedSize(), target, stream);
      break;
    }
    default:
      break;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestShape)
  return target;
}

::size_t TestShape::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestShape)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_case()) {
    // .cfg.TestCircle Circle = 1;
    case kCircle: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.value_.circle_);
      break;
    }
    // .cfg.Test2Rectangle Rectangle = 2;
    case kRectangle: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.value_.rectangle_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestShape::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestShape::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestShape::GetClassData() const { return &_class_data_; }


void TestShape::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestShape*>(&to_msg);
  auto& from = static_cast<const TestShape&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestShape)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kCircle: {
      _this->_internal_mutable_circle()->::cfg::TestCircle::MergeFrom(
          from._internal_circle());
      break;
    }
    case kRectangle: {
      _this->_internal_mutable_rectangle()->::cfg::Test2Rectangle::MergeFrom(
          from._internal_rectangle());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestShape::CopyFrom(const TestShape& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestShape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestShape::IsInitialized() const {
  return true;
}

void TestShape::InternalSwap(TestShape* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.value_, other->_impl_.value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata TestShape::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[115]);
}
// ===================================================================

class TestCircle::_Internal {
 public:
};

TestCircle::TestCircle(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestCircle)
}
TestCircle::TestCircle(const TestCircle& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cfg.TestCircle)
}
inline void TestCircle::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.radius_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
TestCircle::~TestCircle() {
  // @@protoc_insertion_point(destructor:cfg.TestCircle)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestCircle::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void TestCircle::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestCircle::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestCircle)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.radius_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestCircle::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> TestCircle::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_TestCircle_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // float radius = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(TestCircle, _impl_.radius_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float radius = 1;
    {PROTOBUF_FIELD_OFFSET(TestCircle, _impl_.radius_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* TestCircle::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestCircle)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float radius = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_radius = this->_internal_radius();
  ::uint32_t raw_radius;
  memcpy(&raw_radius, &tmp_radius, sizeof(tmp_radius));
  if (raw_radius != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_radius(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestCircle)
  return target;
}

::size_t TestCircle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestCircle)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float radius = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_radius = this->_internal_radius();
  ::uint32_t raw_radius;
  memcpy(&raw_radius, &tmp_radius, sizeof(tmp_radius));
  if (raw_radius != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestCircle::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestCircle::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestCircle::GetClassData() const { return &_class_data_; }


void TestCircle::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestCircle*>(&to_msg);
  auto& from = static_cast<const TestCircle&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestCircle)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_radius = from._internal_radius();
  ::uint32_t raw_radius;
  memcpy(&raw_radius, &tmp_radius, sizeof(tmp_radius));
  if (raw_radius != 0) {
    _this->_internal_set_radius(from._internal_radius());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestCircle::CopyFrom(const TestCircle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestCircle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestCircle::IsInitialized() const {
  return true;
}

void TestCircle::InternalSwap(TestCircle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.radius_, other->_impl_.radius_);
}

::google::protobuf::Metadata TestCircle::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[116]);
}
// ===================================================================

class Test2Rectangle::_Internal {
 public:
};

Test2Rectangle::Test2Rectangle(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.Test2Rectangle)
}
Test2Rectangle::Test2Rectangle(const Test2Rectangle& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cfg.Test2Rectangle)
}
inline void Test2Rectangle::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.width_){0},
      decltype(_impl_.height_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
Test2Rectangle::~Test2Rectangle() {
  // @@protoc_insertion_point(destructor:cfg.Test2Rectangle)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Test2Rectangle::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void Test2Rectangle::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void Test2Rectangle::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.Test2Rectangle)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.width_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.height_) -
      reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.height_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Test2Rectangle::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> Test2Rectangle::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Test2Rectangle_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // float height = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(Test2Rectangle, _impl_.height_)}},
    // float width = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(Test2Rectangle, _impl_.width_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float width = 1;
    {PROTOBUF_FIELD_OFFSET(Test2Rectangle, _impl_.width_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float height = 2;
    {PROTOBUF_FIELD_OFFSET(Test2Rectangle, _impl_.height_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Test2Rectangle::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.Test2Rectangle)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float width = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_width = this->_internal_width();
  ::uint32_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_width(), target);
  }

  // float height = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_height = this->_internal_height();
  ::uint32_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.Test2Rectangle)
  return target;
}

::size_t Test2Rectangle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.Test2Rectangle)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float width = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_width = this->_internal_width();
  ::uint32_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    total_size += 5;
  }

  // float height = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_height = this->_internal_height();
  ::uint32_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Test2Rectangle::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    Test2Rectangle::MergeImpl
};
const ::google::protobuf::Message::ClassData*Test2Rectangle::GetClassData() const { return &_class_data_; }


void Test2Rectangle::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Test2Rectangle*>(&to_msg);
  auto& from = static_cast<const Test2Rectangle&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.Test2Rectangle)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_width = from._internal_width();
  ::uint32_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_height = from._internal_height();
  ::uint32_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Test2Rectangle::CopyFrom(const Test2Rectangle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.Test2Rectangle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Test2Rectangle::IsInitialized() const {
  return true;
}

void Test2Rectangle::InternalSwap(Test2Rectangle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Test2Rectangle, _impl_.height_)
      + sizeof(Test2Rectangle::_impl_.height_)
      - PROTOBUF_FIELD_OFFSET(Test2Rectangle, _impl_.width_)>(
          reinterpret_cast<char*>(&_impl_.width_),
          reinterpret_cast<char*>(&other->_impl_.width_));
}

::google::protobuf::Metadata Test2Rectangle::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[117]);
}
// ===================================================================

class AiTbBlackboard::_Internal {
 public:
};

AiTbBlackboard::AiTbBlackboard(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.AiTbBlackboard)
}
AiTbBlackboard::AiTbBlackboard(const AiTbBlackboard& from) : ::google::protobuf::Message() {
  AiTbBlackboard* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_list_){from._impl_.data_list_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:cfg.AiTbBlackboard)
}
inline void AiTbBlackboard::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.data_list_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
AiTbBlackboard::~AiTbBlackboard() {
  // @@protoc_insertion_point(destructor:cfg.AiTbBlackboard)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AiTbBlackboard::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_list_.~RepeatedPtrField();
}
void AiTbBlackboard::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void AiTbBlackboard::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.AiTbBlackboard)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_list_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AiTbBlackboard::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> AiTbBlackboard::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AiTbBlackboard_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .cfg.AiBlackboard data_list = 1 [packed = false];
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(AiTbBlackboard, _impl_.data_list_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .cfg.AiBlackboard data_list = 1 [packed = false];
    {PROTOBUF_FIELD_OFFSET(AiTbBlackboard, _impl_.data_list_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::AiBlackboard>()},
  }}, {{
  }},
};

::uint8_t* AiTbBlackboard::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.AiTbBlackboard)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .cfg.AiBlackboard data_list = 1 [packed = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_data_list().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.AiTbBlackboard)
  return target;
}

::size_t AiTbBlackboard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.AiTbBlackboard)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cfg.AiBlackboard data_list = 1 [packed = false];
  total_size += 1UL * this->_internal_data_list_size();
  for (const auto& msg : this->_internal_data_list()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AiTbBlackboard::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    AiTbBlackboard::MergeImpl
};
const ::google::protobuf::Message::ClassData*AiTbBlackboard::GetClassData() const { return &_class_data_; }


void AiTbBlackboard::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AiTbBlackboard*>(&to_msg);
  auto& from = static_cast<const AiTbBlackboard&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.AiTbBlackboard)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_data_list()->MergeFrom(
      from._internal_data_list());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AiTbBlackboard::CopyFrom(const AiTbBlackboard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.AiTbBlackboard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AiTbBlackboard::IsInitialized() const {
  return true;
}

void AiTbBlackboard::InternalSwap(AiTbBlackboard* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_list_.InternalSwap(&other->_impl_.data_list_);
}

::google::protobuf::Metadata AiTbBlackboard::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[118]);
}
// ===================================================================

class AiTbBehaviorTree::_Internal {
 public:
};

AiTbBehaviorTree::AiTbBehaviorTree(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.AiTbBehaviorTree)
}
AiTbBehaviorTree::AiTbBehaviorTree(const AiTbBehaviorTree& from) : ::google::protobuf::Message() {
  AiTbBehaviorTree* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_list_){from._impl_.data_list_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:cfg.AiTbBehaviorTree)
}
inline void AiTbBehaviorTree::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.data_list_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
AiTbBehaviorTree::~AiTbBehaviorTree() {
  // @@protoc_insertion_point(destructor:cfg.AiTbBehaviorTree)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AiTbBehaviorTree::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_list_.~RepeatedPtrField();
}
void AiTbBehaviorTree::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void AiTbBehaviorTree::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.AiTbBehaviorTree)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_list_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AiTbBehaviorTree::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> AiTbBehaviorTree::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AiTbBehaviorTree_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .cfg.AiBehaviorTree data_list = 1 [packed = false];
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(AiTbBehaviorTree, _impl_.data_list_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .cfg.AiBehaviorTree data_list = 1 [packed = false];
    {PROTOBUF_FIELD_OFFSET(AiTbBehaviorTree, _impl_.data_list_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::AiBehaviorTree>()},
  }}, {{
  }},
};

::uint8_t* AiTbBehaviorTree::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.AiTbBehaviorTree)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .cfg.AiBehaviorTree data_list = 1 [packed = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_data_list().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.AiTbBehaviorTree)
  return target;
}

::size_t AiTbBehaviorTree::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.AiTbBehaviorTree)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cfg.AiBehaviorTree data_list = 1 [packed = false];
  total_size += 1UL * this->_internal_data_list_size();
  for (const auto& msg : this->_internal_data_list()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AiTbBehaviorTree::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    AiTbBehaviorTree::MergeImpl
};
const ::google::protobuf::Message::ClassData*AiTbBehaviorTree::GetClassData() const { return &_class_data_; }


void AiTbBehaviorTree::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AiTbBehaviorTree*>(&to_msg);
  auto& from = static_cast<const AiTbBehaviorTree&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.AiTbBehaviorTree)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_data_list()->MergeFrom(
      from._internal_data_list());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AiTbBehaviorTree::CopyFrom(const AiTbBehaviorTree& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.AiTbBehaviorTree)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AiTbBehaviorTree::IsInitialized() const {
  return true;
}

void AiTbBehaviorTree::InternalSwap(AiTbBehaviorTree* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_list_.InternalSwap(&other->_impl_.data_list_);
}

::google::protobuf::Metadata AiTbBehaviorTree::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[119]);
}
// ===================================================================

class CommonTbGlobalConfig::_Internal {
 public:
};

CommonTbGlobalConfig::CommonTbGlobalConfig(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.CommonTbGlobalConfig)
}
CommonTbGlobalConfig::CommonTbGlobalConfig(const CommonTbGlobalConfig& from) : ::google::protobuf::Message() {
  CommonTbGlobalConfig* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_list_){from._impl_.data_list_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:cfg.CommonTbGlobalConfig)
}
inline void CommonTbGlobalConfig::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.data_list_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
CommonTbGlobalConfig::~CommonTbGlobalConfig() {
  // @@protoc_insertion_point(destructor:cfg.CommonTbGlobalConfig)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CommonTbGlobalConfig::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_list_.~RepeatedPtrField();
}
void CommonTbGlobalConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CommonTbGlobalConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.CommonTbGlobalConfig)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_list_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CommonTbGlobalConfig::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> CommonTbGlobalConfig::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CommonTbGlobalConfig_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .cfg.CommonGlobalConfig data_list = 1 [packed = false];
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(CommonTbGlobalConfig, _impl_.data_list_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .cfg.CommonGlobalConfig data_list = 1 [packed = false];
    {PROTOBUF_FIELD_OFFSET(CommonTbGlobalConfig, _impl_.data_list_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::CommonGlobalConfig>()},
  }}, {{
  }},
};

::uint8_t* CommonTbGlobalConfig::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.CommonTbGlobalConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .cfg.CommonGlobalConfig data_list = 1 [packed = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_data_list().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.CommonTbGlobalConfig)
  return target;
}

::size_t CommonTbGlobalConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.CommonTbGlobalConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cfg.CommonGlobalConfig data_list = 1 [packed = false];
  total_size += 1UL * this->_internal_data_list_size();
  for (const auto& msg : this->_internal_data_list()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CommonTbGlobalConfig::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CommonTbGlobalConfig::MergeImpl
};
const ::google::protobuf::Message::ClassData*CommonTbGlobalConfig::GetClassData() const { return &_class_data_; }


void CommonTbGlobalConfig::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CommonTbGlobalConfig*>(&to_msg);
  auto& from = static_cast<const CommonTbGlobalConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.CommonTbGlobalConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_data_list()->MergeFrom(
      from._internal_data_list());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CommonTbGlobalConfig::CopyFrom(const CommonTbGlobalConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.CommonTbGlobalConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CommonTbGlobalConfig::IsInitialized() const {
  return true;
}

void CommonTbGlobalConfig::InternalSwap(CommonTbGlobalConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_list_.InternalSwap(&other->_impl_.data_list_);
}

::google::protobuf::Metadata CommonTbGlobalConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[120]);
}
// ===================================================================

class ItemTbItem::_Internal {
 public:
};

ItemTbItem::ItemTbItem(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.ItemTbItem)
}
ItemTbItem::ItemTbItem(const ItemTbItem& from) : ::google::protobuf::Message() {
  ItemTbItem* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_list_){from._impl_.data_list_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:cfg.ItemTbItem)
}
inline void ItemTbItem::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.data_list_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
ItemTbItem::~ItemTbItem() {
  // @@protoc_insertion_point(destructor:cfg.ItemTbItem)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ItemTbItem::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_list_.~RepeatedPtrField();
}
void ItemTbItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void ItemTbItem::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.ItemTbItem)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_list_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ItemTbItem::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> ItemTbItem::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ItemTbItem_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .cfg.ItemItem data_list = 1 [packed = false];
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ItemTbItem, _impl_.data_list_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .cfg.ItemItem data_list = 1 [packed = false];
    {PROTOBUF_FIELD_OFFSET(ItemTbItem, _impl_.data_list_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::ItemItem>()},
  }}, {{
  }},
};

::uint8_t* ItemTbItem::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.ItemTbItem)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .cfg.ItemItem data_list = 1 [packed = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_data_list().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.ItemTbItem)
  return target;
}

::size_t ItemTbItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.ItemTbItem)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cfg.ItemItem data_list = 1 [packed = false];
  total_size += 1UL * this->_internal_data_list_size();
  for (const auto& msg : this->_internal_data_list()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ItemTbItem::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    ItemTbItem::MergeImpl
};
const ::google::protobuf::Message::ClassData*ItemTbItem::GetClassData() const { return &_class_data_; }


void ItemTbItem::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ItemTbItem*>(&to_msg);
  auto& from = static_cast<const ItemTbItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.ItemTbItem)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_data_list()->MergeFrom(
      from._internal_data_list());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ItemTbItem::CopyFrom(const ItemTbItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.ItemTbItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ItemTbItem::IsInitialized() const {
  return true;
}

void ItemTbItem::InternalSwap(ItemTbItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_list_.InternalSwap(&other->_impl_.data_list_);
}

::google::protobuf::Metadata ItemTbItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[121]);
}
// ===================================================================

class L10nTbL10NDemo::_Internal {
 public:
};

L10nTbL10NDemo::L10nTbL10NDemo(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.L10nTbL10NDemo)
}
L10nTbL10NDemo::L10nTbL10NDemo(const L10nTbL10NDemo& from) : ::google::protobuf::Message() {
  L10nTbL10NDemo* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_list_){from._impl_.data_list_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:cfg.L10nTbL10NDemo)
}
inline void L10nTbL10NDemo::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.data_list_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
L10nTbL10NDemo::~L10nTbL10NDemo() {
  // @@protoc_insertion_point(destructor:cfg.L10nTbL10NDemo)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void L10nTbL10NDemo::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_list_.~RepeatedPtrField();
}
void L10nTbL10NDemo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void L10nTbL10NDemo::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.L10nTbL10NDemo)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_list_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* L10nTbL10NDemo::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> L10nTbL10NDemo::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_L10nTbL10NDemo_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .cfg.L10nL10NDemo data_list = 1 [packed = false];
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(L10nTbL10NDemo, _impl_.data_list_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .cfg.L10nL10NDemo data_list = 1 [packed = false];
    {PROTOBUF_FIELD_OFFSET(L10nTbL10NDemo, _impl_.data_list_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::L10nL10NDemo>()},
  }}, {{
  }},
};

::uint8_t* L10nTbL10NDemo::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.L10nTbL10NDemo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .cfg.L10nL10NDemo data_list = 1 [packed = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_data_list().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.L10nTbL10NDemo)
  return target;
}

::size_t L10nTbL10NDemo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.L10nTbL10NDemo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cfg.L10nL10NDemo data_list = 1 [packed = false];
  total_size += 1UL * this->_internal_data_list_size();
  for (const auto& msg : this->_internal_data_list()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData L10nTbL10NDemo::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    L10nTbL10NDemo::MergeImpl
};
const ::google::protobuf::Message::ClassData*L10nTbL10NDemo::GetClassData() const { return &_class_data_; }


void L10nTbL10NDemo::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<L10nTbL10NDemo*>(&to_msg);
  auto& from = static_cast<const L10nTbL10NDemo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.L10nTbL10NDemo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_data_list()->MergeFrom(
      from._internal_data_list());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void L10nTbL10NDemo::CopyFrom(const L10nTbL10NDemo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.L10nTbL10NDemo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool L10nTbL10NDemo::IsInitialized() const {
  return true;
}

void L10nTbL10NDemo::InternalSwap(L10nTbL10NDemo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_list_.InternalSwap(&other->_impl_.data_list_);
}

::google::protobuf::Metadata L10nTbL10NDemo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[122]);
}
// ===================================================================

class L10nTbPatchDemo::_Internal {
 public:
};

L10nTbPatchDemo::L10nTbPatchDemo(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.L10nTbPatchDemo)
}
L10nTbPatchDemo::L10nTbPatchDemo(const L10nTbPatchDemo& from) : ::google::protobuf::Message() {
  L10nTbPatchDemo* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_list_){from._impl_.data_list_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:cfg.L10nTbPatchDemo)
}
inline void L10nTbPatchDemo::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.data_list_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
L10nTbPatchDemo::~L10nTbPatchDemo() {
  // @@protoc_insertion_point(destructor:cfg.L10nTbPatchDemo)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void L10nTbPatchDemo::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_list_.~RepeatedPtrField();
}
void L10nTbPatchDemo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void L10nTbPatchDemo::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.L10nTbPatchDemo)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_list_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* L10nTbPatchDemo::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> L10nTbPatchDemo::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_L10nTbPatchDemo_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .cfg.L10nPatchDemo data_list = 1 [packed = false];
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(L10nTbPatchDemo, _impl_.data_list_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .cfg.L10nPatchDemo data_list = 1 [packed = false];
    {PROTOBUF_FIELD_OFFSET(L10nTbPatchDemo, _impl_.data_list_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::L10nPatchDemo>()},
  }}, {{
  }},
};

::uint8_t* L10nTbPatchDemo::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.L10nTbPatchDemo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .cfg.L10nPatchDemo data_list = 1 [packed = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_data_list().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.L10nTbPatchDemo)
  return target;
}

::size_t L10nTbPatchDemo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.L10nTbPatchDemo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cfg.L10nPatchDemo data_list = 1 [packed = false];
  total_size += 1UL * this->_internal_data_list_size();
  for (const auto& msg : this->_internal_data_list()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData L10nTbPatchDemo::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    L10nTbPatchDemo::MergeImpl
};
const ::google::protobuf::Message::ClassData*L10nTbPatchDemo::GetClassData() const { return &_class_data_; }


void L10nTbPatchDemo::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<L10nTbPatchDemo*>(&to_msg);
  auto& from = static_cast<const L10nTbPatchDemo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.L10nTbPatchDemo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_data_list()->MergeFrom(
      from._internal_data_list());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void L10nTbPatchDemo::CopyFrom(const L10nTbPatchDemo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.L10nTbPatchDemo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool L10nTbPatchDemo::IsInitialized() const {
  return true;
}

void L10nTbPatchDemo::InternalSwap(L10nTbPatchDemo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_list_.InternalSwap(&other->_impl_.data_list_);
}

::google::protobuf::Metadata L10nTbPatchDemo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[123]);
}
// ===================================================================

class TagTbTestTag::_Internal {
 public:
};

TagTbTestTag::TagTbTestTag(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TagTbTestTag)
}
TagTbTestTag::TagTbTestTag(const TagTbTestTag& from) : ::google::protobuf::Message() {
  TagTbTestTag* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_list_){from._impl_.data_list_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:cfg.TagTbTestTag)
}
inline void TagTbTestTag::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.data_list_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
TagTbTestTag::~TagTbTestTag() {
  // @@protoc_insertion_point(destructor:cfg.TagTbTestTag)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TagTbTestTag::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_list_.~RepeatedPtrField();
}
void TagTbTestTag::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TagTbTestTag::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TagTbTestTag)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_list_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TagTbTestTag::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> TagTbTestTag::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TagTbTestTag_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .cfg.TagTestTag data_list = 1 [packed = false];
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TagTbTestTag, _impl_.data_list_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .cfg.TagTestTag data_list = 1 [packed = false];
    {PROTOBUF_FIELD_OFFSET(TagTbTestTag, _impl_.data_list_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::TagTestTag>()},
  }}, {{
  }},
};

::uint8_t* TagTbTestTag::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TagTbTestTag)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .cfg.TagTestTag data_list = 1 [packed = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_data_list().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TagTbTestTag)
  return target;
}

::size_t TagTbTestTag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TagTbTestTag)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cfg.TagTestTag data_list = 1 [packed = false];
  total_size += 1UL * this->_internal_data_list_size();
  for (const auto& msg : this->_internal_data_list()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TagTbTestTag::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TagTbTestTag::MergeImpl
};
const ::google::protobuf::Message::ClassData*TagTbTestTag::GetClassData() const { return &_class_data_; }


void TagTbTestTag::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TagTbTestTag*>(&to_msg);
  auto& from = static_cast<const TagTbTestTag&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TagTbTestTag)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_data_list()->MergeFrom(
      from._internal_data_list());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TagTbTestTag::CopyFrom(const TagTbTestTag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TagTbTestTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TagTbTestTag::IsInitialized() const {
  return true;
}

void TagTbTestTag::InternalSwap(TagTbTestTag* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_list_.InternalSwap(&other->_impl_.data_list_);
}

::google::protobuf::Metadata TagTbTestTag::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[124]);
}
// ===================================================================

class TestTbFullTypes::_Internal {
 public:
};

TestTbFullTypes::TestTbFullTypes(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestTbFullTypes)
}
TestTbFullTypes::TestTbFullTypes(const TestTbFullTypes& from) : ::google::protobuf::Message() {
  TestTbFullTypes* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_list_){from._impl_.data_list_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:cfg.TestTbFullTypes)
}
inline void TestTbFullTypes::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.data_list_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
TestTbFullTypes::~TestTbFullTypes() {
  // @@protoc_insertion_point(destructor:cfg.TestTbFullTypes)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestTbFullTypes::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_list_.~RepeatedPtrField();
}
void TestTbFullTypes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestTbFullTypes::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestTbFullTypes)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_list_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestTbFullTypes::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> TestTbFullTypes::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TestTbFullTypes_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .cfg.TestDemoType2 data_list = 1 [packed = false];
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TestTbFullTypes, _impl_.data_list_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .cfg.TestDemoType2 data_list = 1 [packed = false];
    {PROTOBUF_FIELD_OFFSET(TestTbFullTypes, _impl_.data_list_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::TestDemoType2>()},
  }}, {{
  }},
};

::uint8_t* TestTbFullTypes::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestTbFullTypes)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .cfg.TestDemoType2 data_list = 1 [packed = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_data_list().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestTbFullTypes)
  return target;
}

::size_t TestTbFullTypes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestTbFullTypes)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cfg.TestDemoType2 data_list = 1 [packed = false];
  total_size += 1UL * this->_internal_data_list_size();
  for (const auto& msg : this->_internal_data_list()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestTbFullTypes::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestTbFullTypes::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestTbFullTypes::GetClassData() const { return &_class_data_; }


void TestTbFullTypes::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestTbFullTypes*>(&to_msg);
  auto& from = static_cast<const TestTbFullTypes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestTbFullTypes)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_data_list()->MergeFrom(
      from._internal_data_list());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestTbFullTypes::CopyFrom(const TestTbFullTypes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestTbFullTypes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestTbFullTypes::IsInitialized() const {
  return true;
}

void TestTbFullTypes::InternalSwap(TestTbFullTypes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_list_.InternalSwap(&other->_impl_.data_list_);
}

::google::protobuf::Metadata TestTbFullTypes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[125]);
}
// ===================================================================

class TestTbSingleton::_Internal {
 public:
};

TestTbSingleton::TestTbSingleton(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestTbSingleton)
}
TestTbSingleton::TestTbSingleton(const TestTbSingleton& from) : ::google::protobuf::Message() {
  TestTbSingleton* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_list_){from._impl_.data_list_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:cfg.TestTbSingleton)
}
inline void TestTbSingleton::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.data_list_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
TestTbSingleton::~TestTbSingleton() {
  // @@protoc_insertion_point(destructor:cfg.TestTbSingleton)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestTbSingleton::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_list_.~RepeatedPtrField();
}
void TestTbSingleton::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestTbSingleton::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestTbSingleton)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_list_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestTbSingleton::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> TestTbSingleton::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TestTbSingleton_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .cfg.TestDemoSingletonType data_list = 1 [packed = false];
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TestTbSingleton, _impl_.data_list_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .cfg.TestDemoSingletonType data_list = 1 [packed = false];
    {PROTOBUF_FIELD_OFFSET(TestTbSingleton, _impl_.data_list_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::TestDemoSingletonType>()},
  }}, {{
  }},
};

::uint8_t* TestTbSingleton::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestTbSingleton)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .cfg.TestDemoSingletonType data_list = 1 [packed = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_data_list().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestTbSingleton)
  return target;
}

::size_t TestTbSingleton::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestTbSingleton)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cfg.TestDemoSingletonType data_list = 1 [packed = false];
  total_size += 1UL * this->_internal_data_list_size();
  for (const auto& msg : this->_internal_data_list()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestTbSingleton::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestTbSingleton::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestTbSingleton::GetClassData() const { return &_class_data_; }


void TestTbSingleton::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestTbSingleton*>(&to_msg);
  auto& from = static_cast<const TestTbSingleton&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestTbSingleton)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_data_list()->MergeFrom(
      from._internal_data_list());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestTbSingleton::CopyFrom(const TestTbSingleton& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestTbSingleton)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestTbSingleton::IsInitialized() const {
  return true;
}

void TestTbSingleton::InternalSwap(TestTbSingleton* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_list_.InternalSwap(&other->_impl_.data_list_);
}

::google::protobuf::Metadata TestTbSingleton::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[126]);
}
// ===================================================================

class TestTbNotIndexList::_Internal {
 public:
};

TestTbNotIndexList::TestTbNotIndexList(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestTbNotIndexList)
}
TestTbNotIndexList::TestTbNotIndexList(const TestTbNotIndexList& from) : ::google::protobuf::Message() {
  TestTbNotIndexList* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_list_){from._impl_.data_list_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:cfg.TestTbNotIndexList)
}
inline void TestTbNotIndexList::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.data_list_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
TestTbNotIndexList::~TestTbNotIndexList() {
  // @@protoc_insertion_point(destructor:cfg.TestTbNotIndexList)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestTbNotIndexList::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_list_.~RepeatedPtrField();
}
void TestTbNotIndexList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestTbNotIndexList::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestTbNotIndexList)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_list_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestTbNotIndexList::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> TestTbNotIndexList::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TestTbNotIndexList_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .cfg.TestNotIndexList data_list = 1 [packed = false];
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TestTbNotIndexList, _impl_.data_list_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .cfg.TestNotIndexList data_list = 1 [packed = false];
    {PROTOBUF_FIELD_OFFSET(TestTbNotIndexList, _impl_.data_list_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::TestNotIndexList>()},
  }}, {{
  }},
};

::uint8_t* TestTbNotIndexList::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestTbNotIndexList)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .cfg.TestNotIndexList data_list = 1 [packed = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_data_list().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestTbNotIndexList)
  return target;
}

::size_t TestTbNotIndexList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestTbNotIndexList)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cfg.TestNotIndexList data_list = 1 [packed = false];
  total_size += 1UL * this->_internal_data_list_size();
  for (const auto& msg : this->_internal_data_list()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestTbNotIndexList::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestTbNotIndexList::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestTbNotIndexList::GetClassData() const { return &_class_data_; }


void TestTbNotIndexList::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestTbNotIndexList*>(&to_msg);
  auto& from = static_cast<const TestTbNotIndexList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestTbNotIndexList)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_data_list()->MergeFrom(
      from._internal_data_list());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestTbNotIndexList::CopyFrom(const TestTbNotIndexList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestTbNotIndexList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestTbNotIndexList::IsInitialized() const {
  return true;
}

void TestTbNotIndexList::InternalSwap(TestTbNotIndexList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_list_.InternalSwap(&other->_impl_.data_list_);
}

::google::protobuf::Metadata TestTbNotIndexList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[127]);
}
// ===================================================================

class TestTbMultiUnionIndexList::_Internal {
 public:
};

TestTbMultiUnionIndexList::TestTbMultiUnionIndexList(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestTbMultiUnionIndexList)
}
TestTbMultiUnionIndexList::TestTbMultiUnionIndexList(const TestTbMultiUnionIndexList& from) : ::google::protobuf::Message() {
  TestTbMultiUnionIndexList* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_list_){from._impl_.data_list_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:cfg.TestTbMultiUnionIndexList)
}
inline void TestTbMultiUnionIndexList::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.data_list_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
TestTbMultiUnionIndexList::~TestTbMultiUnionIndexList() {
  // @@protoc_insertion_point(destructor:cfg.TestTbMultiUnionIndexList)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestTbMultiUnionIndexList::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_list_.~RepeatedPtrField();
}
void TestTbMultiUnionIndexList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestTbMultiUnionIndexList::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestTbMultiUnionIndexList)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_list_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestTbMultiUnionIndexList::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> TestTbMultiUnionIndexList::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TestTbMultiUnionIndexList_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .cfg.TestMultiUnionIndexList data_list = 1 [packed = false];
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TestTbMultiUnionIndexList, _impl_.data_list_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .cfg.TestMultiUnionIndexList data_list = 1 [packed = false];
    {PROTOBUF_FIELD_OFFSET(TestTbMultiUnionIndexList, _impl_.data_list_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::TestMultiUnionIndexList>()},
  }}, {{
  }},
};

::uint8_t* TestTbMultiUnionIndexList::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestTbMultiUnionIndexList)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .cfg.TestMultiUnionIndexList data_list = 1 [packed = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_data_list().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestTbMultiUnionIndexList)
  return target;
}

::size_t TestTbMultiUnionIndexList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestTbMultiUnionIndexList)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cfg.TestMultiUnionIndexList data_list = 1 [packed = false];
  total_size += 1UL * this->_internal_data_list_size();
  for (const auto& msg : this->_internal_data_list()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestTbMultiUnionIndexList::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestTbMultiUnionIndexList::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestTbMultiUnionIndexList::GetClassData() const { return &_class_data_; }


void TestTbMultiUnionIndexList::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestTbMultiUnionIndexList*>(&to_msg);
  auto& from = static_cast<const TestTbMultiUnionIndexList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestTbMultiUnionIndexList)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_data_list()->MergeFrom(
      from._internal_data_list());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestTbMultiUnionIndexList::CopyFrom(const TestTbMultiUnionIndexList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestTbMultiUnionIndexList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestTbMultiUnionIndexList::IsInitialized() const {
  return true;
}

void TestTbMultiUnionIndexList::InternalSwap(TestTbMultiUnionIndexList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_list_.InternalSwap(&other->_impl_.data_list_);
}

::google::protobuf::Metadata TestTbMultiUnionIndexList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[128]);
}
// ===================================================================

class TestTbMultiIndexList::_Internal {
 public:
};

TestTbMultiIndexList::TestTbMultiIndexList(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestTbMultiIndexList)
}
TestTbMultiIndexList::TestTbMultiIndexList(const TestTbMultiIndexList& from) : ::google::protobuf::Message() {
  TestTbMultiIndexList* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_list_){from._impl_.data_list_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:cfg.TestTbMultiIndexList)
}
inline void TestTbMultiIndexList::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.data_list_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
TestTbMultiIndexList::~TestTbMultiIndexList() {
  // @@protoc_insertion_point(destructor:cfg.TestTbMultiIndexList)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestTbMultiIndexList::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_list_.~RepeatedPtrField();
}
void TestTbMultiIndexList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestTbMultiIndexList::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestTbMultiIndexList)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_list_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestTbMultiIndexList::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> TestTbMultiIndexList::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TestTbMultiIndexList_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .cfg.TestMultiIndexList data_list = 1 [packed = false];
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TestTbMultiIndexList, _impl_.data_list_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .cfg.TestMultiIndexList data_list = 1 [packed = false];
    {PROTOBUF_FIELD_OFFSET(TestTbMultiIndexList, _impl_.data_list_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::TestMultiIndexList>()},
  }}, {{
  }},
};

::uint8_t* TestTbMultiIndexList::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestTbMultiIndexList)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .cfg.TestMultiIndexList data_list = 1 [packed = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_data_list().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestTbMultiIndexList)
  return target;
}

::size_t TestTbMultiIndexList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestTbMultiIndexList)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cfg.TestMultiIndexList data_list = 1 [packed = false];
  total_size += 1UL * this->_internal_data_list_size();
  for (const auto& msg : this->_internal_data_list()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestTbMultiIndexList::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestTbMultiIndexList::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestTbMultiIndexList::GetClassData() const { return &_class_data_; }


void TestTbMultiIndexList::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestTbMultiIndexList*>(&to_msg);
  auto& from = static_cast<const TestTbMultiIndexList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestTbMultiIndexList)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_data_list()->MergeFrom(
      from._internal_data_list());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestTbMultiIndexList::CopyFrom(const TestTbMultiIndexList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestTbMultiIndexList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestTbMultiIndexList::IsInitialized() const {
  return true;
}

void TestTbMultiIndexList::InternalSwap(TestTbMultiIndexList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_list_.InternalSwap(&other->_impl_.data_list_);
}

::google::protobuf::Metadata TestTbMultiIndexList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[129]);
}
// ===================================================================

class TestTbDataFromMisc::_Internal {
 public:
};

TestTbDataFromMisc::TestTbDataFromMisc(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestTbDataFromMisc)
}
TestTbDataFromMisc::TestTbDataFromMisc(const TestTbDataFromMisc& from) : ::google::protobuf::Message() {
  TestTbDataFromMisc* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_list_){from._impl_.data_list_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:cfg.TestTbDataFromMisc)
}
inline void TestTbDataFromMisc::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.data_list_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
TestTbDataFromMisc::~TestTbDataFromMisc() {
  // @@protoc_insertion_point(destructor:cfg.TestTbDataFromMisc)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestTbDataFromMisc::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_list_.~RepeatedPtrField();
}
void TestTbDataFromMisc::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestTbDataFromMisc::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestTbDataFromMisc)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_list_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestTbDataFromMisc::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> TestTbDataFromMisc::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TestTbDataFromMisc_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .cfg.TestDemoType2 data_list = 1 [packed = false];
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TestTbDataFromMisc, _impl_.data_list_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .cfg.TestDemoType2 data_list = 1 [packed = false];
    {PROTOBUF_FIELD_OFFSET(TestTbDataFromMisc, _impl_.data_list_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::TestDemoType2>()},
  }}, {{
  }},
};

::uint8_t* TestTbDataFromMisc::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestTbDataFromMisc)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .cfg.TestDemoType2 data_list = 1 [packed = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_data_list().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestTbDataFromMisc)
  return target;
}

::size_t TestTbDataFromMisc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestTbDataFromMisc)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cfg.TestDemoType2 data_list = 1 [packed = false];
  total_size += 1UL * this->_internal_data_list_size();
  for (const auto& msg : this->_internal_data_list()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestTbDataFromMisc::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestTbDataFromMisc::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestTbDataFromMisc::GetClassData() const { return &_class_data_; }


void TestTbDataFromMisc::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestTbDataFromMisc*>(&to_msg);
  auto& from = static_cast<const TestTbDataFromMisc&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestTbDataFromMisc)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_data_list()->MergeFrom(
      from._internal_data_list());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestTbDataFromMisc::CopyFrom(const TestTbDataFromMisc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestTbDataFromMisc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestTbDataFromMisc::IsInitialized() const {
  return true;
}

void TestTbDataFromMisc::InternalSwap(TestTbDataFromMisc* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_list_.InternalSwap(&other->_impl_.data_list_);
}

::google::protobuf::Metadata TestTbDataFromMisc::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[130]);
}
// ===================================================================

class TestTbMultiRowRecord::_Internal {
 public:
};

TestTbMultiRowRecord::TestTbMultiRowRecord(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestTbMultiRowRecord)
}
TestTbMultiRowRecord::TestTbMultiRowRecord(const TestTbMultiRowRecord& from) : ::google::protobuf::Message() {
  TestTbMultiRowRecord* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_list_){from._impl_.data_list_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:cfg.TestTbMultiRowRecord)
}
inline void TestTbMultiRowRecord::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.data_list_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
TestTbMultiRowRecord::~TestTbMultiRowRecord() {
  // @@protoc_insertion_point(destructor:cfg.TestTbMultiRowRecord)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestTbMultiRowRecord::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_list_.~RepeatedPtrField();
}
void TestTbMultiRowRecord::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestTbMultiRowRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestTbMultiRowRecord)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_list_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestTbMultiRowRecord::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> TestTbMultiRowRecord::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TestTbMultiRowRecord_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .cfg.TestMultiRowRecord data_list = 1 [packed = false];
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TestTbMultiRowRecord, _impl_.data_list_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .cfg.TestMultiRowRecord data_list = 1 [packed = false];
    {PROTOBUF_FIELD_OFFSET(TestTbMultiRowRecord, _impl_.data_list_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::TestMultiRowRecord>()},
  }}, {{
  }},
};

::uint8_t* TestTbMultiRowRecord::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestTbMultiRowRecord)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .cfg.TestMultiRowRecord data_list = 1 [packed = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_data_list().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestTbMultiRowRecord)
  return target;
}

::size_t TestTbMultiRowRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestTbMultiRowRecord)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cfg.TestMultiRowRecord data_list = 1 [packed = false];
  total_size += 1UL * this->_internal_data_list_size();
  for (const auto& msg : this->_internal_data_list()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestTbMultiRowRecord::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestTbMultiRowRecord::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestTbMultiRowRecord::GetClassData() const { return &_class_data_; }


void TestTbMultiRowRecord::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestTbMultiRowRecord*>(&to_msg);
  auto& from = static_cast<const TestTbMultiRowRecord&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestTbMultiRowRecord)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_data_list()->MergeFrom(
      from._internal_data_list());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestTbMultiRowRecord::CopyFrom(const TestTbMultiRowRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestTbMultiRowRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestTbMultiRowRecord::IsInitialized() const {
  return true;
}

void TestTbMultiRowRecord::InternalSwap(TestTbMultiRowRecord* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_list_.InternalSwap(&other->_impl_.data_list_);
}

::google::protobuf::Metadata TestTbMultiRowRecord::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[131]);
}
// ===================================================================

class TestTbTestMultiColumn::_Internal {
 public:
};

TestTbTestMultiColumn::TestTbTestMultiColumn(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestTbTestMultiColumn)
}
TestTbTestMultiColumn::TestTbTestMultiColumn(const TestTbTestMultiColumn& from) : ::google::protobuf::Message() {
  TestTbTestMultiColumn* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_list_){from._impl_.data_list_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:cfg.TestTbTestMultiColumn)
}
inline void TestTbTestMultiColumn::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.data_list_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
TestTbTestMultiColumn::~TestTbTestMultiColumn() {
  // @@protoc_insertion_point(destructor:cfg.TestTbTestMultiColumn)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestTbTestMultiColumn::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_list_.~RepeatedPtrField();
}
void TestTbTestMultiColumn::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestTbTestMultiColumn::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestTbTestMultiColumn)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_list_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestTbTestMultiColumn::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> TestTbTestMultiColumn::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TestTbTestMultiColumn_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .cfg.TestTestMultiColumn data_list = 1 [packed = false];
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TestTbTestMultiColumn, _impl_.data_list_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .cfg.TestTestMultiColumn data_list = 1 [packed = false];
    {PROTOBUF_FIELD_OFFSET(TestTbTestMultiColumn, _impl_.data_list_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::TestTestMultiColumn>()},
  }}, {{
  }},
};

::uint8_t* TestTbTestMultiColumn::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestTbTestMultiColumn)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .cfg.TestTestMultiColumn data_list = 1 [packed = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_data_list().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestTbTestMultiColumn)
  return target;
}

::size_t TestTbTestMultiColumn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestTbTestMultiColumn)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cfg.TestTestMultiColumn data_list = 1 [packed = false];
  total_size += 1UL * this->_internal_data_list_size();
  for (const auto& msg : this->_internal_data_list()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestTbTestMultiColumn::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestTbTestMultiColumn::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestTbTestMultiColumn::GetClassData() const { return &_class_data_; }


void TestTbTestMultiColumn::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestTbTestMultiColumn*>(&to_msg);
  auto& from = static_cast<const TestTbTestMultiColumn&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestTbTestMultiColumn)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_data_list()->MergeFrom(
      from._internal_data_list());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestTbTestMultiColumn::CopyFrom(const TestTbTestMultiColumn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestTbTestMultiColumn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestTbTestMultiColumn::IsInitialized() const {
  return true;
}

void TestTbTestMultiColumn::InternalSwap(TestTbTestMultiColumn* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_list_.InternalSwap(&other->_impl_.data_list_);
}

::google::protobuf::Metadata TestTbTestMultiColumn::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[132]);
}
// ===================================================================

class TestTbMultiRowTitle::_Internal {
 public:
};

TestTbMultiRowTitle::TestTbMultiRowTitle(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestTbMultiRowTitle)
}
TestTbMultiRowTitle::TestTbMultiRowTitle(const TestTbMultiRowTitle& from) : ::google::protobuf::Message() {
  TestTbMultiRowTitle* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_list_){from._impl_.data_list_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:cfg.TestTbMultiRowTitle)
}
inline void TestTbMultiRowTitle::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.data_list_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
TestTbMultiRowTitle::~TestTbMultiRowTitle() {
  // @@protoc_insertion_point(destructor:cfg.TestTbMultiRowTitle)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestTbMultiRowTitle::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_list_.~RepeatedPtrField();
}
void TestTbMultiRowTitle::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestTbMultiRowTitle::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestTbMultiRowTitle)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_list_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestTbMultiRowTitle::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> TestTbMultiRowTitle::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TestTbMultiRowTitle_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .cfg.TestMultiRowTitle data_list = 1 [packed = false];
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TestTbMultiRowTitle, _impl_.data_list_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .cfg.TestMultiRowTitle data_list = 1 [packed = false];
    {PROTOBUF_FIELD_OFFSET(TestTbMultiRowTitle, _impl_.data_list_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::TestMultiRowTitle>()},
  }}, {{
  }},
};

::uint8_t* TestTbMultiRowTitle::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestTbMultiRowTitle)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .cfg.TestMultiRowTitle data_list = 1 [packed = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_data_list().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestTbMultiRowTitle)
  return target;
}

::size_t TestTbMultiRowTitle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestTbMultiRowTitle)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cfg.TestMultiRowTitle data_list = 1 [packed = false];
  total_size += 1UL * this->_internal_data_list_size();
  for (const auto& msg : this->_internal_data_list()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestTbMultiRowTitle::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestTbMultiRowTitle::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestTbMultiRowTitle::GetClassData() const { return &_class_data_; }


void TestTbMultiRowTitle::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestTbMultiRowTitle*>(&to_msg);
  auto& from = static_cast<const TestTbMultiRowTitle&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestTbMultiRowTitle)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_data_list()->MergeFrom(
      from._internal_data_list());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestTbMultiRowTitle::CopyFrom(const TestTbMultiRowTitle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestTbMultiRowTitle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestTbMultiRowTitle::IsInitialized() const {
  return true;
}

void TestTbMultiRowTitle::InternalSwap(TestTbMultiRowTitle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_list_.InternalSwap(&other->_impl_.data_list_);
}

::google::protobuf::Metadata TestTbMultiRowTitle::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[133]);
}
// ===================================================================

class TestTbTestNull::_Internal {
 public:
};

TestTbTestNull::TestTbTestNull(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestTbTestNull)
}
TestTbTestNull::TestTbTestNull(const TestTbTestNull& from) : ::google::protobuf::Message() {
  TestTbTestNull* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_list_){from._impl_.data_list_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:cfg.TestTbTestNull)
}
inline void TestTbTestNull::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.data_list_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
TestTbTestNull::~TestTbTestNull() {
  // @@protoc_insertion_point(destructor:cfg.TestTbTestNull)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestTbTestNull::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_list_.~RepeatedPtrField();
}
void TestTbTestNull::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestTbTestNull::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestTbTestNull)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_list_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestTbTestNull::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> TestTbTestNull::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TestTbTestNull_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .cfg.TestTestNull data_list = 1 [packed = false];
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TestTbTestNull, _impl_.data_list_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .cfg.TestTestNull data_list = 1 [packed = false];
    {PROTOBUF_FIELD_OFFSET(TestTbTestNull, _impl_.data_list_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::TestTestNull>()},
  }}, {{
  }},
};

::uint8_t* TestTbTestNull::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestTbTestNull)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .cfg.TestTestNull data_list = 1 [packed = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_data_list().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestTbTestNull)
  return target;
}

::size_t TestTbTestNull::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestTbTestNull)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cfg.TestTestNull data_list = 1 [packed = false];
  total_size += 1UL * this->_internal_data_list_size();
  for (const auto& msg : this->_internal_data_list()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestTbTestNull::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestTbTestNull::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestTbTestNull::GetClassData() const { return &_class_data_; }


void TestTbTestNull::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestTbTestNull*>(&to_msg);
  auto& from = static_cast<const TestTbTestNull&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestTbTestNull)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_data_list()->MergeFrom(
      from._internal_data_list());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestTbTestNull::CopyFrom(const TestTbTestNull& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestTbTestNull)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestTbTestNull::IsInitialized() const {
  return true;
}

void TestTbTestNull::InternalSwap(TestTbTestNull* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_list_.InternalSwap(&other->_impl_.data_list_);
}

::google::protobuf::Metadata TestTbTestNull::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[134]);
}
// ===================================================================

class TestTbDemoPrimitive::_Internal {
 public:
};

TestTbDemoPrimitive::TestTbDemoPrimitive(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestTbDemoPrimitive)
}
TestTbDemoPrimitive::TestTbDemoPrimitive(const TestTbDemoPrimitive& from) : ::google::protobuf::Message() {
  TestTbDemoPrimitive* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_list_){from._impl_.data_list_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:cfg.TestTbDemoPrimitive)
}
inline void TestTbDemoPrimitive::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.data_list_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
TestTbDemoPrimitive::~TestTbDemoPrimitive() {
  // @@protoc_insertion_point(destructor:cfg.TestTbDemoPrimitive)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestTbDemoPrimitive::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_list_.~RepeatedPtrField();
}
void TestTbDemoPrimitive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestTbDemoPrimitive::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestTbDemoPrimitive)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_list_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestTbDemoPrimitive::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> TestTbDemoPrimitive::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TestTbDemoPrimitive_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .cfg.TestDemoPrimitiveTypesTable data_list = 1 [packed = false];
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TestTbDemoPrimitive, _impl_.data_list_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .cfg.TestDemoPrimitiveTypesTable data_list = 1 [packed = false];
    {PROTOBUF_FIELD_OFFSET(TestTbDemoPrimitive, _impl_.data_list_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::TestDemoPrimitiveTypesTable>()},
  }}, {{
  }},
};

::uint8_t* TestTbDemoPrimitive::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestTbDemoPrimitive)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .cfg.TestDemoPrimitiveTypesTable data_list = 1 [packed = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_data_list().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestTbDemoPrimitive)
  return target;
}

::size_t TestTbDemoPrimitive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestTbDemoPrimitive)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cfg.TestDemoPrimitiveTypesTable data_list = 1 [packed = false];
  total_size += 1UL * this->_internal_data_list_size();
  for (const auto& msg : this->_internal_data_list()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestTbDemoPrimitive::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestTbDemoPrimitive::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestTbDemoPrimitive::GetClassData() const { return &_class_data_; }


void TestTbDemoPrimitive::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestTbDemoPrimitive*>(&to_msg);
  auto& from = static_cast<const TestTbDemoPrimitive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestTbDemoPrimitive)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_data_list()->MergeFrom(
      from._internal_data_list());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestTbDemoPrimitive::CopyFrom(const TestTbDemoPrimitive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestTbDemoPrimitive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestTbDemoPrimitive::IsInitialized() const {
  return true;
}

void TestTbDemoPrimitive::InternalSwap(TestTbDemoPrimitive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_list_.InternalSwap(&other->_impl_.data_list_);
}

::google::protobuf::Metadata TestTbDemoPrimitive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[135]);
}
// ===================================================================

class TestTbTestString::_Internal {
 public:
};

TestTbTestString::TestTbTestString(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestTbTestString)
}
TestTbTestString::TestTbTestString(const TestTbTestString& from) : ::google::protobuf::Message() {
  TestTbTestString* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_list_){from._impl_.data_list_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:cfg.TestTbTestString)
}
inline void TestTbTestString::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.data_list_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
TestTbTestString::~TestTbTestString() {
  // @@protoc_insertion_point(destructor:cfg.TestTbTestString)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestTbTestString::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_list_.~RepeatedPtrField();
}
void TestTbTestString::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestTbTestString::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestTbTestString)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_list_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestTbTestString::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> TestTbTestString::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TestTbTestString_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .cfg.TestTestString data_list = 1 [packed = false];
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TestTbTestString, _impl_.data_list_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .cfg.TestTestString data_list = 1 [packed = false];
    {PROTOBUF_FIELD_OFFSET(TestTbTestString, _impl_.data_list_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::TestTestString>()},
  }}, {{
  }},
};

::uint8_t* TestTbTestString::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestTbTestString)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .cfg.TestTestString data_list = 1 [packed = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_data_list().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestTbTestString)
  return target;
}

::size_t TestTbTestString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestTbTestString)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cfg.TestTestString data_list = 1 [packed = false];
  total_size += 1UL * this->_internal_data_list_size();
  for (const auto& msg : this->_internal_data_list()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestTbTestString::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestTbTestString::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestTbTestString::GetClassData() const { return &_class_data_; }


void TestTbTestString::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestTbTestString*>(&to_msg);
  auto& from = static_cast<const TestTbTestString&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestTbTestString)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_data_list()->MergeFrom(
      from._internal_data_list());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestTbTestString::CopyFrom(const TestTbTestString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestTbTestString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestTbTestString::IsInitialized() const {
  return true;
}

void TestTbTestString::InternalSwap(TestTbTestString* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_list_.InternalSwap(&other->_impl_.data_list_);
}

::google::protobuf::Metadata TestTbTestString::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[136]);
}
// ===================================================================

class TestTbDemoGroup::_Internal {
 public:
};

TestTbDemoGroup::TestTbDemoGroup(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestTbDemoGroup)
}
TestTbDemoGroup::TestTbDemoGroup(const TestTbDemoGroup& from) : ::google::protobuf::Message() {
  TestTbDemoGroup* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_list_){from._impl_.data_list_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:cfg.TestTbDemoGroup)
}
inline void TestTbDemoGroup::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.data_list_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
TestTbDemoGroup::~TestTbDemoGroup() {
  // @@protoc_insertion_point(destructor:cfg.TestTbDemoGroup)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestTbDemoGroup::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_list_.~RepeatedPtrField();
}
void TestTbDemoGroup::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestTbDemoGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestTbDemoGroup)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_list_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestTbDemoGroup::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> TestTbDemoGroup::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TestTbDemoGroup_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .cfg.TestDemoGroup data_list = 1 [packed = false];
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TestTbDemoGroup, _impl_.data_list_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .cfg.TestDemoGroup data_list = 1 [packed = false];
    {PROTOBUF_FIELD_OFFSET(TestTbDemoGroup, _impl_.data_list_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::TestDemoGroup>()},
  }}, {{
  }},
};

::uint8_t* TestTbDemoGroup::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestTbDemoGroup)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .cfg.TestDemoGroup data_list = 1 [packed = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_data_list().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestTbDemoGroup)
  return target;
}

::size_t TestTbDemoGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestTbDemoGroup)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cfg.TestDemoGroup data_list = 1 [packed = false];
  total_size += 1UL * this->_internal_data_list_size();
  for (const auto& msg : this->_internal_data_list()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestTbDemoGroup::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestTbDemoGroup::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestTbDemoGroup::GetClassData() const { return &_class_data_; }


void TestTbDemoGroup::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestTbDemoGroup*>(&to_msg);
  auto& from = static_cast<const TestTbDemoGroup&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestTbDemoGroup)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_data_list()->MergeFrom(
      from._internal_data_list());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestTbDemoGroup::CopyFrom(const TestTbDemoGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestTbDemoGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestTbDemoGroup::IsInitialized() const {
  return true;
}

void TestTbDemoGroup::InternalSwap(TestTbDemoGroup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_list_.InternalSwap(&other->_impl_.data_list_);
}

::google::protobuf::Metadata TestTbDemoGroup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[137]);
}
// ===================================================================

class TestTbTestGlobal::_Internal {
 public:
};

TestTbTestGlobal::TestTbTestGlobal(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestTbTestGlobal)
}
TestTbTestGlobal::TestTbTestGlobal(const TestTbTestGlobal& from) : ::google::protobuf::Message() {
  TestTbTestGlobal* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_list_){from._impl_.data_list_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:cfg.TestTbTestGlobal)
}
inline void TestTbTestGlobal::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.data_list_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
TestTbTestGlobal::~TestTbTestGlobal() {
  // @@protoc_insertion_point(destructor:cfg.TestTbTestGlobal)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestTbTestGlobal::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_list_.~RepeatedPtrField();
}
void TestTbTestGlobal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestTbTestGlobal::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestTbTestGlobal)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_list_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestTbTestGlobal::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> TestTbTestGlobal::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TestTbTestGlobal_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .cfg.TestTestGlobal data_list = 1 [packed = false];
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TestTbTestGlobal, _impl_.data_list_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .cfg.TestTestGlobal data_list = 1 [packed = false];
    {PROTOBUF_FIELD_OFFSET(TestTbTestGlobal, _impl_.data_list_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::TestTestGlobal>()},
  }}, {{
  }},
};

::uint8_t* TestTbTestGlobal::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestTbTestGlobal)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .cfg.TestTestGlobal data_list = 1 [packed = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_data_list().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestTbTestGlobal)
  return target;
}

::size_t TestTbTestGlobal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestTbTestGlobal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cfg.TestTestGlobal data_list = 1 [packed = false];
  total_size += 1UL * this->_internal_data_list_size();
  for (const auto& msg : this->_internal_data_list()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestTbTestGlobal::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestTbTestGlobal::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestTbTestGlobal::GetClassData() const { return &_class_data_; }


void TestTbTestGlobal::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestTbTestGlobal*>(&to_msg);
  auto& from = static_cast<const TestTbTestGlobal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestTbTestGlobal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_data_list()->MergeFrom(
      from._internal_data_list());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestTbTestGlobal::CopyFrom(const TestTbTestGlobal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestTbTestGlobal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestTbTestGlobal::IsInitialized() const {
  return true;
}

void TestTbTestGlobal::InternalSwap(TestTbTestGlobal* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_list_.InternalSwap(&other->_impl_.data_list_);
}

::google::protobuf::Metadata TestTbTestGlobal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[138]);
}
// ===================================================================

class TestTbTestBeRef::_Internal {
 public:
};

TestTbTestBeRef::TestTbTestBeRef(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestTbTestBeRef)
}
TestTbTestBeRef::TestTbTestBeRef(const TestTbTestBeRef& from) : ::google::protobuf::Message() {
  TestTbTestBeRef* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_list_){from._impl_.data_list_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:cfg.TestTbTestBeRef)
}
inline void TestTbTestBeRef::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.data_list_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
TestTbTestBeRef::~TestTbTestBeRef() {
  // @@protoc_insertion_point(destructor:cfg.TestTbTestBeRef)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestTbTestBeRef::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_list_.~RepeatedPtrField();
}
void TestTbTestBeRef::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestTbTestBeRef::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestTbTestBeRef)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_list_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestTbTestBeRef::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> TestTbTestBeRef::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TestTbTestBeRef_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .cfg.TestTestBeRef data_list = 1 [packed = false];
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TestTbTestBeRef, _impl_.data_list_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .cfg.TestTestBeRef data_list = 1 [packed = false];
    {PROTOBUF_FIELD_OFFSET(TestTbTestBeRef, _impl_.data_list_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::TestTestBeRef>()},
  }}, {{
  }},
};

::uint8_t* TestTbTestBeRef::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestTbTestBeRef)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .cfg.TestTestBeRef data_list = 1 [packed = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_data_list().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestTbTestBeRef)
  return target;
}

::size_t TestTbTestBeRef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestTbTestBeRef)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cfg.TestTestBeRef data_list = 1 [packed = false];
  total_size += 1UL * this->_internal_data_list_size();
  for (const auto& msg : this->_internal_data_list()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestTbTestBeRef::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestTbTestBeRef::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestTbTestBeRef::GetClassData() const { return &_class_data_; }


void TestTbTestBeRef::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestTbTestBeRef*>(&to_msg);
  auto& from = static_cast<const TestTbTestBeRef&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestTbTestBeRef)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_data_list()->MergeFrom(
      from._internal_data_list());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestTbTestBeRef::CopyFrom(const TestTbTestBeRef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestTbTestBeRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestTbTestBeRef::IsInitialized() const {
  return true;
}

void TestTbTestBeRef::InternalSwap(TestTbTestBeRef* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_list_.InternalSwap(&other->_impl_.data_list_);
}

::google::protobuf::Metadata TestTbTestBeRef::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[139]);
}
// ===================================================================

class TestTbTestBeRef2::_Internal {
 public:
};

TestTbTestBeRef2::TestTbTestBeRef2(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestTbTestBeRef2)
}
TestTbTestBeRef2::TestTbTestBeRef2(const TestTbTestBeRef2& from) : ::google::protobuf::Message() {
  TestTbTestBeRef2* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_list_){from._impl_.data_list_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:cfg.TestTbTestBeRef2)
}
inline void TestTbTestBeRef2::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.data_list_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
TestTbTestBeRef2::~TestTbTestBeRef2() {
  // @@protoc_insertion_point(destructor:cfg.TestTbTestBeRef2)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestTbTestBeRef2::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_list_.~RepeatedPtrField();
}
void TestTbTestBeRef2::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestTbTestBeRef2::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestTbTestBeRef2)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_list_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestTbTestBeRef2::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> TestTbTestBeRef2::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TestTbTestBeRef2_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .cfg.TestTestBeRef data_list = 1 [packed = false];
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TestTbTestBeRef2, _impl_.data_list_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .cfg.TestTestBeRef data_list = 1 [packed = false];
    {PROTOBUF_FIELD_OFFSET(TestTbTestBeRef2, _impl_.data_list_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::TestTestBeRef>()},
  }}, {{
  }},
};

::uint8_t* TestTbTestBeRef2::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestTbTestBeRef2)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .cfg.TestTestBeRef data_list = 1 [packed = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_data_list().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestTbTestBeRef2)
  return target;
}

::size_t TestTbTestBeRef2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestTbTestBeRef2)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cfg.TestTestBeRef data_list = 1 [packed = false];
  total_size += 1UL * this->_internal_data_list_size();
  for (const auto& msg : this->_internal_data_list()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestTbTestBeRef2::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestTbTestBeRef2::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestTbTestBeRef2::GetClassData() const { return &_class_data_; }


void TestTbTestBeRef2::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestTbTestBeRef2*>(&to_msg);
  auto& from = static_cast<const TestTbTestBeRef2&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestTbTestBeRef2)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_data_list()->MergeFrom(
      from._internal_data_list());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestTbTestBeRef2::CopyFrom(const TestTbTestBeRef2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestTbTestBeRef2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestTbTestBeRef2::IsInitialized() const {
  return true;
}

void TestTbTestBeRef2::InternalSwap(TestTbTestBeRef2* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_list_.InternalSwap(&other->_impl_.data_list_);
}

::google::protobuf::Metadata TestTbTestBeRef2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[140]);
}
// ===================================================================

class TestTbTestRef::_Internal {
 public:
};

TestTbTestRef::TestTbTestRef(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestTbTestRef)
}
TestTbTestRef::TestTbTestRef(const TestTbTestRef& from) : ::google::protobuf::Message() {
  TestTbTestRef* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_list_){from._impl_.data_list_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:cfg.TestTbTestRef)
}
inline void TestTbTestRef::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.data_list_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
TestTbTestRef::~TestTbTestRef() {
  // @@protoc_insertion_point(destructor:cfg.TestTbTestRef)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestTbTestRef::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_list_.~RepeatedPtrField();
}
void TestTbTestRef::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestTbTestRef::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestTbTestRef)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_list_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestTbTestRef::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> TestTbTestRef::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TestTbTestRef_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .cfg.TestTestRef data_list = 1 [packed = false];
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TestTbTestRef, _impl_.data_list_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .cfg.TestTestRef data_list = 1 [packed = false];
    {PROTOBUF_FIELD_OFFSET(TestTbTestRef, _impl_.data_list_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::TestTestRef>()},
  }}, {{
  }},
};

::uint8_t* TestTbTestRef::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestTbTestRef)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .cfg.TestTestRef data_list = 1 [packed = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_data_list().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestTbTestRef)
  return target;
}

::size_t TestTbTestRef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestTbTestRef)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cfg.TestTestRef data_list = 1 [packed = false];
  total_size += 1UL * this->_internal_data_list_size();
  for (const auto& msg : this->_internal_data_list()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestTbTestRef::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestTbTestRef::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestTbTestRef::GetClassData() const { return &_class_data_; }


void TestTbTestRef::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestTbTestRef*>(&to_msg);
  auto& from = static_cast<const TestTbTestRef&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestTbTestRef)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_data_list()->MergeFrom(
      from._internal_data_list());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestTbTestRef::CopyFrom(const TestTbTestRef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestTbTestRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestTbTestRef::IsInitialized() const {
  return true;
}

void TestTbTestRef::InternalSwap(TestTbTestRef* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_list_.InternalSwap(&other->_impl_.data_list_);
}

::google::protobuf::Metadata TestTbTestRef::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[141]);
}
// ===================================================================

class TestTbTestSize::_Internal {
 public:
};

TestTbTestSize::TestTbTestSize(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestTbTestSize)
}
TestTbTestSize::TestTbTestSize(const TestTbTestSize& from) : ::google::protobuf::Message() {
  TestTbTestSize* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_list_){from._impl_.data_list_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:cfg.TestTbTestSize)
}
inline void TestTbTestSize::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.data_list_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
TestTbTestSize::~TestTbTestSize() {
  // @@protoc_insertion_point(destructor:cfg.TestTbTestSize)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestTbTestSize::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_list_.~RepeatedPtrField();
}
void TestTbTestSize::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestTbTestSize::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestTbTestSize)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_list_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestTbTestSize::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> TestTbTestSize::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TestTbTestSize_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .cfg.TestTestSize data_list = 1 [packed = false];
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TestTbTestSize, _impl_.data_list_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .cfg.TestTestSize data_list = 1 [packed = false];
    {PROTOBUF_FIELD_OFFSET(TestTbTestSize, _impl_.data_list_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::TestTestSize>()},
  }}, {{
  }},
};

::uint8_t* TestTbTestSize::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestTbTestSize)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .cfg.TestTestSize data_list = 1 [packed = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_data_list().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestTbTestSize)
  return target;
}

::size_t TestTbTestSize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestTbTestSize)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cfg.TestTestSize data_list = 1 [packed = false];
  total_size += 1UL * this->_internal_data_list_size();
  for (const auto& msg : this->_internal_data_list()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestTbTestSize::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestTbTestSize::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestTbTestSize::GetClassData() const { return &_class_data_; }


void TestTbTestSize::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestTbTestSize*>(&to_msg);
  auto& from = static_cast<const TestTbTestSize&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestTbTestSize)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_data_list()->MergeFrom(
      from._internal_data_list());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestTbTestSize::CopyFrom(const TestTbTestSize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestTbTestSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestTbTestSize::IsInitialized() const {
  return true;
}

void TestTbTestSize::InternalSwap(TestTbTestSize* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_list_.InternalSwap(&other->_impl_.data_list_);
}

::google::protobuf::Metadata TestTbTestSize::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[142]);
}
// ===================================================================

class TestTbTestSet::_Internal {
 public:
};

TestTbTestSet::TestTbTestSet(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestTbTestSet)
}
TestTbTestSet::TestTbTestSet(const TestTbTestSet& from) : ::google::protobuf::Message() {
  TestTbTestSet* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_list_){from._impl_.data_list_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:cfg.TestTbTestSet)
}
inline void TestTbTestSet::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.data_list_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
TestTbTestSet::~TestTbTestSet() {
  // @@protoc_insertion_point(destructor:cfg.TestTbTestSet)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestTbTestSet::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_list_.~RepeatedPtrField();
}
void TestTbTestSet::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestTbTestSet::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestTbTestSet)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_list_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestTbTestSet::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> TestTbTestSet::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TestTbTestSet_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .cfg.TestTestSet data_list = 1 [packed = false];
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TestTbTestSet, _impl_.data_list_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .cfg.TestTestSet data_list = 1 [packed = false];
    {PROTOBUF_FIELD_OFFSET(TestTbTestSet, _impl_.data_list_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::TestTestSet>()},
  }}, {{
  }},
};

::uint8_t* TestTbTestSet::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestTbTestSet)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .cfg.TestTestSet data_list = 1 [packed = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_data_list().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestTbTestSet)
  return target;
}

::size_t TestTbTestSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestTbTestSet)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cfg.TestTestSet data_list = 1 [packed = false];
  total_size += 1UL * this->_internal_data_list_size();
  for (const auto& msg : this->_internal_data_list()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestTbTestSet::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestTbTestSet::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestTbTestSet::GetClassData() const { return &_class_data_; }


void TestTbTestSet::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestTbTestSet*>(&to_msg);
  auto& from = static_cast<const TestTbTestSet&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestTbTestSet)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_data_list()->MergeFrom(
      from._internal_data_list());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestTbTestSet::CopyFrom(const TestTbTestSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestTbTestSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestTbTestSet::IsInitialized() const {
  return true;
}

void TestTbTestSet::InternalSwap(TestTbTestSet* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_list_.InternalSwap(&other->_impl_.data_list_);
}

::google::protobuf::Metadata TestTbTestSet::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[143]);
}
// ===================================================================

class TestTbDetectCsvEncoding::_Internal {
 public:
};

TestTbDetectCsvEncoding::TestTbDetectCsvEncoding(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestTbDetectCsvEncoding)
}
TestTbDetectCsvEncoding::TestTbDetectCsvEncoding(const TestTbDetectCsvEncoding& from) : ::google::protobuf::Message() {
  TestTbDetectCsvEncoding* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_list_){from._impl_.data_list_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:cfg.TestTbDetectCsvEncoding)
}
inline void TestTbDetectCsvEncoding::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.data_list_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
TestTbDetectCsvEncoding::~TestTbDetectCsvEncoding() {
  // @@protoc_insertion_point(destructor:cfg.TestTbDetectCsvEncoding)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestTbDetectCsvEncoding::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_list_.~RepeatedPtrField();
}
void TestTbDetectCsvEncoding::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestTbDetectCsvEncoding::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestTbDetectCsvEncoding)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_list_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestTbDetectCsvEncoding::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> TestTbDetectCsvEncoding::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TestTbDetectCsvEncoding_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .cfg.TestDetectEncoding data_list = 1 [packed = false];
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TestTbDetectCsvEncoding, _impl_.data_list_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .cfg.TestDetectEncoding data_list = 1 [packed = false];
    {PROTOBUF_FIELD_OFFSET(TestTbDetectCsvEncoding, _impl_.data_list_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::TestDetectEncoding>()},
  }}, {{
  }},
};

::uint8_t* TestTbDetectCsvEncoding::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestTbDetectCsvEncoding)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .cfg.TestDetectEncoding data_list = 1 [packed = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_data_list().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestTbDetectCsvEncoding)
  return target;
}

::size_t TestTbDetectCsvEncoding::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestTbDetectCsvEncoding)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cfg.TestDetectEncoding data_list = 1 [packed = false];
  total_size += 1UL * this->_internal_data_list_size();
  for (const auto& msg : this->_internal_data_list()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestTbDetectCsvEncoding::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestTbDetectCsvEncoding::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestTbDetectCsvEncoding::GetClassData() const { return &_class_data_; }


void TestTbDetectCsvEncoding::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestTbDetectCsvEncoding*>(&to_msg);
  auto& from = static_cast<const TestTbDetectCsvEncoding&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestTbDetectCsvEncoding)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_data_list()->MergeFrom(
      from._internal_data_list());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestTbDetectCsvEncoding::CopyFrom(const TestTbDetectCsvEncoding& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestTbDetectCsvEncoding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestTbDetectCsvEncoding::IsInitialized() const {
  return true;
}

void TestTbDetectCsvEncoding::InternalSwap(TestTbDetectCsvEncoding* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_list_.InternalSwap(&other->_impl_.data_list_);
}

::google::protobuf::Metadata TestTbDetectCsvEncoding::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[144]);
}
// ===================================================================

class TestTbItem2::_Internal {
 public:
};

TestTbItem2::TestTbItem2(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestTbItem2)
}
TestTbItem2::TestTbItem2(const TestTbItem2& from) : ::google::protobuf::Message() {
  TestTbItem2* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_list_){from._impl_.data_list_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:cfg.TestTbItem2)
}
inline void TestTbItem2::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.data_list_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
TestTbItem2::~TestTbItem2() {
  // @@protoc_insertion_point(destructor:cfg.TestTbItem2)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestTbItem2::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_list_.~RepeatedPtrField();
}
void TestTbItem2::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestTbItem2::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestTbItem2)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_list_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestTbItem2::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> TestTbItem2::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TestTbItem2_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .cfg.TestItemBase data_list = 1 [packed = false];
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TestTbItem2, _impl_.data_list_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .cfg.TestItemBase data_list = 1 [packed = false];
    {PROTOBUF_FIELD_OFFSET(TestTbItem2, _impl_.data_list_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::TestItemBase>()},
  }}, {{
  }},
};

::uint8_t* TestTbItem2::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestTbItem2)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .cfg.TestItemBase data_list = 1 [packed = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_data_list().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestTbItem2)
  return target;
}

::size_t TestTbItem2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestTbItem2)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cfg.TestItemBase data_list = 1 [packed = false];
  total_size += 1UL * this->_internal_data_list_size();
  for (const auto& msg : this->_internal_data_list()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestTbItem2::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestTbItem2::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestTbItem2::GetClassData() const { return &_class_data_; }


void TestTbItem2::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestTbItem2*>(&to_msg);
  auto& from = static_cast<const TestTbItem2&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestTbItem2)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_data_list()->MergeFrom(
      from._internal_data_list());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestTbItem2::CopyFrom(const TestTbItem2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestTbItem2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestTbItem2::IsInitialized() const {
  return true;
}

void TestTbItem2::InternalSwap(TestTbItem2* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_list_.InternalSwap(&other->_impl_.data_list_);
}

::google::protobuf::Metadata TestTbItem2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[145]);
}
// ===================================================================

class TestTbTestIndex::_Internal {
 public:
};

TestTbTestIndex::TestTbTestIndex(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestTbTestIndex)
}
TestTbTestIndex::TestTbTestIndex(const TestTbTestIndex& from) : ::google::protobuf::Message() {
  TestTbTestIndex* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_list_){from._impl_.data_list_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:cfg.TestTbTestIndex)
}
inline void TestTbTestIndex::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.data_list_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
TestTbTestIndex::~TestTbTestIndex() {
  // @@protoc_insertion_point(destructor:cfg.TestTbTestIndex)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestTbTestIndex::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_list_.~RepeatedPtrField();
}
void TestTbTestIndex::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestTbTestIndex::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestTbTestIndex)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_list_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestTbTestIndex::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> TestTbTestIndex::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TestTbTestIndex_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .cfg.TestTestIndex data_list = 1 [packed = false];
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TestTbTestIndex, _impl_.data_list_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .cfg.TestTestIndex data_list = 1 [packed = false];
    {PROTOBUF_FIELD_OFFSET(TestTbTestIndex, _impl_.data_list_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::TestTestIndex>()},
  }}, {{
  }},
};

::uint8_t* TestTbTestIndex::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestTbTestIndex)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .cfg.TestTestIndex data_list = 1 [packed = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_data_list().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestTbTestIndex)
  return target;
}

::size_t TestTbTestIndex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestTbTestIndex)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cfg.TestTestIndex data_list = 1 [packed = false];
  total_size += 1UL * this->_internal_data_list_size();
  for (const auto& msg : this->_internal_data_list()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestTbTestIndex::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestTbTestIndex::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestTbTestIndex::GetClassData() const { return &_class_data_; }


void TestTbTestIndex::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestTbTestIndex*>(&to_msg);
  auto& from = static_cast<const TestTbTestIndex&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestTbTestIndex)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_data_list()->MergeFrom(
      from._internal_data_list());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestTbTestIndex::CopyFrom(const TestTbTestIndex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestTbTestIndex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestTbTestIndex::IsInitialized() const {
  return true;
}

void TestTbTestIndex::InternalSwap(TestTbTestIndex* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_list_.InternalSwap(&other->_impl_.data_list_);
}

::google::protobuf::Metadata TestTbTestIndex::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[146]);
}
// ===================================================================

class TestTbTestMap::_Internal {
 public:
};

TestTbTestMap::TestTbTestMap(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestTbTestMap)
}
TestTbTestMap::TestTbTestMap(const TestTbTestMap& from) : ::google::protobuf::Message() {
  TestTbTestMap* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_list_){from._impl_.data_list_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:cfg.TestTbTestMap)
}
inline void TestTbTestMap::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.data_list_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
TestTbTestMap::~TestTbTestMap() {
  // @@protoc_insertion_point(destructor:cfg.TestTbTestMap)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestTbTestMap::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_list_.~RepeatedPtrField();
}
void TestTbTestMap::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestTbTestMap::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestTbTestMap)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_list_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestTbTestMap::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> TestTbTestMap::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TestTbTestMap_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .cfg.TestTestMap data_list = 1 [packed = false];
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TestTbTestMap, _impl_.data_list_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .cfg.TestTestMap data_list = 1 [packed = false];
    {PROTOBUF_FIELD_OFFSET(TestTbTestMap, _impl_.data_list_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::TestTestMap>()},
  }}, {{
  }},
};

::uint8_t* TestTbTestMap::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestTbTestMap)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .cfg.TestTestMap data_list = 1 [packed = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_data_list().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestTbTestMap)
  return target;
}

::size_t TestTbTestMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestTbTestMap)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cfg.TestTestMap data_list = 1 [packed = false];
  total_size += 1UL * this->_internal_data_list_size();
  for (const auto& msg : this->_internal_data_list()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestTbTestMap::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestTbTestMap::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestTbTestMap::GetClassData() const { return &_class_data_; }


void TestTbTestMap::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestTbTestMap*>(&to_msg);
  auto& from = static_cast<const TestTbTestMap&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestTbTestMap)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_data_list()->MergeFrom(
      from._internal_data_list());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestTbTestMap::CopyFrom(const TestTbTestMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestTbTestMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestTbTestMap::IsInitialized() const {
  return true;
}

void TestTbTestMap::InternalSwap(TestTbTestMap* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_list_.InternalSwap(&other->_impl_.data_list_);
}

::google::protobuf::Metadata TestTbTestMap::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[147]);
}
// ===================================================================

class TestTbExcelFromJson::_Internal {
 public:
};

TestTbExcelFromJson::TestTbExcelFromJson(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestTbExcelFromJson)
}
TestTbExcelFromJson::TestTbExcelFromJson(const TestTbExcelFromJson& from) : ::google::protobuf::Message() {
  TestTbExcelFromJson* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_list_){from._impl_.data_list_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:cfg.TestTbExcelFromJson)
}
inline void TestTbExcelFromJson::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.data_list_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
TestTbExcelFromJson::~TestTbExcelFromJson() {
  // @@protoc_insertion_point(destructor:cfg.TestTbExcelFromJson)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestTbExcelFromJson::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_list_.~RepeatedPtrField();
}
void TestTbExcelFromJson::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestTbExcelFromJson::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestTbExcelFromJson)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_list_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestTbExcelFromJson::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> TestTbExcelFromJson::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TestTbExcelFromJson_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .cfg.TestExcelFromJson data_list = 1 [packed = false];
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TestTbExcelFromJson, _impl_.data_list_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .cfg.TestExcelFromJson data_list = 1 [packed = false];
    {PROTOBUF_FIELD_OFFSET(TestTbExcelFromJson, _impl_.data_list_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::TestExcelFromJson>()},
  }}, {{
  }},
};

::uint8_t* TestTbExcelFromJson::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestTbExcelFromJson)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .cfg.TestExcelFromJson data_list = 1 [packed = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_data_list().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestTbExcelFromJson)
  return target;
}

::size_t TestTbExcelFromJson::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestTbExcelFromJson)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cfg.TestExcelFromJson data_list = 1 [packed = false];
  total_size += 1UL * this->_internal_data_list_size();
  for (const auto& msg : this->_internal_data_list()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestTbExcelFromJson::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestTbExcelFromJson::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestTbExcelFromJson::GetClassData() const { return &_class_data_; }


void TestTbExcelFromJson::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestTbExcelFromJson*>(&to_msg);
  auto& from = static_cast<const TestTbExcelFromJson&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestTbExcelFromJson)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_data_list()->MergeFrom(
      from._internal_data_list());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestTbExcelFromJson::CopyFrom(const TestTbExcelFromJson& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestTbExcelFromJson)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestTbExcelFromJson::IsInitialized() const {
  return true;
}

void TestTbExcelFromJson::InternalSwap(TestTbExcelFromJson* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_list_.InternalSwap(&other->_impl_.data_list_);
}

::google::protobuf::Metadata TestTbExcelFromJson::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[148]);
}
// ===================================================================

class TestTbCompositeJsonTable1::_Internal {
 public:
};

TestTbCompositeJsonTable1::TestTbCompositeJsonTable1(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestTbCompositeJsonTable1)
}
TestTbCompositeJsonTable1::TestTbCompositeJsonTable1(const TestTbCompositeJsonTable1& from) : ::google::protobuf::Message() {
  TestTbCompositeJsonTable1* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_list_){from._impl_.data_list_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:cfg.TestTbCompositeJsonTable1)
}
inline void TestTbCompositeJsonTable1::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.data_list_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
TestTbCompositeJsonTable1::~TestTbCompositeJsonTable1() {
  // @@protoc_insertion_point(destructor:cfg.TestTbCompositeJsonTable1)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestTbCompositeJsonTable1::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_list_.~RepeatedPtrField();
}
void TestTbCompositeJsonTable1::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestTbCompositeJsonTable1::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestTbCompositeJsonTable1)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_list_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestTbCompositeJsonTable1::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> TestTbCompositeJsonTable1::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TestTbCompositeJsonTable1_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .cfg.TestCompositeJsonTable1 data_list = 1 [packed = false];
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TestTbCompositeJsonTable1, _impl_.data_list_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .cfg.TestCompositeJsonTable1 data_list = 1 [packed = false];
    {PROTOBUF_FIELD_OFFSET(TestTbCompositeJsonTable1, _impl_.data_list_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::TestCompositeJsonTable1>()},
  }}, {{
  }},
};

::uint8_t* TestTbCompositeJsonTable1::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestTbCompositeJsonTable1)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .cfg.TestCompositeJsonTable1 data_list = 1 [packed = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_data_list().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestTbCompositeJsonTable1)
  return target;
}

::size_t TestTbCompositeJsonTable1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestTbCompositeJsonTable1)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cfg.TestCompositeJsonTable1 data_list = 1 [packed = false];
  total_size += 1UL * this->_internal_data_list_size();
  for (const auto& msg : this->_internal_data_list()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestTbCompositeJsonTable1::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestTbCompositeJsonTable1::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestTbCompositeJsonTable1::GetClassData() const { return &_class_data_; }


void TestTbCompositeJsonTable1::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestTbCompositeJsonTable1*>(&to_msg);
  auto& from = static_cast<const TestTbCompositeJsonTable1&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestTbCompositeJsonTable1)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_data_list()->MergeFrom(
      from._internal_data_list());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestTbCompositeJsonTable1::CopyFrom(const TestTbCompositeJsonTable1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestTbCompositeJsonTable1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestTbCompositeJsonTable1::IsInitialized() const {
  return true;
}

void TestTbCompositeJsonTable1::InternalSwap(TestTbCompositeJsonTable1* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_list_.InternalSwap(&other->_impl_.data_list_);
}

::google::protobuf::Metadata TestTbCompositeJsonTable1::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[149]);
}
// ===================================================================

class TestTbCompositeJsonTable2::_Internal {
 public:
};

TestTbCompositeJsonTable2::TestTbCompositeJsonTable2(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestTbCompositeJsonTable2)
}
TestTbCompositeJsonTable2::TestTbCompositeJsonTable2(const TestTbCompositeJsonTable2& from) : ::google::protobuf::Message() {
  TestTbCompositeJsonTable2* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_list_){from._impl_.data_list_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:cfg.TestTbCompositeJsonTable2)
}
inline void TestTbCompositeJsonTable2::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.data_list_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
TestTbCompositeJsonTable2::~TestTbCompositeJsonTable2() {
  // @@protoc_insertion_point(destructor:cfg.TestTbCompositeJsonTable2)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestTbCompositeJsonTable2::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_list_.~RepeatedPtrField();
}
void TestTbCompositeJsonTable2::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestTbCompositeJsonTable2::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestTbCompositeJsonTable2)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_list_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestTbCompositeJsonTable2::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> TestTbCompositeJsonTable2::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TestTbCompositeJsonTable2_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .cfg.TestCompositeJsonTable2 data_list = 1 [packed = false];
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TestTbCompositeJsonTable2, _impl_.data_list_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .cfg.TestCompositeJsonTable2 data_list = 1 [packed = false];
    {PROTOBUF_FIELD_OFFSET(TestTbCompositeJsonTable2, _impl_.data_list_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::TestCompositeJsonTable2>()},
  }}, {{
  }},
};

::uint8_t* TestTbCompositeJsonTable2::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestTbCompositeJsonTable2)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .cfg.TestCompositeJsonTable2 data_list = 1 [packed = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_data_list().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestTbCompositeJsonTable2)
  return target;
}

::size_t TestTbCompositeJsonTable2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestTbCompositeJsonTable2)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cfg.TestCompositeJsonTable2 data_list = 1 [packed = false];
  total_size += 1UL * this->_internal_data_list_size();
  for (const auto& msg : this->_internal_data_list()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestTbCompositeJsonTable2::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestTbCompositeJsonTable2::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestTbCompositeJsonTable2::GetClassData() const { return &_class_data_; }


void TestTbCompositeJsonTable2::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestTbCompositeJsonTable2*>(&to_msg);
  auto& from = static_cast<const TestTbCompositeJsonTable2&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestTbCompositeJsonTable2)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_data_list()->MergeFrom(
      from._internal_data_list());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestTbCompositeJsonTable2::CopyFrom(const TestTbCompositeJsonTable2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestTbCompositeJsonTable2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestTbCompositeJsonTable2::IsInitialized() const {
  return true;
}

void TestTbCompositeJsonTable2::InternalSwap(TestTbCompositeJsonTable2* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_list_.InternalSwap(&other->_impl_.data_list_);
}

::google::protobuf::Metadata TestTbCompositeJsonTable2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[150]);
}
// ===================================================================

class TestTbCompositeJsonTable3::_Internal {
 public:
};

TestTbCompositeJsonTable3::TestTbCompositeJsonTable3(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestTbCompositeJsonTable3)
}
TestTbCompositeJsonTable3::TestTbCompositeJsonTable3(const TestTbCompositeJsonTable3& from) : ::google::protobuf::Message() {
  TestTbCompositeJsonTable3* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_list_){from._impl_.data_list_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:cfg.TestTbCompositeJsonTable3)
}
inline void TestTbCompositeJsonTable3::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.data_list_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
TestTbCompositeJsonTable3::~TestTbCompositeJsonTable3() {
  // @@protoc_insertion_point(destructor:cfg.TestTbCompositeJsonTable3)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestTbCompositeJsonTable3::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_list_.~RepeatedPtrField();
}
void TestTbCompositeJsonTable3::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestTbCompositeJsonTable3::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestTbCompositeJsonTable3)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_list_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestTbCompositeJsonTable3::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> TestTbCompositeJsonTable3::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TestTbCompositeJsonTable3_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .cfg.TestCompositeJsonTable3 data_list = 1 [packed = false];
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TestTbCompositeJsonTable3, _impl_.data_list_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .cfg.TestCompositeJsonTable3 data_list = 1 [packed = false];
    {PROTOBUF_FIELD_OFFSET(TestTbCompositeJsonTable3, _impl_.data_list_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::TestCompositeJsonTable3>()},
  }}, {{
  }},
};

::uint8_t* TestTbCompositeJsonTable3::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestTbCompositeJsonTable3)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .cfg.TestCompositeJsonTable3 data_list = 1 [packed = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_data_list().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestTbCompositeJsonTable3)
  return target;
}

::size_t TestTbCompositeJsonTable3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestTbCompositeJsonTable3)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cfg.TestCompositeJsonTable3 data_list = 1 [packed = false];
  total_size += 1UL * this->_internal_data_list_size();
  for (const auto& msg : this->_internal_data_list()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestTbCompositeJsonTable3::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestTbCompositeJsonTable3::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestTbCompositeJsonTable3::GetClassData() const { return &_class_data_; }


void TestTbCompositeJsonTable3::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestTbCompositeJsonTable3*>(&to_msg);
  auto& from = static_cast<const TestTbCompositeJsonTable3&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestTbCompositeJsonTable3)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_data_list()->MergeFrom(
      from._internal_data_list());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestTbCompositeJsonTable3::CopyFrom(const TestTbCompositeJsonTable3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestTbCompositeJsonTable3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestTbCompositeJsonTable3::IsInitialized() const {
  return true;
}

void TestTbCompositeJsonTable3::InternalSwap(TestTbCompositeJsonTable3* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_list_.InternalSwap(&other->_impl_.data_list_);
}

::google::protobuf::Metadata TestTbCompositeJsonTable3::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[151]);
}
// ===================================================================

class TestTbExcelFromJsonMultiRow::_Internal {
 public:
};

TestTbExcelFromJsonMultiRow::TestTbExcelFromJsonMultiRow(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestTbExcelFromJsonMultiRow)
}
TestTbExcelFromJsonMultiRow::TestTbExcelFromJsonMultiRow(const TestTbExcelFromJsonMultiRow& from) : ::google::protobuf::Message() {
  TestTbExcelFromJsonMultiRow* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_list_){from._impl_.data_list_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:cfg.TestTbExcelFromJsonMultiRow)
}
inline void TestTbExcelFromJsonMultiRow::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.data_list_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
TestTbExcelFromJsonMultiRow::~TestTbExcelFromJsonMultiRow() {
  // @@protoc_insertion_point(destructor:cfg.TestTbExcelFromJsonMultiRow)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestTbExcelFromJsonMultiRow::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_list_.~RepeatedPtrField();
}
void TestTbExcelFromJsonMultiRow::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestTbExcelFromJsonMultiRow::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestTbExcelFromJsonMultiRow)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_list_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestTbExcelFromJsonMultiRow::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> TestTbExcelFromJsonMultiRow::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TestTbExcelFromJsonMultiRow_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .cfg.TestExcelFromJsonMultiRow data_list = 1 [packed = false];
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TestTbExcelFromJsonMultiRow, _impl_.data_list_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .cfg.TestExcelFromJsonMultiRow data_list = 1 [packed = false];
    {PROTOBUF_FIELD_OFFSET(TestTbExcelFromJsonMultiRow, _impl_.data_list_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::TestExcelFromJsonMultiRow>()},
  }}, {{
  }},
};

::uint8_t* TestTbExcelFromJsonMultiRow::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestTbExcelFromJsonMultiRow)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .cfg.TestExcelFromJsonMultiRow data_list = 1 [packed = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_data_list().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestTbExcelFromJsonMultiRow)
  return target;
}

::size_t TestTbExcelFromJsonMultiRow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestTbExcelFromJsonMultiRow)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cfg.TestExcelFromJsonMultiRow data_list = 1 [packed = false];
  total_size += 1UL * this->_internal_data_list_size();
  for (const auto& msg : this->_internal_data_list()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestTbExcelFromJsonMultiRow::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestTbExcelFromJsonMultiRow::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestTbExcelFromJsonMultiRow::GetClassData() const { return &_class_data_; }


void TestTbExcelFromJsonMultiRow::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestTbExcelFromJsonMultiRow*>(&to_msg);
  auto& from = static_cast<const TestTbExcelFromJsonMultiRow&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestTbExcelFromJsonMultiRow)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_data_list()->MergeFrom(
      from._internal_data_list());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestTbExcelFromJsonMultiRow::CopyFrom(const TestTbExcelFromJsonMultiRow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestTbExcelFromJsonMultiRow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestTbExcelFromJsonMultiRow::IsInitialized() const {
  return true;
}

void TestTbExcelFromJsonMultiRow::InternalSwap(TestTbExcelFromJsonMultiRow* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_list_.InternalSwap(&other->_impl_.data_list_);
}

::google::protobuf::Metadata TestTbExcelFromJsonMultiRow::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[152]);
}
// ===================================================================

class TestTbTestScriptableObject::_Internal {
 public:
};

TestTbTestScriptableObject::TestTbTestScriptableObject(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestTbTestScriptableObject)
}
TestTbTestScriptableObject::TestTbTestScriptableObject(const TestTbTestScriptableObject& from) : ::google::protobuf::Message() {
  TestTbTestScriptableObject* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_list_){from._impl_.data_list_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:cfg.TestTbTestScriptableObject)
}
inline void TestTbTestScriptableObject::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.data_list_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
TestTbTestScriptableObject::~TestTbTestScriptableObject() {
  // @@protoc_insertion_point(destructor:cfg.TestTbTestScriptableObject)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestTbTestScriptableObject::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_list_.~RepeatedPtrField();
}
void TestTbTestScriptableObject::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestTbTestScriptableObject::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestTbTestScriptableObject)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_list_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestTbTestScriptableObject::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> TestTbTestScriptableObject::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TestTbTestScriptableObject_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .cfg.TestTestScriptableObject data_list = 1 [packed = false];
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TestTbTestScriptableObject, _impl_.data_list_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .cfg.TestTestScriptableObject data_list = 1 [packed = false];
    {PROTOBUF_FIELD_OFFSET(TestTbTestScriptableObject, _impl_.data_list_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::TestTestScriptableObject>()},
  }}, {{
  }},
};

::uint8_t* TestTbTestScriptableObject::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestTbTestScriptableObject)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .cfg.TestTestScriptableObject data_list = 1 [packed = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_data_list().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestTbTestScriptableObject)
  return target;
}

::size_t TestTbTestScriptableObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestTbTestScriptableObject)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cfg.TestTestScriptableObject data_list = 1 [packed = false];
  total_size += 1UL * this->_internal_data_list_size();
  for (const auto& msg : this->_internal_data_list()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestTbTestScriptableObject::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestTbTestScriptableObject::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestTbTestScriptableObject::GetClassData() const { return &_class_data_; }


void TestTbTestScriptableObject::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestTbTestScriptableObject*>(&to_msg);
  auto& from = static_cast<const TestTbTestScriptableObject&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestTbTestScriptableObject)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_data_list()->MergeFrom(
      from._internal_data_list());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestTbTestScriptableObject::CopyFrom(const TestTbTestScriptableObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestTbTestScriptableObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestTbTestScriptableObject::IsInitialized() const {
  return true;
}

void TestTbTestScriptableObject::InternalSwap(TestTbTestScriptableObject* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_list_.InternalSwap(&other->_impl_.data_list_);
}

::google::protobuf::Metadata TestTbTestScriptableObject::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[153]);
}
// ===================================================================

class TestTbTestMapper::_Internal {
 public:
};

TestTbTestMapper::TestTbTestMapper(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestTbTestMapper)
}
TestTbTestMapper::TestTbTestMapper(const TestTbTestMapper& from) : ::google::protobuf::Message() {
  TestTbTestMapper* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_list_){from._impl_.data_list_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:cfg.TestTbTestMapper)
}
inline void TestTbTestMapper::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.data_list_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
TestTbTestMapper::~TestTbTestMapper() {
  // @@protoc_insertion_point(destructor:cfg.TestTbTestMapper)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestTbTestMapper::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_list_.~RepeatedPtrField();
}
void TestTbTestMapper::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestTbTestMapper::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestTbTestMapper)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_list_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestTbTestMapper::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> TestTbTestMapper::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TestTbTestMapper_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .cfg.TestTestMapper data_list = 1 [packed = false];
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TestTbTestMapper, _impl_.data_list_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .cfg.TestTestMapper data_list = 1 [packed = false];
    {PROTOBUF_FIELD_OFFSET(TestTbTestMapper, _impl_.data_list_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::TestTestMapper>()},
  }}, {{
  }},
};

::uint8_t* TestTbTestMapper::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestTbTestMapper)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .cfg.TestTestMapper data_list = 1 [packed = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_data_list().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestTbTestMapper)
  return target;
}

::size_t TestTbTestMapper::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestTbTestMapper)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cfg.TestTestMapper data_list = 1 [packed = false];
  total_size += 1UL * this->_internal_data_list_size();
  for (const auto& msg : this->_internal_data_list()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestTbTestMapper::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestTbTestMapper::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestTbTestMapper::GetClassData() const { return &_class_data_; }


void TestTbTestMapper::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestTbTestMapper*>(&to_msg);
  auto& from = static_cast<const TestTbTestMapper&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestTbTestMapper)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_data_list()->MergeFrom(
      from._internal_data_list());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestTbTestMapper::CopyFrom(const TestTbTestMapper& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestTbTestMapper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestTbTestMapper::IsInitialized() const {
  return true;
}

void TestTbTestMapper::InternalSwap(TestTbTestMapper* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_list_.InternalSwap(&other->_impl_.data_list_);
}

::google::protobuf::Metadata TestTbTestMapper::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[154]);
}
// ===================================================================

class TestTbDefineFromExcel2::_Internal {
 public:
};

TestTbDefineFromExcel2::TestTbDefineFromExcel2(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cfg.TestTbDefineFromExcel2)
}
TestTbDefineFromExcel2::TestTbDefineFromExcel2(const TestTbDefineFromExcel2& from) : ::google::protobuf::Message() {
  TestTbDefineFromExcel2* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_list_){from._impl_.data_list_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:cfg.TestTbDefineFromExcel2)
}
inline void TestTbDefineFromExcel2::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.data_list_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
TestTbDefineFromExcel2::~TestTbDefineFromExcel2() {
  // @@protoc_insertion_point(destructor:cfg.TestTbDefineFromExcel2)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestTbDefineFromExcel2::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_list_.~RepeatedPtrField();
}
void TestTbDefineFromExcel2::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestTbDefineFromExcel2::Clear() {
// @@protoc_insertion_point(message_clear_start:cfg.TestTbDefineFromExcel2)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_list_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestTbDefineFromExcel2::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> TestTbDefineFromExcel2::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TestTbDefineFromExcel2_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .cfg.DefineFromExcel2 data_list = 1 [packed = false];
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TestTbDefineFromExcel2, _impl_.data_list_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .cfg.DefineFromExcel2 data_list = 1 [packed = false];
    {PROTOBUF_FIELD_OFFSET(TestTbDefineFromExcel2, _impl_.data_list_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cfg::DefineFromExcel2>()},
  }}, {{
  }},
};

::uint8_t* TestTbDefineFromExcel2::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cfg.TestTbDefineFromExcel2)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .cfg.DefineFromExcel2 data_list = 1 [packed = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_data_list().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cfg.TestTbDefineFromExcel2)
  return target;
}

::size_t TestTbDefineFromExcel2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cfg.TestTbDefineFromExcel2)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cfg.DefineFromExcel2 data_list = 1 [packed = false];
  total_size += 1UL * this->_internal_data_list_size();
  for (const auto& msg : this->_internal_data_list()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestTbDefineFromExcel2::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestTbDefineFromExcel2::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestTbDefineFromExcel2::GetClassData() const { return &_class_data_; }


void TestTbDefineFromExcel2::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestTbDefineFromExcel2*>(&to_msg);
  auto& from = static_cast<const TestTbDefineFromExcel2&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cfg.TestTbDefineFromExcel2)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_data_list()->MergeFrom(
      from._internal_data_list());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestTbDefineFromExcel2::CopyFrom(const TestTbDefineFromExcel2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cfg.TestTbDefineFromExcel2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestTbDefineFromExcel2::IsInitialized() const {
  return true;
}

void TestTbDefineFromExcel2::InternalSwap(TestTbDefineFromExcel2* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_list_.InternalSwap(&other->_impl_.data_list_);
}

::google::protobuf::Metadata TestTbDefineFromExcel2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schema_2eproto_getter, &descriptor_table_schema_2eproto_once,
      file_level_metadata_schema_2eproto[155]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace cfg
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
