//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;



namespace cfg.test
{

public sealed partial class TestSep :  Bright.Config.BeanBase 
{
    public TestSep(ByteBuf _buf) 
    {
        Id = _buf.ReadInt();
        X1_l10n_key = _buf.ReadString(); X1 = _buf.ReadString();
        X2 = test.SepBean1.DeserializeSepBean1(_buf);
        X3 = test.SepVector.DeserializeSepVector(_buf);
        {int n = System.Math.Min(_buf.ReadSize(), _buf.Size);X4 = new System.Collections.Generic.List<test.SepVector>(n);for(var i = 0 ; i < n ; i++) { test.SepVector _e;  _e = test.SepVector.DeserializeSepVector(_buf); X4.Add(_e);}}
        {int n = System.Math.Min(_buf.ReadSize(), _buf.Size);X5 = new System.Collections.Generic.List<test.SepBean1>(n);for(var i = 0 ; i < n ; i++) { test.SepBean1 _e;  _e = test.SepBean1.DeserializeSepBean1(_buf); X5.Add(_e);}}
        {int n = System.Math.Min(_buf.ReadSize(), _buf.Size);X6 = new System.Collections.Generic.List<test.SepBean1>(n);for(var i = 0 ; i < n ; i++) { test.SepBean1 _e;  _e = test.SepBean1.DeserializeSepBean1(_buf); X6.Add(_e);}}
        PostInit();
    }

    public static TestSep DeserializeTestSep(ByteBuf _buf)
    {
        return new test.TestSep(_buf);
    }

    public int Id { get; private set; }
    public string X1 { get; private set; }
    public string X1_l10n_key { get; }
    public test.SepBean1 X2 { get; private set; }
    /// <summary>
    /// SepVector已经定义了sep=,属性
    /// </summary>
    public test.SepVector X3 { get; private set; }
    /// <summary>
    /// 用;来分割数据，然后顺序读入SepVector
    /// </summary>
    public System.Collections.Generic.List<test.SepVector> X4 { get; private set; }
    /// <summary>
    /// 用,分割数据，然后顺序读入
    /// </summary>
    public System.Collections.Generic.List<test.SepBean1> X5 { get; private set; }
    /// <summary>
    /// 用;分割数据，然后再将每个数据用,分割，读入
    /// </summary>
    public System.Collections.Generic.List<test.SepBean1> X6 { get; private set; }

    public const int __ID__ = -543221520;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        X2?.Resolve(_tables);
        X3?.Resolve(_tables);
        foreach(var _e in X4) { _e?.Resolve(_tables); }
        foreach(var _e in X5) { _e?.Resolve(_tables); }
        foreach(var _e in X6) { _e?.Resolve(_tables); }
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
        X1 = translator(X1_l10n_key, X1);
        X2?.TranslateText(translator);
        X3?.TranslateText(translator);
        foreach(var _e in X4) { _e?.TranslateText(translator); }
        foreach(var _e in X5) { _e?.TranslateText(translator); }
        foreach(var _e in X6) { _e?.TranslateText(translator); }
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "X1:" + X1 + ","
        + "X2:" + X2 + ","
        + "X3:" + X3 + ","
        + "X4:" + Bright.Common.StringUtil.CollectionToString(X4) + ","
        + "X5:" + Bright.Common.StringUtil.CollectionToString(X5) + ","
        + "X6:" + Bright.Common.StringUtil.CollectionToString(X6) + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}

}
