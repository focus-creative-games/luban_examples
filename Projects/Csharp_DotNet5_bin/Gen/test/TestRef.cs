//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;



namespace cfg.test
{

public sealed partial class TestRef :  Bright.Config.BeanBase 
{
    public TestRef(ByteBuf _buf) 
    {
        Id = _buf.ReadInt();
        X1 = _buf.ReadInt();
        X12 = _buf.ReadInt();
        X2 = _buf.ReadInt();
        X3 = _buf.ReadInt();
        {int n = System.Math.Min(_buf.ReadSize(), _buf.Size);A1 = new int[n];for(var i = 0 ; i < n ; i++) { int _e;_e = _buf.ReadInt(); A1[i] = _e;}}
        {int n = System.Math.Min(_buf.ReadSize(), _buf.Size);A2 = new int[n];for(var i = 0 ; i < n ; i++) { int _e;_e = _buf.ReadInt(); A2[i] = _e;}}
        {int n = System.Math.Min(_buf.ReadSize(), _buf.Size);B1 = new System.Collections.Generic.List<int>(n);for(var i = 0 ; i < n ; i++) { int _e;  _e = _buf.ReadInt(); B1.Add(_e);}}
        {int n = System.Math.Min(_buf.ReadSize(), _buf.Size);B2 = new System.Collections.Generic.List<int>(n);for(var i = 0 ; i < n ; i++) { int _e;  _e = _buf.ReadInt(); B2.Add(_e);}}
        {int n = System.Math.Min(_buf.ReadSize(), _buf.Size);C1 = new System.Collections.Generic.HashSet<int>(/*n * 3 / 2*/);for(var i = 0 ; i < n ; i++) { int _e;  _e = _buf.ReadInt(); C1.Add(_e);}}
        {int n = System.Math.Min(_buf.ReadSize(), _buf.Size);C2 = new System.Collections.Generic.HashSet<int>(/*n * 3 / 2*/);for(var i = 0 ; i < n ; i++) { int _e;  _e = _buf.ReadInt(); C2.Add(_e);}}
        {int n = System.Math.Min(_buf.ReadSize(), _buf.Size);D1 = new System.Collections.Generic.Dictionary<int, int>(n * 3 / 2);for(var i = 0 ; i < n ; i++) { int _k;  _k = _buf.ReadInt(); int _v;  _v = _buf.ReadInt();     D1.Add(_k, _v);}}
        {int n = System.Math.Min(_buf.ReadSize(), _buf.Size);D2 = new System.Collections.Generic.Dictionary<int, int>(n * 3 / 2);for(var i = 0 ; i < n ; i++) { int _k;  _k = _buf.ReadInt(); int _v;  _v = _buf.ReadInt();     D2.Add(_k, _v);}}
        E1 = _buf.ReadInt();
        E2 = _buf.ReadLong();
        E3 = _buf.ReadString();
        F1 = _buf.ReadInt();
        F2 = _buf.ReadLong();
        F3 = _buf.ReadString();
        PostInit();
    }

    public static TestRef DeserializeTestRef(ByteBuf _buf)
    {
        return new test.TestRef(_buf);
    }

    public int Id { get; private set; }
    public int X1 { get; private set; }
    public test.TestBeRef X1_Ref { get; private set; }
    public int X12 { get; private set; }
    public int X2 { get; private set; }
    public int X3 { get; private set; }
    public int[] A1 { get; private set; }
    public test.TestBeRef[] A1_Ref { get; private set; }
    public int[] A2 { get; private set; }
    public test.TestBeRef[] A2_Ref { get; private set; }
    public System.Collections.Generic.List<int> B1 { get; private set; }
    public System.Collections.Generic.List<test.TestBeRef> B1_Ref { get; private set; }
    public System.Collections.Generic.List<int> B2 { get; private set; }
    public System.Collections.Generic.List<test.TestBeRef> B2_Ref { get; private set; }
    public System.Collections.Generic.HashSet<int> C1 { get; private set; }
    public System.Collections.Generic.HashSet<test.TestBeRef> C1_Ref { get; private set; }
    public System.Collections.Generic.HashSet<int> C2 { get; private set; }
    public System.Collections.Generic.HashSet<test.TestBeRef> C2_Ref { get; private set; }
    public System.Collections.Generic.Dictionary<int, int> D1 { get; private set; }
    public System.Collections.Generic.Dictionary<int, test.TestBeRef> D1_Ref { get; private set; }
    public System.Collections.Generic.Dictionary<int, int> D2 { get; private set; }
    public System.Collections.Generic.Dictionary<int, test.TestBeRef> D2_Ref { get; private set; }
    public int E1 { get; private set; }
    public long E2 { get; private set; }
    public string E3 { get; private set; }
    public int F1 { get; private set; }
    public long F2 { get; private set; }
    public string F3 { get; private set; }

    public const int __ID__ = -543222491;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        this.X1_Ref = (_tables["test.TbTestBeRef"] as test.TbTestBeRef).GetOrDefault(X1);
        { int __n = A1.Length; test.TbTestBeRef __table = (test.TbTestBeRef)_tables["test.TbTestBeRef"]; this.A1_Ref = new test.TestBeRef[__n]; for(int i = 0 ; i < __n ; i++) { this.A1_Ref[i] =  __table.GetOrDefault(A1[i]); } }
        { int __n = A2.Length; test.TbTestBeRef __table = (test.TbTestBeRef)_tables["test.TbTestBeRef"]; this.A2_Ref = new test.TestBeRef[__n]; for(int i = 0 ; i < __n ; i++) { this.A2_Ref[i] =  __table.GetOrDefault(A2[i]); } }
        { test.TbTestBeRef __table = (test.TbTestBeRef)_tables["test.TbTestBeRef"]; this.B1_Ref = new System.Collections.Generic.List<test.TestBeRef>(); foreach(var __e in B1) { this.B1_Ref.Add(__table.GetOrDefault(__e)); } }
        { test.TbTestBeRef __table = (test.TbTestBeRef)_tables["test.TbTestBeRef"]; this.B2_Ref = new System.Collections.Generic.List<test.TestBeRef>(); foreach(var __e in B2) { this.B2_Ref.Add(__table.GetOrDefault(__e)); } }
        { test.TbTestBeRef __table = (test.TbTestBeRef)_tables["test.TbTestBeRef"]; this.C1_Ref = new System.Collections.Generic.HashSet<test.TestBeRef>(); foreach(var __e in C1) { this.C1_Ref.Add(__table.GetOrDefault(__e)); } }
        { test.TbTestBeRef __table = (test.TbTestBeRef)_tables["test.TbTestBeRef"]; this.C2_Ref = new System.Collections.Generic.HashSet<test.TestBeRef>(); foreach(var __e in C2) { this.C2_Ref.Add(__table.GetOrDefault(__e)); } }
        { test.TbTestBeRef __table = (test.TbTestBeRef)_tables["test.TbTestBeRef"]; this.D1_Ref = new System.Collections.Generic.Dictionary<int, test.TestBeRef>(); foreach(var __e in D1) { this.D1_Ref.Add(__e.Key, __table.GetOrDefault(__e.Value)); } }
        { test.TbTestBeRef __table = (test.TbTestBeRef)_tables["test.TbTestBeRef"]; this.D2_Ref = new System.Collections.Generic.Dictionary<int, test.TestBeRef>(); foreach(var __e in D2) { this.D2_Ref.Add(__e.Key, __table.GetOrDefault(__e.Value)); } }
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "X1:" + X1 + ","
        + "X12:" + X12 + ","
        + "X2:" + X2 + ","
        + "X3:" + X3 + ","
        + "A1:" + Bright.Common.StringUtil.CollectionToString(A1) + ","
        + "A2:" + Bright.Common.StringUtil.CollectionToString(A2) + ","
        + "B1:" + Bright.Common.StringUtil.CollectionToString(B1) + ","
        + "B2:" + Bright.Common.StringUtil.CollectionToString(B2) + ","
        + "C1:" + Bright.Common.StringUtil.CollectionToString(C1) + ","
        + "C2:" + Bright.Common.StringUtil.CollectionToString(C2) + ","
        + "D1:" + Bright.Common.StringUtil.CollectionToString(D1) + ","
        + "D2:" + Bright.Common.StringUtil.CollectionToString(D2) + ","
        + "E1:" + E1 + ","
        + "E2:" + E2 + ","
        + "E3:" + E3 + ","
        + "F1:" + F1 + ","
        + "F2:" + F2 + ","
        + "F3:" + F3 + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}

}
