//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;



namespace cfg.item
{

/// <summary>
/// 道具
/// </summary>
public sealed partial class Item :  Bright.Config.BeanBase 
{
    public Item(ByteBuf _buf) 
    {
        Id = _buf.ReadInt();
        Name = _buf.ReadString();
        MajorType = (item.EMajorType)_buf.ReadInt();
        MinorType = (item.EMinorType)_buf.ReadInt();
        MaxPileNum = _buf.ReadInt();
        Quality = (item.EItemQuality)_buf.ReadInt();
        Icon = _buf.ReadString();
        IconBackgroud = _buf.ReadString();
        IconMask = _buf.ReadString();
        Desc = _buf.ReadString();
        ShowOrder = _buf.ReadInt();
        Quantifier = _buf.ReadString();
        ShowInBag = _buf.ReadBool();
        MinShowLevel = _buf.ReadInt();
        BatchUsable = _buf.ReadBool();
        ProgressTimeWhenUse = _buf.ReadFloat();
        ShowHintWhenUse = _buf.ReadBool();
        Droppable = _buf.ReadBool();
        if(_buf.ReadBool()){ Price = _buf.ReadInt(); } else { Price = null; }
        UseType = (item.EUseType)_buf.ReadInt();
        if(_buf.ReadBool()){ LevelUpId = _buf.ReadInt(); } else { LevelUpId = null; }
        PostInit();
    }

    public static Item DeserializeItem(ByteBuf _buf)
    {
        return new item.Item(_buf);
    }

    /// <summary>
    /// 道具id
    /// </summary>
    public int Id { get; private set; }
    public string Name { get; private set; }
    public item.EMajorType MajorType { get; private set; }
    public item.EMinorType MinorType { get; private set; }
    public int MaxPileNum { get; private set; }
    public item.EItemQuality Quality { get; private set; }
    public string Icon { get; private set; }
    public string IconBackgroud { get; private set; }
    public string IconMask { get; private set; }
    public string Desc { get; private set; }
    public int ShowOrder { get; private set; }
    public string Quantifier { get; private set; }
    public bool ShowInBag { get; private set; }
    public int MinShowLevel { get; private set; }
    public bool BatchUsable { get; private set; }
    public float ProgressTimeWhenUse { get; private set; }
    public bool ShowHintWhenUse { get; private set; }
    public bool Droppable { get; private set; }
    public int? Price { get; private set; }
    public item.EUseType UseType { get; private set; }
    public int? LevelUpId { get; private set; }

    public const int __ID__ = 2107285806;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "Name:" + Name + ","
        + "MajorType:" + MajorType + ","
        + "MinorType:" + MinorType + ","
        + "MaxPileNum:" + MaxPileNum + ","
        + "Quality:" + Quality + ","
        + "Icon:" + Icon + ","
        + "IconBackgroud:" + IconBackgroud + ","
        + "IconMask:" + IconMask + ","
        + "Desc:" + Desc + ","
        + "ShowOrder:" + ShowOrder + ","
        + "Quantifier:" + Quantifier + ","
        + "ShowInBag:" + ShowInBag + ","
        + "MinShowLevel:" + MinShowLevel + ","
        + "BatchUsable:" + BatchUsable + ","
        + "ProgressTimeWhenUse:" + ProgressTimeWhenUse + ","
        + "ShowHintWhenUse:" + ShowHintWhenUse + ","
        + "Droppable:" + Droppable + ","
        + "Price:" + Price + ","
        + "UseType:" + UseType + ","
        + "LevelUpId:" + LevelUpId + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}

}
