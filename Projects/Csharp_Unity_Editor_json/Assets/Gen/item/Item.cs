//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace editor.cfg.item
{

/// <summary>
/// 道具
/// </summary>
public sealed partial class Item :  Bright.Config.EditorBeanBase 
{
    public Item()
    {
            Name = "";
            MajorType = item.EMajorType.CURRENCY;
            MinorType = item.EMinorType.DIAMOND;
            Quality = item.EItemQuality.WHITE;
            Icon = "";
            IconBackgroud = "";
            IconMask = "";
            Desc = "";
            Quantifier = "";
            UseType = item.EUseType.MANUAL;
    }

    public override void LoadJson(SimpleJSON.JSONObject _json)
    {
        { 
            var _fieldJson = _json["id"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  Id = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["name"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsString) { throw new SerializationException(); }  Name = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["major_type"];
            if (_fieldJson != null)
            {
                if(_fieldJson.IsString) { MajorType = (item.EMajorType)System.Enum.Parse(typeof(item.EMajorType), _fieldJson); } else if(_fieldJson.IsNumber) { MajorType = (item.EMajorType)(int)_fieldJson; } else { throw new SerializationException(); }  
            }
        }
        
        { 
            var _fieldJson = _json["minor_type"];
            if (_fieldJson != null)
            {
                if(_fieldJson.IsString) { MinorType = (item.EMinorType)System.Enum.Parse(typeof(item.EMinorType), _fieldJson); } else if(_fieldJson.IsNumber) { MinorType = (item.EMinorType)(int)_fieldJson; } else { throw new SerializationException(); }  
            }
        }
        
        { 
            var _fieldJson = _json["max_pile_num"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  MaxPileNum = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["quality"];
            if (_fieldJson != null)
            {
                if(_fieldJson.IsString) { Quality = (item.EItemQuality)System.Enum.Parse(typeof(item.EItemQuality), _fieldJson); } else if(_fieldJson.IsNumber) { Quality = (item.EItemQuality)(int)_fieldJson; } else { throw new SerializationException(); }  
            }
        }
        
        { 
            var _fieldJson = _json["icon"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsString) { throw new SerializationException(); }  Icon = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["icon_backgroud"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsString) { throw new SerializationException(); }  IconBackgroud = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["icon_mask"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsString) { throw new SerializationException(); }  IconMask = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["desc"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsString) { throw new SerializationException(); }  Desc = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["show_order"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  ShowOrder = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["quantifier"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsString) { throw new SerializationException(); }  Quantifier = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["show_in_bag"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsBoolean) { throw new SerializationException(); }  ShowInBag = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["min_show_level"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  MinShowLevel = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["batch_usable"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsBoolean) { throw new SerializationException(); }  BatchUsable = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["progress_time_when_use"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  ProgressTimeWhenUse = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["show_hint_when_use"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsBoolean) { throw new SerializationException(); }  ShowHintWhenUse = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["droppable"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsBoolean) { throw new SerializationException(); }  Droppable = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["price"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  Price = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["use_type"];
            if (_fieldJson != null)
            {
                if(_fieldJson.IsString) { UseType = (item.EUseType)System.Enum.Parse(typeof(item.EUseType), _fieldJson); } else if(_fieldJson.IsNumber) { UseType = (item.EUseType)(int)_fieldJson; } else { throw new SerializationException(); }  
            }
        }
        
        { 
            var _fieldJson = _json["level_up_id"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  LevelUpId = _fieldJson;
            }
        }
        
    }

    public override void SaveJson(SimpleJSON.JSONObject _json)
    {        
        {
            _json["id"] = new JSONNumber(Id);
        }
        {

            if (Name == null) { throw new System.ArgumentNullException(); }
            _json["name"] = new JSONString(Name);
        }
        {
            _json["major_type"] = new JSONNumber((int)MajorType);
        }
        {
            _json["minor_type"] = new JSONNumber((int)MinorType);
        }
        {
            _json["max_pile_num"] = new JSONNumber(MaxPileNum);
        }
        {
            _json["quality"] = new JSONNumber((int)Quality);
        }
        {

            if (Icon == null) { throw new System.ArgumentNullException(); }
            _json["icon"] = new JSONString(Icon);
        }
        {

            if (IconBackgroud == null) { throw new System.ArgumentNullException(); }
            _json["icon_backgroud"] = new JSONString(IconBackgroud);
        }
        {

            if (IconMask == null) { throw new System.ArgumentNullException(); }
            _json["icon_mask"] = new JSONString(IconMask);
        }
        {

            if (Desc == null) { throw new System.ArgumentNullException(); }
            _json["desc"] = new JSONString(Desc);
        }
        {
            _json["show_order"] = new JSONNumber(ShowOrder);
        }
        {

            if (Quantifier == null) { throw new System.ArgumentNullException(); }
            _json["quantifier"] = new JSONString(Quantifier);
        }
        {
            _json["show_in_bag"] = new JSONBool(ShowInBag);
        }
        {
            _json["min_show_level"] = new JSONNumber(MinShowLevel);
        }
        {
            _json["batch_usable"] = new JSONBool(BatchUsable);
        }
        {
            _json["progress_time_when_use"] = new JSONNumber(ProgressTimeWhenUse);
        }
        {
            _json["show_hint_when_use"] = new JSONBool(ShowHintWhenUse);
        }
        {
            _json["droppable"] = new JSONBool(Droppable);
        }

        if (Price != null)
        {
            _json["price"] = new JSONNumber(Price.Value);
        }
        {
            _json["use_type"] = new JSONNumber((int)UseType);
        }

        if (LevelUpId != null)
        {
            _json["level_up_id"] = new JSONNumber(LevelUpId.Value);
        }
    }

    public static Item LoadJsonItem(SimpleJSON.JSONNode _json)
    {
        Item obj = new item.Item();
        obj.LoadJson((SimpleJSON.JSONObject)_json);
        return obj;
    }
        
    public static void SaveJsonItem(Item _obj, SimpleJSON.JSONNode _json)
    {
        _obj.SaveJson((SimpleJSON.JSONObject)_json);
    }

    /// <summary>
    /// 道具id
    /// </summary>
    public int Id { get; set; }

    public string Name { get; set; }

    public item.EMajorType MajorType { get; set; }

    public item.EMinorType MinorType { get; set; }

    public int MaxPileNum { get; set; }

    public item.EItemQuality Quality { get; set; }

    public string Icon { get; set; }

    public string IconBackgroud { get; set; }

    public string IconMask { get; set; }

    public string Desc { get; set; }

    public int ShowOrder { get; set; }

    public string Quantifier { get; set; }

    public bool ShowInBag { get; set; }

    public int MinShowLevel { get; set; }

    public bool BatchUsable { get; set; }

    public float ProgressTimeWhenUse { get; set; }

    public bool ShowHintWhenUse { get; set; }

    public bool Droppable { get; set; }

    public int? Price { get; set; }

    public item.EUseType UseType { get; set; }

    public int? LevelUpId { get; set; }

}
}
