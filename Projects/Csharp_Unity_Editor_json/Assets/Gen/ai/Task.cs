//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace editor.cfg.ai
{

public abstract partial class Task :  ai.FlowNode 
{
    public Task()
    {
    }

    public override void LoadJson(SimpleJSON.JSONObject _json)
    {
        base.LoadJson(_json);
        { 
            var _fieldJson = _json["ignore_restart_self"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsBoolean) { throw new SerializationException(); }  IgnoreRestartSelf = _fieldJson;
            }
        }
        
    }

    public override void SaveJson(SimpleJSON.JSONObject _json)
    {        
        base.SaveJson(_json);
        {
            _json["ignore_restart_self"] = new JSONBool(IgnoreRestartSelf);
        }
    }

    public static Task LoadJsonTask(SimpleJSON.JSONNode _json)
    {
        string type = _json["$type"];
        Task obj;
        switch (type)
        {
            case "UeWait": obj = new ai.UeWait(); break;
            case "UeWaitBlackboardTime": obj = new ai.UeWaitBlackboardTime(); break;
            case "MoveToTarget": obj = new ai.MoveToTarget(); break;
            case "ChooseSkill": obj = new ai.ChooseSkill(); break;
            case "MoveToRandomLocation": obj = new ai.MoveToRandomLocation(); break;
            case "MoveToLocation": obj = new ai.MoveToLocation(); break;
            case "DebugPrint": obj = new ai.DebugPrint(); break;
            default: throw new SerializationException();
        }
        obj.LoadJson((SimpleJSON.JSONObject)_json);
        return obj;
    }
        
    public static void SaveJsonTask(Task _obj, SimpleJSON.JSONNode _json)
    {
        _json["$type"] = _obj.GetType().Name;
        _obj.SaveJson((SimpleJSON.JSONObject)_json);
    }

    public bool IgnoreRestartSelf { get; set; }

}
}
