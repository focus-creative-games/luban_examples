//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace editor.cfg.ai
{

public abstract partial class Service :  ai.Node 
{
    public Service()
    {
    }

    public override void LoadJson(SimpleJSON.JSONObject _json)
    {
        base.LoadJson(_json);
    }

    public override void SaveJson(SimpleJSON.JSONObject _json)
    {        
        base.SaveJson(_json);
    }

    public static Service LoadJsonService(SimpleJSON.JSONNode _json)
    {
        string type = _json["$type"];
        Service obj;
        switch (type)
        {
            case "UeSetDefaultFocus": obj = new ai.UeSetDefaultFocus(); break;
            case "ExecuteTimeStatistic": obj = new ai.ExecuteTimeStatistic(); break;
            case "ChooseTarget": obj = new ai.ChooseTarget(); break;
            case "KeepFaceTarget": obj = new ai.KeepFaceTarget(); break;
            case "GetOwnerPlayer": obj = new ai.GetOwnerPlayer(); break;
            case "UpdateDailyBehaviorProps": obj = new ai.UpdateDailyBehaviorProps(); break;
            default: throw new SerializationException();
        }
        obj.LoadJson((SimpleJSON.JSONObject)_json);
        return obj;
    }
        
    public static void SaveJsonService(Service _obj, SimpleJSON.JSONNode _json)
    {
        _json["$type"] = _obj.GetType().Name;
        _obj.SaveJson((SimpleJSON.JSONObject)_json);
    }

}
}
