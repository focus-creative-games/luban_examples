
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;
using SimpleJSON;
using Luban;
using UnityEngine;
using System.Linq;

namespace editor.cfg.ai
{

public abstract class Service :  ai.Node 
{
    public Service()
    {
    }
    public override string GetTypeStr() => TYPE_STR;
    private const string TYPE_STR = "ai.Service";

    private int _typeIndex = -1;
    public new int TypeIndex
    {
        get => _typeIndex;
        set
        {
            if(_typeIndex == value)
            {
                return;
            }
            _typeIndex = value;
            Instance = Create(Types[value]);
        }
    }
    public new Service Instance { get; set;}
    public new static List<string> Types = new List<string>()
    {
        "ai.UeSetDefaultFocus",
        "ai.ExecuteTimeStatistic",
        "ai.ChooseTarget",
        "ai.KeepFaceTarget",
        "ai.GetOwnerPlayer",
        "ai.UpdateDailyBehaviorProps",
    };

    public new static Service Create(string type)
    {
        switch (type)
        {
            case "ai.UeSetDefaultFocus":   
            case "UeSetDefaultFocus":return new ai.UeSetDefaultFocus();
            case "ai.ExecuteTimeStatistic":   
            case "ExecuteTimeStatistic":return new ai.ExecuteTimeStatistic();
            case "ai.ChooseTarget":   
            case "ChooseTarget":return new ai.ChooseTarget();
            case "ai.KeepFaceTarget":   
            case "KeepFaceTarget":return new ai.KeepFaceTarget();
            case "ai.GetOwnerPlayer":   
            case "GetOwnerPlayer":return new ai.GetOwnerPlayer();
            case "ai.UpdateDailyBehaviorProps":   
            case "UpdateDailyBehaviorProps":return new ai.UpdateDailyBehaviorProps();
            default: return null;
        }
    }


    public override void Render()
    {
        UnityEditor.EditorGUILayout.BeginVertical();
        UnityEditor.EditorGUILayout.BeginHorizontal();
        UnityEditor.EditorGUILayout.LabelField("id", GUILayout.Width(100));
        id = UnityEditor.EditorGUILayout.IntField(id, GUILayout.Width(150));
        UnityEditor.EditorGUILayout.EndHorizontal();
        UnityEditor.EditorGUILayout.BeginHorizontal();
        UnityEditor.EditorGUILayout.LabelField("node_name", GUILayout.Width(100));
        nodeName = UnityEditor.EditorGUILayout.TextField(nodeName, GUILayout.Width(150));
        UnityEditor.EditorGUILayout.EndHorizontal();
        UnityEditor.EditorGUILayout.EndVertical();
    }

    public static Service LoadJsonService(SimpleJSON.JSONNode _json)
    {
        string type = _json["$type"];
        Service obj;
        switch (type)
        {
            case "ai.UeSetDefaultFocus":   
            case "UeSetDefaultFocus":obj = new ai.UeSetDefaultFocus(); break;
            case "ai.ExecuteTimeStatistic":   
            case "ExecuteTimeStatistic":obj = new ai.ExecuteTimeStatistic(); break;
            case "ai.ChooseTarget":   
            case "ChooseTarget":obj = new ai.ChooseTarget(); break;
            case "ai.KeepFaceTarget":   
            case "KeepFaceTarget":obj = new ai.KeepFaceTarget(); break;
            case "ai.GetOwnerPlayer":   
            case "GetOwnerPlayer":obj = new ai.GetOwnerPlayer(); break;
            case "ai.UpdateDailyBehaviorProps":   
            case "UpdateDailyBehaviorProps":obj = new ai.UpdateDailyBehaviorProps(); break;
            default: throw new SerializationException();
        }
        obj.LoadJson((SimpleJSON.JSONObject)_json);
        return obj;
    }
        
    public static void SaveJsonService(Service _obj, SimpleJSON.JSONNode _json)
    {
        _json["$type"] = _obj.GetTypeStr();
        _obj.Instance.SaveJson((SimpleJSON.JSONObject)_json);
    }


    public override string ToString()
    {
        return "{ "
        + "id:" + id + ","
        + "nodeName:" + nodeName + ","
        + "}";
    }
}

}

