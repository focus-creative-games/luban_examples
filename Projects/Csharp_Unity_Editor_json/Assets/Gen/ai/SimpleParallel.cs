//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace editor.cfg.ai
{

public sealed partial class SimpleParallel :  ai.ComposeNode 
{
    public SimpleParallel()
    {
            FinishMode = ai.EFinishMode.IMMEDIATE;
    }

    public override void LoadJson(SimpleJSON.JSONObject _json)
    {
        base.LoadJson(_json);
        { 
            var _fieldJson = _json["finish_mode"];
            if (_fieldJson != null)
            {
                if(_fieldJson.IsString) { FinishMode = (ai.EFinishMode)System.Enum.Parse(typeof(ai.EFinishMode), _fieldJson); } else if(_fieldJson.IsNumber) { FinishMode = (ai.EFinishMode)(int)_fieldJson; } else { throw new SerializationException(); }  
            }
        }
        
        { 
            var _fieldJson = _json["main_task"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsObject) { throw new SerializationException(); }  MainTask = ai.Task.LoadJsonTask(_fieldJson);
            }
        }
        
        { 
            var _fieldJson = _json["background_node"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsObject) { throw new SerializationException(); }  BackgroundNode = ai.FlowNode.LoadJsonFlowNode(_fieldJson);
            }
        }
        
    }

    public override void SaveJson(SimpleJSON.JSONObject _json)
    {        
        base.SaveJson(_json);
        {
            _json["finish_mode"] = new JSONNumber((int)FinishMode);
        }
        {

            if (MainTask == null) { throw new System.ArgumentNullException(); }
            { var __bjson = new JSONObject();  ai.Task.SaveJsonTask(MainTask, __bjson); _json["main_task"] = __bjson; }
        }
        {

            if (BackgroundNode == null) { throw new System.ArgumentNullException(); }
            { var __bjson = new JSONObject();  ai.FlowNode.SaveJsonFlowNode(BackgroundNode, __bjson); _json["background_node"] = __bjson; }
        }
    }

    public static SimpleParallel LoadJsonSimpleParallel(SimpleJSON.JSONNode _json)
    {
        SimpleParallel obj = new ai.SimpleParallel();
        obj.LoadJson((SimpleJSON.JSONObject)_json);
        return obj;
    }
        
    public static void SaveJsonSimpleParallel(SimpleParallel _obj, SimpleJSON.JSONNode _json)
    {
        _obj.SaveJson((SimpleJSON.JSONObject)_json);
    }

    public ai.EFinishMode FinishMode { get; set; }

    public ai.Task MainTask { get; set; }

    public ai.FlowNode BackgroundNode { get; set; }

}
}
