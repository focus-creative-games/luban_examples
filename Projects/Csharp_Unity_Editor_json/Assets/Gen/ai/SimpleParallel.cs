
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;
using SimpleJSON;
using Luban;
using UnityEngine;
using System.Linq;

namespace editor.cfg.ai
{

public sealed class SimpleParallel :  ai.ComposeNode 
{
    public SimpleParallel()
    {
            finishMode = ai.EFinishMode.IMMEDIATE;
    }
    public override string GetTypeStr() => TYPE_STR;
    private const string TYPE_STR = "ai.SimpleParallel";

    public override void LoadJson(SimpleJSON.JSONObject _json)
    {
        { 
            var _fieldJson = _json["id"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  id = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["node_name"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsString) { throw new SerializationException(); }  nodeName = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["decorators"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsArray) { throw new SerializationException(); } decorators = new System.Collections.Generic.List<ai.Decorator>(); foreach(SimpleJSON.JSONNode __e0 in _fieldJson.Children) { ai.Decorator __v0;  
                if (!__e0.IsObject)
                {
                    throw new SerializationException();
                }
                __v0 = ai.Decorator.LoadJsonDecorator(__e0);
                var __index0 = ai.Decorator.Types.IndexOf(__v0.GetTypeStr());
                if (__index0 == -1)
                {
                    throw new SerializationException();
                }
                __v0.TypeIndex = __index0;
                __v0.Instance = ai.Decorator.LoadJsonDecorator(__e0);  decorators.Add(__v0); }  
            }
        }
        
        { 
            var _fieldJson = _json["services"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsArray) { throw new SerializationException(); } services = new System.Collections.Generic.List<ai.Service>(); foreach(SimpleJSON.JSONNode __e0 in _fieldJson.Children) { ai.Service __v0;  
                if (!__e0.IsObject)
                {
                    throw new SerializationException();
                }
                __v0 = ai.Service.LoadJsonService(__e0);
                var __index0 = ai.Service.Types.IndexOf(__v0.GetTypeStr());
                if (__index0 == -1)
                {
                    throw new SerializationException();
                }
                __v0.TypeIndex = __index0;
                __v0.Instance = ai.Service.LoadJsonService(__e0);  services.Add(__v0); }  
            }
        }
        
        { 
            var _fieldJson = _json["finish_mode"];
            if (_fieldJson != null)
            {
                if(_fieldJson.IsString) { finishMode = (ai.EFinishMode)System.Enum.Parse(typeof(ai.EFinishMode), _fieldJson); } else if(_fieldJson.IsNumber) { finishMode = (ai.EFinishMode)(int)_fieldJson; } else { throw new SerializationException(); }  
            }
        }
        
        { 
            var _fieldJson = _json["main_task"];
            if (_fieldJson != null)
            {
                
                if (!_fieldJson.IsObject)
                {
                    throw new SerializationException();
                }
                mainTask = ai.Task.LoadJsonTask(_fieldJson);
                var __index0 = ai.Task.Types.IndexOf(mainTask.GetTypeStr());
                if (__index0 == -1)
                {
                    throw new SerializationException();
                }
                mainTask.TypeIndex = __index0;
                mainTask.Instance = ai.Task.LoadJsonTask(_fieldJson);
            }
        }
        
        { 
            var _fieldJson = _json["background_node"];
            if (_fieldJson != null)
            {
                
                if (!_fieldJson.IsObject)
                {
                    throw new SerializationException();
                }
                backgroundNode = ai.FlowNode.LoadJsonFlowNode(_fieldJson);
                var __index0 = ai.FlowNode.Types.IndexOf(backgroundNode.GetTypeStr());
                if (__index0 == -1)
                {
                    throw new SerializationException();
                }
                backgroundNode.TypeIndex = __index0;
                backgroundNode.Instance = ai.FlowNode.LoadJsonFlowNode(_fieldJson);
            }
        }
        
    }

    public override void SaveJson(SimpleJSON.JSONObject _json)
    {
        {
            _json["id"] = new JSONNumber(id);
        }
        {

            if (nodeName == null) { throw new System.ArgumentNullException(); }
            _json["node_name"] = new JSONString(nodeName);
        }
        {

            if (decorators == null) { throw new System.ArgumentNullException(); }
            { var __cjson0 = new JSONArray(); foreach(var __e0 in decorators) { { var __bjson = new JSONObject();  ai.Decorator.SaveJsonDecorator(__e0, __bjson); __cjson0["null"] = __bjson; } } _json["decorators"] = __cjson0; }
        }
        {

            if (services == null) { throw new System.ArgumentNullException(); }
            { var __cjson0 = new JSONArray(); foreach(var __e0 in services) { { var __bjson = new JSONObject();  ai.Service.SaveJsonService(__e0, __bjson); __cjson0["null"] = __bjson; } } _json["services"] = __cjson0; }
        }
        {
            _json["finish_mode"] = new JSONNumber((int)finishMode);
        }
        {

            if (mainTask == null) { throw new System.ArgumentNullException(); }
            { var __bjson = new JSONObject();  ai.Task.SaveJsonTask(mainTask, __bjson); _json["main_task"] = __bjson; }
        }
        {

            if (backgroundNode == null) { throw new System.ArgumentNullException(); }
            { var __bjson = new JSONObject();  ai.FlowNode.SaveJsonFlowNode(backgroundNode, __bjson); _json["background_node"] = __bjson; }
        }
    }


    public override void Render()
    {
        UnityEditor.EditorGUILayout.BeginVertical();
        UnityEditor.EditorGUILayout.BeginHorizontal();
        UnityEditor.EditorGUILayout.LabelField("id", GUILayout.Width(100));
        id = UnityEditor.EditorGUILayout.IntField(id, GUILayout.Width(150));
        UnityEditor.EditorGUILayout.EndHorizontal();
        UnityEditor.EditorGUILayout.BeginHorizontal();
        UnityEditor.EditorGUILayout.LabelField("node_name", GUILayout.Width(100));
        nodeName = UnityEditor.EditorGUILayout.TextField(nodeName, GUILayout.Width(150));
        UnityEditor.EditorGUILayout.EndHorizontal();
        UnityEditor.EditorGUILayout.BeginHorizontal();
        UnityEditor.EditorGUILayout.LabelField("decorators", GUILayout.Width(100));
        {
            UnityEditor.EditorGUILayout.BeginVertical("Box");
            int __n0 = decorators.Count;
            for (int __i0 = 0; __i0 < __n0; __i0++)
            {
                UnityEditor.EditorGUILayout.BeginHorizontal();
                if (GUILayout.Button("-", GUILayout.Width(20)))
                {
                    decorators.RemoveAt(__i0);
                    UnityEditor.EditorGUILayout.EndHorizontal();
                    break;
                }
                UnityEditor.EditorGUILayout.LabelField(__i0.ToString(), GUILayout.Width(20));
                ai.Decorator __e0 = decorators[__i0];
                {
            var __list1 = ai.Decorator.Types.Select(t => new GUIContent(t)).ToArray();
            UnityEditor.EditorGUILayout.BeginVertical("Box");
            if (__e0 == null)
            {
                __e0 = new ai.UeLoop();
                __e0.TypeIndex = 0;
            }
            UnityEditor.EditorGUILayout.BeginHorizontal();
            UnityEditor.EditorGUILayout.LabelField("类型", GUILayout.Width(100));
            __e0.TypeIndex = UnityEditor.EditorGUILayout.Popup(__e0.TypeIndex, __list1, GUILayout.Width(200));
            UnityEditor.EditorGUILayout.EndHorizontal();
            __e0.Instance.Render();
            UnityEditor.EditorGUILayout.EndVertical();
        };
                decorators[__i0] = __e0;
                UnityEditor.EditorGUILayout.EndHorizontal();
            }
            if (GUILayout.Button("+", GUILayout.Width(20)))
            {
                decorators.Add(default);
            }
            UnityEditor.EditorGUILayout.EndVertical();
        }
        UnityEditor.EditorGUILayout.EndHorizontal();
        UnityEditor.EditorGUILayout.BeginHorizontal();
        UnityEditor.EditorGUILayout.LabelField("services", GUILayout.Width(100));
        {
            UnityEditor.EditorGUILayout.BeginVertical("Box");
            int __n0 = services.Count;
            for (int __i0 = 0; __i0 < __n0; __i0++)
            {
                UnityEditor.EditorGUILayout.BeginHorizontal();
                if (GUILayout.Button("-", GUILayout.Width(20)))
                {
                    services.RemoveAt(__i0);
                    UnityEditor.EditorGUILayout.EndHorizontal();
                    break;
                }
                UnityEditor.EditorGUILayout.LabelField(__i0.ToString(), GUILayout.Width(20));
                ai.Service __e0 = services[__i0];
                {
            var __list1 = ai.Service.Types.Select(t => new GUIContent(t)).ToArray();
            UnityEditor.EditorGUILayout.BeginVertical("Box");
            if (__e0 == null)
            {
                __e0 = new ai.UeSetDefaultFocus();
                __e0.TypeIndex = 0;
            }
            UnityEditor.EditorGUILayout.BeginHorizontal();
            UnityEditor.EditorGUILayout.LabelField("类型", GUILayout.Width(100));
            __e0.TypeIndex = UnityEditor.EditorGUILayout.Popup(__e0.TypeIndex, __list1, GUILayout.Width(200));
            UnityEditor.EditorGUILayout.EndHorizontal();
            __e0.Instance.Render();
            UnityEditor.EditorGUILayout.EndVertical();
        };
                services[__i0] = __e0;
                UnityEditor.EditorGUILayout.EndHorizontal();
            }
            if (GUILayout.Button("+", GUILayout.Width(20)))
            {
                services.Add(default);
            }
            UnityEditor.EditorGUILayout.EndVertical();
        }
        UnityEditor.EditorGUILayout.EndHorizontal();
        UnityEditor.EditorGUILayout.BeginHorizontal();
        UnityEditor.EditorGUILayout.LabelField("finish_mode", GUILayout.Width(100));
        finishMode = (ai.EFinishMode)UnityEditor.EditorGUILayout.EnumPopup(finishMode, GUILayout.Width(150));
        UnityEditor.EditorGUILayout.EndHorizontal();
        UnityEditor.EditorGUILayout.BeginHorizontal();
        UnityEditor.EditorGUILayout.LabelField("main_task", GUILayout.Width(100));
        {
            var __list0 = ai.Task.Types.Select(t => new GUIContent(t)).ToArray();
            UnityEditor.EditorGUILayout.BeginVertical("Box");
            if (mainTask == null)
            {
                mainTask = new ai.UeWait();
                mainTask.TypeIndex = 0;
            }
            UnityEditor.EditorGUILayout.BeginHorizontal();
            UnityEditor.EditorGUILayout.LabelField("类型", GUILayout.Width(100));
            mainTask.TypeIndex = UnityEditor.EditorGUILayout.Popup(mainTask.TypeIndex, __list0, GUILayout.Width(200));
            UnityEditor.EditorGUILayout.EndHorizontal();
            mainTask.Instance.Render();
            UnityEditor.EditorGUILayout.EndVertical();
        }
        UnityEditor.EditorGUILayout.EndHorizontal();
        UnityEditor.EditorGUILayout.BeginHorizontal();
        UnityEditor.EditorGUILayout.LabelField("background_node", GUILayout.Width(100));
        {
            var __list0 = ai.FlowNode.Types.Select(t => new GUIContent(t)).ToArray();
            UnityEditor.EditorGUILayout.BeginVertical("Box");
            if (backgroundNode == null)
            {
                backgroundNode = new ai.Sequence();
                backgroundNode.TypeIndex = 0;
            }
            UnityEditor.EditorGUILayout.BeginHorizontal();
            UnityEditor.EditorGUILayout.LabelField("类型", GUILayout.Width(100));
            backgroundNode.TypeIndex = UnityEditor.EditorGUILayout.Popup(backgroundNode.TypeIndex, __list0, GUILayout.Width(200));
            UnityEditor.EditorGUILayout.EndHorizontal();
            backgroundNode.Instance.Render();
            UnityEditor.EditorGUILayout.EndVertical();
        }
        UnityEditor.EditorGUILayout.EndHorizontal();
        UnityEditor.EditorGUILayout.EndVertical();
    }

    public static SimpleParallel LoadJsonSimpleParallel(SimpleJSON.JSONNode _json)
    {
        SimpleParallel obj = new ai.SimpleParallel();
        obj.LoadJson((SimpleJSON.JSONObject)_json);
        return obj;
    }
        
    public static void SaveJsonSimpleParallel(SimpleParallel _obj, SimpleJSON.JSONNode _json)
    {
        _obj.SaveJson((SimpleJSON.JSONObject)_json);
    }

    public ai.EFinishMode finishMode;
    public UnityEngine.Object finishMode_UnityObject;
    public ai.Task mainTask;
    public UnityEngine.Object mainTask_UnityObject;
    public ai.FlowNode backgroundNode;
    public UnityEngine.Object backgroundNode_UnityObject;

    public override string ToString()
    {
        return "{ "
        + "id:" + id + ","
        + "nodeName:" + nodeName + ","
        + "decorators:" + Luban.StringUtil.CollectionToString(decorators) + ","
        + "services:" + Luban.StringUtil.CollectionToString(services) + ","
        + "finishMode:" + finishMode + ","
        + "mainTask:" + mainTask + ","
        + "backgroundNode:" + backgroundNode + ","
        + "}";
    }
}

}

