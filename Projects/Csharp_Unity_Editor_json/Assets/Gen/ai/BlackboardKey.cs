//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace editor.cfg.ai
{

public sealed partial class BlackboardKey :  Bright.Config.EditorBeanBase 
{
    public BlackboardKey()
    {
            Name = "";
            Desc = "";
            Type = ai.EKeyType.BOOL;
            TypeClassName = "";
    }

    public override void LoadJson(SimpleJSON.JSONObject _json)
    {
        { 
            var _fieldJson = _json["name"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsString) { throw new SerializationException(); }  Name = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["desc"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsString) { throw new SerializationException(); }  Desc = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["is_static"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsBoolean) { throw new SerializationException(); }  IsStatic = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["type"];
            if (_fieldJson != null)
            {
                if(_fieldJson.IsString) { Type = (ai.EKeyType)System.Enum.Parse(typeof(ai.EKeyType), _fieldJson); } else if(_fieldJson.IsNumber) { Type = (ai.EKeyType)(int)_fieldJson; } else { throw new SerializationException(); }  
            }
        }
        
        { 
            var _fieldJson = _json["type_class_name"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsString) { throw new SerializationException(); }  TypeClassName = _fieldJson;
            }
        }
        
    }

    public override void SaveJson(SimpleJSON.JSONObject _json)
    {        
        {

            if (Name == null) { throw new System.ArgumentNullException(); }
            _json["name"] = new JSONString(Name);
        }
        {

            if (Desc == null) { throw new System.ArgumentNullException(); }
            _json["desc"] = new JSONString(Desc);
        }
        {
            _json["is_static"] = new JSONBool(IsStatic);
        }
        {
            _json["type"] = new JSONNumber((int)Type);
        }
        {

            if (TypeClassName == null) { throw new System.ArgumentNullException(); }
            _json["type_class_name"] = new JSONString(TypeClassName);
        }
    }

    public static BlackboardKey LoadJsonBlackboardKey(SimpleJSON.JSONNode _json)
    {
        BlackboardKey obj = new ai.BlackboardKey();
        obj.LoadJson((SimpleJSON.JSONObject)_json);
        return obj;
    }
        
    public static void SaveJsonBlackboardKey(BlackboardKey _obj, SimpleJSON.JSONNode _json)
    {
        _obj.SaveJson((SimpleJSON.JSONObject)_json);
    }

    public string Name { get; set; }

    public string Desc { get; set; }

    public bool IsStatic { get; set; }

    public ai.EKeyType Type { get; set; }

    public string TypeClassName { get; set; }

}
}
