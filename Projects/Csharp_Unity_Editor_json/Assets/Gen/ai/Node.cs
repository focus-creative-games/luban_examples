
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;
using SimpleJSON;
using Luban;
using UnityEngine;
using System.Linq;

namespace editor.cfg.ai
{

public abstract class Node :  Luban.EditorBeanBase 
{
    public Node()
    {
            nodeName = "";
    }
    public abstract string GetTypeStr();

    private int _typeIndex = -1;
    public int TypeIndex
    {
        get => _typeIndex;
        set
        {
            if(_typeIndex == value)
            {
                return;
            }
            _typeIndex = value;
            Instance = Create(Types[value]);
        }
    }
    public Node Instance { get; set;}
    public static List<string> Types = new List<string>()
    {
        "ai.UeSetDefaultFocus",
        "ai.ExecuteTimeStatistic",
        "ai.ChooseTarget",
        "ai.KeepFaceTarget",
        "ai.GetOwnerPlayer",
        "ai.UpdateDailyBehaviorProps",
        "ai.UeLoop",
        "ai.UeCooldown",
        "ai.UeTimeLimit",
        "ai.UeBlackboard",
        "ai.UeForceSuccess",
        "ai.IsAtLocation",
        "ai.DistanceLessThan",
        "ai.Sequence",
        "ai.Selector",
        "ai.SimpleParallel",
        "ai.UeWait",
        "ai.UeWaitBlackboardTime",
        "ai.MoveToTarget",
        "ai.ChooseSkill",
        "ai.MoveToRandomLocation",
        "ai.MoveToLocation",
        "ai.DebugPrint",
    };

    public static Node Create(string type)
    {
        switch (type)
        {
            case "ai.UeSetDefaultFocus":   
            case "UeSetDefaultFocus":return new ai.UeSetDefaultFocus();
            case "ai.ExecuteTimeStatistic":   
            case "ExecuteTimeStatistic":return new ai.ExecuteTimeStatistic();
            case "ai.ChooseTarget":   
            case "ChooseTarget":return new ai.ChooseTarget();
            case "ai.KeepFaceTarget":   
            case "KeepFaceTarget":return new ai.KeepFaceTarget();
            case "ai.GetOwnerPlayer":   
            case "GetOwnerPlayer":return new ai.GetOwnerPlayer();
            case "ai.UpdateDailyBehaviorProps":   
            case "UpdateDailyBehaviorProps":return new ai.UpdateDailyBehaviorProps();
            case "ai.UeLoop":   
            case "UeLoop":return new ai.UeLoop();
            case "ai.UeCooldown":   
            case "UeCooldown":return new ai.UeCooldown();
            case "ai.UeTimeLimit":   
            case "UeTimeLimit":return new ai.UeTimeLimit();
            case "ai.UeBlackboard":   
            case "UeBlackboard":return new ai.UeBlackboard();
            case "ai.UeForceSuccess":   
            case "UeForceSuccess":return new ai.UeForceSuccess();
            case "ai.IsAtLocation":   
            case "IsAtLocation":return new ai.IsAtLocation();
            case "ai.DistanceLessThan":   
            case "DistanceLessThan":return new ai.DistanceLessThan();
            case "ai.Sequence":   
            case "Sequence":return new ai.Sequence();
            case "ai.Selector":   
            case "Selector":return new ai.Selector();
            case "ai.SimpleParallel":   
            case "SimpleParallel":return new ai.SimpleParallel();
            case "ai.UeWait":   
            case "UeWait":return new ai.UeWait();
            case "ai.UeWaitBlackboardTime":   
            case "UeWaitBlackboardTime":return new ai.UeWaitBlackboardTime();
            case "ai.MoveToTarget":   
            case "MoveToTarget":return new ai.MoveToTarget();
            case "ai.ChooseSkill":   
            case "ChooseSkill":return new ai.ChooseSkill();
            case "ai.MoveToRandomLocation":   
            case "MoveToRandomLocation":return new ai.MoveToRandomLocation();
            case "ai.MoveToLocation":   
            case "MoveToLocation":return new ai.MoveToLocation();
            case "ai.DebugPrint":   
            case "DebugPrint":return new ai.DebugPrint();
            default: return null;
        }
    }


    public override void Render()
    {
        UnityEditor.EditorGUILayout.BeginVertical();
        UnityEditor.EditorGUILayout.BeginHorizontal();
        UnityEditor.EditorGUILayout.LabelField("id", GUILayout.Width(100));
        id = UnityEditor.EditorGUILayout.IntField(id, GUILayout.Width(150));
        UnityEditor.EditorGUILayout.EndHorizontal();
        UnityEditor.EditorGUILayout.BeginHorizontal();
        UnityEditor.EditorGUILayout.LabelField("node_name", GUILayout.Width(100));
        nodeName = UnityEditor.EditorGUILayout.TextField(nodeName, GUILayout.Width(150));
        UnityEditor.EditorGUILayout.EndHorizontal();
        UnityEditor.EditorGUILayout.EndVertical();
    }

    public static Node LoadJsonNode(SimpleJSON.JSONNode _json)
    {
        string type = _json["$type"];
        Node obj;
        switch (type)
        {
            case "ai.UeSetDefaultFocus":   
            case "UeSetDefaultFocus":obj = new ai.UeSetDefaultFocus(); break;
            case "ai.ExecuteTimeStatistic":   
            case "ExecuteTimeStatistic":obj = new ai.ExecuteTimeStatistic(); break;
            case "ai.ChooseTarget":   
            case "ChooseTarget":obj = new ai.ChooseTarget(); break;
            case "ai.KeepFaceTarget":   
            case "KeepFaceTarget":obj = new ai.KeepFaceTarget(); break;
            case "ai.GetOwnerPlayer":   
            case "GetOwnerPlayer":obj = new ai.GetOwnerPlayer(); break;
            case "ai.UpdateDailyBehaviorProps":   
            case "UpdateDailyBehaviorProps":obj = new ai.UpdateDailyBehaviorProps(); break;
            case "ai.UeLoop":   
            case "UeLoop":obj = new ai.UeLoop(); break;
            case "ai.UeCooldown":   
            case "UeCooldown":obj = new ai.UeCooldown(); break;
            case "ai.UeTimeLimit":   
            case "UeTimeLimit":obj = new ai.UeTimeLimit(); break;
            case "ai.UeBlackboard":   
            case "UeBlackboard":obj = new ai.UeBlackboard(); break;
            case "ai.UeForceSuccess":   
            case "UeForceSuccess":obj = new ai.UeForceSuccess(); break;
            case "ai.IsAtLocation":   
            case "IsAtLocation":obj = new ai.IsAtLocation(); break;
            case "ai.DistanceLessThan":   
            case "DistanceLessThan":obj = new ai.DistanceLessThan(); break;
            case "ai.Sequence":   
            case "Sequence":obj = new ai.Sequence(); break;
            case "ai.Selector":   
            case "Selector":obj = new ai.Selector(); break;
            case "ai.SimpleParallel":   
            case "SimpleParallel":obj = new ai.SimpleParallel(); break;
            case "ai.UeWait":   
            case "UeWait":obj = new ai.UeWait(); break;
            case "ai.UeWaitBlackboardTime":   
            case "UeWaitBlackboardTime":obj = new ai.UeWaitBlackboardTime(); break;
            case "ai.MoveToTarget":   
            case "MoveToTarget":obj = new ai.MoveToTarget(); break;
            case "ai.ChooseSkill":   
            case "ChooseSkill":obj = new ai.ChooseSkill(); break;
            case "ai.MoveToRandomLocation":   
            case "MoveToRandomLocation":obj = new ai.MoveToRandomLocation(); break;
            case "ai.MoveToLocation":   
            case "MoveToLocation":obj = new ai.MoveToLocation(); break;
            case "ai.DebugPrint":   
            case "DebugPrint":obj = new ai.DebugPrint(); break;
            default: throw new SerializationException();
        }
        obj.LoadJson((SimpleJSON.JSONObject)_json);
        return obj;
    }
        
    public static void SaveJsonNode(Node _obj, SimpleJSON.JSONNode _json)
    {
        _json["$type"] = _obj.GetTypeStr();
        _obj.Instance.SaveJson((SimpleJSON.JSONObject)_json);
    }

    public int id;
    public UnityEngine.Object id_UnityObject;
    public string nodeName;
    public UnityEngine.Object nodeName_UnityObject;

    public override string ToString()
    {
        return "{ "
        + "id:" + id + ","
        + "nodeName:" + nodeName + ","
        + "}";
    }
}

}

