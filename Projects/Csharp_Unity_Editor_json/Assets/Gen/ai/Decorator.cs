//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace editor.cfg.ai
{

public abstract partial class Decorator :  ai.Node 
{
    public Decorator()
    {
            FlowAbortMode = ai.EFlowAbortMode.NONE;
    }

    public override void LoadJson(SimpleJSON.JSONObject _json)
    {
        base.LoadJson(_json);
        { 
            var _fieldJson = _json["flow_abort_mode"];
            if (_fieldJson != null)
            {
                if(_fieldJson.IsString) { FlowAbortMode = (ai.EFlowAbortMode)System.Enum.Parse(typeof(ai.EFlowAbortMode), _fieldJson); } else if(_fieldJson.IsNumber) { FlowAbortMode = (ai.EFlowAbortMode)(int)_fieldJson; } else { throw new SerializationException(); }  
            }
        }
        
    }

    public override void SaveJson(SimpleJSON.JSONObject _json)
    {        
        base.SaveJson(_json);
        {
            _json["flow_abort_mode"] = new JSONNumber((int)FlowAbortMode);
        }
    }

    public static Decorator LoadJsonDecorator(SimpleJSON.JSONNode _json)
    {
        string type = _json["$type"];
        Decorator obj;
        switch (type)
        {
            case "UeLoop": obj = new ai.UeLoop(); break;
            case "UeCooldown": obj = new ai.UeCooldown(); break;
            case "UeTimeLimit": obj = new ai.UeTimeLimit(); break;
            case "UeBlackboard": obj = new ai.UeBlackboard(); break;
            case "UeForceSuccess": obj = new ai.UeForceSuccess(); break;
            case "IsAtLocation": obj = new ai.IsAtLocation(); break;
            case "DistanceLessThan": obj = new ai.DistanceLessThan(); break;
            default: throw new SerializationException();
        }
        obj.LoadJson((SimpleJSON.JSONObject)_json);
        return obj;
    }
        
    public static void SaveJsonDecorator(Decorator _obj, SimpleJSON.JSONNode _json)
    {
        _json["$type"] = _obj.GetType().Name;
        _obj.SaveJson((SimpleJSON.JSONObject)_json);
    }

    public ai.EFlowAbortMode FlowAbortMode { get; set; }

}
}
