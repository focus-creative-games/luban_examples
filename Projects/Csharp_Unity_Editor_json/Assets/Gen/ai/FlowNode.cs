//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace editor.cfg.ai
{

public abstract partial class FlowNode :  ai.Node 
{
    public FlowNode()
    {
            Decorators = new System.Collections.Generic.List<ai.Decorator>();
            Services = new System.Collections.Generic.List<ai.Service>();
    }

    public override void LoadJson(SimpleJSON.JSONObject _json)
    {
        base.LoadJson(_json);
        { 
            var _fieldJson = _json["decorators"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsArray) { throw new SerializationException(); } Decorators = new System.Collections.Generic.List<ai.Decorator>(); foreach(JSONNode __e in _fieldJson.Children) { ai.Decorator __v;  if(!__e.IsObject) { throw new SerializationException(); }  __v = ai.Decorator.LoadJsonDecorator(__e);  Decorators.Add(__v); }  
            }
        }
        
        { 
            var _fieldJson = _json["services"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsArray) { throw new SerializationException(); } Services = new System.Collections.Generic.List<ai.Service>(); foreach(JSONNode __e in _fieldJson.Children) { ai.Service __v;  if(!__e.IsObject) { throw new SerializationException(); }  __v = ai.Service.LoadJsonService(__e);  Services.Add(__v); }  
            }
        }
        
    }

    public override void SaveJson(SimpleJSON.JSONObject _json)
    {        
        base.SaveJson(_json);
        {

            if (Decorators == null) { throw new System.ArgumentNullException(); }
            { var __cjson = new JSONArray(); foreach(var _e in Decorators) { { var __bjson = new JSONObject();  ai.Decorator.SaveJsonDecorator(_e, __bjson); __cjson["null"] = __bjson; } } _json["decorators"] = __cjson; }
        }
        {

            if (Services == null) { throw new System.ArgumentNullException(); }
            { var __cjson = new JSONArray(); foreach(var _e in Services) { { var __bjson = new JSONObject();  ai.Service.SaveJsonService(_e, __bjson); __cjson["null"] = __bjson; } } _json["services"] = __cjson; }
        }
    }

    public static FlowNode LoadJsonFlowNode(SimpleJSON.JSONNode _json)
    {
        string type = _json["$type"];
        FlowNode obj;
        switch (type)
        {
            case "Sequence": obj = new ai.Sequence(); break;
            case "Selector": obj = new ai.Selector(); break;
            case "SimpleParallel": obj = new ai.SimpleParallel(); break;
            case "UeWait": obj = new ai.UeWait(); break;
            case "UeWaitBlackboardTime": obj = new ai.UeWaitBlackboardTime(); break;
            case "MoveToTarget": obj = new ai.MoveToTarget(); break;
            case "ChooseSkill": obj = new ai.ChooseSkill(); break;
            case "MoveToRandomLocation": obj = new ai.MoveToRandomLocation(); break;
            case "MoveToLocation": obj = new ai.MoveToLocation(); break;
            case "DebugPrint": obj = new ai.DebugPrint(); break;
            default: throw new SerializationException();
        }
        obj.LoadJson((SimpleJSON.JSONObject)_json);
        return obj;
    }
        
    public static void SaveJsonFlowNode(FlowNode _obj, SimpleJSON.JSONNode _json)
    {
        _json["$type"] = _obj.GetType().Name;
        _obj.SaveJson((SimpleJSON.JSONObject)_json);
    }

    public System.Collections.Generic.List<ai.Decorator> Decorators { get; set; }

    public System.Collections.Generic.List<ai.Service> Services { get; set; }

}
}
