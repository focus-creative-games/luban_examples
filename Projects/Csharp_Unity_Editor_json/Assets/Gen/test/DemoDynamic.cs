//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace editor.cfg.test
{

public abstract partial class DemoDynamic :  Bright.Config.EditorBeanBase 
{
    public DemoDynamic()
    {
    }

    public override void LoadJson(SimpleJSON.JSONObject _json)
    {
        { 
            var _fieldJson = _json["x1"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  X1 = _fieldJson;
            }
        }
        
    }

    public override void SaveJson(SimpleJSON.JSONObject _json)
    {        
        {
            _json["x1"] = new JSONNumber(X1);
        }
    }

    public static DemoDynamic LoadJsonDemoDynamic(SimpleJSON.JSONNode _json)
    {
        string type = _json["$type"];
        DemoDynamic obj;
        switch (type)
        {
            case "DemoD2": obj = new test.DemoD2(); break;
            case "DemoE1": obj = new test.DemoE1(); break;
            case "test.login.RoleInfo": obj = new test.login.RoleInfo(); break;
            case "DemoD5": obj = new test.DemoD5(); break;
            default: throw new SerializationException();
        }
        obj.LoadJson((SimpleJSON.JSONObject)_json);
        return obj;
    }
        
    public static void SaveJsonDemoDynamic(DemoDynamic _obj, SimpleJSON.JSONNode _json)
    {
        _json["$type"] = _obj.GetType().Name;
        _obj.SaveJson((SimpleJSON.JSONObject)_json);
    }

    public int X1 { get; set; }

}
}
