//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace editor.cfg.test
{

public sealed partial class TestMap :  Bright.Config.EditorBeanBase 
{
    public TestMap()
    {
            X1 = new System.Collections.Generic.Dictionary<int,int>();
            X2 = new System.Collections.Generic.Dictionary<long,int>();
            X3 = new System.Collections.Generic.Dictionary<string,int>();
            X4 = new System.Collections.Generic.Dictionary<test.DemoEnum,int>();
    }

    public override void LoadJson(SimpleJSON.JSONObject _json)
    {
        { 
            var _fieldJson = _json["id"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  Id = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["x1"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsArray) { throw new SerializationException(); } X1 = new System.Collections.Generic.Dictionary<int, int>(); foreach(JSONNode __e in _fieldJson.Children) { int __k;  if(!__e[0].IsNumber) { throw new SerializationException(); }  __k = __e[0]; int __v;  if(!__e[1].IsNumber) { throw new SerializationException(); }  __v = __e[1];  X1.Add(__k, __v); }  
            }
        }
        
        { 
            var _fieldJson = _json["x2"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsArray) { throw new SerializationException(); } X2 = new System.Collections.Generic.Dictionary<long, int>(); foreach(JSONNode __e in _fieldJson.Children) { long __k;  if(!__e[0].IsNumber) { throw new SerializationException(); }  __k = __e[0]; int __v;  if(!__e[1].IsNumber) { throw new SerializationException(); }  __v = __e[1];  X2.Add(__k, __v); }  
            }
        }
        
        { 
            var _fieldJson = _json["x3"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsArray) { throw new SerializationException(); } X3 = new System.Collections.Generic.Dictionary<string, int>(); foreach(JSONNode __e in _fieldJson.Children) { string __k;  if(!__e[0].IsString) { throw new SerializationException(); }  __k = __e[0]; int __v;  if(!__e[1].IsNumber) { throw new SerializationException(); }  __v = __e[1];  X3.Add(__k, __v); }  
            }
        }
        
        { 
            var _fieldJson = _json["x4"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsArray) { throw new SerializationException(); } X4 = new System.Collections.Generic.Dictionary<test.DemoEnum, int>(); foreach(JSONNode __e in _fieldJson.Children) { test.DemoEnum __k;  if(__e[0].IsString) { __k = (test.DemoEnum)System.Enum.Parse(typeof(test.DemoEnum), __e[0]); } else if(__e[0].IsNumber) { __k = (test.DemoEnum)(int)__e[0]; } else { throw new SerializationException(); }   int __v;  if(!__e[1].IsNumber) { throw new SerializationException(); }  __v = __e[1];  X4.Add(__k, __v); }  
            }
        }
        
    }

    public override void SaveJson(SimpleJSON.JSONObject _json)
    {        
        {
            _json["id"] = new JSONNumber(Id);
        }
        {

            if (X1 == null) { throw new System.ArgumentNullException(); }
            { var __cjson = new JSONArray(); foreach(var _e in X1) { var __entry = new JSONArray(); __cjson[null] = __entry; __entry["null"] = new JSONNumber(_e.Key); __entry["null"] = new JSONNumber(_e.Value); } _json["x1"] = __cjson; }
        }
        {

            if (X2 == null) { throw new System.ArgumentNullException(); }
            { var __cjson = new JSONArray(); foreach(var _e in X2) { var __entry = new JSONArray(); __cjson[null] = __entry; __entry["null"] = new JSONNumber(_e.Key); __entry["null"] = new JSONNumber(_e.Value); } _json["x2"] = __cjson; }
        }
        {

            if (X3 == null) { throw new System.ArgumentNullException(); }
            { var __cjson = new JSONArray(); foreach(var _e in X3) { var __entry = new JSONArray(); __cjson[null] = __entry; __entry["null"] = new JSONString(_e.Key); __entry["null"] = new JSONNumber(_e.Value); } _json["x3"] = __cjson; }
        }
        {

            if (X4 == null) { throw new System.ArgumentNullException(); }
            { var __cjson = new JSONArray(); foreach(var _e in X4) { var __entry = new JSONArray(); __cjson[null] = __entry; __entry["null"] = new JSONNumber((int)_e.Key); __entry["null"] = new JSONNumber(_e.Value); } _json["x4"] = __cjson; }
        }
    }

    public static TestMap LoadJsonTestMap(SimpleJSON.JSONNode _json)
    {
        TestMap obj = new test.TestMap();
        obj.LoadJson((SimpleJSON.JSONObject)_json);
        return obj;
    }
        
    public static void SaveJsonTestMap(TestMap _obj, SimpleJSON.JSONNode _json)
    {
        _obj.SaveJson((SimpleJSON.JSONObject)_json);
    }

    public int Id { get; set; }

    public System.Collections.Generic.Dictionary<int, int> X1 { get; set; }

    public System.Collections.Generic.Dictionary<long, int> X2 { get; set; }

    public System.Collections.Generic.Dictionary<string, int> X3 { get; set; }

    public System.Collections.Generic.Dictionary<test.DemoEnum, int> X4 { get; set; }

}
}
